
daq.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006198  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08006378  08006378  00007378  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006424  08006424  0000805c  2**0
                  CONTENTS
  4 .ARM          00000008  08006424  08006424  00007424  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800642c  0800642c  0000805c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800642c  0800642c  0000742c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006430  08006430  00007430  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08006434  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000404  2000005c  08006490  0000805c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000460  08006490  00008460  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000805c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000154cf  00000000  00000000  0000808c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f9b  00000000  00000000  0001d55b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001100  00000000  00000000  000204f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cfe  00000000  00000000  000215f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028429  00000000  00000000  000222f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015d95  00000000  00000000  0004a71f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00102b32  00000000  00000000  000604b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00162fe6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b58  00000000  00000000  0016302c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  00167b84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000005c 	.word	0x2000005c
 80001fc:	00000000 	.word	0x00000000
 8000200:	08006360 	.word	0x08006360

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000060 	.word	0x20000060
 800021c:	08006360 	.word	0x08006360

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002e4:	f000 b96a 	b.w	80005bc <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9d08      	ldr	r5, [sp, #32]
 8000306:	460c      	mov	r4, r1
 8000308:	2b00      	cmp	r3, #0
 800030a:	d14e      	bne.n	80003aa <__udivmoddi4+0xaa>
 800030c:	4694      	mov	ip, r2
 800030e:	458c      	cmp	ip, r1
 8000310:	4686      	mov	lr, r0
 8000312:	fab2 f282 	clz	r2, r2
 8000316:	d962      	bls.n	80003de <__udivmoddi4+0xde>
 8000318:	b14a      	cbz	r2, 800032e <__udivmoddi4+0x2e>
 800031a:	f1c2 0320 	rsb	r3, r2, #32
 800031e:	4091      	lsls	r1, r2
 8000320:	fa20 f303 	lsr.w	r3, r0, r3
 8000324:	fa0c fc02 	lsl.w	ip, ip, r2
 8000328:	4319      	orrs	r1, r3
 800032a:	fa00 fe02 	lsl.w	lr, r0, r2
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f f68c 	uxth.w	r6, ip
 8000336:	fbb1 f4f7 	udiv	r4, r1, r7
 800033a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800033e:	fb07 1114 	mls	r1, r7, r4, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb04 f106 	mul.w	r1, r4, r6
 800034a:	4299      	cmp	r1, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x64>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000356:	f080 8112 	bcs.w	800057e <__udivmoddi4+0x27e>
 800035a:	4299      	cmp	r1, r3
 800035c:	f240 810f 	bls.w	800057e <__udivmoddi4+0x27e>
 8000360:	3c02      	subs	r4, #2
 8000362:	4463      	add	r3, ip
 8000364:	1a59      	subs	r1, r3, r1
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb1 f0f7 	udiv	r0, r1, r7
 800036e:	fb07 1110 	mls	r1, r7, r0, r1
 8000372:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000376:	fb00 f606 	mul.w	r6, r0, r6
 800037a:	429e      	cmp	r6, r3
 800037c:	d90a      	bls.n	8000394 <__udivmoddi4+0x94>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000386:	f080 80fc 	bcs.w	8000582 <__udivmoddi4+0x282>
 800038a:	429e      	cmp	r6, r3
 800038c:	f240 80f9 	bls.w	8000582 <__udivmoddi4+0x282>
 8000390:	4463      	add	r3, ip
 8000392:	3802      	subs	r0, #2
 8000394:	1b9b      	subs	r3, r3, r6
 8000396:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800039a:	2100      	movs	r1, #0
 800039c:	b11d      	cbz	r5, 80003a6 <__udivmoddi4+0xa6>
 800039e:	40d3      	lsrs	r3, r2
 80003a0:	2200      	movs	r2, #0
 80003a2:	e9c5 3200 	strd	r3, r2, [r5]
 80003a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d905      	bls.n	80003ba <__udivmoddi4+0xba>
 80003ae:	b10d      	cbz	r5, 80003b4 <__udivmoddi4+0xb4>
 80003b0:	e9c5 0100 	strd	r0, r1, [r5]
 80003b4:	2100      	movs	r1, #0
 80003b6:	4608      	mov	r0, r1
 80003b8:	e7f5      	b.n	80003a6 <__udivmoddi4+0xa6>
 80003ba:	fab3 f183 	clz	r1, r3
 80003be:	2900      	cmp	r1, #0
 80003c0:	d146      	bne.n	8000450 <__udivmoddi4+0x150>
 80003c2:	42a3      	cmp	r3, r4
 80003c4:	d302      	bcc.n	80003cc <__udivmoddi4+0xcc>
 80003c6:	4290      	cmp	r0, r2
 80003c8:	f0c0 80f0 	bcc.w	80005ac <__udivmoddi4+0x2ac>
 80003cc:	1a86      	subs	r6, r0, r2
 80003ce:	eb64 0303 	sbc.w	r3, r4, r3
 80003d2:	2001      	movs	r0, #1
 80003d4:	2d00      	cmp	r5, #0
 80003d6:	d0e6      	beq.n	80003a6 <__udivmoddi4+0xa6>
 80003d8:	e9c5 6300 	strd	r6, r3, [r5]
 80003dc:	e7e3      	b.n	80003a6 <__udivmoddi4+0xa6>
 80003de:	2a00      	cmp	r2, #0
 80003e0:	f040 8090 	bne.w	8000504 <__udivmoddi4+0x204>
 80003e4:	eba1 040c 	sub.w	r4, r1, ip
 80003e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ec:	fa1f f78c 	uxth.w	r7, ip
 80003f0:	2101      	movs	r1, #1
 80003f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fa:	fb08 4416 	mls	r4, r8, r6, r4
 80003fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000402:	fb07 f006 	mul.w	r0, r7, r6
 8000406:	4298      	cmp	r0, r3
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x11c>
 800040a:	eb1c 0303 	adds.w	r3, ip, r3
 800040e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x11a>
 8000414:	4298      	cmp	r0, r3
 8000416:	f200 80cd 	bhi.w	80005b4 <__udivmoddi4+0x2b4>
 800041a:	4626      	mov	r6, r4
 800041c:	1a1c      	subs	r4, r3, r0
 800041e:	fa1f f38e 	uxth.w	r3, lr
 8000422:	fbb4 f0f8 	udiv	r0, r4, r8
 8000426:	fb08 4410 	mls	r4, r8, r0, r4
 800042a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800042e:	fb00 f707 	mul.w	r7, r0, r7
 8000432:	429f      	cmp	r7, r3
 8000434:	d908      	bls.n	8000448 <__udivmoddi4+0x148>
 8000436:	eb1c 0303 	adds.w	r3, ip, r3
 800043a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800043e:	d202      	bcs.n	8000446 <__udivmoddi4+0x146>
 8000440:	429f      	cmp	r7, r3
 8000442:	f200 80b0 	bhi.w	80005a6 <__udivmoddi4+0x2a6>
 8000446:	4620      	mov	r0, r4
 8000448:	1bdb      	subs	r3, r3, r7
 800044a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800044e:	e7a5      	b.n	800039c <__udivmoddi4+0x9c>
 8000450:	f1c1 0620 	rsb	r6, r1, #32
 8000454:	408b      	lsls	r3, r1
 8000456:	fa22 f706 	lsr.w	r7, r2, r6
 800045a:	431f      	orrs	r7, r3
 800045c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000460:	fa04 f301 	lsl.w	r3, r4, r1
 8000464:	ea43 030c 	orr.w	r3, r3, ip
 8000468:	40f4      	lsrs	r4, r6
 800046a:	fa00 f801 	lsl.w	r8, r0, r1
 800046e:	0c38      	lsrs	r0, r7, #16
 8000470:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000474:	fbb4 fef0 	udiv	lr, r4, r0
 8000478:	fa1f fc87 	uxth.w	ip, r7
 800047c:	fb00 441e 	mls	r4, r0, lr, r4
 8000480:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000484:	fb0e f90c 	mul.w	r9, lr, ip
 8000488:	45a1      	cmp	r9, r4
 800048a:	fa02 f201 	lsl.w	r2, r2, r1
 800048e:	d90a      	bls.n	80004a6 <__udivmoddi4+0x1a6>
 8000490:	193c      	adds	r4, r7, r4
 8000492:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000496:	f080 8084 	bcs.w	80005a2 <__udivmoddi4+0x2a2>
 800049a:	45a1      	cmp	r9, r4
 800049c:	f240 8081 	bls.w	80005a2 <__udivmoddi4+0x2a2>
 80004a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004a4:	443c      	add	r4, r7
 80004a6:	eba4 0409 	sub.w	r4, r4, r9
 80004aa:	fa1f f983 	uxth.w	r9, r3
 80004ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80004b2:	fb00 4413 	mls	r4, r0, r3, r4
 80004b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80004be:	45a4      	cmp	ip, r4
 80004c0:	d907      	bls.n	80004d2 <__udivmoddi4+0x1d2>
 80004c2:	193c      	adds	r4, r7, r4
 80004c4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004c8:	d267      	bcs.n	800059a <__udivmoddi4+0x29a>
 80004ca:	45a4      	cmp	ip, r4
 80004cc:	d965      	bls.n	800059a <__udivmoddi4+0x29a>
 80004ce:	3b02      	subs	r3, #2
 80004d0:	443c      	add	r4, r7
 80004d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004d6:	fba0 9302 	umull	r9, r3, r0, r2
 80004da:	eba4 040c 	sub.w	r4, r4, ip
 80004de:	429c      	cmp	r4, r3
 80004e0:	46ce      	mov	lr, r9
 80004e2:	469c      	mov	ip, r3
 80004e4:	d351      	bcc.n	800058a <__udivmoddi4+0x28a>
 80004e6:	d04e      	beq.n	8000586 <__udivmoddi4+0x286>
 80004e8:	b155      	cbz	r5, 8000500 <__udivmoddi4+0x200>
 80004ea:	ebb8 030e 	subs.w	r3, r8, lr
 80004ee:	eb64 040c 	sbc.w	r4, r4, ip
 80004f2:	fa04 f606 	lsl.w	r6, r4, r6
 80004f6:	40cb      	lsrs	r3, r1
 80004f8:	431e      	orrs	r6, r3
 80004fa:	40cc      	lsrs	r4, r1
 80004fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000500:	2100      	movs	r1, #0
 8000502:	e750      	b.n	80003a6 <__udivmoddi4+0xa6>
 8000504:	f1c2 0320 	rsb	r3, r2, #32
 8000508:	fa20 f103 	lsr.w	r1, r0, r3
 800050c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000510:	fa24 f303 	lsr.w	r3, r4, r3
 8000514:	4094      	lsls	r4, r2
 8000516:	430c      	orrs	r4, r1
 8000518:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800051c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000520:	fa1f f78c 	uxth.w	r7, ip
 8000524:	fbb3 f0f8 	udiv	r0, r3, r8
 8000528:	fb08 3110 	mls	r1, r8, r0, r3
 800052c:	0c23      	lsrs	r3, r4, #16
 800052e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000532:	fb00 f107 	mul.w	r1, r0, r7
 8000536:	4299      	cmp	r1, r3
 8000538:	d908      	bls.n	800054c <__udivmoddi4+0x24c>
 800053a:	eb1c 0303 	adds.w	r3, ip, r3
 800053e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000542:	d22c      	bcs.n	800059e <__udivmoddi4+0x29e>
 8000544:	4299      	cmp	r1, r3
 8000546:	d92a      	bls.n	800059e <__udivmoddi4+0x29e>
 8000548:	3802      	subs	r0, #2
 800054a:	4463      	add	r3, ip
 800054c:	1a5b      	subs	r3, r3, r1
 800054e:	b2a4      	uxth	r4, r4
 8000550:	fbb3 f1f8 	udiv	r1, r3, r8
 8000554:	fb08 3311 	mls	r3, r8, r1, r3
 8000558:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800055c:	fb01 f307 	mul.w	r3, r1, r7
 8000560:	42a3      	cmp	r3, r4
 8000562:	d908      	bls.n	8000576 <__udivmoddi4+0x276>
 8000564:	eb1c 0404 	adds.w	r4, ip, r4
 8000568:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800056c:	d213      	bcs.n	8000596 <__udivmoddi4+0x296>
 800056e:	42a3      	cmp	r3, r4
 8000570:	d911      	bls.n	8000596 <__udivmoddi4+0x296>
 8000572:	3902      	subs	r1, #2
 8000574:	4464      	add	r4, ip
 8000576:	1ae4      	subs	r4, r4, r3
 8000578:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800057c:	e739      	b.n	80003f2 <__udivmoddi4+0xf2>
 800057e:	4604      	mov	r4, r0
 8000580:	e6f0      	b.n	8000364 <__udivmoddi4+0x64>
 8000582:	4608      	mov	r0, r1
 8000584:	e706      	b.n	8000394 <__udivmoddi4+0x94>
 8000586:	45c8      	cmp	r8, r9
 8000588:	d2ae      	bcs.n	80004e8 <__udivmoddi4+0x1e8>
 800058a:	ebb9 0e02 	subs.w	lr, r9, r2
 800058e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000592:	3801      	subs	r0, #1
 8000594:	e7a8      	b.n	80004e8 <__udivmoddi4+0x1e8>
 8000596:	4631      	mov	r1, r6
 8000598:	e7ed      	b.n	8000576 <__udivmoddi4+0x276>
 800059a:	4603      	mov	r3, r0
 800059c:	e799      	b.n	80004d2 <__udivmoddi4+0x1d2>
 800059e:	4630      	mov	r0, r6
 80005a0:	e7d4      	b.n	800054c <__udivmoddi4+0x24c>
 80005a2:	46d6      	mov	lr, sl
 80005a4:	e77f      	b.n	80004a6 <__udivmoddi4+0x1a6>
 80005a6:	4463      	add	r3, ip
 80005a8:	3802      	subs	r0, #2
 80005aa:	e74d      	b.n	8000448 <__udivmoddi4+0x148>
 80005ac:	4606      	mov	r6, r0
 80005ae:	4623      	mov	r3, r4
 80005b0:	4608      	mov	r0, r1
 80005b2:	e70f      	b.n	80003d4 <__udivmoddi4+0xd4>
 80005b4:	3e02      	subs	r6, #2
 80005b6:	4463      	add	r3, ip
 80005b8:	e730      	b.n	800041c <__udivmoddi4+0x11c>
 80005ba:	bf00      	nop

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <plotter_get_time_us>:

#include "usart.h"
#include <stdio.h>
#include <string.h>

uint32_t plotter_get_time_us(void) {
 80005c0:	b480      	push	{r7}
 80005c2:	b083      	sub	sp, #12
 80005c4:	af00      	add	r7, sp, #0
    uint32_t cycles = DWT->CYCCNT;
 80005c6:	4b08      	ldr	r3, [pc, #32]	@ (80005e8 <plotter_get_time_us+0x28>)
 80005c8:	685b      	ldr	r3, [r3, #4]
 80005ca:	607b      	str	r3, [r7, #4]
    uint32_t us = cycles / 170; // clock is 170Mhz. us = cycles / clock * 1M
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	4a07      	ldr	r2, [pc, #28]	@ (80005ec <plotter_get_time_us+0x2c>)
 80005d0:	fba2 2303 	umull	r2, r3, r2, r3
 80005d4:	09db      	lsrs	r3, r3, #7
 80005d6:	603b      	str	r3, [r7, #0]
    return us;
 80005d8:	683b      	ldr	r3, [r7, #0]
}
 80005da:	4618      	mov	r0, r3
 80005dc:	370c      	adds	r7, #12
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	e0001000 	.word	0xe0001000
 80005ec:	c0c0c0c1 	.word	0xc0c0c0c1

080005f0 <plotter_transmit_data>:

void plotter_transmit_data(data_point_t *data, size_t size) {
 80005f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80005f4:	b089      	sub	sp, #36	@ 0x24
 80005f6:	af02      	add	r7, sp, #8
 80005f8:	6078      	str	r0, [r7, #4]
 80005fa:	6039      	str	r1, [r7, #0]
 80005fc:	466b      	mov	r3, sp
 80005fe:	461e      	mov	r6, r3
    const uint8_t buffer_size = 128;
 8000600:	2380      	movs	r3, #128	@ 0x80
 8000602:	74fb      	strb	r3, [r7, #19]
    char buffer[buffer_size];
 8000604:	7cfb      	ldrb	r3, [r7, #19]
 8000606:	3b01      	subs	r3, #1
 8000608:	60fb      	str	r3, [r7, #12]
 800060a:	7cfb      	ldrb	r3, [r7, #19]
 800060c:	2200      	movs	r2, #0
 800060e:	4698      	mov	r8, r3
 8000610:	4691      	mov	r9, r2
 8000612:	f04f 0200 	mov.w	r2, #0
 8000616:	f04f 0300 	mov.w	r3, #0
 800061a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800061e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000622:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000626:	7cfb      	ldrb	r3, [r7, #19]
 8000628:	2200      	movs	r2, #0
 800062a:	461c      	mov	r4, r3
 800062c:	4615      	mov	r5, r2
 800062e:	f04f 0200 	mov.w	r2, #0
 8000632:	f04f 0300 	mov.w	r3, #0
 8000636:	00eb      	lsls	r3, r5, #3
 8000638:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800063c:	00e2      	lsls	r2, r4, #3
 800063e:	7cfb      	ldrb	r3, [r7, #19]
 8000640:	3307      	adds	r3, #7
 8000642:	08db      	lsrs	r3, r3, #3
 8000644:	00db      	lsls	r3, r3, #3
 8000646:	ebad 0d03 	sub.w	sp, sp, r3
 800064a:	ab02      	add	r3, sp, #8
 800064c:	3300      	adds	r3, #0
 800064e:	60bb      	str	r3, [r7, #8]

    for (size_t i = 0; i < size; i++) {
 8000650:	2300      	movs	r3, #0
 8000652:	617b      	str	r3, [r7, #20]
 8000654:	e030      	b.n	80006b8 <plotter_transmit_data+0xc8>
        if (data[i].time == ~0) {
 8000656:	697b      	ldr	r3, [r7, #20]
 8000658:	00db      	lsls	r3, r3, #3
 800065a:	687a      	ldr	r2, [r7, #4]
 800065c:	4413      	add	r3, r2
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000664:	d10a      	bne.n	800067c <plotter_transmit_data+0x8c>
            snprintf(buffer, buffer_size, "* %lu\n", data[i].value);
 8000666:	7cf9      	ldrb	r1, [r7, #19]
 8000668:	697b      	ldr	r3, [r7, #20]
 800066a:	00db      	lsls	r3, r3, #3
 800066c:	687a      	ldr	r2, [r7, #4]
 800066e:	4413      	add	r3, r2
 8000670:	685b      	ldr	r3, [r3, #4]
 8000672:	4a16      	ldr	r2, [pc, #88]	@ (80006cc <plotter_transmit_data+0xdc>)
 8000674:	68b8      	ldr	r0, [r7, #8]
 8000676:	f005 f9bf 	bl	80059f8 <sniprintf>
 800067a:	e010      	b.n	800069e <plotter_transmit_data+0xae>
        } else {
            snprintf(buffer, buffer_size, "%lu %lu\n", data[i].time,
 800067c:	7cf9      	ldrb	r1, [r7, #19]
 800067e:	697b      	ldr	r3, [r7, #20]
 8000680:	00db      	lsls	r3, r3, #3
 8000682:	687a      	ldr	r2, [r7, #4]
 8000684:	4413      	add	r3, r2
 8000686:	6818      	ldr	r0, [r3, #0]
                     data[i].value);
 8000688:	697b      	ldr	r3, [r7, #20]
 800068a:	00db      	lsls	r3, r3, #3
 800068c:	687a      	ldr	r2, [r7, #4]
 800068e:	4413      	add	r3, r2
            snprintf(buffer, buffer_size, "%lu %lu\n", data[i].time,
 8000690:	685b      	ldr	r3, [r3, #4]
 8000692:	9300      	str	r3, [sp, #0]
 8000694:	4603      	mov	r3, r0
 8000696:	4a0e      	ldr	r2, [pc, #56]	@ (80006d0 <plotter_transmit_data+0xe0>)
 8000698:	68b8      	ldr	r0, [r7, #8]
 800069a:	f005 f9ad 	bl	80059f8 <sniprintf>
        }
        HAL_UART_Transmit(&hlpuart1, (uint8_t *)buffer, strlen(buffer), 100);
 800069e:	68b8      	ldr	r0, [r7, #8]
 80006a0:	f7ff fdbe 	bl	8000220 <strlen>
 80006a4:	4603      	mov	r3, r0
 80006a6:	b29a      	uxth	r2, r3
 80006a8:	2364      	movs	r3, #100	@ 0x64
 80006aa:	68b9      	ldr	r1, [r7, #8]
 80006ac:	4809      	ldr	r0, [pc, #36]	@ (80006d4 <plotter_transmit_data+0xe4>)
 80006ae:	f004 faf6 	bl	8004c9e <HAL_UART_Transmit>
    for (size_t i = 0; i < size; i++) {
 80006b2:	697b      	ldr	r3, [r7, #20]
 80006b4:	3301      	adds	r3, #1
 80006b6:	617b      	str	r3, [r7, #20]
 80006b8:	697a      	ldr	r2, [r7, #20]
 80006ba:	683b      	ldr	r3, [r7, #0]
 80006bc:	429a      	cmp	r2, r3
 80006be:	d3ca      	bcc.n	8000656 <plotter_transmit_data+0x66>
 80006c0:	46b5      	mov	sp, r6
    }
}
 80006c2:	bf00      	nop
 80006c4:	371c      	adds	r7, #28
 80006c6:	46bd      	mov	sp, r7
 80006c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80006cc:	08006378 	.word	0x08006378
 80006d0:	08006380 	.word	0x08006380
 80006d4:	20000280 	.word	0x20000280

080006d8 <plotter_send_signal>:

void plotter_send_signal(const char *name, data_point_t *data, size_t size) {
 80006d8:	b580      	push	{r7, lr}
 80006da:	b086      	sub	sp, #24
 80006dc:	af00      	add	r7, sp, #0
 80006de:	60f8      	str	r0, [r7, #12]
 80006e0:	60b9      	str	r1, [r7, #8]
 80006e2:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&hlpuart1, (uint8_t *)name, strlen(name), 100);
 80006e4:	68f8      	ldr	r0, [r7, #12]
 80006e6:	f7ff fd9b 	bl	8000220 <strlen>
 80006ea:	4603      	mov	r3, r0
 80006ec:	b29a      	uxth	r2, r3
 80006ee:	2364      	movs	r3, #100	@ 0x64
 80006f0:	68f9      	ldr	r1, [r7, #12]
 80006f2:	480e      	ldr	r0, [pc, #56]	@ (800072c <plotter_send_signal+0x54>)
 80006f4:	f004 fad3 	bl	8004c9e <HAL_UART_Transmit>
    HAL_UART_Transmit(&hlpuart1, (uint8_t *)"\n", 1, 100);
 80006f8:	2364      	movs	r3, #100	@ 0x64
 80006fa:	2201      	movs	r2, #1
 80006fc:	490c      	ldr	r1, [pc, #48]	@ (8000730 <plotter_send_signal+0x58>)
 80006fe:	480b      	ldr	r0, [pc, #44]	@ (800072c <plotter_send_signal+0x54>)
 8000700:	f004 facd 	bl	8004c9e <HAL_UART_Transmit>

    plotter_transmit_data(data, size);
 8000704:	6879      	ldr	r1, [r7, #4]
 8000706:	68b8      	ldr	r0, [r7, #8]
 8000708:	f7ff ff72 	bl	80005f0 <plotter_transmit_data>

    const char *buffer = "END_OF_SIGNAL\n";
 800070c:	4b09      	ldr	r3, [pc, #36]	@ (8000734 <plotter_send_signal+0x5c>)
 800070e:	617b      	str	r3, [r7, #20]
    HAL_UART_Transmit(&hlpuart1, (uint8_t *)buffer, strlen(buffer), 100);
 8000710:	6978      	ldr	r0, [r7, #20]
 8000712:	f7ff fd85 	bl	8000220 <strlen>
 8000716:	4603      	mov	r3, r0
 8000718:	b29a      	uxth	r2, r3
 800071a:	2364      	movs	r3, #100	@ 0x64
 800071c:	6979      	ldr	r1, [r7, #20]
 800071e:	4803      	ldr	r0, [pc, #12]	@ (800072c <plotter_send_signal+0x54>)
 8000720:	f004 fabd 	bl	8004c9e <HAL_UART_Transmit>
}
 8000724:	bf00      	nop
 8000726:	3718      	adds	r7, #24
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	20000280 	.word	0x20000280
 8000730:	0800638c 	.word	0x0800638c
 8000734:	08006390 	.word	0x08006390

08000738 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b08c      	sub	sp, #48	@ 0x30
 800073c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800073e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000742:	2200      	movs	r2, #0
 8000744:	601a      	str	r2, [r3, #0]
 8000746:	605a      	str	r2, [r3, #4]
 8000748:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800074a:	1d3b      	adds	r3, r7, #4
 800074c:	2220      	movs	r2, #32
 800074e:	2100      	movs	r1, #0
 8000750:	4618      	mov	r0, r3
 8000752:	f005 f985 	bl	8005a60 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000756:	4b34      	ldr	r3, [pc, #208]	@ (8000828 <MX_ADC1_Init+0xf0>)
 8000758:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800075c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800075e:	4b32      	ldr	r3, [pc, #200]	@ (8000828 <MX_ADC1_Init+0xf0>)
 8000760:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000764:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000766:	4b30      	ldr	r3, [pc, #192]	@ (8000828 <MX_ADC1_Init+0xf0>)
 8000768:	2200      	movs	r2, #0
 800076a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800076c:	4b2e      	ldr	r3, [pc, #184]	@ (8000828 <MX_ADC1_Init+0xf0>)
 800076e:	2200      	movs	r2, #0
 8000770:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000772:	4b2d      	ldr	r3, [pc, #180]	@ (8000828 <MX_ADC1_Init+0xf0>)
 8000774:	2200      	movs	r2, #0
 8000776:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000778:	4b2b      	ldr	r3, [pc, #172]	@ (8000828 <MX_ADC1_Init+0xf0>)
 800077a:	2200      	movs	r2, #0
 800077c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800077e:	4b2a      	ldr	r3, [pc, #168]	@ (8000828 <MX_ADC1_Init+0xf0>)
 8000780:	2204      	movs	r2, #4
 8000782:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000784:	4b28      	ldr	r3, [pc, #160]	@ (8000828 <MX_ADC1_Init+0xf0>)
 8000786:	2200      	movs	r2, #0
 8000788:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800078a:	4b27      	ldr	r3, [pc, #156]	@ (8000828 <MX_ADC1_Init+0xf0>)
 800078c:	2201      	movs	r2, #1
 800078e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000790:	4b25      	ldr	r3, [pc, #148]	@ (8000828 <MX_ADC1_Init+0xf0>)
 8000792:	2201      	movs	r2, #1
 8000794:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000796:	4b24      	ldr	r3, [pc, #144]	@ (8000828 <MX_ADC1_Init+0xf0>)
 8000798:	2200      	movs	r2, #0
 800079a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800079e:	4b22      	ldr	r3, [pc, #136]	@ (8000828 <MX_ADC1_Init+0xf0>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007a4:	4b20      	ldr	r3, [pc, #128]	@ (8000828 <MX_ADC1_Init+0xf0>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80007aa:	4b1f      	ldr	r3, [pc, #124]	@ (8000828 <MX_ADC1_Init+0xf0>)
 80007ac:	2201      	movs	r2, #1
 80007ae:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007b2:	4b1d      	ldr	r3, [pc, #116]	@ (8000828 <MX_ADC1_Init+0xf0>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80007b8:	4b1b      	ldr	r3, [pc, #108]	@ (8000828 <MX_ADC1_Init+0xf0>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007c0:	4819      	ldr	r0, [pc, #100]	@ (8000828 <MX_ADC1_Init+0xf0>)
 80007c2:	f001 f905 	bl	80019d0 <HAL_ADC_Init>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80007cc:	f000 fbff 	bl	8000fce <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_DUALMODE_REGSIMULT;
 80007d0:	2306      	movs	r3, #6
 80007d2:	627b      	str	r3, [r7, #36]	@ 0x24
  multimode.DMAAccessMode = ADC_DMAACCESSMODE_DISABLED;
 80007d4:	2300      	movs	r3, #0
 80007d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_1CYCLE;
 80007d8:	2300      	movs	r3, #0
 80007da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80007dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007e0:	4619      	mov	r1, r3
 80007e2:	4811      	ldr	r0, [pc, #68]	@ (8000828 <MX_ADC1_Init+0xf0>)
 80007e4:	f002 faa6 	bl	8002d34 <HAL_ADCEx_MultiModeConfigChannel>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <MX_ADC1_Init+0xba>
  {
    Error_Handler();
 80007ee:	f000 fbee 	bl	8000fce <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80007f2:	4b0e      	ldr	r3, [pc, #56]	@ (800082c <MX_ADC1_Init+0xf4>)
 80007f4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007f6:	2306      	movs	r3, #6
 80007f8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80007fa:	2300      	movs	r3, #0
 80007fc:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80007fe:	237f      	movs	r3, #127	@ 0x7f
 8000800:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000802:	2304      	movs	r3, #4
 8000804:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000806:	2300      	movs	r3, #0
 8000808:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800080a:	1d3b      	adds	r3, r7, #4
 800080c:	4619      	mov	r1, r3
 800080e:	4806      	ldr	r0, [pc, #24]	@ (8000828 <MX_ADC1_Init+0xf0>)
 8000810:	f001 fbe4 	bl	8001fdc <HAL_ADC_ConfigChannel>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 800081a:	f000 fbd8 	bl	8000fce <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800081e:	bf00      	nop
 8000820:	3730      	adds	r7, #48	@ 0x30
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	20000078 	.word	0x20000078
 800082c:	04300002 	.word	0x04300002

08000830 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b088      	sub	sp, #32
 8000834:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000836:	463b      	mov	r3, r7
 8000838:	2220      	movs	r2, #32
 800083a:	2100      	movs	r1, #0
 800083c:	4618      	mov	r0, r3
 800083e:	f005 f90f 	bl	8005a60 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000842:	4b28      	ldr	r3, [pc, #160]	@ (80008e4 <MX_ADC2_Init+0xb4>)
 8000844:	4a28      	ldr	r2, [pc, #160]	@ (80008e8 <MX_ADC2_Init+0xb8>)
 8000846:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000848:	4b26      	ldr	r3, [pc, #152]	@ (80008e4 <MX_ADC2_Init+0xb4>)
 800084a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800084e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000850:	4b24      	ldr	r3, [pc, #144]	@ (80008e4 <MX_ADC2_Init+0xb4>)
 8000852:	2200      	movs	r2, #0
 8000854:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000856:	4b23      	ldr	r3, [pc, #140]	@ (80008e4 <MX_ADC2_Init+0xb4>)
 8000858:	2200      	movs	r2, #0
 800085a:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 800085c:	4b21      	ldr	r3, [pc, #132]	@ (80008e4 <MX_ADC2_Init+0xb4>)
 800085e:	2200      	movs	r2, #0
 8000860:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000862:	4b20      	ldr	r3, [pc, #128]	@ (80008e4 <MX_ADC2_Init+0xb4>)
 8000864:	2200      	movs	r2, #0
 8000866:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000868:	4b1e      	ldr	r3, [pc, #120]	@ (80008e4 <MX_ADC2_Init+0xb4>)
 800086a:	2204      	movs	r2, #4
 800086c:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800086e:	4b1d      	ldr	r3, [pc, #116]	@ (80008e4 <MX_ADC2_Init+0xb4>)
 8000870:	2200      	movs	r2, #0
 8000872:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000874:	4b1b      	ldr	r3, [pc, #108]	@ (80008e4 <MX_ADC2_Init+0xb4>)
 8000876:	2201      	movs	r2, #1
 8000878:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 800087a:	4b1a      	ldr	r3, [pc, #104]	@ (80008e4 <MX_ADC2_Init+0xb4>)
 800087c:	2201      	movs	r2, #1
 800087e:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000880:	4b18      	ldr	r3, [pc, #96]	@ (80008e4 <MX_ADC2_Init+0xb4>)
 8000882:	2200      	movs	r2, #0
 8000884:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8000888:	4b16      	ldr	r3, [pc, #88]	@ (80008e4 <MX_ADC2_Init+0xb4>)
 800088a:	2201      	movs	r2, #1
 800088c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000890:	4b14      	ldr	r3, [pc, #80]	@ (80008e4 <MX_ADC2_Init+0xb4>)
 8000892:	2200      	movs	r2, #0
 8000894:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000896:	4b13      	ldr	r3, [pc, #76]	@ (80008e4 <MX_ADC2_Init+0xb4>)
 8000898:	2200      	movs	r2, #0
 800089a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800089e:	4811      	ldr	r0, [pc, #68]	@ (80008e4 <MX_ADC2_Init+0xb4>)
 80008a0:	f001 f896 	bl	80019d0 <HAL_ADC_Init>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 80008aa:	f000 fb90 	bl	8000fce <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80008ae:	4b0f      	ldr	r3, [pc, #60]	@ (80008ec <MX_ADC2_Init+0xbc>)
 80008b0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008b2:	2306      	movs	r3, #6
 80008b4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80008b6:	2300      	movs	r3, #0
 80008b8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008ba:	237f      	movs	r3, #127	@ 0x7f
 80008bc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008be:	2304      	movs	r3, #4
 80008c0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80008c2:	2300      	movs	r3, #0
 80008c4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80008c6:	463b      	mov	r3, r7
 80008c8:	4619      	mov	r1, r3
 80008ca:	4806      	ldr	r0, [pc, #24]	@ (80008e4 <MX_ADC2_Init+0xb4>)
 80008cc:	f001 fb86 	bl	8001fdc <HAL_ADC_ConfigChannel>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 80008d6:	f000 fb7a 	bl	8000fce <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80008da:	bf00      	nop
 80008dc:	3720      	adds	r7, #32
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	200000e4 	.word	0x200000e4
 80008e8:	50000100 	.word	0x50000100
 80008ec:	08600004 	.word	0x08600004

080008f0 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b0a0      	sub	sp, #128	@ 0x80
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80008fc:	2200      	movs	r2, #0
 80008fe:	601a      	str	r2, [r3, #0]
 8000900:	605a      	str	r2, [r3, #4]
 8000902:	609a      	str	r2, [r3, #8]
 8000904:	60da      	str	r2, [r3, #12]
 8000906:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000908:	f107 0318 	add.w	r3, r7, #24
 800090c:	2254      	movs	r2, #84	@ 0x54
 800090e:	2100      	movs	r1, #0
 8000910:	4618      	mov	r0, r3
 8000912:	f005 f8a5 	bl	8005a60 <memset>
  if(adcHandle->Instance==ADC1)
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800091e:	d169      	bne.n	80009f4 <HAL_ADC_MspInit+0x104>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000920:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000924:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000926:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800092a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800092c:	f107 0318 	add.w	r3, r7, #24
 8000930:	4618      	mov	r0, r3
 8000932:	f003 fe6b 	bl	800460c <HAL_RCCEx_PeriphCLKConfig>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 800093c:	f000 fb47 	bl	8000fce <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000940:	4b65      	ldr	r3, [pc, #404]	@ (8000ad8 <HAL_ADC_MspInit+0x1e8>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	3301      	adds	r3, #1
 8000946:	4a64      	ldr	r2, [pc, #400]	@ (8000ad8 <HAL_ADC_MspInit+0x1e8>)
 8000948:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800094a:	4b63      	ldr	r3, [pc, #396]	@ (8000ad8 <HAL_ADC_MspInit+0x1e8>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	2b01      	cmp	r3, #1
 8000950:	d10b      	bne.n	800096a <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000952:	4b62      	ldr	r3, [pc, #392]	@ (8000adc <HAL_ADC_MspInit+0x1ec>)
 8000954:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000956:	4a61      	ldr	r2, [pc, #388]	@ (8000adc <HAL_ADC_MspInit+0x1ec>)
 8000958:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800095c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800095e:	4b5f      	ldr	r3, [pc, #380]	@ (8000adc <HAL_ADC_MspInit+0x1ec>)
 8000960:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000962:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000966:	617b      	str	r3, [r7, #20]
 8000968:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800096a:	4b5c      	ldr	r3, [pc, #368]	@ (8000adc <HAL_ADC_MspInit+0x1ec>)
 800096c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800096e:	4a5b      	ldr	r2, [pc, #364]	@ (8000adc <HAL_ADC_MspInit+0x1ec>)
 8000970:	f043 0301 	orr.w	r3, r3, #1
 8000974:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000976:	4b59      	ldr	r3, [pc, #356]	@ (8000adc <HAL_ADC_MspInit+0x1ec>)
 8000978:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800097a:	f003 0301 	and.w	r3, r3, #1
 800097e:	613b      	str	r3, [r7, #16]
 8000980:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000982:	2301      	movs	r3, #1
 8000984:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000986:	2303      	movs	r3, #3
 8000988:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098a:	2300      	movs	r3, #0
 800098c:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800098e:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000992:	4619      	mov	r1, r3
 8000994:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000998:	f002 feb0 	bl	80036fc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800099c:	4b50      	ldr	r3, [pc, #320]	@ (8000ae0 <HAL_ADC_MspInit+0x1f0>)
 800099e:	4a51      	ldr	r2, [pc, #324]	@ (8000ae4 <HAL_ADC_MspInit+0x1f4>)
 80009a0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80009a2:	4b4f      	ldr	r3, [pc, #316]	@ (8000ae0 <HAL_ADC_MspInit+0x1f0>)
 80009a4:	2205      	movs	r2, #5
 80009a6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80009a8:	4b4d      	ldr	r3, [pc, #308]	@ (8000ae0 <HAL_ADC_MspInit+0x1f0>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80009ae:	4b4c      	ldr	r3, [pc, #304]	@ (8000ae0 <HAL_ADC_MspInit+0x1f0>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80009b4:	4b4a      	ldr	r3, [pc, #296]	@ (8000ae0 <HAL_ADC_MspInit+0x1f0>)
 80009b6:	2280      	movs	r2, #128	@ 0x80
 80009b8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80009ba:	4b49      	ldr	r3, [pc, #292]	@ (8000ae0 <HAL_ADC_MspInit+0x1f0>)
 80009bc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80009c0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80009c2:	4b47      	ldr	r3, [pc, #284]	@ (8000ae0 <HAL_ADC_MspInit+0x1f0>)
 80009c4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80009c8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80009ca:	4b45      	ldr	r3, [pc, #276]	@ (8000ae0 <HAL_ADC_MspInit+0x1f0>)
 80009cc:	2220      	movs	r2, #32
 80009ce:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80009d0:	4b43      	ldr	r3, [pc, #268]	@ (8000ae0 <HAL_ADC_MspInit+0x1f0>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80009d6:	4842      	ldr	r0, [pc, #264]	@ (8000ae0 <HAL_ADC_MspInit+0x1f0>)
 80009d8:	f002 fbc4 	bl	8003164 <HAL_DMA_Init>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <HAL_ADC_MspInit+0xf6>
    {
      Error_Handler();
 80009e2:	f000 faf4 	bl	8000fce <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	4a3d      	ldr	r2, [pc, #244]	@ (8000ae0 <HAL_ADC_MspInit+0x1f0>)
 80009ea:	655a      	str	r2, [r3, #84]	@ 0x54
 80009ec:	4a3c      	ldr	r2, [pc, #240]	@ (8000ae0 <HAL_ADC_MspInit+0x1f0>)
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80009f2:	e06d      	b.n	8000ad0 <HAL_ADC_MspInit+0x1e0>
  else if(adcHandle->Instance==ADC2)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4a3b      	ldr	r2, [pc, #236]	@ (8000ae8 <HAL_ADC_MspInit+0x1f8>)
 80009fa:	4293      	cmp	r3, r2
 80009fc:	d168      	bne.n	8000ad0 <HAL_ADC_MspInit+0x1e0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80009fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000a02:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000a04:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000a08:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a0a:	f107 0318 	add.w	r3, r7, #24
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f003 fdfc 	bl	800460c <HAL_RCCEx_PeriphCLKConfig>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <HAL_ADC_MspInit+0x12e>
      Error_Handler();
 8000a1a:	f000 fad8 	bl	8000fce <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000a1e:	4b2e      	ldr	r3, [pc, #184]	@ (8000ad8 <HAL_ADC_MspInit+0x1e8>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	3301      	adds	r3, #1
 8000a24:	4a2c      	ldr	r2, [pc, #176]	@ (8000ad8 <HAL_ADC_MspInit+0x1e8>)
 8000a26:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000a28:	4b2b      	ldr	r3, [pc, #172]	@ (8000ad8 <HAL_ADC_MspInit+0x1e8>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	2b01      	cmp	r3, #1
 8000a2e:	d10b      	bne.n	8000a48 <HAL_ADC_MspInit+0x158>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000a30:	4b2a      	ldr	r3, [pc, #168]	@ (8000adc <HAL_ADC_MspInit+0x1ec>)
 8000a32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a34:	4a29      	ldr	r2, [pc, #164]	@ (8000adc <HAL_ADC_MspInit+0x1ec>)
 8000a36:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000a3a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a3c:	4b27      	ldr	r3, [pc, #156]	@ (8000adc <HAL_ADC_MspInit+0x1ec>)
 8000a3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a40:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000a44:	60fb      	str	r3, [r7, #12]
 8000a46:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a48:	4b24      	ldr	r3, [pc, #144]	@ (8000adc <HAL_ADC_MspInit+0x1ec>)
 8000a4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a4c:	4a23      	ldr	r2, [pc, #140]	@ (8000adc <HAL_ADC_MspInit+0x1ec>)
 8000a4e:	f043 0301 	orr.w	r3, r3, #1
 8000a52:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a54:	4b21      	ldr	r3, [pc, #132]	@ (8000adc <HAL_ADC_MspInit+0x1ec>)
 8000a56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a58:	f003 0301 	and.w	r3, r3, #1
 8000a5c:	60bb      	str	r3, [r7, #8]
 8000a5e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000a60:	2302      	movs	r3, #2
 8000a62:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a64:	2303      	movs	r3, #3
 8000a66:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a6c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000a70:	4619      	mov	r1, r3
 8000a72:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a76:	f002 fe41 	bl	80036fc <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 8000a7a:	4b1c      	ldr	r3, [pc, #112]	@ (8000aec <HAL_ADC_MspInit+0x1fc>)
 8000a7c:	4a1c      	ldr	r2, [pc, #112]	@ (8000af0 <HAL_ADC_MspInit+0x200>)
 8000a7e:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8000a80:	4b1a      	ldr	r3, [pc, #104]	@ (8000aec <HAL_ADC_MspInit+0x1fc>)
 8000a82:	2224      	movs	r2, #36	@ 0x24
 8000a84:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a86:	4b19      	ldr	r3, [pc, #100]	@ (8000aec <HAL_ADC_MspInit+0x1fc>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a8c:	4b17      	ldr	r3, [pc, #92]	@ (8000aec <HAL_ADC_MspInit+0x1fc>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8000a92:	4b16      	ldr	r3, [pc, #88]	@ (8000aec <HAL_ADC_MspInit+0x1fc>)
 8000a94:	2280      	movs	r2, #128	@ 0x80
 8000a96:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a98:	4b14      	ldr	r3, [pc, #80]	@ (8000aec <HAL_ADC_MspInit+0x1fc>)
 8000a9a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000a9e:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000aa0:	4b12      	ldr	r3, [pc, #72]	@ (8000aec <HAL_ADC_MspInit+0x1fc>)
 8000aa2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000aa6:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8000aa8:	4b10      	ldr	r3, [pc, #64]	@ (8000aec <HAL_ADC_MspInit+0x1fc>)
 8000aaa:	2220      	movs	r2, #32
 8000aac:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8000aae:	4b0f      	ldr	r3, [pc, #60]	@ (8000aec <HAL_ADC_MspInit+0x1fc>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8000ab4:	480d      	ldr	r0, [pc, #52]	@ (8000aec <HAL_ADC_MspInit+0x1fc>)
 8000ab6:	f002 fb55 	bl	8003164 <HAL_DMA_Init>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <HAL_ADC_MspInit+0x1d4>
      Error_Handler();
 8000ac0:	f000 fa85 	bl	8000fce <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	4a09      	ldr	r2, [pc, #36]	@ (8000aec <HAL_ADC_MspInit+0x1fc>)
 8000ac8:	655a      	str	r2, [r3, #84]	@ 0x54
 8000aca:	4a08      	ldr	r2, [pc, #32]	@ (8000aec <HAL_ADC_MspInit+0x1fc>)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8000ad0:	bf00      	nop
 8000ad2:	3780      	adds	r7, #128	@ 0x80
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	20000210 	.word	0x20000210
 8000adc:	40021000 	.word	0x40021000
 8000ae0:	20000150 	.word	0x20000150
 8000ae4:	40020008 	.word	0x40020008
 8000ae8:	50000100 	.word	0x50000100
 8000aec:	200001b0 	.word	0x200001b0
 8000af0:	4002001c 	.word	0x4002001c

08000af4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000afa:	4b16      	ldr	r3, [pc, #88]	@ (8000b54 <MX_DMA_Init+0x60>)
 8000afc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000afe:	4a15      	ldr	r2, [pc, #84]	@ (8000b54 <MX_DMA_Init+0x60>)
 8000b00:	f043 0304 	orr.w	r3, r3, #4
 8000b04:	6493      	str	r3, [r2, #72]	@ 0x48
 8000b06:	4b13      	ldr	r3, [pc, #76]	@ (8000b54 <MX_DMA_Init+0x60>)
 8000b08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000b0a:	f003 0304 	and.w	r3, r3, #4
 8000b0e:	607b      	str	r3, [r7, #4]
 8000b10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b12:	4b10      	ldr	r3, [pc, #64]	@ (8000b54 <MX_DMA_Init+0x60>)
 8000b14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000b16:	4a0f      	ldr	r2, [pc, #60]	@ (8000b54 <MX_DMA_Init+0x60>)
 8000b18:	f043 0301 	orr.w	r3, r3, #1
 8000b1c:	6493      	str	r3, [r2, #72]	@ 0x48
 8000b1e:	4b0d      	ldr	r3, [pc, #52]	@ (8000b54 <MX_DMA_Init+0x60>)
 8000b20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000b22:	f003 0301 	and.w	r3, r3, #1
 8000b26:	603b      	str	r3, [r7, #0]
 8000b28:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	200b      	movs	r0, #11
 8000b30:	f002 fae3 	bl	80030fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000b34:	200b      	movs	r0, #11
 8000b36:	f002 fafa 	bl	800312e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	200c      	movs	r0, #12
 8000b40:	f002 fadb 	bl	80030fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000b44:	200c      	movs	r0, #12
 8000b46:	f002 faf2 	bl	800312e <HAL_NVIC_EnableIRQ>

}
 8000b4a:	bf00      	nop
 8000b4c:	3708      	adds	r7, #8
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	40021000 	.word	0x40021000

08000b58 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b08a      	sub	sp, #40	@ 0x28
 8000b5c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b5e:	f107 0314 	add.w	r3, r7, #20
 8000b62:	2200      	movs	r2, #0
 8000b64:	601a      	str	r2, [r3, #0]
 8000b66:	605a      	str	r2, [r3, #4]
 8000b68:	609a      	str	r2, [r3, #8]
 8000b6a:	60da      	str	r2, [r3, #12]
 8000b6c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b6e:	4b25      	ldr	r3, [pc, #148]	@ (8000c04 <MX_GPIO_Init+0xac>)
 8000b70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b72:	4a24      	ldr	r2, [pc, #144]	@ (8000c04 <MX_GPIO_Init+0xac>)
 8000b74:	f043 0304 	orr.w	r3, r3, #4
 8000b78:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b7a:	4b22      	ldr	r3, [pc, #136]	@ (8000c04 <MX_GPIO_Init+0xac>)
 8000b7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b7e:	f003 0304 	and.w	r3, r3, #4
 8000b82:	613b      	str	r3, [r7, #16]
 8000b84:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b86:	4b1f      	ldr	r3, [pc, #124]	@ (8000c04 <MX_GPIO_Init+0xac>)
 8000b88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b8a:	4a1e      	ldr	r2, [pc, #120]	@ (8000c04 <MX_GPIO_Init+0xac>)
 8000b8c:	f043 0320 	orr.w	r3, r3, #32
 8000b90:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b92:	4b1c      	ldr	r3, [pc, #112]	@ (8000c04 <MX_GPIO_Init+0xac>)
 8000b94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b96:	f003 0320 	and.w	r3, r3, #32
 8000b9a:	60fb      	str	r3, [r7, #12]
 8000b9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b9e:	4b19      	ldr	r3, [pc, #100]	@ (8000c04 <MX_GPIO_Init+0xac>)
 8000ba0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ba2:	4a18      	ldr	r2, [pc, #96]	@ (8000c04 <MX_GPIO_Init+0xac>)
 8000ba4:	f043 0301 	orr.w	r3, r3, #1
 8000ba8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000baa:	4b16      	ldr	r3, [pc, #88]	@ (8000c04 <MX_GPIO_Init+0xac>)
 8000bac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bae:	f003 0301 	and.w	r3, r3, #1
 8000bb2:	60bb      	str	r3, [r7, #8]
 8000bb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bb6:	4b13      	ldr	r3, [pc, #76]	@ (8000c04 <MX_GPIO_Init+0xac>)
 8000bb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bba:	4a12      	ldr	r2, [pc, #72]	@ (8000c04 <MX_GPIO_Init+0xac>)
 8000bbc:	f043 0302 	orr.w	r3, r3, #2
 8000bc0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bc2:	4b10      	ldr	r3, [pc, #64]	@ (8000c04 <MX_GPIO_Init+0xac>)
 8000bc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bc6:	f003 0302 	and.w	r3, r3, #2
 8000bca:	607b      	str	r3, [r7, #4]
 8000bcc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000bce:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000bd2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bd4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000bd8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000bde:	f107 0314 	add.w	r3, r7, #20
 8000be2:	4619      	mov	r1, r3
 8000be4:	4808      	ldr	r0, [pc, #32]	@ (8000c08 <MX_GPIO_Init+0xb0>)
 8000be6:	f002 fd89 	bl	80036fc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000bea:	2200      	movs	r2, #0
 8000bec:	2100      	movs	r1, #0
 8000bee:	2028      	movs	r0, #40	@ 0x28
 8000bf0:	f002 fa83 	bl	80030fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000bf4:	2028      	movs	r0, #40	@ 0x28
 8000bf6:	f002 fa9a 	bl	800312e <HAL_NVIC_EnableIRQ>

}
 8000bfa:	bf00      	nop
 8000bfc:	3728      	adds	r7, #40	@ 0x28
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	40021000 	.word	0x40021000
 8000c08:	48000800 	.word	0x48000800

08000c0c <HAL_ADC_ConvCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
bool adc1_complete = false;
bool adc2_complete = false;
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8000c0c:	b480      	push	{r7}
 8000c0e:	b083      	sub	sp, #12
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
    if (hadc == &hadc1) {
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	4a0a      	ldr	r2, [pc, #40]	@ (8000c40 <HAL_ADC_ConvCpltCallback+0x34>)
 8000c18:	4293      	cmp	r3, r2
 8000c1a:	d103      	bne.n	8000c24 <HAL_ADC_ConvCpltCallback+0x18>
        adc1_complete = true;
 8000c1c:	4b09      	ldr	r3, [pc, #36]	@ (8000c44 <HAL_ADC_ConvCpltCallback+0x38>)
 8000c1e:	2201      	movs	r2, #1
 8000c20:	701a      	strb	r2, [r3, #0]
    } else if (hadc == &hadc2) {
        adc2_complete = true;
    }
}
 8000c22:	e006      	b.n	8000c32 <HAL_ADC_ConvCpltCallback+0x26>
    } else if (hadc == &hadc2) {
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	4a08      	ldr	r2, [pc, #32]	@ (8000c48 <HAL_ADC_ConvCpltCallback+0x3c>)
 8000c28:	4293      	cmp	r3, r2
 8000c2a:	d102      	bne.n	8000c32 <HAL_ADC_ConvCpltCallback+0x26>
        adc2_complete = true;
 8000c2c:	4b07      	ldr	r3, [pc, #28]	@ (8000c4c <HAL_ADC_ConvCpltCallback+0x40>)
 8000c2e:	2201      	movs	r2, #1
 8000c30:	701a      	strb	r2, [r3, #0]
}
 8000c32:	bf00      	nop
 8000c34:	370c      	adds	r7, #12
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop
 8000c40:	20000078 	.word	0x20000078
 8000c44:	20000214 	.word	0x20000214
 8000c48:	200000e4 	.word	0x200000e4
 8000c4c:	20000215 	.word	0x20000215

08000c50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000c54:	b096      	sub	sp, #88	@ 0x58
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c58:	f000 fbdd 	bl	8001416 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c5c:	f000 f96c 	bl	8000f38 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000c60:	4bad      	ldr	r3, [pc, #692]	@ (8000f18 <main+0x2c8>)
 8000c62:	68db      	ldr	r3, [r3, #12]
 8000c64:	4aac      	ldr	r2, [pc, #688]	@ (8000f18 <main+0x2c8>)
 8000c66:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000c6a:	60d3      	str	r3, [r2, #12]
  DWT->CYCCNT = 0;
 8000c6c:	4aab      	ldr	r2, [pc, #684]	@ (8000f1c <main+0x2cc>)
 8000c6e:	2300      	movs	r3, #0
 8000c70:	6053      	str	r3, [r2, #4]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8000c72:	4baa      	ldr	r3, [pc, #680]	@ (8000f1c <main+0x2cc>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	4aa9      	ldr	r2, [pc, #676]	@ (8000f1c <main+0x2cc>)
 8000c78:	f043 0301 	orr.w	r3, r3, #1
 8000c7c:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c7e:	f7ff ff6b 	bl	8000b58 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c82:	f7ff ff37 	bl	8000af4 <MX_DMA_Init>
  MX_SPI1_Init();
 8000c86:	f000 f9a9 	bl	8000fdc <MX_SPI1_Init>
  MX_ADC1_Init();
 8000c8a:	f7ff fd55 	bl	8000738 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000c8e:	f7ff fdcf 	bl	8000830 <MX_ADC2_Init>
  MX_LPUART1_UART_Init();
 8000c92:	f000 faf5 	bl	8001280 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */
  uint16_t adc1_raw[POINTS_N];
 8000c96:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c9a:	3b01      	subs	r3, #1
 8000c9c:	653b      	str	r3, [r7, #80]	@ 0x50
 8000c9e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	4614      	mov	r4, r2
 8000ca6:	461d      	mov	r5, r3
 8000ca8:	f04f 0200 	mov.w	r2, #0
 8000cac:	f04f 0300 	mov.w	r3, #0
 8000cb0:	012b      	lsls	r3, r5, #4
 8000cb2:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8000cb6:	0122      	lsls	r2, r4, #4
 8000cb8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4690      	mov	r8, r2
 8000cc0:	4699      	mov	r9, r3
 8000cc2:	f04f 0200 	mov.w	r2, #0
 8000cc6:	f04f 0300 	mov.w	r3, #0
 8000cca:	ea4f 1309 	mov.w	r3, r9, lsl #4
 8000cce:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 8000cd2:	ea4f 1208 	mov.w	r2, r8, lsl #4
 8000cd6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000cda:	005b      	lsls	r3, r3, #1
 8000cdc:	3307      	adds	r3, #7
 8000cde:	08db      	lsrs	r3, r3, #3
 8000ce0:	00db      	lsls	r3, r3, #3
 8000ce2:	ebad 0d03 	sub.w	sp, sp, r3
 8000ce6:	466b      	mov	r3, sp
 8000ce8:	3301      	adds	r3, #1
 8000cea:	085b      	lsrs	r3, r3, #1
 8000cec:	005b      	lsls	r3, r3, #1
 8000cee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint16_t adc2_raw[POINTS_N];
 8000cf0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000cf4:	3b01      	subs	r3, #1
 8000cf6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000cf8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	623a      	str	r2, [r7, #32]
 8000d00:	627b      	str	r3, [r7, #36]	@ 0x24
 8000d02:	f04f 0200 	mov.w	r2, #0
 8000d06:	f04f 0300 	mov.w	r3, #0
 8000d0a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8000d0e:	4629      	mov	r1, r5
 8000d10:	010b      	lsls	r3, r1, #4
 8000d12:	4621      	mov	r1, r4
 8000d14:	ea43 7311 	orr.w	r3, r3, r1, lsr #28
 8000d18:	4621      	mov	r1, r4
 8000d1a:	010a      	lsls	r2, r1, #4
 8000d1c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d20:	2300      	movs	r3, #0
 8000d22:	61ba      	str	r2, [r7, #24]
 8000d24:	61fb      	str	r3, [r7, #28]
 8000d26:	f04f 0200 	mov.w	r2, #0
 8000d2a:	f04f 0300 	mov.w	r3, #0
 8000d2e:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8000d32:	4629      	mov	r1, r5
 8000d34:	010b      	lsls	r3, r1, #4
 8000d36:	4621      	mov	r1, r4
 8000d38:	ea43 7311 	orr.w	r3, r3, r1, lsr #28
 8000d3c:	4621      	mov	r1, r4
 8000d3e:	010a      	lsls	r2, r1, #4
 8000d40:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d44:	005b      	lsls	r3, r3, #1
 8000d46:	3307      	adds	r3, #7
 8000d48:	08db      	lsrs	r3, r3, #3
 8000d4a:	00db      	lsls	r3, r3, #3
 8000d4c:	ebad 0d03 	sub.w	sp, sp, r3
 8000d50:	466b      	mov	r3, sp
 8000d52:	3301      	adds	r3, #1
 8000d54:	085b      	lsrs	r3, r3, #1
 8000d56:	005b      	lsls	r3, r3, #1
 8000d58:	647b      	str	r3, [r7, #68]	@ 0x44
  data_point_t adc1_points[POINTS_N];
 8000d5a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d5e:	3b01      	subs	r3, #1
 8000d60:	643b      	str	r3, [r7, #64]	@ 0x40
 8000d62:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d66:	2300      	movs	r3, #0
 8000d68:	613a      	str	r2, [r7, #16]
 8000d6a:	617b      	str	r3, [r7, #20]
 8000d6c:	f04f 0200 	mov.w	r2, #0
 8000d70:	f04f 0300 	mov.w	r3, #0
 8000d74:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8000d78:	4629      	mov	r1, r5
 8000d7a:	018b      	lsls	r3, r1, #6
 8000d7c:	4621      	mov	r1, r4
 8000d7e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8000d82:	4621      	mov	r1, r4
 8000d84:	018a      	lsls	r2, r1, #6
 8000d86:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	60ba      	str	r2, [r7, #8]
 8000d8e:	60fb      	str	r3, [r7, #12]
 8000d90:	f04f 0200 	mov.w	r2, #0
 8000d94:	f04f 0300 	mov.w	r3, #0
 8000d98:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8000d9c:	4629      	mov	r1, r5
 8000d9e:	018b      	lsls	r3, r1, #6
 8000da0:	4621      	mov	r1, r4
 8000da2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8000da6:	4621      	mov	r1, r4
 8000da8:	018a      	lsls	r2, r1, #6
 8000daa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000dae:	00db      	lsls	r3, r3, #3
 8000db0:	3307      	adds	r3, #7
 8000db2:	08db      	lsrs	r3, r3, #3
 8000db4:	00db      	lsls	r3, r3, #3
 8000db6:	ebad 0d03 	sub.w	sp, sp, r3
 8000dba:	466b      	mov	r3, sp
 8000dbc:	3303      	adds	r3, #3
 8000dbe:	089b      	lsrs	r3, r3, #2
 8000dc0:	009b      	lsls	r3, r3, #2
 8000dc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  data_point_t adc2_points[POINTS_N];
 8000dc4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000dc8:	3b01      	subs	r3, #1
 8000dca:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000dcc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	603a      	str	r2, [r7, #0]
 8000dd4:	607b      	str	r3, [r7, #4]
 8000dd6:	f04f 0200 	mov.w	r2, #0
 8000dda:	f04f 0300 	mov.w	r3, #0
 8000dde:	e9d7 4500 	ldrd	r4, r5, [r7]
 8000de2:	4629      	mov	r1, r5
 8000de4:	018b      	lsls	r3, r1, #6
 8000de6:	4621      	mov	r1, r4
 8000de8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8000dec:	4621      	mov	r1, r4
 8000dee:	018a      	lsls	r2, r1, #6
 8000df0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000df4:	2300      	movs	r3, #0
 8000df6:	4692      	mov	sl, r2
 8000df8:	469b      	mov	fp, r3
 8000dfa:	f04f 0200 	mov.w	r2, #0
 8000dfe:	f04f 0300 	mov.w	r3, #0
 8000e02:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8000e06:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8000e0a:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8000e0e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e12:	00db      	lsls	r3, r3, #3
 8000e14:	3307      	adds	r3, #7
 8000e16:	08db      	lsrs	r3, r3, #3
 8000e18:	00db      	lsls	r3, r3, #3
 8000e1a:	ebad 0d03 	sub.w	sp, sp, r3
 8000e1e:	466b      	mov	r3, sp
 8000e20:	3303      	adds	r3, #3
 8000e22:	089b      	lsrs	r3, r3, #2
 8000e24:	009b      	lsls	r3, r3, #2
 8000e26:	637b      	str	r3, [r7, #52]	@ 0x34

  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adc1_raw, POINTS_N);
 8000e28:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e2c:	461a      	mov	r2, r3
 8000e2e:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8000e30:	483b      	ldr	r0, [pc, #236]	@ (8000f20 <main+0x2d0>)
 8000e32:	f000 ff89 	bl	8001d48 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc2, (uint32_t *)adc2_raw, POINTS_N);
 8000e36:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e3a:	461a      	mov	r2, r3
 8000e3c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8000e3e:	4839      	ldr	r0, [pc, #228]	@ (8000f24 <main+0x2d4>)
 8000e40:	f000 ff82 	bl	8001d48 <HAL_ADC_Start_DMA>

  uint32_t start_time = plotter_get_time_us();
 8000e44:	f7ff fbbc 	bl	80005c0 <plotter_get_time_us>
 8000e48:	6338      	str	r0, [r7, #48]	@ 0x30

  while (!adc1_complete || !adc2_complete)
 8000e4a:	bf00      	nop
 8000e4c:	4b36      	ldr	r3, [pc, #216]	@ (8000f28 <main+0x2d8>)
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	f083 0301 	eor.w	r3, r3, #1
 8000e54:	b2db      	uxtb	r3, r3
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d1f8      	bne.n	8000e4c <main+0x1fc>
 8000e5a:	4b34      	ldr	r3, [pc, #208]	@ (8000f2c <main+0x2dc>)
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	f083 0301 	eor.w	r3, r3, #1
 8000e62:	b2db      	uxtb	r3, r3
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d1f1      	bne.n	8000e4c <main+0x1fc>
      ;

  uint32_t end_time = plotter_get_time_us();
 8000e68:	f7ff fbaa 	bl	80005c0 <plotter_get_time_us>
 8000e6c:	62f8      	str	r0, [r7, #44]	@ 0x2c

  HAL_ADC_Stop_DMA(&hadc1);
 8000e6e:	482c      	ldr	r0, [pc, #176]	@ (8000f20 <main+0x2d0>)
 8000e70:	f001 f83e 	bl	8001ef0 <HAL_ADC_Stop_DMA>
  HAL_ADC_Stop_DMA(&hadc2);
 8000e74:	482b      	ldr	r0, [pc, #172]	@ (8000f24 <main+0x2d4>)
 8000e76:	f001 f83b 	bl	8001ef0 <HAL_ADC_Stop_DMA>

  for (size_t i = 0; i < POINTS_N; i++) {
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	657b      	str	r3, [r7, #84]	@ 0x54
 8000e7e:	e022      	b.n	8000ec6 <main+0x276>
      adc1_points[i].time = ~0;
 8000e80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000e82:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8000e84:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000e88:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
      adc2_points[i].time = ~0;
 8000e8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e8e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8000e90:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000e94:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
      adc1_points[i].value = adc1_raw[i];
 8000e98:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000e9a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8000e9c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000ea4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000ea6:	00db      	lsls	r3, r3, #3
 8000ea8:	4413      	add	r3, r2
 8000eaa:	6059      	str	r1, [r3, #4]
      adc2_points[i].value = adc2_raw[i];
 8000eac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000eae:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8000eb0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000eb8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000eba:	00db      	lsls	r3, r3, #3
 8000ebc:	4413      	add	r3, r2
 8000ebe:	6059      	str	r1, [r3, #4]
  for (size_t i = 0; i < POINTS_N; i++) {
 8000ec0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000ec2:	3301      	adds	r3, #1
 8000ec4:	657b      	str	r3, [r7, #84]	@ 0x54
 8000ec6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000eca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000ecc:	4293      	cmp	r3, r2
 8000ece:	d3d7      	bcc.n	8000e80 <main+0x230>
  }

  adc1_points[0].time = start_time;
 8000ed0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000ed2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000ed4:	601a      	str	r2, [r3, #0]
  adc1_points[POINTS_N - 1].time = end_time;
 8000ed6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000eda:	1e5a      	subs	r2, r3, #1
 8000edc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000ede:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8000ee0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
  adc2_points[0].time = start_time;
 8000ee4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ee6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000ee8:	601a      	str	r2, [r3, #0]
  adc2_points[POINTS_N - 1].time = end_time;
 8000eea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000eee:	1e5a      	subs	r2, r3, #1
 8000ef0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ef2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8000ef4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

  plotter_send_signal("ADC1", adc1_points, POINTS_N);
 8000ef8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000efc:	461a      	mov	r2, r3
 8000efe:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8000f00:	480b      	ldr	r0, [pc, #44]	@ (8000f30 <main+0x2e0>)
 8000f02:	f7ff fbe9 	bl	80006d8 <plotter_send_signal>
  plotter_send_signal("ADC2", adc2_points, POINTS_N);
 8000f06:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f0a:	461a      	mov	r2, r3
 8000f0c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8000f0e:	4809      	ldr	r0, [pc, #36]	@ (8000f34 <main+0x2e4>)
 8000f10:	f7ff fbe2 	bl	80006d8 <plotter_send_signal>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f14:	bf00      	nop
 8000f16:	e7fd      	b.n	8000f14 <main+0x2c4>
 8000f18:	e000edf0 	.word	0xe000edf0
 8000f1c:	e0001000 	.word	0xe0001000
 8000f20:	20000078 	.word	0x20000078
 8000f24:	200000e4 	.word	0x200000e4
 8000f28:	20000214 	.word	0x20000214
 8000f2c:	20000215 	.word	0x20000215
 8000f30:	080063a0 	.word	0x080063a0
 8000f34:	080063a8 	.word	0x080063a8

08000f38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b094      	sub	sp, #80	@ 0x50
 8000f3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f3e:	f107 0318 	add.w	r3, r7, #24
 8000f42:	2238      	movs	r2, #56	@ 0x38
 8000f44:	2100      	movs	r1, #0
 8000f46:	4618      	mov	r0, r3
 8000f48:	f004 fd8a 	bl	8005a60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f4c:	1d3b      	adds	r3, r7, #4
 8000f4e:	2200      	movs	r2, #0
 8000f50:	601a      	str	r2, [r3, #0]
 8000f52:	605a      	str	r2, [r3, #4]
 8000f54:	609a      	str	r2, [r3, #8]
 8000f56:	60da      	str	r2, [r3, #12]
 8000f58:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000f5a:	2000      	movs	r0, #0
 8000f5c:	f002 fd74 	bl	8003a48 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f60:	2302      	movs	r3, #2
 8000f62:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f64:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f68:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f6a:	2340      	movs	r3, #64	@ 0x40
 8000f6c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f6e:	2302      	movs	r3, #2
 8000f70:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f72:	2302      	movs	r3, #2
 8000f74:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000f76:	2304      	movs	r3, #4
 8000f78:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000f7a:	2355      	movs	r3, #85	@ 0x55
 8000f7c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f7e:	2302      	movs	r3, #2
 8000f80:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000f82:	2302      	movs	r3, #2
 8000f84:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000f86:	2302      	movs	r3, #2
 8000f88:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f8a:	f107 0318 	add.w	r3, r7, #24
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f002 fe0e 	bl	8003bb0 <HAL_RCC_OscConfig>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000f9a:	f000 f818 	bl	8000fce <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f9e:	230f      	movs	r3, #15
 8000fa0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fa2:	2303      	movs	r3, #3
 8000fa4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000faa:	2300      	movs	r3, #0
 8000fac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000fb2:	1d3b      	adds	r3, r7, #4
 8000fb4:	2104      	movs	r1, #4
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f003 f90c 	bl	80041d4 <HAL_RCC_ClockConfig>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000fc2:	f000 f804 	bl	8000fce <Error_Handler>
  }
}
 8000fc6:	bf00      	nop
 8000fc8:	3750      	adds	r7, #80	@ 0x50
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}

08000fce <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fce:	b480      	push	{r7}
 8000fd0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fd2:	b672      	cpsid	i
}
 8000fd4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fd6:	bf00      	nop
 8000fd8:	e7fd      	b.n	8000fd6 <Error_Handler+0x8>
	...

08000fdc <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000fe0:	4b19      	ldr	r3, [pc, #100]	@ (8001048 <MX_SPI1_Init+0x6c>)
 8000fe2:	4a1a      	ldr	r2, [pc, #104]	@ (800104c <MX_SPI1_Init+0x70>)
 8000fe4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8000fe6:	4b18      	ldr	r3, [pc, #96]	@ (8001048 <MX_SPI1_Init+0x6c>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000fec:	4b16      	ldr	r3, [pc, #88]	@ (8001048 <MX_SPI1_Init+0x6c>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000ff2:	4b15      	ldr	r3, [pc, #84]	@ (8001048 <MX_SPI1_Init+0x6c>)
 8000ff4:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000ff8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ffa:	4b13      	ldr	r3, [pc, #76]	@ (8001048 <MX_SPI1_Init+0x6c>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001000:	4b11      	ldr	r3, [pc, #68]	@ (8001048 <MX_SPI1_Init+0x6c>)
 8001002:	2200      	movs	r2, #0
 8001004:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001006:	4b10      	ldr	r3, [pc, #64]	@ (8001048 <MX_SPI1_Init+0x6c>)
 8001008:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800100c:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800100e:	4b0e      	ldr	r3, [pc, #56]	@ (8001048 <MX_SPI1_Init+0x6c>)
 8001010:	2200      	movs	r2, #0
 8001012:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001014:	4b0c      	ldr	r3, [pc, #48]	@ (8001048 <MX_SPI1_Init+0x6c>)
 8001016:	2200      	movs	r2, #0
 8001018:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800101a:	4b0b      	ldr	r3, [pc, #44]	@ (8001048 <MX_SPI1_Init+0x6c>)
 800101c:	2200      	movs	r2, #0
 800101e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001020:	4b09      	ldr	r3, [pc, #36]	@ (8001048 <MX_SPI1_Init+0x6c>)
 8001022:	2207      	movs	r2, #7
 8001024:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001026:	4b08      	ldr	r3, [pc, #32]	@ (8001048 <MX_SPI1_Init+0x6c>)
 8001028:	2200      	movs	r2, #0
 800102a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800102c:	4b06      	ldr	r3, [pc, #24]	@ (8001048 <MX_SPI1_Init+0x6c>)
 800102e:	2200      	movs	r2, #0
 8001030:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001032:	4805      	ldr	r0, [pc, #20]	@ (8001048 <MX_SPI1_Init+0x6c>)
 8001034:	f003 fd38 	bl	8004aa8 <HAL_SPI_Init>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <MX_SPI1_Init+0x66>
  {
    Error_Handler();
 800103e:	f7ff ffc6 	bl	8000fce <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001042:	bf00      	nop
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	20000218 	.word	0x20000218
 800104c:	40013000 	.word	0x40013000

08001050 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b08a      	sub	sp, #40	@ 0x28
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001058:	f107 0314 	add.w	r3, r7, #20
 800105c:	2200      	movs	r2, #0
 800105e:	601a      	str	r2, [r3, #0]
 8001060:	605a      	str	r2, [r3, #4]
 8001062:	609a      	str	r2, [r3, #8]
 8001064:	60da      	str	r2, [r3, #12]
 8001066:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a25      	ldr	r2, [pc, #148]	@ (8001104 <HAL_SPI_MspInit+0xb4>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d144      	bne.n	80010fc <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001072:	4b25      	ldr	r3, [pc, #148]	@ (8001108 <HAL_SPI_MspInit+0xb8>)
 8001074:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001076:	4a24      	ldr	r2, [pc, #144]	@ (8001108 <HAL_SPI_MspInit+0xb8>)
 8001078:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800107c:	6613      	str	r3, [r2, #96]	@ 0x60
 800107e:	4b22      	ldr	r3, [pc, #136]	@ (8001108 <HAL_SPI_MspInit+0xb8>)
 8001080:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001082:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001086:	613b      	str	r3, [r7, #16]
 8001088:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800108a:	4b1f      	ldr	r3, [pc, #124]	@ (8001108 <HAL_SPI_MspInit+0xb8>)
 800108c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800108e:	4a1e      	ldr	r2, [pc, #120]	@ (8001108 <HAL_SPI_MspInit+0xb8>)
 8001090:	f043 0301 	orr.w	r3, r3, #1
 8001094:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001096:	4b1c      	ldr	r3, [pc, #112]	@ (8001108 <HAL_SPI_MspInit+0xb8>)
 8001098:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800109a:	f003 0301 	and.w	r3, r3, #1
 800109e:	60fb      	str	r3, [r7, #12]
 80010a0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010a2:	4b19      	ldr	r3, [pc, #100]	@ (8001108 <HAL_SPI_MspInit+0xb8>)
 80010a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010a6:	4a18      	ldr	r2, [pc, #96]	@ (8001108 <HAL_SPI_MspInit+0xb8>)
 80010a8:	f043 0302 	orr.w	r3, r3, #2
 80010ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010ae:	4b16      	ldr	r3, [pc, #88]	@ (8001108 <HAL_SPI_MspInit+0xb8>)
 80010b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010b2:	f003 0302 	and.w	r3, r3, #2
 80010b6:	60bb      	str	r3, [r7, #8]
 80010b8:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80010ba:	2360      	movs	r3, #96	@ 0x60
 80010bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010be:	2302      	movs	r3, #2
 80010c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c2:	2300      	movs	r3, #0
 80010c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c6:	2300      	movs	r3, #0
 80010c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80010ca:	2305      	movs	r3, #5
 80010cc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ce:	f107 0314 	add.w	r3, r7, #20
 80010d2:	4619      	mov	r1, r3
 80010d4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010d8:	f002 fb10 	bl	80036fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80010dc:	2320      	movs	r3, #32
 80010de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e0:	2302      	movs	r3, #2
 80010e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e4:	2300      	movs	r3, #0
 80010e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e8:	2300      	movs	r3, #0
 80010ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80010ec:	2305      	movs	r3, #5
 80010ee:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010f0:	f107 0314 	add.w	r3, r7, #20
 80010f4:	4619      	mov	r1, r3
 80010f6:	4805      	ldr	r0, [pc, #20]	@ (800110c <HAL_SPI_MspInit+0xbc>)
 80010f8:	f002 fb00 	bl	80036fc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80010fc:	bf00      	nop
 80010fe:	3728      	adds	r7, #40	@ 0x28
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	40013000 	.word	0x40013000
 8001108:	40021000 	.word	0x40021000
 800110c:	48000400 	.word	0x48000400

08001110 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001116:	4b0f      	ldr	r3, [pc, #60]	@ (8001154 <HAL_MspInit+0x44>)
 8001118:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800111a:	4a0e      	ldr	r2, [pc, #56]	@ (8001154 <HAL_MspInit+0x44>)
 800111c:	f043 0301 	orr.w	r3, r3, #1
 8001120:	6613      	str	r3, [r2, #96]	@ 0x60
 8001122:	4b0c      	ldr	r3, [pc, #48]	@ (8001154 <HAL_MspInit+0x44>)
 8001124:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001126:	f003 0301 	and.w	r3, r3, #1
 800112a:	607b      	str	r3, [r7, #4]
 800112c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800112e:	4b09      	ldr	r3, [pc, #36]	@ (8001154 <HAL_MspInit+0x44>)
 8001130:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001132:	4a08      	ldr	r2, [pc, #32]	@ (8001154 <HAL_MspInit+0x44>)
 8001134:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001138:	6593      	str	r3, [r2, #88]	@ 0x58
 800113a:	4b06      	ldr	r3, [pc, #24]	@ (8001154 <HAL_MspInit+0x44>)
 800113c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800113e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001142:	603b      	str	r3, [r7, #0]
 8001144:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001146:	f002 fd23 	bl	8003b90 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800114a:	bf00      	nop
 800114c:	3708      	adds	r7, #8
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	40021000 	.word	0x40021000

08001158 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800115c:	bf00      	nop
 800115e:	e7fd      	b.n	800115c <NMI_Handler+0x4>

08001160 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001164:	bf00      	nop
 8001166:	e7fd      	b.n	8001164 <HardFault_Handler+0x4>

08001168 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800116c:	bf00      	nop
 800116e:	e7fd      	b.n	800116c <MemManage_Handler+0x4>

08001170 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001174:	bf00      	nop
 8001176:	e7fd      	b.n	8001174 <BusFault_Handler+0x4>

08001178 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800117c:	bf00      	nop
 800117e:	e7fd      	b.n	800117c <UsageFault_Handler+0x4>

08001180 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001184:	bf00      	nop
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr

0800118e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800118e:	b480      	push	{r7}
 8001190:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001192:	bf00      	nop
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr

0800119c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011a0:	bf00      	nop
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr

080011aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011aa:	b580      	push	{r7, lr}
 80011ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011ae:	f000 f985 	bl	80014bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011b2:	bf00      	nop
 80011b4:	bd80      	pop	{r7, pc}
	...

080011b8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80011bc:	4802      	ldr	r0, [pc, #8]	@ (80011c8 <DMA1_Channel1_IRQHandler+0x10>)
 80011be:	f002 f94d 	bl	800345c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80011c2:	bf00      	nop
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	20000150 	.word	0x20000150

080011cc <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80011d0:	4802      	ldr	r0, [pc, #8]	@ (80011dc <DMA1_Channel2_IRQHandler+0x10>)
 80011d2:	f002 f943 	bl	800345c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80011d6:	bf00      	nop
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	200001b0 	.word	0x200001b0

080011e0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80011e4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80011e8:	f002 fc0a 	bl	8003a00 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80011ec:	bf00      	nop
 80011ee:	bd80      	pop	{r7, pc}

080011f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b086      	sub	sp, #24
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011f8:	4a14      	ldr	r2, [pc, #80]	@ (800124c <_sbrk+0x5c>)
 80011fa:	4b15      	ldr	r3, [pc, #84]	@ (8001250 <_sbrk+0x60>)
 80011fc:	1ad3      	subs	r3, r2, r3
 80011fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001204:	4b13      	ldr	r3, [pc, #76]	@ (8001254 <_sbrk+0x64>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d102      	bne.n	8001212 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800120c:	4b11      	ldr	r3, [pc, #68]	@ (8001254 <_sbrk+0x64>)
 800120e:	4a12      	ldr	r2, [pc, #72]	@ (8001258 <_sbrk+0x68>)
 8001210:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001212:	4b10      	ldr	r3, [pc, #64]	@ (8001254 <_sbrk+0x64>)
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	4413      	add	r3, r2
 800121a:	693a      	ldr	r2, [r7, #16]
 800121c:	429a      	cmp	r2, r3
 800121e:	d207      	bcs.n	8001230 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001220:	f004 fc26 	bl	8005a70 <__errno>
 8001224:	4603      	mov	r3, r0
 8001226:	220c      	movs	r2, #12
 8001228:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800122a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800122e:	e009      	b.n	8001244 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001230:	4b08      	ldr	r3, [pc, #32]	@ (8001254 <_sbrk+0x64>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001236:	4b07      	ldr	r3, [pc, #28]	@ (8001254 <_sbrk+0x64>)
 8001238:	681a      	ldr	r2, [r3, #0]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4413      	add	r3, r2
 800123e:	4a05      	ldr	r2, [pc, #20]	@ (8001254 <_sbrk+0x64>)
 8001240:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001242:	68fb      	ldr	r3, [r7, #12]
}
 8001244:	4618      	mov	r0, r3
 8001246:	3718      	adds	r7, #24
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	20020000 	.word	0x20020000
 8001250:	00000400 	.word	0x00000400
 8001254:	2000027c 	.word	0x2000027c
 8001258:	20000460 	.word	0x20000460

0800125c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001260:	4b06      	ldr	r3, [pc, #24]	@ (800127c <SystemInit+0x20>)
 8001262:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001266:	4a05      	ldr	r2, [pc, #20]	@ (800127c <SystemInit+0x20>)
 8001268:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800126c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001270:	bf00      	nop
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	e000ed00 	.word	0xe000ed00

08001280 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef hlpuart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001284:	4b21      	ldr	r3, [pc, #132]	@ (800130c <MX_LPUART1_UART_Init+0x8c>)
 8001286:	4a22      	ldr	r2, [pc, #136]	@ (8001310 <MX_LPUART1_UART_Init+0x90>)
 8001288:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800128a:	4b20      	ldr	r3, [pc, #128]	@ (800130c <MX_LPUART1_UART_Init+0x8c>)
 800128c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001290:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001292:	4b1e      	ldr	r3, [pc, #120]	@ (800130c <MX_LPUART1_UART_Init+0x8c>)
 8001294:	2200      	movs	r2, #0
 8001296:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001298:	4b1c      	ldr	r3, [pc, #112]	@ (800130c <MX_LPUART1_UART_Init+0x8c>)
 800129a:	2200      	movs	r2, #0
 800129c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800129e:	4b1b      	ldr	r3, [pc, #108]	@ (800130c <MX_LPUART1_UART_Init+0x8c>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80012a4:	4b19      	ldr	r3, [pc, #100]	@ (800130c <MX_LPUART1_UART_Init+0x8c>)
 80012a6:	220c      	movs	r2, #12
 80012a8:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012aa:	4b18      	ldr	r3, [pc, #96]	@ (800130c <MX_LPUART1_UART_Init+0x8c>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012b0:	4b16      	ldr	r3, [pc, #88]	@ (800130c <MX_LPUART1_UART_Init+0x8c>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80012b6:	4b15      	ldr	r3, [pc, #84]	@ (800130c <MX_LPUART1_UART_Init+0x8c>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012bc:	4b13      	ldr	r3, [pc, #76]	@ (800130c <MX_LPUART1_UART_Init+0x8c>)
 80012be:	2200      	movs	r2, #0
 80012c0:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80012c2:	4812      	ldr	r0, [pc, #72]	@ (800130c <MX_LPUART1_UART_Init+0x8c>)
 80012c4:	f003 fc9b 	bl	8004bfe <HAL_UART_Init>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80012ce:	f7ff fe7e 	bl	8000fce <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012d2:	2100      	movs	r1, #0
 80012d4:	480d      	ldr	r0, [pc, #52]	@ (800130c <MX_LPUART1_UART_Init+0x8c>)
 80012d6:	f004 fac5 	bl	8005864 <HAL_UARTEx_SetTxFifoThreshold>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80012e0:	f7ff fe75 	bl	8000fce <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012e4:	2100      	movs	r1, #0
 80012e6:	4809      	ldr	r0, [pc, #36]	@ (800130c <MX_LPUART1_UART_Init+0x8c>)
 80012e8:	f004 fafa 	bl	80058e0 <HAL_UARTEx_SetRxFifoThreshold>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 80012f2:	f7ff fe6c 	bl	8000fce <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80012f6:	4805      	ldr	r0, [pc, #20]	@ (800130c <MX_LPUART1_UART_Init+0x8c>)
 80012f8:	f004 fa7b 	bl	80057f2 <HAL_UARTEx_DisableFifoMode>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8001302:	f7ff fe64 	bl	8000fce <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001306:	bf00      	nop
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	20000280 	.word	0x20000280
 8001310:	40008000 	.word	0x40008000

08001314 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b09e      	sub	sp, #120	@ 0x78
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800131c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001320:	2200      	movs	r2, #0
 8001322:	601a      	str	r2, [r3, #0]
 8001324:	605a      	str	r2, [r3, #4]
 8001326:	609a      	str	r2, [r3, #8]
 8001328:	60da      	str	r2, [r3, #12]
 800132a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800132c:	f107 0310 	add.w	r3, r7, #16
 8001330:	2254      	movs	r2, #84	@ 0x54
 8001332:	2100      	movs	r1, #0
 8001334:	4618      	mov	r0, r3
 8001336:	f004 fb93 	bl	8005a60 <memset>
  if(uartHandle->Instance==LPUART1)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a1f      	ldr	r2, [pc, #124]	@ (80013bc <HAL_UART_MspInit+0xa8>)
 8001340:	4293      	cmp	r3, r2
 8001342:	d136      	bne.n	80013b2 <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001344:	2320      	movs	r3, #32
 8001346:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001348:	2300      	movs	r3, #0
 800134a:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800134c:	f107 0310 	add.w	r3, r7, #16
 8001350:	4618      	mov	r0, r3
 8001352:	f003 f95b 	bl	800460c <HAL_RCCEx_PeriphCLKConfig>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800135c:	f7ff fe37 	bl	8000fce <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001360:	4b17      	ldr	r3, [pc, #92]	@ (80013c0 <HAL_UART_MspInit+0xac>)
 8001362:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001364:	4a16      	ldr	r2, [pc, #88]	@ (80013c0 <HAL_UART_MspInit+0xac>)
 8001366:	f043 0301 	orr.w	r3, r3, #1
 800136a:	65d3      	str	r3, [r2, #92]	@ 0x5c
 800136c:	4b14      	ldr	r3, [pc, #80]	@ (80013c0 <HAL_UART_MspInit+0xac>)
 800136e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001370:	f003 0301 	and.w	r3, r3, #1
 8001374:	60fb      	str	r3, [r7, #12]
 8001376:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001378:	4b11      	ldr	r3, [pc, #68]	@ (80013c0 <HAL_UART_MspInit+0xac>)
 800137a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800137c:	4a10      	ldr	r2, [pc, #64]	@ (80013c0 <HAL_UART_MspInit+0xac>)
 800137e:	f043 0301 	orr.w	r3, r3, #1
 8001382:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001384:	4b0e      	ldr	r3, [pc, #56]	@ (80013c0 <HAL_UART_MspInit+0xac>)
 8001386:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001388:	f003 0301 	and.w	r3, r3, #1
 800138c:	60bb      	str	r3, [r7, #8]
 800138e:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8001390:	230c      	movs	r3, #12
 8001392:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001394:	2302      	movs	r3, #2
 8001396:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001398:	2300      	movs	r3, #0
 800139a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800139c:	2300      	movs	r3, #0
 800139e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80013a0:	230c      	movs	r3, #12
 80013a2:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013a4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80013a8:	4619      	mov	r1, r3
 80013aa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013ae:	f002 f9a5 	bl	80036fc <HAL_GPIO_Init>

  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 80013b2:	bf00      	nop
 80013b4:	3778      	adds	r7, #120	@ 0x78
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	40008000 	.word	0x40008000
 80013c0:	40021000 	.word	0x40021000

080013c4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80013c4:	480d      	ldr	r0, [pc, #52]	@ (80013fc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80013c6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80013c8:	f7ff ff48 	bl	800125c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013cc:	480c      	ldr	r0, [pc, #48]	@ (8001400 <LoopForever+0x6>)
  ldr r1, =_edata
 80013ce:	490d      	ldr	r1, [pc, #52]	@ (8001404 <LoopForever+0xa>)
  ldr r2, =_sidata
 80013d0:	4a0d      	ldr	r2, [pc, #52]	@ (8001408 <LoopForever+0xe>)
  movs r3, #0
 80013d2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80013d4:	e002      	b.n	80013dc <LoopCopyDataInit>

080013d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013da:	3304      	adds	r3, #4

080013dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013e0:	d3f9      	bcc.n	80013d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013e2:	4a0a      	ldr	r2, [pc, #40]	@ (800140c <LoopForever+0x12>)
  ldr r4, =_ebss
 80013e4:	4c0a      	ldr	r4, [pc, #40]	@ (8001410 <LoopForever+0x16>)
  movs r3, #0
 80013e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013e8:	e001      	b.n	80013ee <LoopFillZerobss>

080013ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013ec:	3204      	adds	r2, #4

080013ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013f0:	d3fb      	bcc.n	80013ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013f2:	f004 fb43 	bl	8005a7c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80013f6:	f7ff fc2b 	bl	8000c50 <main>

080013fa <LoopForever>:

LoopForever:
    b LoopForever
 80013fa:	e7fe      	b.n	80013fa <LoopForever>
  ldr   r0, =_estack
 80013fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001400:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001404:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001408:	08006434 	.word	0x08006434
  ldr r2, =_sbss
 800140c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001410:	20000460 	.word	0x20000460

08001414 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001414:	e7fe      	b.n	8001414 <ADC1_2_IRQHandler>

08001416 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001416:	b580      	push	{r7, lr}
 8001418:	b082      	sub	sp, #8
 800141a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800141c:	2300      	movs	r3, #0
 800141e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001420:	2003      	movs	r0, #3
 8001422:	f001 fe5f 	bl	80030e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001426:	2000      	movs	r0, #0
 8001428:	f000 f80e 	bl	8001448 <HAL_InitTick>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d002      	beq.n	8001438 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001432:	2301      	movs	r3, #1
 8001434:	71fb      	strb	r3, [r7, #7]
 8001436:	e001      	b.n	800143c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001438:	f7ff fe6a 	bl	8001110 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800143c:	79fb      	ldrb	r3, [r7, #7]

}
 800143e:	4618      	mov	r0, r3
 8001440:	3708      	adds	r7, #8
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
	...

08001448 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b084      	sub	sp, #16
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001450:	2300      	movs	r3, #0
 8001452:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001454:	4b16      	ldr	r3, [pc, #88]	@ (80014b0 <HAL_InitTick+0x68>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d022      	beq.n	80014a2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800145c:	4b15      	ldr	r3, [pc, #84]	@ (80014b4 <HAL_InitTick+0x6c>)
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	4b13      	ldr	r3, [pc, #76]	@ (80014b0 <HAL_InitTick+0x68>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001468:	fbb1 f3f3 	udiv	r3, r1, r3
 800146c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001470:	4618      	mov	r0, r3
 8001472:	f001 fe6a 	bl	800314a <HAL_SYSTICK_Config>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d10f      	bne.n	800149c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2b0f      	cmp	r3, #15
 8001480:	d809      	bhi.n	8001496 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001482:	2200      	movs	r2, #0
 8001484:	6879      	ldr	r1, [r7, #4]
 8001486:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800148a:	f001 fe36 	bl	80030fa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800148e:	4a0a      	ldr	r2, [pc, #40]	@ (80014b8 <HAL_InitTick+0x70>)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6013      	str	r3, [r2, #0]
 8001494:	e007      	b.n	80014a6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001496:	2301      	movs	r3, #1
 8001498:	73fb      	strb	r3, [r7, #15]
 800149a:	e004      	b.n	80014a6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800149c:	2301      	movs	r3, #1
 800149e:	73fb      	strb	r3, [r7, #15]
 80014a0:	e001      	b.n	80014a6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80014a2:	2301      	movs	r3, #1
 80014a4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80014a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	3710      	adds	r7, #16
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	20000008 	.word	0x20000008
 80014b4:	20000000 	.word	0x20000000
 80014b8:	20000004 	.word	0x20000004

080014bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014c0:	4b05      	ldr	r3, [pc, #20]	@ (80014d8 <HAL_IncTick+0x1c>)
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	4b05      	ldr	r3, [pc, #20]	@ (80014dc <HAL_IncTick+0x20>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4413      	add	r3, r2
 80014ca:	4a03      	ldr	r2, [pc, #12]	@ (80014d8 <HAL_IncTick+0x1c>)
 80014cc:	6013      	str	r3, [r2, #0]
}
 80014ce:	bf00      	nop
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr
 80014d8:	20000314 	.word	0x20000314
 80014dc:	20000008 	.word	0x20000008

080014e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  return uwTick;
 80014e4:	4b03      	ldr	r3, [pc, #12]	@ (80014f4 <HAL_GetTick+0x14>)
 80014e6:	681b      	ldr	r3, [r3, #0]
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	20000314 	.word	0x20000314

080014f8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
 8001500:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	431a      	orrs	r2, r3
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	609a      	str	r2, [r3, #8]
}
 8001512:	bf00      	nop
 8001514:	370c      	adds	r7, #12
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr

0800151e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800151e:	b480      	push	{r7}
 8001520:	b083      	sub	sp, #12
 8001522:	af00      	add	r7, sp, #0
 8001524:	6078      	str	r0, [r7, #4]
 8001526:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	431a      	orrs	r2, r3
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	609a      	str	r2, [r3, #8]
}
 8001538:	bf00      	nop
 800153a:	370c      	adds	r7, #12
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr

08001544 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	689b      	ldr	r3, [r3, #8]
 8001550:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001554:	4618      	mov	r0, r3
 8001556:	370c      	adds	r7, #12
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr

08001560 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001560:	b480      	push	{r7}
 8001562:	b087      	sub	sp, #28
 8001564:	af00      	add	r7, sp, #0
 8001566:	60f8      	str	r0, [r7, #12]
 8001568:	60b9      	str	r1, [r7, #8]
 800156a:	607a      	str	r2, [r7, #4]
 800156c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	3360      	adds	r3, #96	@ 0x60
 8001572:	461a      	mov	r2, r3
 8001574:	68bb      	ldr	r3, [r7, #8]
 8001576:	009b      	lsls	r3, r3, #2
 8001578:	4413      	add	r3, r2
 800157a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	4b08      	ldr	r3, [pc, #32]	@ (80015a4 <LL_ADC_SetOffset+0x44>)
 8001582:	4013      	ands	r3, r2
 8001584:	687a      	ldr	r2, [r7, #4]
 8001586:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800158a:	683a      	ldr	r2, [r7, #0]
 800158c:	430a      	orrs	r2, r1
 800158e:	4313      	orrs	r3, r2
 8001590:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001598:	bf00      	nop
 800159a:	371c      	adds	r7, #28
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr
 80015a4:	03fff000 	.word	0x03fff000

080015a8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b085      	sub	sp, #20
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
 80015b0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	3360      	adds	r3, #96	@ 0x60
 80015b6:	461a      	mov	r2, r3
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	009b      	lsls	r3, r3, #2
 80015bc:	4413      	add	r3, r2
 80015be:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	3714      	adds	r7, #20
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr

080015d4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b087      	sub	sp, #28
 80015d8:	af00      	add	r7, sp, #0
 80015da:	60f8      	str	r0, [r7, #12]
 80015dc:	60b9      	str	r1, [r7, #8]
 80015de:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	3360      	adds	r3, #96	@ 0x60
 80015e4:	461a      	mov	r2, r3
 80015e6:	68bb      	ldr	r3, [r7, #8]
 80015e8:	009b      	lsls	r3, r3, #2
 80015ea:	4413      	add	r3, r2
 80015ec:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	431a      	orrs	r2, r3
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80015fe:	bf00      	nop
 8001600:	371c      	adds	r7, #28
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr

0800160a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800160a:	b480      	push	{r7}
 800160c:	b087      	sub	sp, #28
 800160e:	af00      	add	r7, sp, #0
 8001610:	60f8      	str	r0, [r7, #12]
 8001612:	60b9      	str	r1, [r7, #8]
 8001614:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	3360      	adds	r3, #96	@ 0x60
 800161a:	461a      	mov	r2, r3
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	009b      	lsls	r3, r3, #2
 8001620:	4413      	add	r3, r2
 8001622:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	431a      	orrs	r2, r3
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001634:	bf00      	nop
 8001636:	371c      	adds	r7, #28
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr

08001640 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001640:	b480      	push	{r7}
 8001642:	b087      	sub	sp, #28
 8001644:	af00      	add	r7, sp, #0
 8001646:	60f8      	str	r0, [r7, #12]
 8001648:	60b9      	str	r1, [r7, #8]
 800164a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	3360      	adds	r3, #96	@ 0x60
 8001650:	461a      	mov	r2, r3
 8001652:	68bb      	ldr	r3, [r7, #8]
 8001654:	009b      	lsls	r3, r3, #2
 8001656:	4413      	add	r3, r2
 8001658:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	431a      	orrs	r2, r3
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800166a:	bf00      	nop
 800166c:	371c      	adds	r7, #28
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr

08001676 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001676:	b480      	push	{r7}
 8001678:	b083      	sub	sp, #12
 800167a:	af00      	add	r7, sp, #0
 800167c:	6078      	str	r0, [r7, #4]
 800167e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	695b      	ldr	r3, [r3, #20]
 8001684:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	431a      	orrs	r2, r3
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	615a      	str	r2, [r3, #20]
}
 8001690:	bf00      	nop
 8001692:	370c      	adds	r7, #12
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr

0800169c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	68db      	ldr	r3, [r3, #12]
 80016a8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d101      	bne.n	80016b4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80016b0:	2301      	movs	r3, #1
 80016b2:	e000      	b.n	80016b6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80016b4:	2300      	movs	r3, #0
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	370c      	adds	r7, #12
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr

080016c2 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80016c2:	b480      	push	{r7}
 80016c4:	b087      	sub	sp, #28
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	60f8      	str	r0, [r7, #12]
 80016ca:	60b9      	str	r1, [r7, #8]
 80016cc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	3330      	adds	r3, #48	@ 0x30
 80016d2:	461a      	mov	r2, r3
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	0a1b      	lsrs	r3, r3, #8
 80016d8:	009b      	lsls	r3, r3, #2
 80016da:	f003 030c 	and.w	r3, r3, #12
 80016de:	4413      	add	r3, r2
 80016e0:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	68bb      	ldr	r3, [r7, #8]
 80016e8:	f003 031f 	and.w	r3, r3, #31
 80016ec:	211f      	movs	r1, #31
 80016ee:	fa01 f303 	lsl.w	r3, r1, r3
 80016f2:	43db      	mvns	r3, r3
 80016f4:	401a      	ands	r2, r3
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	0e9b      	lsrs	r3, r3, #26
 80016fa:	f003 011f 	and.w	r1, r3, #31
 80016fe:	68bb      	ldr	r3, [r7, #8]
 8001700:	f003 031f 	and.w	r3, r3, #31
 8001704:	fa01 f303 	lsl.w	r3, r1, r3
 8001708:	431a      	orrs	r2, r3
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800170e:	bf00      	nop
 8001710:	371c      	adds	r7, #28
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr

0800171a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800171a:	b480      	push	{r7}
 800171c:	b087      	sub	sp, #28
 800171e:	af00      	add	r7, sp, #0
 8001720:	60f8      	str	r0, [r7, #12]
 8001722:	60b9      	str	r1, [r7, #8]
 8001724:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	3314      	adds	r3, #20
 800172a:	461a      	mov	r2, r3
 800172c:	68bb      	ldr	r3, [r7, #8]
 800172e:	0e5b      	lsrs	r3, r3, #25
 8001730:	009b      	lsls	r3, r3, #2
 8001732:	f003 0304 	and.w	r3, r3, #4
 8001736:	4413      	add	r3, r2
 8001738:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	68bb      	ldr	r3, [r7, #8]
 8001740:	0d1b      	lsrs	r3, r3, #20
 8001742:	f003 031f 	and.w	r3, r3, #31
 8001746:	2107      	movs	r1, #7
 8001748:	fa01 f303 	lsl.w	r3, r1, r3
 800174c:	43db      	mvns	r3, r3
 800174e:	401a      	ands	r2, r3
 8001750:	68bb      	ldr	r3, [r7, #8]
 8001752:	0d1b      	lsrs	r3, r3, #20
 8001754:	f003 031f 	and.w	r3, r3, #31
 8001758:	6879      	ldr	r1, [r7, #4]
 800175a:	fa01 f303 	lsl.w	r3, r1, r3
 800175e:	431a      	orrs	r2, r3
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001764:	bf00      	nop
 8001766:	371c      	adds	r7, #28
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr

08001770 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001770:	b480      	push	{r7}
 8001772:	b085      	sub	sp, #20
 8001774:	af00      	add	r7, sp, #0
 8001776:	60f8      	str	r0, [r7, #12]
 8001778:	60b9      	str	r1, [r7, #8]
 800177a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001782:	68bb      	ldr	r3, [r7, #8]
 8001784:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001788:	43db      	mvns	r3, r3
 800178a:	401a      	ands	r2, r3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	f003 0318 	and.w	r3, r3, #24
 8001792:	4908      	ldr	r1, [pc, #32]	@ (80017b4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001794:	40d9      	lsrs	r1, r3
 8001796:	68bb      	ldr	r3, [r7, #8]
 8001798:	400b      	ands	r3, r1
 800179a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800179e:	431a      	orrs	r2, r3
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80017a6:	bf00      	nop
 80017a8:	3714      	adds	r7, #20
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	0007ffff 	.word	0x0007ffff

080017b8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	f003 031f 	and.w	r3, r3, #31
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	370c      	adds	r7, #12
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr

080017d4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b083      	sub	sp, #12
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80017e4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80017e8:	687a      	ldr	r2, [r7, #4]
 80017ea:	6093      	str	r3, [r2, #8]
}
 80017ec:	bf00      	nop
 80017ee:	370c      	adds	r7, #12
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr

080017f8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001808:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800180c:	d101      	bne.n	8001812 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800180e:	2301      	movs	r3, #1
 8001810:	e000      	b.n	8001814 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001812:	2300      	movs	r3, #0
}
 8001814:	4618      	mov	r0, r3
 8001816:	370c      	adds	r7, #12
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr

08001820 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001830:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001834:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800183c:	bf00      	nop
 800183e:	370c      	adds	r7, #12
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr

08001848 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001848:	b480      	push	{r7}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001858:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800185c:	d101      	bne.n	8001862 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800185e:	2301      	movs	r3, #1
 8001860:	e000      	b.n	8001864 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001862:	2300      	movs	r3, #0
}
 8001864:	4618      	mov	r0, r3
 8001866:	370c      	adds	r7, #12
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr

08001870 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001870:	b480      	push	{r7}
 8001872:	b083      	sub	sp, #12
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001880:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001884:	f043 0201 	orr.w	r2, r3, #1
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800188c:	bf00      	nop
 800188e:	370c      	adds	r7, #12
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr

08001898 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80018a8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80018ac:	f043 0202 	orr.w	r2, r3, #2
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80018b4:	bf00      	nop
 80018b6:	370c      	adds	r7, #12
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr

080018c0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	f003 0301 	and.w	r3, r3, #1
 80018d0:	2b01      	cmp	r3, #1
 80018d2:	d101      	bne.n	80018d8 <LL_ADC_IsEnabled+0x18>
 80018d4:	2301      	movs	r3, #1
 80018d6:	e000      	b.n	80018da <LL_ADC_IsEnabled+0x1a>
 80018d8:	2300      	movs	r3, #0
}
 80018da:	4618      	mov	r0, r3
 80018dc:	370c      	adds	r7, #12
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr

080018e6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80018e6:	b480      	push	{r7}
 80018e8:	b083      	sub	sp, #12
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	689b      	ldr	r3, [r3, #8]
 80018f2:	f003 0302 	and.w	r3, r3, #2
 80018f6:	2b02      	cmp	r3, #2
 80018f8:	d101      	bne.n	80018fe <LL_ADC_IsDisableOngoing+0x18>
 80018fa:	2301      	movs	r3, #1
 80018fc:	e000      	b.n	8001900 <LL_ADC_IsDisableOngoing+0x1a>
 80018fe:	2300      	movs	r3, #0
}
 8001900:	4618      	mov	r0, r3
 8001902:	370c      	adds	r7, #12
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr

0800190c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800191c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001920:	f043 0204 	orr.w	r2, r3, #4
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001928:	bf00      	nop
 800192a:	370c      	adds	r7, #12
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr

08001934 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001944:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001948:	f043 0210 	orr.w	r2, r3, #16
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001950:	bf00      	nop
 8001952:	370c      	adds	r7, #12
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr

0800195c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	f003 0304 	and.w	r3, r3, #4
 800196c:	2b04      	cmp	r3, #4
 800196e:	d101      	bne.n	8001974 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001970:	2301      	movs	r3, #1
 8001972:	e000      	b.n	8001976 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001974:	2300      	movs	r3, #0
}
 8001976:	4618      	mov	r0, r3
 8001978:	370c      	adds	r7, #12
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr

08001982 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8001982:	b480      	push	{r7}
 8001984:	b083      	sub	sp, #12
 8001986:	af00      	add	r7, sp, #0
 8001988:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001992:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001996:	f043 0220 	orr.w	r2, r3, #32
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 800199e:	bf00      	nop
 80019a0:	370c      	adds	r7, #12
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr

080019aa <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80019aa:	b480      	push	{r7}
 80019ac:	b083      	sub	sp, #12
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	f003 0308 	and.w	r3, r3, #8
 80019ba:	2b08      	cmp	r3, #8
 80019bc:	d101      	bne.n	80019c2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80019be:	2301      	movs	r3, #1
 80019c0:	e000      	b.n	80019c4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80019c2:	2300      	movs	r3, #0
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	370c      	adds	r7, #12
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr

080019d0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80019d0:	b590      	push	{r4, r7, lr}
 80019d2:	b089      	sub	sp, #36	@ 0x24
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019d8:	2300      	movs	r3, #0
 80019da:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80019dc:	2300      	movs	r3, #0
 80019de:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d101      	bne.n	80019ea <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e1a9      	b.n	8001d3e <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	695b      	ldr	r3, [r3, #20]
 80019ee:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d109      	bne.n	8001a0c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80019f8:	6878      	ldr	r0, [r7, #4]
 80019fa:	f7fe ff79 	bl	80008f0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2200      	movs	r2, #0
 8001a02:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2200      	movs	r2, #0
 8001a08:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4618      	mov	r0, r3
 8001a12:	f7ff fef1 	bl	80017f8 <LL_ADC_IsDeepPowerDownEnabled>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d004      	beq.n	8001a26 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4618      	mov	r0, r3
 8001a22:	f7ff fed7 	bl	80017d4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f7ff ff0c 	bl	8001848 <LL_ADC_IsInternalRegulatorEnabled>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d115      	bne.n	8001a62 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f7ff fef0 	bl	8001820 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001a40:	4b9c      	ldr	r3, [pc, #624]	@ (8001cb4 <HAL_ADC_Init+0x2e4>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	099b      	lsrs	r3, r3, #6
 8001a46:	4a9c      	ldr	r2, [pc, #624]	@ (8001cb8 <HAL_ADC_Init+0x2e8>)
 8001a48:	fba2 2303 	umull	r2, r3, r2, r3
 8001a4c:	099b      	lsrs	r3, r3, #6
 8001a4e:	3301      	adds	r3, #1
 8001a50:	005b      	lsls	r3, r3, #1
 8001a52:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001a54:	e002      	b.n	8001a5c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	3b01      	subs	r3, #1
 8001a5a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d1f9      	bne.n	8001a56 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4618      	mov	r0, r3
 8001a68:	f7ff feee 	bl	8001848 <LL_ADC_IsInternalRegulatorEnabled>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d10d      	bne.n	8001a8e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a76:	f043 0210 	orr.w	r2, r3, #16
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a82:	f043 0201 	orr.w	r2, r3, #1
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4618      	mov	r0, r3
 8001a94:	f7ff ff62 	bl	800195c <LL_ADC_REG_IsConversionOngoing>
 8001a98:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a9e:	f003 0310 	and.w	r3, r3, #16
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	f040 8142 	bne.w	8001d2c <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	f040 813e 	bne.w	8001d2c <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ab4:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001ab8:	f043 0202 	orr.w	r2, r3, #2
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f7ff fefb 	bl	80018c0 <LL_ADC_IsEnabled>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d141      	bne.n	8001b54 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001ad8:	d004      	beq.n	8001ae4 <HAL_ADC_Init+0x114>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a77      	ldr	r2, [pc, #476]	@ (8001cbc <HAL_ADC_Init+0x2ec>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d10f      	bne.n	8001b04 <HAL_ADC_Init+0x134>
 8001ae4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8001ae8:	f7ff feea 	bl	80018c0 <LL_ADC_IsEnabled>
 8001aec:	4604      	mov	r4, r0
 8001aee:	4873      	ldr	r0, [pc, #460]	@ (8001cbc <HAL_ADC_Init+0x2ec>)
 8001af0:	f7ff fee6 	bl	80018c0 <LL_ADC_IsEnabled>
 8001af4:	4603      	mov	r3, r0
 8001af6:	4323      	orrs	r3, r4
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	bf0c      	ite	eq
 8001afc:	2301      	moveq	r3, #1
 8001afe:	2300      	movne	r3, #0
 8001b00:	b2db      	uxtb	r3, r3
 8001b02:	e012      	b.n	8001b2a <HAL_ADC_Init+0x15a>
 8001b04:	486e      	ldr	r0, [pc, #440]	@ (8001cc0 <HAL_ADC_Init+0x2f0>)
 8001b06:	f7ff fedb 	bl	80018c0 <LL_ADC_IsEnabled>
 8001b0a:	4604      	mov	r4, r0
 8001b0c:	486d      	ldr	r0, [pc, #436]	@ (8001cc4 <HAL_ADC_Init+0x2f4>)
 8001b0e:	f7ff fed7 	bl	80018c0 <LL_ADC_IsEnabled>
 8001b12:	4603      	mov	r3, r0
 8001b14:	431c      	orrs	r4, r3
 8001b16:	486c      	ldr	r0, [pc, #432]	@ (8001cc8 <HAL_ADC_Init+0x2f8>)
 8001b18:	f7ff fed2 	bl	80018c0 <LL_ADC_IsEnabled>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	4323      	orrs	r3, r4
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	bf0c      	ite	eq
 8001b24:	2301      	moveq	r3, #1
 8001b26:	2300      	movne	r3, #0
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d012      	beq.n	8001b54 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001b36:	d004      	beq.n	8001b42 <HAL_ADC_Init+0x172>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a5f      	ldr	r2, [pc, #380]	@ (8001cbc <HAL_ADC_Init+0x2ec>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d101      	bne.n	8001b46 <HAL_ADC_Init+0x176>
 8001b42:	4a62      	ldr	r2, [pc, #392]	@ (8001ccc <HAL_ADC_Init+0x2fc>)
 8001b44:	e000      	b.n	8001b48 <HAL_ADC_Init+0x178>
 8001b46:	4a62      	ldr	r2, [pc, #392]	@ (8001cd0 <HAL_ADC_Init+0x300>)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	4610      	mov	r0, r2
 8001b50:	f7ff fcd2 	bl	80014f8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	7f5b      	ldrb	r3, [r3, #29]
 8001b58:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b5e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001b64:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001b6a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001b72:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b74:	4313      	orrs	r3, r2
 8001b76:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001b7e:	2b01      	cmp	r3, #1
 8001b80:	d106      	bne.n	8001b90 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b86:	3b01      	subs	r3, #1
 8001b88:	045b      	lsls	r3, r3, #17
 8001b8a:	69ba      	ldr	r2, [r7, #24]
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d009      	beq.n	8001bac <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b9c:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ba4:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001ba6:	69ba      	ldr	r2, [r7, #24]
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	68da      	ldr	r2, [r3, #12]
 8001bb2:	4b48      	ldr	r3, [pc, #288]	@ (8001cd4 <HAL_ADC_Init+0x304>)
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	687a      	ldr	r2, [r7, #4]
 8001bb8:	6812      	ldr	r2, [r2, #0]
 8001bba:	69b9      	ldr	r1, [r7, #24]
 8001bbc:	430b      	orrs	r3, r1
 8001bbe:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	691b      	ldr	r3, [r3, #16]
 8001bc6:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	430a      	orrs	r2, r1
 8001bd4:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f7ff fee5 	bl	80019aa <LL_ADC_INJ_IsConversionOngoing>
 8001be0:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d17f      	bne.n	8001ce8 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d17c      	bne.n	8001ce8 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001bf2:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001bfa:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	68db      	ldr	r3, [r3, #12]
 8001c06:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001c0a:	f023 0302 	bic.w	r3, r3, #2
 8001c0e:	687a      	ldr	r2, [r7, #4]
 8001c10:	6812      	ldr	r2, [r2, #0]
 8001c12:	69b9      	ldr	r1, [r7, #24]
 8001c14:	430b      	orrs	r3, r1
 8001c16:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	691b      	ldr	r3, [r3, #16]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d017      	beq.n	8001c50 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	691a      	ldr	r2, [r3, #16]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001c2e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001c38:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001c3c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001c40:	687a      	ldr	r2, [r7, #4]
 8001c42:	6911      	ldr	r1, [r2, #16]
 8001c44:	687a      	ldr	r2, [r7, #4]
 8001c46:	6812      	ldr	r2, [r2, #0]
 8001c48:	430b      	orrs	r3, r1
 8001c4a:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8001c4e:	e013      	b.n	8001c78 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	691a      	ldr	r2, [r3, #16]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001c5e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001c68:	687a      	ldr	r2, [r7, #4]
 8001c6a:	6812      	ldr	r2, [r2, #0]
 8001c6c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001c70:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001c74:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001c7e:	2b01      	cmp	r3, #1
 8001c80:	d12a      	bne.n	8001cd8 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	691b      	ldr	r3, [r3, #16]
 8001c88:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001c8c:	f023 0304 	bic.w	r3, r3, #4
 8001c90:	687a      	ldr	r2, [r7, #4]
 8001c92:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8001c94:	687a      	ldr	r2, [r7, #4]
 8001c96:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001c98:	4311      	orrs	r1, r2
 8001c9a:	687a      	ldr	r2, [r7, #4]
 8001c9c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001c9e:	4311      	orrs	r1, r2
 8001ca0:	687a      	ldr	r2, [r7, #4]
 8001ca2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001ca4:	430a      	orrs	r2, r1
 8001ca6:	431a      	orrs	r2, r3
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f042 0201 	orr.w	r2, r2, #1
 8001cb0:	611a      	str	r2, [r3, #16]
 8001cb2:	e019      	b.n	8001ce8 <HAL_ADC_Init+0x318>
 8001cb4:	20000000 	.word	0x20000000
 8001cb8:	053e2d63 	.word	0x053e2d63
 8001cbc:	50000100 	.word	0x50000100
 8001cc0:	50000400 	.word	0x50000400
 8001cc4:	50000500 	.word	0x50000500
 8001cc8:	50000600 	.word	0x50000600
 8001ccc:	50000300 	.word	0x50000300
 8001cd0:	50000700 	.word	0x50000700
 8001cd4:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	691a      	ldr	r2, [r3, #16]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f022 0201 	bic.w	r2, r2, #1
 8001ce6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	695b      	ldr	r3, [r3, #20]
 8001cec:	2b01      	cmp	r3, #1
 8001cee:	d10c      	bne.n	8001d0a <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cf6:	f023 010f 	bic.w	r1, r3, #15
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6a1b      	ldr	r3, [r3, #32]
 8001cfe:	1e5a      	subs	r2, r3, #1
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	430a      	orrs	r2, r1
 8001d06:	631a      	str	r2, [r3, #48]	@ 0x30
 8001d08:	e007      	b.n	8001d1a <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f022 020f 	bic.w	r2, r2, #15
 8001d18:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d1e:	f023 0303 	bic.w	r3, r3, #3
 8001d22:	f043 0201 	orr.w	r2, r3, #1
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001d2a:	e007      	b.n	8001d3c <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d30:	f043 0210 	orr.w	r2, r3, #16
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001d3c:	7ffb      	ldrb	r3, [r7, #31]
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3724      	adds	r7, #36	@ 0x24
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd90      	pop	{r4, r7, pc}
 8001d46:	bf00      	nop

08001d48 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b086      	sub	sp, #24
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	60f8      	str	r0, [r7, #12]
 8001d50:	60b9      	str	r1, [r7, #8]
 8001d52:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001d5c:	d004      	beq.n	8001d68 <HAL_ADC_Start_DMA+0x20>
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a5a      	ldr	r2, [pc, #360]	@ (8001ecc <HAL_ADC_Start_DMA+0x184>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d101      	bne.n	8001d6c <HAL_ADC_Start_DMA+0x24>
 8001d68:	4b59      	ldr	r3, [pc, #356]	@ (8001ed0 <HAL_ADC_Start_DMA+0x188>)
 8001d6a:	e000      	b.n	8001d6e <HAL_ADC_Start_DMA+0x26>
 8001d6c:	4b59      	ldr	r3, [pc, #356]	@ (8001ed4 <HAL_ADC_Start_DMA+0x18c>)
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f7ff fd22 	bl	80017b8 <LL_ADC_GetMultimode>
 8001d74:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f7ff fdee 	bl	800195c <LL_ADC_REG_IsConversionOngoing>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	f040 809b 	bne.w	8001ebe <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001d8e:	2b01      	cmp	r3, #1
 8001d90:	d101      	bne.n	8001d96 <HAL_ADC_Start_DMA+0x4e>
 8001d92:	2302      	movs	r3, #2
 8001d94:	e096      	b.n	8001ec4 <HAL_ADC_Start_DMA+0x17c>
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	2201      	movs	r2, #1
 8001d9a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a4d      	ldr	r2, [pc, #308]	@ (8001ed8 <HAL_ADC_Start_DMA+0x190>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d008      	beq.n	8001dba <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d005      	beq.n	8001dba <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	2b05      	cmp	r3, #5
 8001db2:	d002      	beq.n	8001dba <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	2b09      	cmp	r3, #9
 8001db8:	d17a      	bne.n	8001eb0 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001dba:	68f8      	ldr	r0, [r7, #12]
 8001dbc:	f000 fe0a 	bl	80029d4 <ADC_Enable>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001dc4:	7dfb      	ldrb	r3, [r7, #23]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d16d      	bne.n	8001ea6 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dce:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001dd2:	f023 0301 	bic.w	r3, r3, #1
 8001dd6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a3a      	ldr	r2, [pc, #232]	@ (8001ecc <HAL_ADC_Start_DMA+0x184>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d009      	beq.n	8001dfc <HAL_ADC_Start_DMA+0xb4>
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a3b      	ldr	r2, [pc, #236]	@ (8001edc <HAL_ADC_Start_DMA+0x194>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d002      	beq.n	8001df8 <HAL_ADC_Start_DMA+0xb0>
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	e003      	b.n	8001e00 <HAL_ADC_Start_DMA+0xb8>
 8001df8:	4b39      	ldr	r3, [pc, #228]	@ (8001ee0 <HAL_ADC_Start_DMA+0x198>)
 8001dfa:	e001      	b.n	8001e00 <HAL_ADC_Start_DMA+0xb8>
 8001dfc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001e00:	68fa      	ldr	r2, [r7, #12]
 8001e02:	6812      	ldr	r2, [r2, #0]
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d002      	beq.n	8001e0e <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d105      	bne.n	8001e1a <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e12:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e1e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d006      	beq.n	8001e34 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e2a:	f023 0206 	bic.w	r2, r3, #6
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	661a      	str	r2, [r3, #96]	@ 0x60
 8001e32:	e002      	b.n	8001e3a <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	2200      	movs	r2, #0
 8001e38:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e3e:	4a29      	ldr	r2, [pc, #164]	@ (8001ee4 <HAL_ADC_Start_DMA+0x19c>)
 8001e40:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e46:	4a28      	ldr	r2, [pc, #160]	@ (8001ee8 <HAL_ADC_Start_DMA+0x1a0>)
 8001e48:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e4e:	4a27      	ldr	r2, [pc, #156]	@ (8001eec <HAL_ADC_Start_DMA+0x1a4>)
 8001e50:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	221c      	movs	r2, #28
 8001e58:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	685a      	ldr	r2, [r3, #4]
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f042 0210 	orr.w	r2, r2, #16
 8001e70:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	68da      	ldr	r2, [r3, #12]
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f042 0201 	orr.w	r2, r2, #1
 8001e80:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	3340      	adds	r3, #64	@ 0x40
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	68ba      	ldr	r2, [r7, #8]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	f001 fa0f 	bl	80032b4 <HAL_DMA_Start_IT>
 8001e96:	4603      	mov	r3, r0
 8001e98:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f7ff fd34 	bl	800190c <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8001ea4:	e00d      	b.n	8001ec2 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8001eae:	e008      	b.n	8001ec2 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8001ebc:	e001      	b.n	8001ec2 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001ebe:	2302      	movs	r3, #2
 8001ec0:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001ec2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3718      	adds	r7, #24
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	50000100 	.word	0x50000100
 8001ed0:	50000300 	.word	0x50000300
 8001ed4:	50000700 	.word	0x50000700
 8001ed8:	50000600 	.word	0x50000600
 8001edc:	50000500 	.word	0x50000500
 8001ee0:	50000400 	.word	0x50000400
 8001ee4:	08002bbf 	.word	0x08002bbf
 8001ee8:	08002c97 	.word	0x08002c97
 8001eec:	08002cb3 	.word	0x08002cb3

08001ef0 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b084      	sub	sp, #16
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001efe:	2b01      	cmp	r3, #1
 8001f00:	d101      	bne.n	8001f06 <HAL_ADC_Stop_DMA+0x16>
 8001f02:	2302      	movs	r3, #2
 8001f04:	e051      	b.n	8001faa <HAL_ADC_Stop_DMA+0xba>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2201      	movs	r2, #1
 8001f0a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001f0e:	2103      	movs	r1, #3
 8001f10:	6878      	ldr	r0, [r7, #4]
 8001f12:	f000 fca3 	bl	800285c <ADC_ConversionStop>
 8001f16:	4603      	mov	r3, r0
 8001f18:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001f1a:	7bfb      	ldrb	r3, [r7, #15]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d13f      	bne.n	8001fa0 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	68da      	ldr	r2, [r3, #12]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f022 0201 	bic.w	r2, r2, #1
 8001f2e:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f34:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	2b02      	cmp	r3, #2
 8001f3c:	d10f      	bne.n	8001f5e <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f42:	4618      	mov	r0, r3
 8001f44:	f001 fa31 	bl	80033aa <HAL_DMA_Abort>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8001f4c:	7bfb      	ldrb	r3, [r7, #15]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d005      	beq.n	8001f5e <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f56:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	685a      	ldr	r2, [r3, #4]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f022 0210 	bic.w	r2, r2, #16
 8001f6c:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8001f6e:	7bfb      	ldrb	r3, [r7, #15]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d105      	bne.n	8001f80 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f000 fdc3 	bl	8002b00 <ADC_Disable>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	73fb      	strb	r3, [r7, #15]
 8001f7e:	e002      	b.n	8001f86 <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8001f80:	6878      	ldr	r0, [r7, #4]
 8001f82:	f000 fdbd 	bl	8002b00 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001f86:	7bfb      	ldrb	r3, [r7, #15]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d109      	bne.n	8001fa0 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f90:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001f94:	f023 0301 	bic.w	r3, r3, #1
 8001f98:	f043 0201 	orr.w	r2, r3, #1
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8001fa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3710      	adds	r7, #16
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}

08001fb2 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001fb2:	b480      	push	{r7}
 8001fb4:	b083      	sub	sp, #12
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001fba:	bf00      	nop
 8001fbc:	370c      	adds	r7, #12
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr

08001fc6 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001fc6:	b480      	push	{r7}
 8001fc8:	b083      	sub	sp, #12
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001fce:	bf00      	nop
 8001fd0:	370c      	adds	r7, #12
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr
	...

08001fdc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b0b6      	sub	sp, #216	@ 0xd8
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
 8001fe4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001fec:	2300      	movs	r3, #0
 8001fee:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d102      	bne.n	8002000 <HAL_ADC_ConfigChannel+0x24>
 8001ffa:	2302      	movs	r3, #2
 8001ffc:	f000 bc13 	b.w	8002826 <HAL_ADC_ConfigChannel+0x84a>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2201      	movs	r2, #1
 8002004:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4618      	mov	r0, r3
 800200e:	f7ff fca5 	bl	800195c <LL_ADC_REG_IsConversionOngoing>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	f040 83f3 	bne.w	8002800 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6818      	ldr	r0, [r3, #0]
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	6859      	ldr	r1, [r3, #4]
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	461a      	mov	r2, r3
 8002028:	f7ff fb4b 	bl	80016c2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4618      	mov	r0, r3
 8002032:	f7ff fc93 	bl	800195c <LL_ADC_REG_IsConversionOngoing>
 8002036:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4618      	mov	r0, r3
 8002040:	f7ff fcb3 	bl	80019aa <LL_ADC_INJ_IsConversionOngoing>
 8002044:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002048:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800204c:	2b00      	cmp	r3, #0
 800204e:	f040 81d9 	bne.w	8002404 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002052:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002056:	2b00      	cmp	r3, #0
 8002058:	f040 81d4 	bne.w	8002404 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002064:	d10f      	bne.n	8002086 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6818      	ldr	r0, [r3, #0]
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	2200      	movs	r2, #0
 8002070:	4619      	mov	r1, r3
 8002072:	f7ff fb52 	bl	800171a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800207e:	4618      	mov	r0, r3
 8002080:	f7ff faf9 	bl	8001676 <LL_ADC_SetSamplingTimeCommonConfig>
 8002084:	e00e      	b.n	80020a4 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6818      	ldr	r0, [r3, #0]
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	6819      	ldr	r1, [r3, #0]
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	461a      	mov	r2, r3
 8002094:	f7ff fb41 	bl	800171a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	2100      	movs	r1, #0
 800209e:	4618      	mov	r0, r3
 80020a0:	f7ff fae9 	bl	8001676 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	695a      	ldr	r2, [r3, #20]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	68db      	ldr	r3, [r3, #12]
 80020ae:	08db      	lsrs	r3, r3, #3
 80020b0:	f003 0303 	and.w	r3, r3, #3
 80020b4:	005b      	lsls	r3, r3, #1
 80020b6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ba:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	691b      	ldr	r3, [r3, #16]
 80020c2:	2b04      	cmp	r3, #4
 80020c4:	d022      	beq.n	800210c <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6818      	ldr	r0, [r3, #0]
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	6919      	ldr	r1, [r3, #16]
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80020d6:	f7ff fa43 	bl	8001560 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6818      	ldr	r0, [r3, #0]
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	6919      	ldr	r1, [r3, #16]
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	699b      	ldr	r3, [r3, #24]
 80020e6:	461a      	mov	r2, r3
 80020e8:	f7ff fa8f 	bl	800160a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6818      	ldr	r0, [r3, #0]
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d102      	bne.n	8002102 <HAL_ADC_ConfigChannel+0x126>
 80020fc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002100:	e000      	b.n	8002104 <HAL_ADC_ConfigChannel+0x128>
 8002102:	2300      	movs	r3, #0
 8002104:	461a      	mov	r2, r3
 8002106:	f7ff fa9b 	bl	8001640 <LL_ADC_SetOffsetSaturation>
 800210a:	e17b      	b.n	8002404 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	2100      	movs	r1, #0
 8002112:	4618      	mov	r0, r3
 8002114:	f7ff fa48 	bl	80015a8 <LL_ADC_GetOffsetChannel>
 8002118:	4603      	mov	r3, r0
 800211a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800211e:	2b00      	cmp	r3, #0
 8002120:	d10a      	bne.n	8002138 <HAL_ADC_ConfigChannel+0x15c>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	2100      	movs	r1, #0
 8002128:	4618      	mov	r0, r3
 800212a:	f7ff fa3d 	bl	80015a8 <LL_ADC_GetOffsetChannel>
 800212e:	4603      	mov	r3, r0
 8002130:	0e9b      	lsrs	r3, r3, #26
 8002132:	f003 021f 	and.w	r2, r3, #31
 8002136:	e01e      	b.n	8002176 <HAL_ADC_ConfigChannel+0x19a>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	2100      	movs	r1, #0
 800213e:	4618      	mov	r0, r3
 8002140:	f7ff fa32 	bl	80015a8 <LL_ADC_GetOffsetChannel>
 8002144:	4603      	mov	r3, r0
 8002146:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800214a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800214e:	fa93 f3a3 	rbit	r3, r3
 8002152:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002156:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800215a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800215e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d101      	bne.n	800216a <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8002166:	2320      	movs	r3, #32
 8002168:	e004      	b.n	8002174 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800216a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800216e:	fab3 f383 	clz	r3, r3
 8002172:	b2db      	uxtb	r3, r3
 8002174:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800217e:	2b00      	cmp	r3, #0
 8002180:	d105      	bne.n	800218e <HAL_ADC_ConfigChannel+0x1b2>
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	0e9b      	lsrs	r3, r3, #26
 8002188:	f003 031f 	and.w	r3, r3, #31
 800218c:	e018      	b.n	80021c0 <HAL_ADC_ConfigChannel+0x1e4>
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002196:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800219a:	fa93 f3a3 	rbit	r3, r3
 800219e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80021a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80021a6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80021aa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d101      	bne.n	80021b6 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80021b2:	2320      	movs	r3, #32
 80021b4:	e004      	b.n	80021c0 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80021b6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80021ba:	fab3 f383 	clz	r3, r3
 80021be:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d106      	bne.n	80021d2 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	2200      	movs	r2, #0
 80021ca:	2100      	movs	r1, #0
 80021cc:	4618      	mov	r0, r3
 80021ce:	f7ff fa01 	bl	80015d4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	2101      	movs	r1, #1
 80021d8:	4618      	mov	r0, r3
 80021da:	f7ff f9e5 	bl	80015a8 <LL_ADC_GetOffsetChannel>
 80021de:	4603      	mov	r3, r0
 80021e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d10a      	bne.n	80021fe <HAL_ADC_ConfigChannel+0x222>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	2101      	movs	r1, #1
 80021ee:	4618      	mov	r0, r3
 80021f0:	f7ff f9da 	bl	80015a8 <LL_ADC_GetOffsetChannel>
 80021f4:	4603      	mov	r3, r0
 80021f6:	0e9b      	lsrs	r3, r3, #26
 80021f8:	f003 021f 	and.w	r2, r3, #31
 80021fc:	e01e      	b.n	800223c <HAL_ADC_ConfigChannel+0x260>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	2101      	movs	r1, #1
 8002204:	4618      	mov	r0, r3
 8002206:	f7ff f9cf 	bl	80015a8 <LL_ADC_GetOffsetChannel>
 800220a:	4603      	mov	r3, r0
 800220c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002210:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002214:	fa93 f3a3 	rbit	r3, r3
 8002218:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 800221c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002220:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8002224:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002228:	2b00      	cmp	r3, #0
 800222a:	d101      	bne.n	8002230 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 800222c:	2320      	movs	r3, #32
 800222e:	e004      	b.n	800223a <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002230:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002234:	fab3 f383 	clz	r3, r3
 8002238:	b2db      	uxtb	r3, r3
 800223a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002244:	2b00      	cmp	r3, #0
 8002246:	d105      	bne.n	8002254 <HAL_ADC_ConfigChannel+0x278>
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	0e9b      	lsrs	r3, r3, #26
 800224e:	f003 031f 	and.w	r3, r3, #31
 8002252:	e018      	b.n	8002286 <HAL_ADC_ConfigChannel+0x2aa>
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800225c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002260:	fa93 f3a3 	rbit	r3, r3
 8002264:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8002268:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800226c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8002270:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002274:	2b00      	cmp	r3, #0
 8002276:	d101      	bne.n	800227c <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002278:	2320      	movs	r3, #32
 800227a:	e004      	b.n	8002286 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 800227c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002280:	fab3 f383 	clz	r3, r3
 8002284:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002286:	429a      	cmp	r2, r3
 8002288:	d106      	bne.n	8002298 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	2200      	movs	r2, #0
 8002290:	2101      	movs	r1, #1
 8002292:	4618      	mov	r0, r3
 8002294:	f7ff f99e 	bl	80015d4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	2102      	movs	r1, #2
 800229e:	4618      	mov	r0, r3
 80022a0:	f7ff f982 	bl	80015a8 <LL_ADC_GetOffsetChannel>
 80022a4:	4603      	mov	r3, r0
 80022a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d10a      	bne.n	80022c4 <HAL_ADC_ConfigChannel+0x2e8>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	2102      	movs	r1, #2
 80022b4:	4618      	mov	r0, r3
 80022b6:	f7ff f977 	bl	80015a8 <LL_ADC_GetOffsetChannel>
 80022ba:	4603      	mov	r3, r0
 80022bc:	0e9b      	lsrs	r3, r3, #26
 80022be:	f003 021f 	and.w	r2, r3, #31
 80022c2:	e01e      	b.n	8002302 <HAL_ADC_ConfigChannel+0x326>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	2102      	movs	r1, #2
 80022ca:	4618      	mov	r0, r3
 80022cc:	f7ff f96c 	bl	80015a8 <LL_ADC_GetOffsetChannel>
 80022d0:	4603      	mov	r3, r0
 80022d2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80022da:	fa93 f3a3 	rbit	r3, r3
 80022de:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80022e2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80022e6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80022ea:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d101      	bne.n	80022f6 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80022f2:	2320      	movs	r3, #32
 80022f4:	e004      	b.n	8002300 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80022f6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80022fa:	fab3 f383 	clz	r3, r3
 80022fe:	b2db      	uxtb	r3, r3
 8002300:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800230a:	2b00      	cmp	r3, #0
 800230c:	d105      	bne.n	800231a <HAL_ADC_ConfigChannel+0x33e>
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	0e9b      	lsrs	r3, r3, #26
 8002314:	f003 031f 	and.w	r3, r3, #31
 8002318:	e016      	b.n	8002348 <HAL_ADC_ConfigChannel+0x36c>
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002322:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002326:	fa93 f3a3 	rbit	r3, r3
 800232a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 800232c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800232e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8002332:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002336:	2b00      	cmp	r3, #0
 8002338:	d101      	bne.n	800233e <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800233a:	2320      	movs	r3, #32
 800233c:	e004      	b.n	8002348 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800233e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002342:	fab3 f383 	clz	r3, r3
 8002346:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002348:	429a      	cmp	r2, r3
 800234a:	d106      	bne.n	800235a <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	2200      	movs	r2, #0
 8002352:	2102      	movs	r1, #2
 8002354:	4618      	mov	r0, r3
 8002356:	f7ff f93d 	bl	80015d4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	2103      	movs	r1, #3
 8002360:	4618      	mov	r0, r3
 8002362:	f7ff f921 	bl	80015a8 <LL_ADC_GetOffsetChannel>
 8002366:	4603      	mov	r3, r0
 8002368:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800236c:	2b00      	cmp	r3, #0
 800236e:	d10a      	bne.n	8002386 <HAL_ADC_ConfigChannel+0x3aa>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	2103      	movs	r1, #3
 8002376:	4618      	mov	r0, r3
 8002378:	f7ff f916 	bl	80015a8 <LL_ADC_GetOffsetChannel>
 800237c:	4603      	mov	r3, r0
 800237e:	0e9b      	lsrs	r3, r3, #26
 8002380:	f003 021f 	and.w	r2, r3, #31
 8002384:	e017      	b.n	80023b6 <HAL_ADC_ConfigChannel+0x3da>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	2103      	movs	r1, #3
 800238c:	4618      	mov	r0, r3
 800238e:	f7ff f90b 	bl	80015a8 <LL_ADC_GetOffsetChannel>
 8002392:	4603      	mov	r3, r0
 8002394:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002396:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002398:	fa93 f3a3 	rbit	r3, r3
 800239c:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800239e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80023a0:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80023a2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d101      	bne.n	80023ac <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80023a8:	2320      	movs	r3, #32
 80023aa:	e003      	b.n	80023b4 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80023ac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80023ae:	fab3 f383 	clz	r3, r3
 80023b2:	b2db      	uxtb	r3, r3
 80023b4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d105      	bne.n	80023ce <HAL_ADC_ConfigChannel+0x3f2>
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	0e9b      	lsrs	r3, r3, #26
 80023c8:	f003 031f 	and.w	r3, r3, #31
 80023cc:	e011      	b.n	80023f2 <HAL_ADC_ConfigChannel+0x416>
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023d4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80023d6:	fa93 f3a3 	rbit	r3, r3
 80023da:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80023dc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80023de:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80023e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d101      	bne.n	80023ea <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80023e6:	2320      	movs	r3, #32
 80023e8:	e003      	b.n	80023f2 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80023ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80023ec:	fab3 f383 	clz	r3, r3
 80023f0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80023f2:	429a      	cmp	r2, r3
 80023f4:	d106      	bne.n	8002404 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	2200      	movs	r2, #0
 80023fc:	2103      	movs	r1, #3
 80023fe:	4618      	mov	r0, r3
 8002400:	f7ff f8e8 	bl	80015d4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4618      	mov	r0, r3
 800240a:	f7ff fa59 	bl	80018c0 <LL_ADC_IsEnabled>
 800240e:	4603      	mov	r3, r0
 8002410:	2b00      	cmp	r3, #0
 8002412:	f040 813d 	bne.w	8002690 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6818      	ldr	r0, [r3, #0]
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	6819      	ldr	r1, [r3, #0]
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	68db      	ldr	r3, [r3, #12]
 8002422:	461a      	mov	r2, r3
 8002424:	f7ff f9a4 	bl	8001770 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	4aa2      	ldr	r2, [pc, #648]	@ (80026b8 <HAL_ADC_ConfigChannel+0x6dc>)
 800242e:	4293      	cmp	r3, r2
 8002430:	f040 812e 	bne.w	8002690 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002440:	2b00      	cmp	r3, #0
 8002442:	d10b      	bne.n	800245c <HAL_ADC_ConfigChannel+0x480>
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	0e9b      	lsrs	r3, r3, #26
 800244a:	3301      	adds	r3, #1
 800244c:	f003 031f 	and.w	r3, r3, #31
 8002450:	2b09      	cmp	r3, #9
 8002452:	bf94      	ite	ls
 8002454:	2301      	movls	r3, #1
 8002456:	2300      	movhi	r3, #0
 8002458:	b2db      	uxtb	r3, r3
 800245a:	e019      	b.n	8002490 <HAL_ADC_ConfigChannel+0x4b4>
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002462:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002464:	fa93 f3a3 	rbit	r3, r3
 8002468:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800246a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800246c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800246e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002470:	2b00      	cmp	r3, #0
 8002472:	d101      	bne.n	8002478 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002474:	2320      	movs	r3, #32
 8002476:	e003      	b.n	8002480 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002478:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800247a:	fab3 f383 	clz	r3, r3
 800247e:	b2db      	uxtb	r3, r3
 8002480:	3301      	adds	r3, #1
 8002482:	f003 031f 	and.w	r3, r3, #31
 8002486:	2b09      	cmp	r3, #9
 8002488:	bf94      	ite	ls
 800248a:	2301      	movls	r3, #1
 800248c:	2300      	movhi	r3, #0
 800248e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002490:	2b00      	cmp	r3, #0
 8002492:	d079      	beq.n	8002588 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800249c:	2b00      	cmp	r3, #0
 800249e:	d107      	bne.n	80024b0 <HAL_ADC_ConfigChannel+0x4d4>
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	0e9b      	lsrs	r3, r3, #26
 80024a6:	3301      	adds	r3, #1
 80024a8:	069b      	lsls	r3, r3, #26
 80024aa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80024ae:	e015      	b.n	80024dc <HAL_ADC_ConfigChannel+0x500>
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80024b8:	fa93 f3a3 	rbit	r3, r3
 80024bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80024be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80024c0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80024c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d101      	bne.n	80024cc <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80024c8:	2320      	movs	r3, #32
 80024ca:	e003      	b.n	80024d4 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80024cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80024ce:	fab3 f383 	clz	r3, r3
 80024d2:	b2db      	uxtb	r3, r3
 80024d4:	3301      	adds	r3, #1
 80024d6:	069b      	lsls	r3, r3, #26
 80024d8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d109      	bne.n	80024fc <HAL_ADC_ConfigChannel+0x520>
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	0e9b      	lsrs	r3, r3, #26
 80024ee:	3301      	adds	r3, #1
 80024f0:	f003 031f 	and.w	r3, r3, #31
 80024f4:	2101      	movs	r1, #1
 80024f6:	fa01 f303 	lsl.w	r3, r1, r3
 80024fa:	e017      	b.n	800252c <HAL_ADC_ConfigChannel+0x550>
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002502:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002504:	fa93 f3a3 	rbit	r3, r3
 8002508:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800250a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800250c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800250e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002510:	2b00      	cmp	r3, #0
 8002512:	d101      	bne.n	8002518 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002514:	2320      	movs	r3, #32
 8002516:	e003      	b.n	8002520 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002518:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800251a:	fab3 f383 	clz	r3, r3
 800251e:	b2db      	uxtb	r3, r3
 8002520:	3301      	adds	r3, #1
 8002522:	f003 031f 	and.w	r3, r3, #31
 8002526:	2101      	movs	r1, #1
 8002528:	fa01 f303 	lsl.w	r3, r1, r3
 800252c:	ea42 0103 	orr.w	r1, r2, r3
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002538:	2b00      	cmp	r3, #0
 800253a:	d10a      	bne.n	8002552 <HAL_ADC_ConfigChannel+0x576>
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	0e9b      	lsrs	r3, r3, #26
 8002542:	3301      	adds	r3, #1
 8002544:	f003 021f 	and.w	r2, r3, #31
 8002548:	4613      	mov	r3, r2
 800254a:	005b      	lsls	r3, r3, #1
 800254c:	4413      	add	r3, r2
 800254e:	051b      	lsls	r3, r3, #20
 8002550:	e018      	b.n	8002584 <HAL_ADC_ConfigChannel+0x5a8>
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002558:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800255a:	fa93 f3a3 	rbit	r3, r3
 800255e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002560:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002562:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002564:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002566:	2b00      	cmp	r3, #0
 8002568:	d101      	bne.n	800256e <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800256a:	2320      	movs	r3, #32
 800256c:	e003      	b.n	8002576 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800256e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002570:	fab3 f383 	clz	r3, r3
 8002574:	b2db      	uxtb	r3, r3
 8002576:	3301      	adds	r3, #1
 8002578:	f003 021f 	and.w	r2, r3, #31
 800257c:	4613      	mov	r3, r2
 800257e:	005b      	lsls	r3, r3, #1
 8002580:	4413      	add	r3, r2
 8002582:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002584:	430b      	orrs	r3, r1
 8002586:	e07e      	b.n	8002686 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002590:	2b00      	cmp	r3, #0
 8002592:	d107      	bne.n	80025a4 <HAL_ADC_ConfigChannel+0x5c8>
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	0e9b      	lsrs	r3, r3, #26
 800259a:	3301      	adds	r3, #1
 800259c:	069b      	lsls	r3, r3, #26
 800259e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80025a2:	e015      	b.n	80025d0 <HAL_ADC_ConfigChannel+0x5f4>
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025ac:	fa93 f3a3 	rbit	r3, r3
 80025b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80025b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025b4:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80025b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d101      	bne.n	80025c0 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80025bc:	2320      	movs	r3, #32
 80025be:	e003      	b.n	80025c8 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80025c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025c2:	fab3 f383 	clz	r3, r3
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	3301      	adds	r3, #1
 80025ca:	069b      	lsls	r3, r3, #26
 80025cc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d109      	bne.n	80025f0 <HAL_ADC_ConfigChannel+0x614>
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	0e9b      	lsrs	r3, r3, #26
 80025e2:	3301      	adds	r3, #1
 80025e4:	f003 031f 	and.w	r3, r3, #31
 80025e8:	2101      	movs	r1, #1
 80025ea:	fa01 f303 	lsl.w	r3, r1, r3
 80025ee:	e017      	b.n	8002620 <HAL_ADC_ConfigChannel+0x644>
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025f6:	6a3b      	ldr	r3, [r7, #32]
 80025f8:	fa93 f3a3 	rbit	r3, r3
 80025fc:	61fb      	str	r3, [r7, #28]
  return result;
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002604:	2b00      	cmp	r3, #0
 8002606:	d101      	bne.n	800260c <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002608:	2320      	movs	r3, #32
 800260a:	e003      	b.n	8002614 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 800260c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800260e:	fab3 f383 	clz	r3, r3
 8002612:	b2db      	uxtb	r3, r3
 8002614:	3301      	adds	r3, #1
 8002616:	f003 031f 	and.w	r3, r3, #31
 800261a:	2101      	movs	r1, #1
 800261c:	fa01 f303 	lsl.w	r3, r1, r3
 8002620:	ea42 0103 	orr.w	r1, r2, r3
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800262c:	2b00      	cmp	r3, #0
 800262e:	d10d      	bne.n	800264c <HAL_ADC_ConfigChannel+0x670>
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	0e9b      	lsrs	r3, r3, #26
 8002636:	3301      	adds	r3, #1
 8002638:	f003 021f 	and.w	r2, r3, #31
 800263c:	4613      	mov	r3, r2
 800263e:	005b      	lsls	r3, r3, #1
 8002640:	4413      	add	r3, r2
 8002642:	3b1e      	subs	r3, #30
 8002644:	051b      	lsls	r3, r3, #20
 8002646:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800264a:	e01b      	b.n	8002684 <HAL_ADC_ConfigChannel+0x6a8>
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	fa93 f3a3 	rbit	r3, r3
 8002658:	613b      	str	r3, [r7, #16]
  return result;
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800265e:	69bb      	ldr	r3, [r7, #24]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d101      	bne.n	8002668 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8002664:	2320      	movs	r3, #32
 8002666:	e003      	b.n	8002670 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002668:	69bb      	ldr	r3, [r7, #24]
 800266a:	fab3 f383 	clz	r3, r3
 800266e:	b2db      	uxtb	r3, r3
 8002670:	3301      	adds	r3, #1
 8002672:	f003 021f 	and.w	r2, r3, #31
 8002676:	4613      	mov	r3, r2
 8002678:	005b      	lsls	r3, r3, #1
 800267a:	4413      	add	r3, r2
 800267c:	3b1e      	subs	r3, #30
 800267e:	051b      	lsls	r3, r3, #20
 8002680:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002684:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002686:	683a      	ldr	r2, [r7, #0]
 8002688:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800268a:	4619      	mov	r1, r3
 800268c:	f7ff f845 	bl	800171a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	4b09      	ldr	r3, [pc, #36]	@ (80026bc <HAL_ADC_ConfigChannel+0x6e0>)
 8002696:	4013      	ands	r3, r2
 8002698:	2b00      	cmp	r3, #0
 800269a:	f000 80be 	beq.w	800281a <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80026a6:	d004      	beq.n	80026b2 <HAL_ADC_ConfigChannel+0x6d6>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a04      	ldr	r2, [pc, #16]	@ (80026c0 <HAL_ADC_ConfigChannel+0x6e4>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d10a      	bne.n	80026c8 <HAL_ADC_ConfigChannel+0x6ec>
 80026b2:	4b04      	ldr	r3, [pc, #16]	@ (80026c4 <HAL_ADC_ConfigChannel+0x6e8>)
 80026b4:	e009      	b.n	80026ca <HAL_ADC_ConfigChannel+0x6ee>
 80026b6:	bf00      	nop
 80026b8:	407f0000 	.word	0x407f0000
 80026bc:	80080000 	.word	0x80080000
 80026c0:	50000100 	.word	0x50000100
 80026c4:	50000300 	.word	0x50000300
 80026c8:	4b59      	ldr	r3, [pc, #356]	@ (8002830 <HAL_ADC_ConfigChannel+0x854>)
 80026ca:	4618      	mov	r0, r3
 80026cc:	f7fe ff3a 	bl	8001544 <LL_ADC_GetCommonPathInternalCh>
 80026d0:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a56      	ldr	r2, [pc, #344]	@ (8002834 <HAL_ADC_ConfigChannel+0x858>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d004      	beq.n	80026e8 <HAL_ADC_ConfigChannel+0x70c>
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a55      	ldr	r2, [pc, #340]	@ (8002838 <HAL_ADC_ConfigChannel+0x85c>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d13a      	bne.n	800275e <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80026e8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80026ec:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d134      	bne.n	800275e <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80026fc:	d005      	beq.n	800270a <HAL_ADC_ConfigChannel+0x72e>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a4e      	ldr	r2, [pc, #312]	@ (800283c <HAL_ADC_ConfigChannel+0x860>)
 8002704:	4293      	cmp	r3, r2
 8002706:	f040 8085 	bne.w	8002814 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002712:	d004      	beq.n	800271e <HAL_ADC_ConfigChannel+0x742>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a49      	ldr	r2, [pc, #292]	@ (8002840 <HAL_ADC_ConfigChannel+0x864>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d101      	bne.n	8002722 <HAL_ADC_ConfigChannel+0x746>
 800271e:	4a49      	ldr	r2, [pc, #292]	@ (8002844 <HAL_ADC_ConfigChannel+0x868>)
 8002720:	e000      	b.n	8002724 <HAL_ADC_ConfigChannel+0x748>
 8002722:	4a43      	ldr	r2, [pc, #268]	@ (8002830 <HAL_ADC_ConfigChannel+0x854>)
 8002724:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002728:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800272c:	4619      	mov	r1, r3
 800272e:	4610      	mov	r0, r2
 8002730:	f7fe fef5 	bl	800151e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002734:	4b44      	ldr	r3, [pc, #272]	@ (8002848 <HAL_ADC_ConfigChannel+0x86c>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	099b      	lsrs	r3, r3, #6
 800273a:	4a44      	ldr	r2, [pc, #272]	@ (800284c <HAL_ADC_ConfigChannel+0x870>)
 800273c:	fba2 2303 	umull	r2, r3, r2, r3
 8002740:	099b      	lsrs	r3, r3, #6
 8002742:	1c5a      	adds	r2, r3, #1
 8002744:	4613      	mov	r3, r2
 8002746:	005b      	lsls	r3, r3, #1
 8002748:	4413      	add	r3, r2
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800274e:	e002      	b.n	8002756 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	3b01      	subs	r3, #1
 8002754:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d1f9      	bne.n	8002750 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800275c:	e05a      	b.n	8002814 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a3b      	ldr	r2, [pc, #236]	@ (8002850 <HAL_ADC_ConfigChannel+0x874>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d125      	bne.n	80027b4 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002768:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800276c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002770:	2b00      	cmp	r3, #0
 8002772:	d11f      	bne.n	80027b4 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a31      	ldr	r2, [pc, #196]	@ (8002840 <HAL_ADC_ConfigChannel+0x864>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d104      	bne.n	8002788 <HAL_ADC_ConfigChannel+0x7ac>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a34      	ldr	r2, [pc, #208]	@ (8002854 <HAL_ADC_ConfigChannel+0x878>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d047      	beq.n	8002818 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002790:	d004      	beq.n	800279c <HAL_ADC_ConfigChannel+0x7c0>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a2a      	ldr	r2, [pc, #168]	@ (8002840 <HAL_ADC_ConfigChannel+0x864>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d101      	bne.n	80027a0 <HAL_ADC_ConfigChannel+0x7c4>
 800279c:	4a29      	ldr	r2, [pc, #164]	@ (8002844 <HAL_ADC_ConfigChannel+0x868>)
 800279e:	e000      	b.n	80027a2 <HAL_ADC_ConfigChannel+0x7c6>
 80027a0:	4a23      	ldr	r2, [pc, #140]	@ (8002830 <HAL_ADC_ConfigChannel+0x854>)
 80027a2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80027a6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80027aa:	4619      	mov	r1, r3
 80027ac:	4610      	mov	r0, r2
 80027ae:	f7fe feb6 	bl	800151e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80027b2:	e031      	b.n	8002818 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a27      	ldr	r2, [pc, #156]	@ (8002858 <HAL_ADC_ConfigChannel+0x87c>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d12d      	bne.n	800281a <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80027be:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80027c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d127      	bne.n	800281a <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a1c      	ldr	r2, [pc, #112]	@ (8002840 <HAL_ADC_ConfigChannel+0x864>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d022      	beq.n	800281a <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80027dc:	d004      	beq.n	80027e8 <HAL_ADC_ConfigChannel+0x80c>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a17      	ldr	r2, [pc, #92]	@ (8002840 <HAL_ADC_ConfigChannel+0x864>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d101      	bne.n	80027ec <HAL_ADC_ConfigChannel+0x810>
 80027e8:	4a16      	ldr	r2, [pc, #88]	@ (8002844 <HAL_ADC_ConfigChannel+0x868>)
 80027ea:	e000      	b.n	80027ee <HAL_ADC_ConfigChannel+0x812>
 80027ec:	4a10      	ldr	r2, [pc, #64]	@ (8002830 <HAL_ADC_ConfigChannel+0x854>)
 80027ee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80027f2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80027f6:	4619      	mov	r1, r3
 80027f8:	4610      	mov	r0, r2
 80027fa:	f7fe fe90 	bl	800151e <LL_ADC_SetCommonPathInternalCh>
 80027fe:	e00c      	b.n	800281a <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002804:	f043 0220 	orr.w	r2, r3, #32
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8002812:	e002      	b.n	800281a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002814:	bf00      	nop
 8002816:	e000      	b.n	800281a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002818:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2200      	movs	r2, #0
 800281e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002822:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002826:	4618      	mov	r0, r3
 8002828:	37d8      	adds	r7, #216	@ 0xd8
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop
 8002830:	50000700 	.word	0x50000700
 8002834:	c3210000 	.word	0xc3210000
 8002838:	90c00010 	.word	0x90c00010
 800283c:	50000600 	.word	0x50000600
 8002840:	50000100 	.word	0x50000100
 8002844:	50000300 	.word	0x50000300
 8002848:	20000000 	.word	0x20000000
 800284c:	053e2d63 	.word	0x053e2d63
 8002850:	c7520000 	.word	0xc7520000
 8002854:	50000500 	.word	0x50000500
 8002858:	cb840000 	.word	0xcb840000

0800285c <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b088      	sub	sp, #32
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
 8002864:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8002866:	2300      	movs	r3, #0
 8002868:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4618      	mov	r0, r3
 8002874:	f7ff f872 	bl	800195c <LL_ADC_REG_IsConversionOngoing>
 8002878:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4618      	mov	r0, r3
 8002880:	f7ff f893 	bl	80019aa <LL_ADC_INJ_IsConversionOngoing>
 8002884:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d103      	bne.n	8002894 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	2b00      	cmp	r3, #0
 8002890:	f000 8098 	beq.w	80029c4 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	68db      	ldr	r3, [r3, #12]
 800289a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d02a      	beq.n	80028f8 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	7f5b      	ldrb	r3, [r3, #29]
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d126      	bne.n	80028f8 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	7f1b      	ldrb	r3, [r3, #28]
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d122      	bne.n	80028f8 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80028b2:	2301      	movs	r3, #1
 80028b4:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80028b6:	e014      	b.n	80028e2 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80028b8:	69fb      	ldr	r3, [r7, #28]
 80028ba:	4a45      	ldr	r2, [pc, #276]	@ (80029d0 <ADC_ConversionStop+0x174>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d90d      	bls.n	80028dc <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028c4:	f043 0210 	orr.w	r2, r3, #16
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028d0:	f043 0201 	orr.w	r2, r3, #1
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	e074      	b.n	80029c6 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80028dc:	69fb      	ldr	r3, [r7, #28]
 80028de:	3301      	adds	r3, #1
 80028e0:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028ec:	2b40      	cmp	r3, #64	@ 0x40
 80028ee:	d1e3      	bne.n	80028b8 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	2240      	movs	r2, #64	@ 0x40
 80028f6:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80028f8:	69bb      	ldr	r3, [r7, #24]
 80028fa:	2b02      	cmp	r3, #2
 80028fc:	d014      	beq.n	8002928 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4618      	mov	r0, r3
 8002904:	f7ff f82a 	bl	800195c <LL_ADC_REG_IsConversionOngoing>
 8002908:	4603      	mov	r3, r0
 800290a:	2b00      	cmp	r3, #0
 800290c:	d00c      	beq.n	8002928 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4618      	mov	r0, r3
 8002914:	f7fe ffe7 	bl	80018e6 <LL_ADC_IsDisableOngoing>
 8002918:	4603      	mov	r3, r0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d104      	bne.n	8002928 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4618      	mov	r0, r3
 8002924:	f7ff f806 	bl	8001934 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8002928:	69bb      	ldr	r3, [r7, #24]
 800292a:	2b01      	cmp	r3, #1
 800292c:	d014      	beq.n	8002958 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4618      	mov	r0, r3
 8002934:	f7ff f839 	bl	80019aa <LL_ADC_INJ_IsConversionOngoing>
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	d00c      	beq.n	8002958 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4618      	mov	r0, r3
 8002944:	f7fe ffcf 	bl	80018e6 <LL_ADC_IsDisableOngoing>
 8002948:	4603      	mov	r3, r0
 800294a:	2b00      	cmp	r3, #0
 800294c:	d104      	bne.n	8002958 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4618      	mov	r0, r3
 8002954:	f7ff f815 	bl	8001982 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8002958:	69bb      	ldr	r3, [r7, #24]
 800295a:	2b02      	cmp	r3, #2
 800295c:	d005      	beq.n	800296a <ADC_ConversionStop+0x10e>
 800295e:	69bb      	ldr	r3, [r7, #24]
 8002960:	2b03      	cmp	r3, #3
 8002962:	d105      	bne.n	8002970 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002964:	230c      	movs	r3, #12
 8002966:	617b      	str	r3, [r7, #20]
        break;
 8002968:	e005      	b.n	8002976 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800296a:	2308      	movs	r3, #8
 800296c:	617b      	str	r3, [r7, #20]
        break;
 800296e:	e002      	b.n	8002976 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002970:	2304      	movs	r3, #4
 8002972:	617b      	str	r3, [r7, #20]
        break;
 8002974:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8002976:	f7fe fdb3 	bl	80014e0 <HAL_GetTick>
 800297a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800297c:	e01b      	b.n	80029b6 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800297e:	f7fe fdaf 	bl	80014e0 <HAL_GetTick>
 8002982:	4602      	mov	r2, r0
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	1ad3      	subs	r3, r2, r3
 8002988:	2b05      	cmp	r3, #5
 800298a:	d914      	bls.n	80029b6 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	689a      	ldr	r2, [r3, #8]
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	4013      	ands	r3, r2
 8002996:	2b00      	cmp	r3, #0
 8002998:	d00d      	beq.n	80029b6 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800299e:	f043 0210 	orr.w	r2, r3, #16
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029aa:	f043 0201 	orr.w	r2, r3, #1
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e007      	b.n	80029c6 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	689a      	ldr	r2, [r3, #8]
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	4013      	ands	r3, r2
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d1dc      	bne.n	800297e <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80029c4:	2300      	movs	r3, #0
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3720      	adds	r7, #32
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	bf00      	nop
 80029d0:	a33fffff 	.word	0xa33fffff

080029d4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b084      	sub	sp, #16
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80029dc:	2300      	movs	r3, #0
 80029de:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4618      	mov	r0, r3
 80029e6:	f7fe ff6b 	bl	80018c0 <LL_ADC_IsEnabled>
 80029ea:	4603      	mov	r3, r0
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d176      	bne.n	8002ade <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	689a      	ldr	r2, [r3, #8]
 80029f6:	4b3c      	ldr	r3, [pc, #240]	@ (8002ae8 <ADC_Enable+0x114>)
 80029f8:	4013      	ands	r3, r2
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d00d      	beq.n	8002a1a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a02:	f043 0210 	orr.w	r2, r3, #16
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a0e:	f043 0201 	orr.w	r2, r3, #1
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e062      	b.n	8002ae0 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f7fe ff26 	bl	8001870 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002a2c:	d004      	beq.n	8002a38 <ADC_Enable+0x64>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a2e      	ldr	r2, [pc, #184]	@ (8002aec <ADC_Enable+0x118>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d101      	bne.n	8002a3c <ADC_Enable+0x68>
 8002a38:	4b2d      	ldr	r3, [pc, #180]	@ (8002af0 <ADC_Enable+0x11c>)
 8002a3a:	e000      	b.n	8002a3e <ADC_Enable+0x6a>
 8002a3c:	4b2d      	ldr	r3, [pc, #180]	@ (8002af4 <ADC_Enable+0x120>)
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f7fe fd80 	bl	8001544 <LL_ADC_GetCommonPathInternalCh>
 8002a44:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002a46:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d013      	beq.n	8002a76 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002a4e:	4b2a      	ldr	r3, [pc, #168]	@ (8002af8 <ADC_Enable+0x124>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	099b      	lsrs	r3, r3, #6
 8002a54:	4a29      	ldr	r2, [pc, #164]	@ (8002afc <ADC_Enable+0x128>)
 8002a56:	fba2 2303 	umull	r2, r3, r2, r3
 8002a5a:	099b      	lsrs	r3, r3, #6
 8002a5c:	1c5a      	adds	r2, r3, #1
 8002a5e:	4613      	mov	r3, r2
 8002a60:	005b      	lsls	r3, r3, #1
 8002a62:	4413      	add	r3, r2
 8002a64:	009b      	lsls	r3, r3, #2
 8002a66:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002a68:	e002      	b.n	8002a70 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	3b01      	subs	r3, #1
 8002a6e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d1f9      	bne.n	8002a6a <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002a76:	f7fe fd33 	bl	80014e0 <HAL_GetTick>
 8002a7a:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002a7c:	e028      	b.n	8002ad0 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4618      	mov	r0, r3
 8002a84:	f7fe ff1c 	bl	80018c0 <LL_ADC_IsEnabled>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d104      	bne.n	8002a98 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4618      	mov	r0, r3
 8002a94:	f7fe feec 	bl	8001870 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002a98:	f7fe fd22 	bl	80014e0 <HAL_GetTick>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	1ad3      	subs	r3, r2, r3
 8002aa2:	2b02      	cmp	r3, #2
 8002aa4:	d914      	bls.n	8002ad0 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 0301 	and.w	r3, r3, #1
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d00d      	beq.n	8002ad0 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ab8:	f043 0210 	orr.w	r2, r3, #16
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ac4:	f043 0201 	orr.w	r2, r3, #1
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	e007      	b.n	8002ae0 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 0301 	and.w	r3, r3, #1
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	d1cf      	bne.n	8002a7e <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002ade:	2300      	movs	r3, #0
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	3710      	adds	r7, #16
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}
 8002ae8:	8000003f 	.word	0x8000003f
 8002aec:	50000100 	.word	0x50000100
 8002af0:	50000300 	.word	0x50000300
 8002af4:	50000700 	.word	0x50000700
 8002af8:	20000000 	.word	0x20000000
 8002afc:	053e2d63 	.word	0x053e2d63

08002b00 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b084      	sub	sp, #16
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f7fe feea 	bl	80018e6 <LL_ADC_IsDisableOngoing>
 8002b12:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f7fe fed1 	bl	80018c0 <LL_ADC_IsEnabled>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d047      	beq.n	8002bb4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d144      	bne.n	8002bb4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	f003 030d 	and.w	r3, r3, #13
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	d10c      	bne.n	8002b52 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f7fe feab 	bl	8001898 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	2203      	movs	r2, #3
 8002b48:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002b4a:	f7fe fcc9 	bl	80014e0 <HAL_GetTick>
 8002b4e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002b50:	e029      	b.n	8002ba6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b56:	f043 0210 	orr.w	r2, r3, #16
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b62:	f043 0201 	orr.w	r2, r3, #1
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e023      	b.n	8002bb6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002b6e:	f7fe fcb7 	bl	80014e0 <HAL_GetTick>
 8002b72:	4602      	mov	r2, r0
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	1ad3      	subs	r3, r2, r3
 8002b78:	2b02      	cmp	r3, #2
 8002b7a:	d914      	bls.n	8002ba6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	f003 0301 	and.w	r3, r3, #1
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d00d      	beq.n	8002ba6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b8e:	f043 0210 	orr.w	r2, r3, #16
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b9a:	f043 0201 	orr.w	r2, r3, #1
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e007      	b.n	8002bb6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	f003 0301 	and.w	r3, r3, #1
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d1dc      	bne.n	8002b6e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002bb4:	2300      	movs	r3, #0
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3710      	adds	r7, #16
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}

08002bbe <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002bbe:	b580      	push	{r7, lr}
 8002bc0:	b084      	sub	sp, #16
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bca:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bd0:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d14b      	bne.n	8002c70 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bdc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 0308 	and.w	r3, r3, #8
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d021      	beq.n	8002c36 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7fe fd50 	bl	800169c <LL_ADC_REG_IsTriggerSourceSWStart>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d032      	beq.n	8002c68 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d12b      	bne.n	8002c68 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c14:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c20:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d11f      	bne.n	8002c68 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c2c:	f043 0201 	orr.w	r2, r3, #1
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002c34:	e018      	b.n	8002c68 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	f003 0302 	and.w	r3, r3, #2
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d111      	bne.n	8002c68 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c48:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c54:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d105      	bne.n	8002c68 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c60:	f043 0201 	orr.w	r2, r3, #1
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002c68:	68f8      	ldr	r0, [r7, #12]
 8002c6a:	f7fd ffcf 	bl	8000c0c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002c6e:	e00e      	b.n	8002c8e <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c74:	f003 0310 	and.w	r3, r3, #16
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d003      	beq.n	8002c84 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002c7c:	68f8      	ldr	r0, [r7, #12]
 8002c7e:	f7ff f9a2 	bl	8001fc6 <HAL_ADC_ErrorCallback>
}
 8002c82:	e004      	b.n	8002c8e <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	4798      	blx	r3
}
 8002c8e:	bf00      	nop
 8002c90:	3710      	adds	r7, #16
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}

08002c96 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002c96:	b580      	push	{r7, lr}
 8002c98:	b084      	sub	sp, #16
 8002c9a:	af00      	add	r7, sp, #0
 8002c9c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ca2:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002ca4:	68f8      	ldr	r0, [r7, #12]
 8002ca6:	f7ff f984 	bl	8001fb2 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002caa:	bf00      	nop
 8002cac:	3710      	adds	r7, #16
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}

08002cb2 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002cb2:	b580      	push	{r7, lr}
 8002cb4:	b084      	sub	sp, #16
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cbe:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cc4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cd0:	f043 0204 	orr.w	r2, r3, #4
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002cd8:	68f8      	ldr	r0, [r7, #12]
 8002cda:	f7ff f974 	bl	8001fc6 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002cde:	bf00      	nop
 8002ce0:	3710      	adds	r7, #16
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}

08002ce6 <LL_ADC_IsEnabled>:
{
 8002ce6:	b480      	push	{r7}
 8002ce8:	b083      	sub	sp, #12
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	f003 0301 	and.w	r3, r3, #1
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d101      	bne.n	8002cfe <LL_ADC_IsEnabled+0x18>
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e000      	b.n	8002d00 <LL_ADC_IsEnabled+0x1a>
 8002cfe:	2300      	movs	r3, #0
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	370c      	adds	r7, #12
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr

08002d0c <LL_ADC_REG_IsConversionOngoing>:
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b083      	sub	sp, #12
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	f003 0304 	and.w	r3, r3, #4
 8002d1c:	2b04      	cmp	r3, #4
 8002d1e:	d101      	bne.n	8002d24 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002d20:	2301      	movs	r3, #1
 8002d22:	e000      	b.n	8002d26 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002d24:	2300      	movs	r3, #0
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	370c      	adds	r7, #12
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr
	...

08002d34 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002d34:	b590      	push	{r4, r7, lr}
 8002d36:	b0a1      	sub	sp, #132	@ 0x84
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
 8002d3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d101      	bne.n	8002d52 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002d4e:	2302      	movs	r3, #2
 8002d50:	e0e7      	b.n	8002f22 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2201      	movs	r2, #1
 8002d56:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002d5e:	2300      	movs	r3, #0
 8002d60:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002d6a:	d102      	bne.n	8002d72 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002d6c:	4b6f      	ldr	r3, [pc, #444]	@ (8002f2c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002d6e:	60bb      	str	r3, [r7, #8]
 8002d70:	e009      	b.n	8002d86 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a6e      	ldr	r2, [pc, #440]	@ (8002f30 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d102      	bne.n	8002d82 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8002d7c:	4b6d      	ldr	r3, [pc, #436]	@ (8002f34 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002d7e:	60bb      	str	r3, [r7, #8]
 8002d80:	e001      	b.n	8002d86 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002d82:	2300      	movs	r3, #0
 8002d84:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d10b      	bne.n	8002da4 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d90:	f043 0220 	orr.w	r2, r3, #32
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	e0be      	b.n	8002f22 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	4618      	mov	r0, r3
 8002da8:	f7ff ffb0 	bl	8002d0c <LL_ADC_REG_IsConversionOngoing>
 8002dac:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4618      	mov	r0, r3
 8002db4:	f7ff ffaa 	bl	8002d0c <LL_ADC_REG_IsConversionOngoing>
 8002db8:	4603      	mov	r3, r0
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	f040 80a0 	bne.w	8002f00 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002dc0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	f040 809c 	bne.w	8002f00 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002dd0:	d004      	beq.n	8002ddc <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a55      	ldr	r2, [pc, #340]	@ (8002f2c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d101      	bne.n	8002de0 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002ddc:	4b56      	ldr	r3, [pc, #344]	@ (8002f38 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8002dde:	e000      	b.n	8002de2 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002de0:	4b56      	ldr	r3, [pc, #344]	@ (8002f3c <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8002de2:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d04b      	beq.n	8002e84 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002dec:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	6859      	ldr	r1, [r3, #4]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002dfe:	035b      	lsls	r3, r3, #13
 8002e00:	430b      	orrs	r3, r1
 8002e02:	431a      	orrs	r2, r3
 8002e04:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002e06:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002e10:	d004      	beq.n	8002e1c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a45      	ldr	r2, [pc, #276]	@ (8002f2c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d10f      	bne.n	8002e3c <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8002e1c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002e20:	f7ff ff61 	bl	8002ce6 <LL_ADC_IsEnabled>
 8002e24:	4604      	mov	r4, r0
 8002e26:	4841      	ldr	r0, [pc, #260]	@ (8002f2c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002e28:	f7ff ff5d 	bl	8002ce6 <LL_ADC_IsEnabled>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	4323      	orrs	r3, r4
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	bf0c      	ite	eq
 8002e34:	2301      	moveq	r3, #1
 8002e36:	2300      	movne	r3, #0
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	e012      	b.n	8002e62 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8002e3c:	483c      	ldr	r0, [pc, #240]	@ (8002f30 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002e3e:	f7ff ff52 	bl	8002ce6 <LL_ADC_IsEnabled>
 8002e42:	4604      	mov	r4, r0
 8002e44:	483b      	ldr	r0, [pc, #236]	@ (8002f34 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002e46:	f7ff ff4e 	bl	8002ce6 <LL_ADC_IsEnabled>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	431c      	orrs	r4, r3
 8002e4e:	483c      	ldr	r0, [pc, #240]	@ (8002f40 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002e50:	f7ff ff49 	bl	8002ce6 <LL_ADC_IsEnabled>
 8002e54:	4603      	mov	r3, r0
 8002e56:	4323      	orrs	r3, r4
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	bf0c      	ite	eq
 8002e5c:	2301      	moveq	r3, #1
 8002e5e:	2300      	movne	r3, #0
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d056      	beq.n	8002f14 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002e66:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002e6e:	f023 030f 	bic.w	r3, r3, #15
 8002e72:	683a      	ldr	r2, [r7, #0]
 8002e74:	6811      	ldr	r1, [r2, #0]
 8002e76:	683a      	ldr	r2, [r7, #0]
 8002e78:	6892      	ldr	r2, [r2, #8]
 8002e7a:	430a      	orrs	r2, r1
 8002e7c:	431a      	orrs	r2, r3
 8002e7e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002e80:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002e82:	e047      	b.n	8002f14 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002e84:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002e8c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002e8e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002e98:	d004      	beq.n	8002ea4 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a23      	ldr	r2, [pc, #140]	@ (8002f2c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d10f      	bne.n	8002ec4 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8002ea4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002ea8:	f7ff ff1d 	bl	8002ce6 <LL_ADC_IsEnabled>
 8002eac:	4604      	mov	r4, r0
 8002eae:	481f      	ldr	r0, [pc, #124]	@ (8002f2c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002eb0:	f7ff ff19 	bl	8002ce6 <LL_ADC_IsEnabled>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	4323      	orrs	r3, r4
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	bf0c      	ite	eq
 8002ebc:	2301      	moveq	r3, #1
 8002ebe:	2300      	movne	r3, #0
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	e012      	b.n	8002eea <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8002ec4:	481a      	ldr	r0, [pc, #104]	@ (8002f30 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002ec6:	f7ff ff0e 	bl	8002ce6 <LL_ADC_IsEnabled>
 8002eca:	4604      	mov	r4, r0
 8002ecc:	4819      	ldr	r0, [pc, #100]	@ (8002f34 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002ece:	f7ff ff0a 	bl	8002ce6 <LL_ADC_IsEnabled>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	431c      	orrs	r4, r3
 8002ed6:	481a      	ldr	r0, [pc, #104]	@ (8002f40 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002ed8:	f7ff ff05 	bl	8002ce6 <LL_ADC_IsEnabled>
 8002edc:	4603      	mov	r3, r0
 8002ede:	4323      	orrs	r3, r4
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	bf0c      	ite	eq
 8002ee4:	2301      	moveq	r3, #1
 8002ee6:	2300      	movne	r3, #0
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d012      	beq.n	8002f14 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002eee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002ef6:	f023 030f 	bic.w	r3, r3, #15
 8002efa:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002efc:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002efe:	e009      	b.n	8002f14 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f04:	f043 0220 	orr.w	r2, r3, #32
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002f12:	e000      	b.n	8002f16 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002f14:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002f1e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	3784      	adds	r7, #132	@ 0x84
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd90      	pop	{r4, r7, pc}
 8002f2a:	bf00      	nop
 8002f2c:	50000100 	.word	0x50000100
 8002f30:	50000400 	.word	0x50000400
 8002f34:	50000500 	.word	0x50000500
 8002f38:	50000300 	.word	0x50000300
 8002f3c:	50000700 	.word	0x50000700
 8002f40:	50000600 	.word	0x50000600

08002f44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b085      	sub	sp, #20
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	f003 0307 	and.w	r3, r3, #7
 8002f52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f54:	4b0c      	ldr	r3, [pc, #48]	@ (8002f88 <__NVIC_SetPriorityGrouping+0x44>)
 8002f56:	68db      	ldr	r3, [r3, #12]
 8002f58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f5a:	68ba      	ldr	r2, [r7, #8]
 8002f5c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002f60:	4013      	ands	r3, r2
 8002f62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f6c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002f70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f76:	4a04      	ldr	r2, [pc, #16]	@ (8002f88 <__NVIC_SetPriorityGrouping+0x44>)
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	60d3      	str	r3, [r2, #12]
}
 8002f7c:	bf00      	nop
 8002f7e:	3714      	adds	r7, #20
 8002f80:	46bd      	mov	sp, r7
 8002f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f86:	4770      	bx	lr
 8002f88:	e000ed00 	.word	0xe000ed00

08002f8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f90:	4b04      	ldr	r3, [pc, #16]	@ (8002fa4 <__NVIC_GetPriorityGrouping+0x18>)
 8002f92:	68db      	ldr	r3, [r3, #12]
 8002f94:	0a1b      	lsrs	r3, r3, #8
 8002f96:	f003 0307 	and.w	r3, r3, #7
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa2:	4770      	bx	lr
 8002fa4:	e000ed00 	.word	0xe000ed00

08002fa8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b083      	sub	sp, #12
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	4603      	mov	r3, r0
 8002fb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	db0b      	blt.n	8002fd2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fba:	79fb      	ldrb	r3, [r7, #7]
 8002fbc:	f003 021f 	and.w	r2, r3, #31
 8002fc0:	4907      	ldr	r1, [pc, #28]	@ (8002fe0 <__NVIC_EnableIRQ+0x38>)
 8002fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fc6:	095b      	lsrs	r3, r3, #5
 8002fc8:	2001      	movs	r0, #1
 8002fca:	fa00 f202 	lsl.w	r2, r0, r2
 8002fce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002fd2:	bf00      	nop
 8002fd4:	370c      	adds	r7, #12
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr
 8002fde:	bf00      	nop
 8002fe0:	e000e100 	.word	0xe000e100

08002fe4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b083      	sub	sp, #12
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	4603      	mov	r3, r0
 8002fec:	6039      	str	r1, [r7, #0]
 8002fee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ff0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	db0a      	blt.n	800300e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	b2da      	uxtb	r2, r3
 8002ffc:	490c      	ldr	r1, [pc, #48]	@ (8003030 <__NVIC_SetPriority+0x4c>)
 8002ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003002:	0112      	lsls	r2, r2, #4
 8003004:	b2d2      	uxtb	r2, r2
 8003006:	440b      	add	r3, r1
 8003008:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800300c:	e00a      	b.n	8003024 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	b2da      	uxtb	r2, r3
 8003012:	4908      	ldr	r1, [pc, #32]	@ (8003034 <__NVIC_SetPriority+0x50>)
 8003014:	79fb      	ldrb	r3, [r7, #7]
 8003016:	f003 030f 	and.w	r3, r3, #15
 800301a:	3b04      	subs	r3, #4
 800301c:	0112      	lsls	r2, r2, #4
 800301e:	b2d2      	uxtb	r2, r2
 8003020:	440b      	add	r3, r1
 8003022:	761a      	strb	r2, [r3, #24]
}
 8003024:	bf00      	nop
 8003026:	370c      	adds	r7, #12
 8003028:	46bd      	mov	sp, r7
 800302a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302e:	4770      	bx	lr
 8003030:	e000e100 	.word	0xe000e100
 8003034:	e000ed00 	.word	0xe000ed00

08003038 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003038:	b480      	push	{r7}
 800303a:	b089      	sub	sp, #36	@ 0x24
 800303c:	af00      	add	r7, sp, #0
 800303e:	60f8      	str	r0, [r7, #12]
 8003040:	60b9      	str	r1, [r7, #8]
 8003042:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	f003 0307 	and.w	r3, r3, #7
 800304a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800304c:	69fb      	ldr	r3, [r7, #28]
 800304e:	f1c3 0307 	rsb	r3, r3, #7
 8003052:	2b04      	cmp	r3, #4
 8003054:	bf28      	it	cs
 8003056:	2304      	movcs	r3, #4
 8003058:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800305a:	69fb      	ldr	r3, [r7, #28]
 800305c:	3304      	adds	r3, #4
 800305e:	2b06      	cmp	r3, #6
 8003060:	d902      	bls.n	8003068 <NVIC_EncodePriority+0x30>
 8003062:	69fb      	ldr	r3, [r7, #28]
 8003064:	3b03      	subs	r3, #3
 8003066:	e000      	b.n	800306a <NVIC_EncodePriority+0x32>
 8003068:	2300      	movs	r3, #0
 800306a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800306c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003070:	69bb      	ldr	r3, [r7, #24]
 8003072:	fa02 f303 	lsl.w	r3, r2, r3
 8003076:	43da      	mvns	r2, r3
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	401a      	ands	r2, r3
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003080:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	fa01 f303 	lsl.w	r3, r1, r3
 800308a:	43d9      	mvns	r1, r3
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003090:	4313      	orrs	r3, r2
         );
}
 8003092:	4618      	mov	r0, r3
 8003094:	3724      	adds	r7, #36	@ 0x24
 8003096:	46bd      	mov	sp, r7
 8003098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309c:	4770      	bx	lr
	...

080030a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b082      	sub	sp, #8
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	3b01      	subs	r3, #1
 80030ac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80030b0:	d301      	bcc.n	80030b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80030b2:	2301      	movs	r3, #1
 80030b4:	e00f      	b.n	80030d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030b6:	4a0a      	ldr	r2, [pc, #40]	@ (80030e0 <SysTick_Config+0x40>)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	3b01      	subs	r3, #1
 80030bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80030be:	210f      	movs	r1, #15
 80030c0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80030c4:	f7ff ff8e 	bl	8002fe4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80030c8:	4b05      	ldr	r3, [pc, #20]	@ (80030e0 <SysTick_Config+0x40>)
 80030ca:	2200      	movs	r2, #0
 80030cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80030ce:	4b04      	ldr	r3, [pc, #16]	@ (80030e0 <SysTick_Config+0x40>)
 80030d0:	2207      	movs	r2, #7
 80030d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80030d4:	2300      	movs	r3, #0
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3708      	adds	r7, #8
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	bf00      	nop
 80030e0:	e000e010 	.word	0xe000e010

080030e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b082      	sub	sp, #8
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80030ec:	6878      	ldr	r0, [r7, #4]
 80030ee:	f7ff ff29 	bl	8002f44 <__NVIC_SetPriorityGrouping>
}
 80030f2:	bf00      	nop
 80030f4:	3708      	adds	r7, #8
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}

080030fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030fa:	b580      	push	{r7, lr}
 80030fc:	b086      	sub	sp, #24
 80030fe:	af00      	add	r7, sp, #0
 8003100:	4603      	mov	r3, r0
 8003102:	60b9      	str	r1, [r7, #8]
 8003104:	607a      	str	r2, [r7, #4]
 8003106:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003108:	f7ff ff40 	bl	8002f8c <__NVIC_GetPriorityGrouping>
 800310c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800310e:	687a      	ldr	r2, [r7, #4]
 8003110:	68b9      	ldr	r1, [r7, #8]
 8003112:	6978      	ldr	r0, [r7, #20]
 8003114:	f7ff ff90 	bl	8003038 <NVIC_EncodePriority>
 8003118:	4602      	mov	r2, r0
 800311a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800311e:	4611      	mov	r1, r2
 8003120:	4618      	mov	r0, r3
 8003122:	f7ff ff5f 	bl	8002fe4 <__NVIC_SetPriority>
}
 8003126:	bf00      	nop
 8003128:	3718      	adds	r7, #24
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}

0800312e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800312e:	b580      	push	{r7, lr}
 8003130:	b082      	sub	sp, #8
 8003132:	af00      	add	r7, sp, #0
 8003134:	4603      	mov	r3, r0
 8003136:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003138:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800313c:	4618      	mov	r0, r3
 800313e:	f7ff ff33 	bl	8002fa8 <__NVIC_EnableIRQ>
}
 8003142:	bf00      	nop
 8003144:	3708      	adds	r7, #8
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}

0800314a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800314a:	b580      	push	{r7, lr}
 800314c:	b082      	sub	sp, #8
 800314e:	af00      	add	r7, sp, #0
 8003150:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f7ff ffa4 	bl	80030a0 <SysTick_Config>
 8003158:	4603      	mov	r3, r0
}
 800315a:	4618      	mov	r0, r3
 800315c:	3708      	adds	r7, #8
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}
	...

08003164 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b084      	sub	sp, #16
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d101      	bne.n	8003176 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e08d      	b.n	8003292 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	461a      	mov	r2, r3
 800317c:	4b47      	ldr	r3, [pc, #284]	@ (800329c <HAL_DMA_Init+0x138>)
 800317e:	429a      	cmp	r2, r3
 8003180:	d80f      	bhi.n	80031a2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	461a      	mov	r2, r3
 8003188:	4b45      	ldr	r3, [pc, #276]	@ (80032a0 <HAL_DMA_Init+0x13c>)
 800318a:	4413      	add	r3, r2
 800318c:	4a45      	ldr	r2, [pc, #276]	@ (80032a4 <HAL_DMA_Init+0x140>)
 800318e:	fba2 2303 	umull	r2, r3, r2, r3
 8003192:	091b      	lsrs	r3, r3, #4
 8003194:	009a      	lsls	r2, r3, #2
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	4a42      	ldr	r2, [pc, #264]	@ (80032a8 <HAL_DMA_Init+0x144>)
 800319e:	641a      	str	r2, [r3, #64]	@ 0x40
 80031a0:	e00e      	b.n	80031c0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	461a      	mov	r2, r3
 80031a8:	4b40      	ldr	r3, [pc, #256]	@ (80032ac <HAL_DMA_Init+0x148>)
 80031aa:	4413      	add	r3, r2
 80031ac:	4a3d      	ldr	r2, [pc, #244]	@ (80032a4 <HAL_DMA_Init+0x140>)
 80031ae:	fba2 2303 	umull	r2, r3, r2, r3
 80031b2:	091b      	lsrs	r3, r3, #4
 80031b4:	009a      	lsls	r2, r3, #2
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	4a3c      	ldr	r2, [pc, #240]	@ (80032b0 <HAL_DMA_Init+0x14c>)
 80031be:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2202      	movs	r2, #2
 80031c4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80031d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80031da:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80031e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	691b      	ldr	r3, [r3, #16]
 80031ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	699b      	ldr	r3, [r3, #24]
 80031f6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031fc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6a1b      	ldr	r3, [r3, #32]
 8003202:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003204:	68fa      	ldr	r2, [r7, #12]
 8003206:	4313      	orrs	r3, r2
 8003208:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	68fa      	ldr	r2, [r7, #12]
 8003210:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003212:	6878      	ldr	r0, [r7, #4]
 8003214:	f000 fa10 	bl	8003638 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003220:	d102      	bne.n	8003228 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2200      	movs	r2, #0
 8003226:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	685a      	ldr	r2, [r3, #4]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003230:	b2d2      	uxtb	r2, r2
 8003232:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003238:	687a      	ldr	r2, [r7, #4]
 800323a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800323c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d010      	beq.n	8003268 <HAL_DMA_Init+0x104>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	2b04      	cmp	r3, #4
 800324c:	d80c      	bhi.n	8003268 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f000 fa30 	bl	80036b4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003258:	2200      	movs	r2, #0
 800325a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003260:	687a      	ldr	r2, [r7, #4]
 8003262:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003264:	605a      	str	r2, [r3, #4]
 8003266:	e008      	b.n	800327a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2200      	movs	r2, #0
 800326c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2200      	movs	r2, #0
 8003272:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2200      	movs	r2, #0
 8003278:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2200      	movs	r2, #0
 800327e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2201      	movs	r2, #1
 8003284:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2200      	movs	r2, #0
 800328c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003290:	2300      	movs	r3, #0
}
 8003292:	4618      	mov	r0, r3
 8003294:	3710      	adds	r7, #16
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}
 800329a:	bf00      	nop
 800329c:	40020407 	.word	0x40020407
 80032a0:	bffdfff8 	.word	0xbffdfff8
 80032a4:	cccccccd 	.word	0xcccccccd
 80032a8:	40020000 	.word	0x40020000
 80032ac:	bffdfbf8 	.word	0xbffdfbf8
 80032b0:	40020400 	.word	0x40020400

080032b4 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b086      	sub	sp, #24
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	60f8      	str	r0, [r7, #12]
 80032bc:	60b9      	str	r1, [r7, #8]
 80032be:	607a      	str	r2, [r7, #4]
 80032c0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80032c2:	2300      	movs	r3, #0
 80032c4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d101      	bne.n	80032d4 <HAL_DMA_Start_IT+0x20>
 80032d0:	2302      	movs	r3, #2
 80032d2:	e066      	b.n	80033a2 <HAL_DMA_Start_IT+0xee>
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	2201      	movs	r2, #1
 80032d8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80032e2:	b2db      	uxtb	r3, r3
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d155      	bne.n	8003394 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2202      	movs	r2, #2
 80032ec:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2200      	movs	r2, #0
 80032f4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f022 0201 	bic.w	r2, r2, #1
 8003304:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	687a      	ldr	r2, [r7, #4]
 800330a:	68b9      	ldr	r1, [r7, #8]
 800330c:	68f8      	ldr	r0, [r7, #12]
 800330e:	f000 f954 	bl	80035ba <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003316:	2b00      	cmp	r3, #0
 8003318:	d008      	beq.n	800332c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f042 020e 	orr.w	r2, r2, #14
 8003328:	601a      	str	r2, [r3, #0]
 800332a:	e00f      	b.n	800334c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	681a      	ldr	r2, [r3, #0]
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f022 0204 	bic.w	r2, r2, #4
 800333a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f042 020a 	orr.w	r2, r2, #10
 800334a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003356:	2b00      	cmp	r3, #0
 8003358:	d007      	beq.n	800336a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003364:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003368:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800336e:	2b00      	cmp	r3, #0
 8003370:	d007      	beq.n	8003382 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800337c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003380:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f042 0201 	orr.w	r2, r2, #1
 8003390:	601a      	str	r2, [r3, #0]
 8003392:	e005      	b.n	80033a0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2200      	movs	r2, #0
 8003398:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800339c:	2302      	movs	r3, #2
 800339e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80033a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3718      	adds	r7, #24
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}

080033aa <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80033aa:	b480      	push	{r7}
 80033ac:	b085      	sub	sp, #20
 80033ae:	af00      	add	r7, sp, #0
 80033b0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033b2:	2300      	movs	r3, #0
 80033b4:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	2b02      	cmp	r3, #2
 80033c0:	d005      	beq.n	80033ce <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2204      	movs	r2, #4
 80033c6:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	73fb      	strb	r3, [r7, #15]
 80033cc:	e037      	b.n	800343e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f022 020e 	bic.w	r2, r2, #14
 80033dc:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033e8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80033ec:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f022 0201 	bic.w	r2, r2, #1
 80033fc:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003402:	f003 021f 	and.w	r2, r3, #31
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800340a:	2101      	movs	r1, #1
 800340c:	fa01 f202 	lsl.w	r2, r1, r2
 8003410:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003416:	687a      	ldr	r2, [r7, #4]
 8003418:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800341a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003420:	2b00      	cmp	r3, #0
 8003422:	d00c      	beq.n	800343e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800342e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003432:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003438:	687a      	ldr	r2, [r7, #4]
 800343a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800343c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2201      	movs	r2, #1
 8003442:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2200      	movs	r2, #0
 800344a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800344e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003450:	4618      	mov	r0, r3
 8003452:	3714      	adds	r7, #20
 8003454:	46bd      	mov	sp, r7
 8003456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345a:	4770      	bx	lr

0800345c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b084      	sub	sp, #16
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003478:	f003 031f 	and.w	r3, r3, #31
 800347c:	2204      	movs	r2, #4
 800347e:	409a      	lsls	r2, r3
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	4013      	ands	r3, r2
 8003484:	2b00      	cmp	r3, #0
 8003486:	d026      	beq.n	80034d6 <HAL_DMA_IRQHandler+0x7a>
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	f003 0304 	and.w	r3, r3, #4
 800348e:	2b00      	cmp	r3, #0
 8003490:	d021      	beq.n	80034d6 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f003 0320 	and.w	r3, r3, #32
 800349c:	2b00      	cmp	r3, #0
 800349e:	d107      	bne.n	80034b0 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f022 0204 	bic.w	r2, r2, #4
 80034ae:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034b4:	f003 021f 	and.w	r2, r3, #31
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034bc:	2104      	movs	r1, #4
 80034be:	fa01 f202 	lsl.w	r2, r1, r2
 80034c2:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d071      	beq.n	80035b0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80034d4:	e06c      	b.n	80035b0 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034da:	f003 031f 	and.w	r3, r3, #31
 80034de:	2202      	movs	r2, #2
 80034e0:	409a      	lsls	r2, r3
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	4013      	ands	r3, r2
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d02e      	beq.n	8003548 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	f003 0302 	and.w	r3, r3, #2
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d029      	beq.n	8003548 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 0320 	and.w	r3, r3, #32
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d10b      	bne.n	800351a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f022 020a 	bic.w	r2, r2, #10
 8003510:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2201      	movs	r2, #1
 8003516:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800351e:	f003 021f 	and.w	r2, r3, #31
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003526:	2102      	movs	r1, #2
 8003528:	fa01 f202 	lsl.w	r2, r1, r2
 800352c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2200      	movs	r2, #0
 8003532:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800353a:	2b00      	cmp	r3, #0
 800353c:	d038      	beq.n	80035b0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003546:	e033      	b.n	80035b0 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800354c:	f003 031f 	and.w	r3, r3, #31
 8003550:	2208      	movs	r2, #8
 8003552:	409a      	lsls	r2, r3
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	4013      	ands	r3, r2
 8003558:	2b00      	cmp	r3, #0
 800355a:	d02a      	beq.n	80035b2 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	f003 0308 	and.w	r3, r3, #8
 8003562:	2b00      	cmp	r3, #0
 8003564:	d025      	beq.n	80035b2 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f022 020e 	bic.w	r2, r2, #14
 8003574:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800357a:	f003 021f 	and.w	r2, r3, #31
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003582:	2101      	movs	r1, #1
 8003584:	fa01 f202 	lsl.w	r2, r1, r2
 8003588:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2201      	movs	r2, #1
 800358e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2201      	movs	r2, #1
 8003594:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2200      	movs	r2, #0
 800359c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d004      	beq.n	80035b2 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035ac:	6878      	ldr	r0, [r7, #4]
 80035ae:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80035b0:	bf00      	nop
 80035b2:	bf00      	nop
}
 80035b4:	3710      	adds	r7, #16
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}

080035ba <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80035ba:	b480      	push	{r7}
 80035bc:	b085      	sub	sp, #20
 80035be:	af00      	add	r7, sp, #0
 80035c0:	60f8      	str	r0, [r7, #12]
 80035c2:	60b9      	str	r1, [r7, #8]
 80035c4:	607a      	str	r2, [r7, #4]
 80035c6:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035cc:	68fa      	ldr	r2, [r7, #12]
 80035ce:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80035d0:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d004      	beq.n	80035e4 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035de:	68fa      	ldr	r2, [r7, #12]
 80035e0:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80035e2:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035e8:	f003 021f 	and.w	r2, r3, #31
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035f0:	2101      	movs	r1, #1
 80035f2:	fa01 f202 	lsl.w	r2, r1, r2
 80035f6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	683a      	ldr	r2, [r7, #0]
 80035fe:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	2b10      	cmp	r3, #16
 8003606:	d108      	bne.n	800361a <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	687a      	ldr	r2, [r7, #4]
 800360e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	68ba      	ldr	r2, [r7, #8]
 8003616:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003618:	e007      	b.n	800362a <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	68ba      	ldr	r2, [r7, #8]
 8003620:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	687a      	ldr	r2, [r7, #4]
 8003628:	60da      	str	r2, [r3, #12]
}
 800362a:	bf00      	nop
 800362c:	3714      	adds	r7, #20
 800362e:	46bd      	mov	sp, r7
 8003630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003634:	4770      	bx	lr
	...

08003638 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003638:	b480      	push	{r7}
 800363a:	b087      	sub	sp, #28
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	461a      	mov	r2, r3
 8003646:	4b16      	ldr	r3, [pc, #88]	@ (80036a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003648:	429a      	cmp	r2, r3
 800364a:	d802      	bhi.n	8003652 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800364c:	4b15      	ldr	r3, [pc, #84]	@ (80036a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800364e:	617b      	str	r3, [r7, #20]
 8003650:	e001      	b.n	8003656 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8003652:	4b15      	ldr	r3, [pc, #84]	@ (80036a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003654:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	b2db      	uxtb	r3, r3
 8003660:	3b08      	subs	r3, #8
 8003662:	4a12      	ldr	r2, [pc, #72]	@ (80036ac <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003664:	fba2 2303 	umull	r2, r3, r2, r3
 8003668:	091b      	lsrs	r3, r3, #4
 800366a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003670:	089b      	lsrs	r3, r3, #2
 8003672:	009a      	lsls	r2, r3, #2
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	4413      	add	r3, r2
 8003678:	461a      	mov	r2, r3
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	4a0b      	ldr	r2, [pc, #44]	@ (80036b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003682:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	f003 031f 	and.w	r3, r3, #31
 800368a:	2201      	movs	r2, #1
 800368c:	409a      	lsls	r2, r3
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003692:	bf00      	nop
 8003694:	371c      	adds	r7, #28
 8003696:	46bd      	mov	sp, r7
 8003698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369c:	4770      	bx	lr
 800369e:	bf00      	nop
 80036a0:	40020407 	.word	0x40020407
 80036a4:	40020800 	.word	0x40020800
 80036a8:	40020820 	.word	0x40020820
 80036ac:	cccccccd 	.word	0xcccccccd
 80036b0:	40020880 	.word	0x40020880

080036b4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b085      	sub	sp, #20
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80036c4:	68fa      	ldr	r2, [r7, #12]
 80036c6:	4b0b      	ldr	r3, [pc, #44]	@ (80036f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80036c8:	4413      	add	r3, r2
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	461a      	mov	r2, r3
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	4a08      	ldr	r2, [pc, #32]	@ (80036f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80036d6:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	3b01      	subs	r3, #1
 80036dc:	f003 031f 	and.w	r3, r3, #31
 80036e0:	2201      	movs	r2, #1
 80036e2:	409a      	lsls	r2, r3
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80036e8:	bf00      	nop
 80036ea:	3714      	adds	r7, #20
 80036ec:	46bd      	mov	sp, r7
 80036ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f2:	4770      	bx	lr
 80036f4:	1000823f 	.word	0x1000823f
 80036f8:	40020940 	.word	0x40020940

080036fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b087      	sub	sp, #28
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
 8003704:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003706:	2300      	movs	r3, #0
 8003708:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800370a:	e15a      	b.n	80039c2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	2101      	movs	r1, #1
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	fa01 f303 	lsl.w	r3, r1, r3
 8003718:	4013      	ands	r3, r2
 800371a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2b00      	cmp	r3, #0
 8003720:	f000 814c 	beq.w	80039bc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	f003 0303 	and.w	r3, r3, #3
 800372c:	2b01      	cmp	r3, #1
 800372e:	d005      	beq.n	800373c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003738:	2b02      	cmp	r3, #2
 800373a:	d130      	bne.n	800379e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	005b      	lsls	r3, r3, #1
 8003746:	2203      	movs	r2, #3
 8003748:	fa02 f303 	lsl.w	r3, r2, r3
 800374c:	43db      	mvns	r3, r3
 800374e:	693a      	ldr	r2, [r7, #16]
 8003750:	4013      	ands	r3, r2
 8003752:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	68da      	ldr	r2, [r3, #12]
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	005b      	lsls	r3, r3, #1
 800375c:	fa02 f303 	lsl.w	r3, r2, r3
 8003760:	693a      	ldr	r2, [r7, #16]
 8003762:	4313      	orrs	r3, r2
 8003764:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	693a      	ldr	r2, [r7, #16]
 800376a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003772:	2201      	movs	r2, #1
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	fa02 f303 	lsl.w	r3, r2, r3
 800377a:	43db      	mvns	r3, r3
 800377c:	693a      	ldr	r2, [r7, #16]
 800377e:	4013      	ands	r3, r2
 8003780:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	091b      	lsrs	r3, r3, #4
 8003788:	f003 0201 	and.w	r2, r3, #1
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	fa02 f303 	lsl.w	r3, r2, r3
 8003792:	693a      	ldr	r2, [r7, #16]
 8003794:	4313      	orrs	r3, r2
 8003796:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	693a      	ldr	r2, [r7, #16]
 800379c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	f003 0303 	and.w	r3, r3, #3
 80037a6:	2b03      	cmp	r3, #3
 80037a8:	d017      	beq.n	80037da <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	68db      	ldr	r3, [r3, #12]
 80037ae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	005b      	lsls	r3, r3, #1
 80037b4:	2203      	movs	r2, #3
 80037b6:	fa02 f303 	lsl.w	r3, r2, r3
 80037ba:	43db      	mvns	r3, r3
 80037bc:	693a      	ldr	r2, [r7, #16]
 80037be:	4013      	ands	r3, r2
 80037c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	689a      	ldr	r2, [r3, #8]
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	005b      	lsls	r3, r3, #1
 80037ca:	fa02 f303 	lsl.w	r3, r2, r3
 80037ce:	693a      	ldr	r2, [r7, #16]
 80037d0:	4313      	orrs	r3, r2
 80037d2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	693a      	ldr	r2, [r7, #16]
 80037d8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	f003 0303 	and.w	r3, r3, #3
 80037e2:	2b02      	cmp	r3, #2
 80037e4:	d123      	bne.n	800382e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	08da      	lsrs	r2, r3, #3
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	3208      	adds	r2, #8
 80037ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	f003 0307 	and.w	r3, r3, #7
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	220f      	movs	r2, #15
 80037fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003802:	43db      	mvns	r3, r3
 8003804:	693a      	ldr	r2, [r7, #16]
 8003806:	4013      	ands	r3, r2
 8003808:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	691a      	ldr	r2, [r3, #16]
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	f003 0307 	and.w	r3, r3, #7
 8003814:	009b      	lsls	r3, r3, #2
 8003816:	fa02 f303 	lsl.w	r3, r2, r3
 800381a:	693a      	ldr	r2, [r7, #16]
 800381c:	4313      	orrs	r3, r2
 800381e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	08da      	lsrs	r2, r3, #3
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	3208      	adds	r2, #8
 8003828:	6939      	ldr	r1, [r7, #16]
 800382a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	005b      	lsls	r3, r3, #1
 8003838:	2203      	movs	r2, #3
 800383a:	fa02 f303 	lsl.w	r3, r2, r3
 800383e:	43db      	mvns	r3, r3
 8003840:	693a      	ldr	r2, [r7, #16]
 8003842:	4013      	ands	r3, r2
 8003844:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	f003 0203 	and.w	r2, r3, #3
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	005b      	lsls	r3, r3, #1
 8003852:	fa02 f303 	lsl.w	r3, r2, r3
 8003856:	693a      	ldr	r2, [r7, #16]
 8003858:	4313      	orrs	r3, r2
 800385a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	693a      	ldr	r2, [r7, #16]
 8003860:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800386a:	2b00      	cmp	r3, #0
 800386c:	f000 80a6 	beq.w	80039bc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003870:	4b5b      	ldr	r3, [pc, #364]	@ (80039e0 <HAL_GPIO_Init+0x2e4>)
 8003872:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003874:	4a5a      	ldr	r2, [pc, #360]	@ (80039e0 <HAL_GPIO_Init+0x2e4>)
 8003876:	f043 0301 	orr.w	r3, r3, #1
 800387a:	6613      	str	r3, [r2, #96]	@ 0x60
 800387c:	4b58      	ldr	r3, [pc, #352]	@ (80039e0 <HAL_GPIO_Init+0x2e4>)
 800387e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003880:	f003 0301 	and.w	r3, r3, #1
 8003884:	60bb      	str	r3, [r7, #8]
 8003886:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003888:	4a56      	ldr	r2, [pc, #344]	@ (80039e4 <HAL_GPIO_Init+0x2e8>)
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	089b      	lsrs	r3, r3, #2
 800388e:	3302      	adds	r3, #2
 8003890:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003894:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	f003 0303 	and.w	r3, r3, #3
 800389c:	009b      	lsls	r3, r3, #2
 800389e:	220f      	movs	r2, #15
 80038a0:	fa02 f303 	lsl.w	r3, r2, r3
 80038a4:	43db      	mvns	r3, r3
 80038a6:	693a      	ldr	r2, [r7, #16]
 80038a8:	4013      	ands	r3, r2
 80038aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80038b2:	d01f      	beq.n	80038f4 <HAL_GPIO_Init+0x1f8>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	4a4c      	ldr	r2, [pc, #304]	@ (80039e8 <HAL_GPIO_Init+0x2ec>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d019      	beq.n	80038f0 <HAL_GPIO_Init+0x1f4>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	4a4b      	ldr	r2, [pc, #300]	@ (80039ec <HAL_GPIO_Init+0x2f0>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d013      	beq.n	80038ec <HAL_GPIO_Init+0x1f0>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	4a4a      	ldr	r2, [pc, #296]	@ (80039f0 <HAL_GPIO_Init+0x2f4>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d00d      	beq.n	80038e8 <HAL_GPIO_Init+0x1ec>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	4a49      	ldr	r2, [pc, #292]	@ (80039f4 <HAL_GPIO_Init+0x2f8>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d007      	beq.n	80038e4 <HAL_GPIO_Init+0x1e8>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	4a48      	ldr	r2, [pc, #288]	@ (80039f8 <HAL_GPIO_Init+0x2fc>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d101      	bne.n	80038e0 <HAL_GPIO_Init+0x1e4>
 80038dc:	2305      	movs	r3, #5
 80038de:	e00a      	b.n	80038f6 <HAL_GPIO_Init+0x1fa>
 80038e0:	2306      	movs	r3, #6
 80038e2:	e008      	b.n	80038f6 <HAL_GPIO_Init+0x1fa>
 80038e4:	2304      	movs	r3, #4
 80038e6:	e006      	b.n	80038f6 <HAL_GPIO_Init+0x1fa>
 80038e8:	2303      	movs	r3, #3
 80038ea:	e004      	b.n	80038f6 <HAL_GPIO_Init+0x1fa>
 80038ec:	2302      	movs	r3, #2
 80038ee:	e002      	b.n	80038f6 <HAL_GPIO_Init+0x1fa>
 80038f0:	2301      	movs	r3, #1
 80038f2:	e000      	b.n	80038f6 <HAL_GPIO_Init+0x1fa>
 80038f4:	2300      	movs	r3, #0
 80038f6:	697a      	ldr	r2, [r7, #20]
 80038f8:	f002 0203 	and.w	r2, r2, #3
 80038fc:	0092      	lsls	r2, r2, #2
 80038fe:	4093      	lsls	r3, r2
 8003900:	693a      	ldr	r2, [r7, #16]
 8003902:	4313      	orrs	r3, r2
 8003904:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003906:	4937      	ldr	r1, [pc, #220]	@ (80039e4 <HAL_GPIO_Init+0x2e8>)
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	089b      	lsrs	r3, r3, #2
 800390c:	3302      	adds	r3, #2
 800390e:	693a      	ldr	r2, [r7, #16]
 8003910:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003914:	4b39      	ldr	r3, [pc, #228]	@ (80039fc <HAL_GPIO_Init+0x300>)
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	43db      	mvns	r3, r3
 800391e:	693a      	ldr	r2, [r7, #16]
 8003920:	4013      	ands	r3, r2
 8003922:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800392c:	2b00      	cmp	r3, #0
 800392e:	d003      	beq.n	8003938 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003930:	693a      	ldr	r2, [r7, #16]
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	4313      	orrs	r3, r2
 8003936:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003938:	4a30      	ldr	r2, [pc, #192]	@ (80039fc <HAL_GPIO_Init+0x300>)
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800393e:	4b2f      	ldr	r3, [pc, #188]	@ (80039fc <HAL_GPIO_Init+0x300>)
 8003940:	68db      	ldr	r3, [r3, #12]
 8003942:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	43db      	mvns	r3, r3
 8003948:	693a      	ldr	r2, [r7, #16]
 800394a:	4013      	ands	r3, r2
 800394c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003956:	2b00      	cmp	r3, #0
 8003958:	d003      	beq.n	8003962 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800395a:	693a      	ldr	r2, [r7, #16]
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	4313      	orrs	r3, r2
 8003960:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003962:	4a26      	ldr	r2, [pc, #152]	@ (80039fc <HAL_GPIO_Init+0x300>)
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003968:	4b24      	ldr	r3, [pc, #144]	@ (80039fc <HAL_GPIO_Init+0x300>)
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	43db      	mvns	r3, r3
 8003972:	693a      	ldr	r2, [r7, #16]
 8003974:	4013      	ands	r3, r2
 8003976:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003980:	2b00      	cmp	r3, #0
 8003982:	d003      	beq.n	800398c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003984:	693a      	ldr	r2, [r7, #16]
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	4313      	orrs	r3, r2
 800398a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800398c:	4a1b      	ldr	r2, [pc, #108]	@ (80039fc <HAL_GPIO_Init+0x300>)
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003992:	4b1a      	ldr	r3, [pc, #104]	@ (80039fc <HAL_GPIO_Init+0x300>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	43db      	mvns	r3, r3
 800399c:	693a      	ldr	r2, [r7, #16]
 800399e:	4013      	ands	r3, r2
 80039a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d003      	beq.n	80039b6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80039ae:	693a      	ldr	r2, [r7, #16]
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	4313      	orrs	r3, r2
 80039b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80039b6:	4a11      	ldr	r2, [pc, #68]	@ (80039fc <HAL_GPIO_Init+0x300>)
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	3301      	adds	r3, #1
 80039c0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	fa22 f303 	lsr.w	r3, r2, r3
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	f47f ae9d 	bne.w	800370c <HAL_GPIO_Init+0x10>
  }
}
 80039d2:	bf00      	nop
 80039d4:	bf00      	nop
 80039d6:	371c      	adds	r7, #28
 80039d8:	46bd      	mov	sp, r7
 80039da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039de:	4770      	bx	lr
 80039e0:	40021000 	.word	0x40021000
 80039e4:	40010000 	.word	0x40010000
 80039e8:	48000400 	.word	0x48000400
 80039ec:	48000800 	.word	0x48000800
 80039f0:	48000c00 	.word	0x48000c00
 80039f4:	48001000 	.word	0x48001000
 80039f8:	48001400 	.word	0x48001400
 80039fc:	40010400 	.word	0x40010400

08003a00 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b082      	sub	sp, #8
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	4603      	mov	r3, r0
 8003a08:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003a0a:	4b08      	ldr	r3, [pc, #32]	@ (8003a2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a0c:	695a      	ldr	r2, [r3, #20]
 8003a0e:	88fb      	ldrh	r3, [r7, #6]
 8003a10:	4013      	ands	r3, r2
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d006      	beq.n	8003a24 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003a16:	4a05      	ldr	r2, [pc, #20]	@ (8003a2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a18:	88fb      	ldrh	r3, [r7, #6]
 8003a1a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003a1c:	88fb      	ldrh	r3, [r7, #6]
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f000 f806 	bl	8003a30 <HAL_GPIO_EXTI_Callback>
  }
}
 8003a24:	bf00      	nop
 8003a26:	3708      	adds	r7, #8
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}
 8003a2c:	40010400 	.word	0x40010400

08003a30 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b083      	sub	sp, #12
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	4603      	mov	r3, r0
 8003a38:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003a3a:	bf00      	nop
 8003a3c:	370c      	adds	r7, #12
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr
	...

08003a48 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b085      	sub	sp, #20
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d141      	bne.n	8003ada <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003a56:	4b4b      	ldr	r3, [pc, #300]	@ (8003b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003a5e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a62:	d131      	bne.n	8003ac8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003a64:	4b47      	ldr	r3, [pc, #284]	@ (8003b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003a6a:	4a46      	ldr	r2, [pc, #280]	@ (8003b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a6c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003a70:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003a74:	4b43      	ldr	r3, [pc, #268]	@ (8003b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003a7c:	4a41      	ldr	r2, [pc, #260]	@ (8003b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a7e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003a82:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003a84:	4b40      	ldr	r3, [pc, #256]	@ (8003b88 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	2232      	movs	r2, #50	@ 0x32
 8003a8a:	fb02 f303 	mul.w	r3, r2, r3
 8003a8e:	4a3f      	ldr	r2, [pc, #252]	@ (8003b8c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003a90:	fba2 2303 	umull	r2, r3, r2, r3
 8003a94:	0c9b      	lsrs	r3, r3, #18
 8003a96:	3301      	adds	r3, #1
 8003a98:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a9a:	e002      	b.n	8003aa2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	3b01      	subs	r3, #1
 8003aa0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003aa2:	4b38      	ldr	r3, [pc, #224]	@ (8003b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003aa4:	695b      	ldr	r3, [r3, #20]
 8003aa6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003aaa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003aae:	d102      	bne.n	8003ab6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d1f2      	bne.n	8003a9c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003ab6:	4b33      	ldr	r3, [pc, #204]	@ (8003b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ab8:	695b      	ldr	r3, [r3, #20]
 8003aba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003abe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ac2:	d158      	bne.n	8003b76 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003ac4:	2303      	movs	r3, #3
 8003ac6:	e057      	b.n	8003b78 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003ac8:	4b2e      	ldr	r3, [pc, #184]	@ (8003b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003aca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003ace:	4a2d      	ldr	r2, [pc, #180]	@ (8003b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ad0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003ad4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003ad8:	e04d      	b.n	8003b76 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ae0:	d141      	bne.n	8003b66 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003ae2:	4b28      	ldr	r3, [pc, #160]	@ (8003b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003aea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003aee:	d131      	bne.n	8003b54 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003af0:	4b24      	ldr	r3, [pc, #144]	@ (8003b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003af2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003af6:	4a23      	ldr	r2, [pc, #140]	@ (8003b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003af8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003afc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003b00:	4b20      	ldr	r3, [pc, #128]	@ (8003b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003b08:	4a1e      	ldr	r2, [pc, #120]	@ (8003b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b0a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003b0e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003b10:	4b1d      	ldr	r3, [pc, #116]	@ (8003b88 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	2232      	movs	r2, #50	@ 0x32
 8003b16:	fb02 f303 	mul.w	r3, r2, r3
 8003b1a:	4a1c      	ldr	r2, [pc, #112]	@ (8003b8c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003b1c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b20:	0c9b      	lsrs	r3, r3, #18
 8003b22:	3301      	adds	r3, #1
 8003b24:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003b26:	e002      	b.n	8003b2e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	3b01      	subs	r3, #1
 8003b2c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003b2e:	4b15      	ldr	r3, [pc, #84]	@ (8003b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b30:	695b      	ldr	r3, [r3, #20]
 8003b32:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b3a:	d102      	bne.n	8003b42 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d1f2      	bne.n	8003b28 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003b42:	4b10      	ldr	r3, [pc, #64]	@ (8003b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b44:	695b      	ldr	r3, [r3, #20]
 8003b46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b4e:	d112      	bne.n	8003b76 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003b50:	2303      	movs	r3, #3
 8003b52:	e011      	b.n	8003b78 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003b54:	4b0b      	ldr	r3, [pc, #44]	@ (8003b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003b5a:	4a0a      	ldr	r2, [pc, #40]	@ (8003b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b60:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003b64:	e007      	b.n	8003b76 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003b66:	4b07      	ldr	r3, [pc, #28]	@ (8003b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003b6e:	4a05      	ldr	r2, [pc, #20]	@ (8003b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b70:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003b74:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003b76:	2300      	movs	r3, #0
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	3714      	adds	r7, #20
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b82:	4770      	bx	lr
 8003b84:	40007000 	.word	0x40007000
 8003b88:	20000000 	.word	0x20000000
 8003b8c:	431bde83 	.word	0x431bde83

08003b90 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003b90:	b480      	push	{r7}
 8003b92:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003b94:	4b05      	ldr	r3, [pc, #20]	@ (8003bac <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	4a04      	ldr	r2, [pc, #16]	@ (8003bac <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003b9a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003b9e:	6093      	str	r3, [r2, #8]
}
 8003ba0:	bf00      	nop
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba8:	4770      	bx	lr
 8003baa:	bf00      	nop
 8003bac:	40007000 	.word	0x40007000

08003bb0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b088      	sub	sp, #32
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d101      	bne.n	8003bc2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e2fe      	b.n	80041c0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 0301 	and.w	r3, r3, #1
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d075      	beq.n	8003cba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003bce:	4b97      	ldr	r3, [pc, #604]	@ (8003e2c <HAL_RCC_OscConfig+0x27c>)
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	f003 030c 	and.w	r3, r3, #12
 8003bd6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003bd8:	4b94      	ldr	r3, [pc, #592]	@ (8003e2c <HAL_RCC_OscConfig+0x27c>)
 8003bda:	68db      	ldr	r3, [r3, #12]
 8003bdc:	f003 0303 	and.w	r3, r3, #3
 8003be0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003be2:	69bb      	ldr	r3, [r7, #24]
 8003be4:	2b0c      	cmp	r3, #12
 8003be6:	d102      	bne.n	8003bee <HAL_RCC_OscConfig+0x3e>
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	2b03      	cmp	r3, #3
 8003bec:	d002      	beq.n	8003bf4 <HAL_RCC_OscConfig+0x44>
 8003bee:	69bb      	ldr	r3, [r7, #24]
 8003bf0:	2b08      	cmp	r3, #8
 8003bf2:	d10b      	bne.n	8003c0c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bf4:	4b8d      	ldr	r3, [pc, #564]	@ (8003e2c <HAL_RCC_OscConfig+0x27c>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d05b      	beq.n	8003cb8 <HAL_RCC_OscConfig+0x108>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d157      	bne.n	8003cb8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	e2d9      	b.n	80041c0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c14:	d106      	bne.n	8003c24 <HAL_RCC_OscConfig+0x74>
 8003c16:	4b85      	ldr	r3, [pc, #532]	@ (8003e2c <HAL_RCC_OscConfig+0x27c>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a84      	ldr	r2, [pc, #528]	@ (8003e2c <HAL_RCC_OscConfig+0x27c>)
 8003c1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c20:	6013      	str	r3, [r2, #0]
 8003c22:	e01d      	b.n	8003c60 <HAL_RCC_OscConfig+0xb0>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003c2c:	d10c      	bne.n	8003c48 <HAL_RCC_OscConfig+0x98>
 8003c2e:	4b7f      	ldr	r3, [pc, #508]	@ (8003e2c <HAL_RCC_OscConfig+0x27c>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a7e      	ldr	r2, [pc, #504]	@ (8003e2c <HAL_RCC_OscConfig+0x27c>)
 8003c34:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003c38:	6013      	str	r3, [r2, #0]
 8003c3a:	4b7c      	ldr	r3, [pc, #496]	@ (8003e2c <HAL_RCC_OscConfig+0x27c>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a7b      	ldr	r2, [pc, #492]	@ (8003e2c <HAL_RCC_OscConfig+0x27c>)
 8003c40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c44:	6013      	str	r3, [r2, #0]
 8003c46:	e00b      	b.n	8003c60 <HAL_RCC_OscConfig+0xb0>
 8003c48:	4b78      	ldr	r3, [pc, #480]	@ (8003e2c <HAL_RCC_OscConfig+0x27c>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a77      	ldr	r2, [pc, #476]	@ (8003e2c <HAL_RCC_OscConfig+0x27c>)
 8003c4e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c52:	6013      	str	r3, [r2, #0]
 8003c54:	4b75      	ldr	r3, [pc, #468]	@ (8003e2c <HAL_RCC_OscConfig+0x27c>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a74      	ldr	r2, [pc, #464]	@ (8003e2c <HAL_RCC_OscConfig+0x27c>)
 8003c5a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003c5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d013      	beq.n	8003c90 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c68:	f7fd fc3a 	bl	80014e0 <HAL_GetTick>
 8003c6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c6e:	e008      	b.n	8003c82 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c70:	f7fd fc36 	bl	80014e0 <HAL_GetTick>
 8003c74:	4602      	mov	r2, r0
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	2b64      	cmp	r3, #100	@ 0x64
 8003c7c:	d901      	bls.n	8003c82 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003c7e:	2303      	movs	r3, #3
 8003c80:	e29e      	b.n	80041c0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c82:	4b6a      	ldr	r3, [pc, #424]	@ (8003e2c <HAL_RCC_OscConfig+0x27c>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d0f0      	beq.n	8003c70 <HAL_RCC_OscConfig+0xc0>
 8003c8e:	e014      	b.n	8003cba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c90:	f7fd fc26 	bl	80014e0 <HAL_GetTick>
 8003c94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c96:	e008      	b.n	8003caa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c98:	f7fd fc22 	bl	80014e0 <HAL_GetTick>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	1ad3      	subs	r3, r2, r3
 8003ca2:	2b64      	cmp	r3, #100	@ 0x64
 8003ca4:	d901      	bls.n	8003caa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003ca6:	2303      	movs	r3, #3
 8003ca8:	e28a      	b.n	80041c0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003caa:	4b60      	ldr	r3, [pc, #384]	@ (8003e2c <HAL_RCC_OscConfig+0x27c>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d1f0      	bne.n	8003c98 <HAL_RCC_OscConfig+0xe8>
 8003cb6:	e000      	b.n	8003cba <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 0302 	and.w	r3, r3, #2
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d075      	beq.n	8003db2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003cc6:	4b59      	ldr	r3, [pc, #356]	@ (8003e2c <HAL_RCC_OscConfig+0x27c>)
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	f003 030c 	and.w	r3, r3, #12
 8003cce:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003cd0:	4b56      	ldr	r3, [pc, #344]	@ (8003e2c <HAL_RCC_OscConfig+0x27c>)
 8003cd2:	68db      	ldr	r3, [r3, #12]
 8003cd4:	f003 0303 	and.w	r3, r3, #3
 8003cd8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003cda:	69bb      	ldr	r3, [r7, #24]
 8003cdc:	2b0c      	cmp	r3, #12
 8003cde:	d102      	bne.n	8003ce6 <HAL_RCC_OscConfig+0x136>
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	2b02      	cmp	r3, #2
 8003ce4:	d002      	beq.n	8003cec <HAL_RCC_OscConfig+0x13c>
 8003ce6:	69bb      	ldr	r3, [r7, #24]
 8003ce8:	2b04      	cmp	r3, #4
 8003cea:	d11f      	bne.n	8003d2c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003cec:	4b4f      	ldr	r3, [pc, #316]	@ (8003e2c <HAL_RCC_OscConfig+0x27c>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d005      	beq.n	8003d04 <HAL_RCC_OscConfig+0x154>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	68db      	ldr	r3, [r3, #12]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d101      	bne.n	8003d04 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	e25d      	b.n	80041c0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d04:	4b49      	ldr	r3, [pc, #292]	@ (8003e2c <HAL_RCC_OscConfig+0x27c>)
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	691b      	ldr	r3, [r3, #16]
 8003d10:	061b      	lsls	r3, r3, #24
 8003d12:	4946      	ldr	r1, [pc, #280]	@ (8003e2c <HAL_RCC_OscConfig+0x27c>)
 8003d14:	4313      	orrs	r3, r2
 8003d16:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003d18:	4b45      	ldr	r3, [pc, #276]	@ (8003e30 <HAL_RCC_OscConfig+0x280>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f7fd fb93 	bl	8001448 <HAL_InitTick>
 8003d22:	4603      	mov	r3, r0
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d043      	beq.n	8003db0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	e249      	b.n	80041c0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	68db      	ldr	r3, [r3, #12]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d023      	beq.n	8003d7c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d34:	4b3d      	ldr	r3, [pc, #244]	@ (8003e2c <HAL_RCC_OscConfig+0x27c>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a3c      	ldr	r2, [pc, #240]	@ (8003e2c <HAL_RCC_OscConfig+0x27c>)
 8003d3a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d40:	f7fd fbce 	bl	80014e0 <HAL_GetTick>
 8003d44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d46:	e008      	b.n	8003d5a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d48:	f7fd fbca 	bl	80014e0 <HAL_GetTick>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	1ad3      	subs	r3, r2, r3
 8003d52:	2b02      	cmp	r3, #2
 8003d54:	d901      	bls.n	8003d5a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003d56:	2303      	movs	r3, #3
 8003d58:	e232      	b.n	80041c0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d5a:	4b34      	ldr	r3, [pc, #208]	@ (8003e2c <HAL_RCC_OscConfig+0x27c>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d0f0      	beq.n	8003d48 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d66:	4b31      	ldr	r3, [pc, #196]	@ (8003e2c <HAL_RCC_OscConfig+0x27c>)
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	691b      	ldr	r3, [r3, #16]
 8003d72:	061b      	lsls	r3, r3, #24
 8003d74:	492d      	ldr	r1, [pc, #180]	@ (8003e2c <HAL_RCC_OscConfig+0x27c>)
 8003d76:	4313      	orrs	r3, r2
 8003d78:	604b      	str	r3, [r1, #4]
 8003d7a:	e01a      	b.n	8003db2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d7c:	4b2b      	ldr	r3, [pc, #172]	@ (8003e2c <HAL_RCC_OscConfig+0x27c>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a2a      	ldr	r2, [pc, #168]	@ (8003e2c <HAL_RCC_OscConfig+0x27c>)
 8003d82:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003d86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d88:	f7fd fbaa 	bl	80014e0 <HAL_GetTick>
 8003d8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003d8e:	e008      	b.n	8003da2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d90:	f7fd fba6 	bl	80014e0 <HAL_GetTick>
 8003d94:	4602      	mov	r2, r0
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	1ad3      	subs	r3, r2, r3
 8003d9a:	2b02      	cmp	r3, #2
 8003d9c:	d901      	bls.n	8003da2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003d9e:	2303      	movs	r3, #3
 8003da0:	e20e      	b.n	80041c0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003da2:	4b22      	ldr	r3, [pc, #136]	@ (8003e2c <HAL_RCC_OscConfig+0x27c>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d1f0      	bne.n	8003d90 <HAL_RCC_OscConfig+0x1e0>
 8003dae:	e000      	b.n	8003db2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003db0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f003 0308 	and.w	r3, r3, #8
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d041      	beq.n	8003e42 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	695b      	ldr	r3, [r3, #20]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d01c      	beq.n	8003e00 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003dc6:	4b19      	ldr	r3, [pc, #100]	@ (8003e2c <HAL_RCC_OscConfig+0x27c>)
 8003dc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003dcc:	4a17      	ldr	r2, [pc, #92]	@ (8003e2c <HAL_RCC_OscConfig+0x27c>)
 8003dce:	f043 0301 	orr.w	r3, r3, #1
 8003dd2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dd6:	f7fd fb83 	bl	80014e0 <HAL_GetTick>
 8003dda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003ddc:	e008      	b.n	8003df0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003dde:	f7fd fb7f 	bl	80014e0 <HAL_GetTick>
 8003de2:	4602      	mov	r2, r0
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	1ad3      	subs	r3, r2, r3
 8003de8:	2b02      	cmp	r3, #2
 8003dea:	d901      	bls.n	8003df0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003dec:	2303      	movs	r3, #3
 8003dee:	e1e7      	b.n	80041c0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003df0:	4b0e      	ldr	r3, [pc, #56]	@ (8003e2c <HAL_RCC_OscConfig+0x27c>)
 8003df2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003df6:	f003 0302 	and.w	r3, r3, #2
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d0ef      	beq.n	8003dde <HAL_RCC_OscConfig+0x22e>
 8003dfe:	e020      	b.n	8003e42 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e00:	4b0a      	ldr	r3, [pc, #40]	@ (8003e2c <HAL_RCC_OscConfig+0x27c>)
 8003e02:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e06:	4a09      	ldr	r2, [pc, #36]	@ (8003e2c <HAL_RCC_OscConfig+0x27c>)
 8003e08:	f023 0301 	bic.w	r3, r3, #1
 8003e0c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e10:	f7fd fb66 	bl	80014e0 <HAL_GetTick>
 8003e14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003e16:	e00d      	b.n	8003e34 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e18:	f7fd fb62 	bl	80014e0 <HAL_GetTick>
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	1ad3      	subs	r3, r2, r3
 8003e22:	2b02      	cmp	r3, #2
 8003e24:	d906      	bls.n	8003e34 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003e26:	2303      	movs	r3, #3
 8003e28:	e1ca      	b.n	80041c0 <HAL_RCC_OscConfig+0x610>
 8003e2a:	bf00      	nop
 8003e2c:	40021000 	.word	0x40021000
 8003e30:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003e34:	4b8c      	ldr	r3, [pc, #560]	@ (8004068 <HAL_RCC_OscConfig+0x4b8>)
 8003e36:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e3a:	f003 0302 	and.w	r3, r3, #2
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d1ea      	bne.n	8003e18 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f003 0304 	and.w	r3, r3, #4
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	f000 80a6 	beq.w	8003f9c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e50:	2300      	movs	r3, #0
 8003e52:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003e54:	4b84      	ldr	r3, [pc, #528]	@ (8004068 <HAL_RCC_OscConfig+0x4b8>)
 8003e56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e58:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d101      	bne.n	8003e64 <HAL_RCC_OscConfig+0x2b4>
 8003e60:	2301      	movs	r3, #1
 8003e62:	e000      	b.n	8003e66 <HAL_RCC_OscConfig+0x2b6>
 8003e64:	2300      	movs	r3, #0
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d00d      	beq.n	8003e86 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e6a:	4b7f      	ldr	r3, [pc, #508]	@ (8004068 <HAL_RCC_OscConfig+0x4b8>)
 8003e6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e6e:	4a7e      	ldr	r2, [pc, #504]	@ (8004068 <HAL_RCC_OscConfig+0x4b8>)
 8003e70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e74:	6593      	str	r3, [r2, #88]	@ 0x58
 8003e76:	4b7c      	ldr	r3, [pc, #496]	@ (8004068 <HAL_RCC_OscConfig+0x4b8>)
 8003e78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e7e:	60fb      	str	r3, [r7, #12]
 8003e80:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003e82:	2301      	movs	r3, #1
 8003e84:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e86:	4b79      	ldr	r3, [pc, #484]	@ (800406c <HAL_RCC_OscConfig+0x4bc>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d118      	bne.n	8003ec4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e92:	4b76      	ldr	r3, [pc, #472]	@ (800406c <HAL_RCC_OscConfig+0x4bc>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a75      	ldr	r2, [pc, #468]	@ (800406c <HAL_RCC_OscConfig+0x4bc>)
 8003e98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e9e:	f7fd fb1f 	bl	80014e0 <HAL_GetTick>
 8003ea2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ea4:	e008      	b.n	8003eb8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ea6:	f7fd fb1b 	bl	80014e0 <HAL_GetTick>
 8003eaa:	4602      	mov	r2, r0
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	1ad3      	subs	r3, r2, r3
 8003eb0:	2b02      	cmp	r3, #2
 8003eb2:	d901      	bls.n	8003eb8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003eb4:	2303      	movs	r3, #3
 8003eb6:	e183      	b.n	80041c0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003eb8:	4b6c      	ldr	r3, [pc, #432]	@ (800406c <HAL_RCC_OscConfig+0x4bc>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d0f0      	beq.n	8003ea6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	2b01      	cmp	r3, #1
 8003eca:	d108      	bne.n	8003ede <HAL_RCC_OscConfig+0x32e>
 8003ecc:	4b66      	ldr	r3, [pc, #408]	@ (8004068 <HAL_RCC_OscConfig+0x4b8>)
 8003ece:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ed2:	4a65      	ldr	r2, [pc, #404]	@ (8004068 <HAL_RCC_OscConfig+0x4b8>)
 8003ed4:	f043 0301 	orr.w	r3, r3, #1
 8003ed8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003edc:	e024      	b.n	8003f28 <HAL_RCC_OscConfig+0x378>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	2b05      	cmp	r3, #5
 8003ee4:	d110      	bne.n	8003f08 <HAL_RCC_OscConfig+0x358>
 8003ee6:	4b60      	ldr	r3, [pc, #384]	@ (8004068 <HAL_RCC_OscConfig+0x4b8>)
 8003ee8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003eec:	4a5e      	ldr	r2, [pc, #376]	@ (8004068 <HAL_RCC_OscConfig+0x4b8>)
 8003eee:	f043 0304 	orr.w	r3, r3, #4
 8003ef2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003ef6:	4b5c      	ldr	r3, [pc, #368]	@ (8004068 <HAL_RCC_OscConfig+0x4b8>)
 8003ef8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003efc:	4a5a      	ldr	r2, [pc, #360]	@ (8004068 <HAL_RCC_OscConfig+0x4b8>)
 8003efe:	f043 0301 	orr.w	r3, r3, #1
 8003f02:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003f06:	e00f      	b.n	8003f28 <HAL_RCC_OscConfig+0x378>
 8003f08:	4b57      	ldr	r3, [pc, #348]	@ (8004068 <HAL_RCC_OscConfig+0x4b8>)
 8003f0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f0e:	4a56      	ldr	r2, [pc, #344]	@ (8004068 <HAL_RCC_OscConfig+0x4b8>)
 8003f10:	f023 0301 	bic.w	r3, r3, #1
 8003f14:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003f18:	4b53      	ldr	r3, [pc, #332]	@ (8004068 <HAL_RCC_OscConfig+0x4b8>)
 8003f1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f1e:	4a52      	ldr	r2, [pc, #328]	@ (8004068 <HAL_RCC_OscConfig+0x4b8>)
 8003f20:	f023 0304 	bic.w	r3, r3, #4
 8003f24:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d016      	beq.n	8003f5e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f30:	f7fd fad6 	bl	80014e0 <HAL_GetTick>
 8003f34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f36:	e00a      	b.n	8003f4e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f38:	f7fd fad2 	bl	80014e0 <HAL_GetTick>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	1ad3      	subs	r3, r2, r3
 8003f42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d901      	bls.n	8003f4e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003f4a:	2303      	movs	r3, #3
 8003f4c:	e138      	b.n	80041c0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f4e:	4b46      	ldr	r3, [pc, #280]	@ (8004068 <HAL_RCC_OscConfig+0x4b8>)
 8003f50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f54:	f003 0302 	and.w	r3, r3, #2
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d0ed      	beq.n	8003f38 <HAL_RCC_OscConfig+0x388>
 8003f5c:	e015      	b.n	8003f8a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f5e:	f7fd fabf 	bl	80014e0 <HAL_GetTick>
 8003f62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003f64:	e00a      	b.n	8003f7c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f66:	f7fd fabb 	bl	80014e0 <HAL_GetTick>
 8003f6a:	4602      	mov	r2, r0
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	1ad3      	subs	r3, r2, r3
 8003f70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d901      	bls.n	8003f7c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003f78:	2303      	movs	r3, #3
 8003f7a:	e121      	b.n	80041c0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003f7c:	4b3a      	ldr	r3, [pc, #232]	@ (8004068 <HAL_RCC_OscConfig+0x4b8>)
 8003f7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f82:	f003 0302 	and.w	r3, r3, #2
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d1ed      	bne.n	8003f66 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003f8a:	7ffb      	ldrb	r3, [r7, #31]
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	d105      	bne.n	8003f9c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f90:	4b35      	ldr	r3, [pc, #212]	@ (8004068 <HAL_RCC_OscConfig+0x4b8>)
 8003f92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f94:	4a34      	ldr	r2, [pc, #208]	@ (8004068 <HAL_RCC_OscConfig+0x4b8>)
 8003f96:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f9a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f003 0320 	and.w	r3, r3, #32
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d03c      	beq.n	8004022 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	699b      	ldr	r3, [r3, #24]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d01c      	beq.n	8003fea <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003fb0:	4b2d      	ldr	r3, [pc, #180]	@ (8004068 <HAL_RCC_OscConfig+0x4b8>)
 8003fb2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003fb6:	4a2c      	ldr	r2, [pc, #176]	@ (8004068 <HAL_RCC_OscConfig+0x4b8>)
 8003fb8:	f043 0301 	orr.w	r3, r3, #1
 8003fbc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fc0:	f7fd fa8e 	bl	80014e0 <HAL_GetTick>
 8003fc4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003fc6:	e008      	b.n	8003fda <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003fc8:	f7fd fa8a 	bl	80014e0 <HAL_GetTick>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	1ad3      	subs	r3, r2, r3
 8003fd2:	2b02      	cmp	r3, #2
 8003fd4:	d901      	bls.n	8003fda <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003fd6:	2303      	movs	r3, #3
 8003fd8:	e0f2      	b.n	80041c0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003fda:	4b23      	ldr	r3, [pc, #140]	@ (8004068 <HAL_RCC_OscConfig+0x4b8>)
 8003fdc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003fe0:	f003 0302 	and.w	r3, r3, #2
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d0ef      	beq.n	8003fc8 <HAL_RCC_OscConfig+0x418>
 8003fe8:	e01b      	b.n	8004022 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003fea:	4b1f      	ldr	r3, [pc, #124]	@ (8004068 <HAL_RCC_OscConfig+0x4b8>)
 8003fec:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003ff0:	4a1d      	ldr	r2, [pc, #116]	@ (8004068 <HAL_RCC_OscConfig+0x4b8>)
 8003ff2:	f023 0301 	bic.w	r3, r3, #1
 8003ff6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ffa:	f7fd fa71 	bl	80014e0 <HAL_GetTick>
 8003ffe:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004000:	e008      	b.n	8004014 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004002:	f7fd fa6d 	bl	80014e0 <HAL_GetTick>
 8004006:	4602      	mov	r2, r0
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	1ad3      	subs	r3, r2, r3
 800400c:	2b02      	cmp	r3, #2
 800400e:	d901      	bls.n	8004014 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004010:	2303      	movs	r3, #3
 8004012:	e0d5      	b.n	80041c0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004014:	4b14      	ldr	r3, [pc, #80]	@ (8004068 <HAL_RCC_OscConfig+0x4b8>)
 8004016:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800401a:	f003 0302 	and.w	r3, r3, #2
 800401e:	2b00      	cmp	r3, #0
 8004020:	d1ef      	bne.n	8004002 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	69db      	ldr	r3, [r3, #28]
 8004026:	2b00      	cmp	r3, #0
 8004028:	f000 80c9 	beq.w	80041be <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800402c:	4b0e      	ldr	r3, [pc, #56]	@ (8004068 <HAL_RCC_OscConfig+0x4b8>)
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	f003 030c 	and.w	r3, r3, #12
 8004034:	2b0c      	cmp	r3, #12
 8004036:	f000 8083 	beq.w	8004140 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	69db      	ldr	r3, [r3, #28]
 800403e:	2b02      	cmp	r3, #2
 8004040:	d15e      	bne.n	8004100 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004042:	4b09      	ldr	r3, [pc, #36]	@ (8004068 <HAL_RCC_OscConfig+0x4b8>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a08      	ldr	r2, [pc, #32]	@ (8004068 <HAL_RCC_OscConfig+0x4b8>)
 8004048:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800404c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800404e:	f7fd fa47 	bl	80014e0 <HAL_GetTick>
 8004052:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004054:	e00c      	b.n	8004070 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004056:	f7fd fa43 	bl	80014e0 <HAL_GetTick>
 800405a:	4602      	mov	r2, r0
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	1ad3      	subs	r3, r2, r3
 8004060:	2b02      	cmp	r3, #2
 8004062:	d905      	bls.n	8004070 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004064:	2303      	movs	r3, #3
 8004066:	e0ab      	b.n	80041c0 <HAL_RCC_OscConfig+0x610>
 8004068:	40021000 	.word	0x40021000
 800406c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004070:	4b55      	ldr	r3, [pc, #340]	@ (80041c8 <HAL_RCC_OscConfig+0x618>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004078:	2b00      	cmp	r3, #0
 800407a:	d1ec      	bne.n	8004056 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800407c:	4b52      	ldr	r3, [pc, #328]	@ (80041c8 <HAL_RCC_OscConfig+0x618>)
 800407e:	68da      	ldr	r2, [r3, #12]
 8004080:	4b52      	ldr	r3, [pc, #328]	@ (80041cc <HAL_RCC_OscConfig+0x61c>)
 8004082:	4013      	ands	r3, r2
 8004084:	687a      	ldr	r2, [r7, #4]
 8004086:	6a11      	ldr	r1, [r2, #32]
 8004088:	687a      	ldr	r2, [r7, #4]
 800408a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800408c:	3a01      	subs	r2, #1
 800408e:	0112      	lsls	r2, r2, #4
 8004090:	4311      	orrs	r1, r2
 8004092:	687a      	ldr	r2, [r7, #4]
 8004094:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004096:	0212      	lsls	r2, r2, #8
 8004098:	4311      	orrs	r1, r2
 800409a:	687a      	ldr	r2, [r7, #4]
 800409c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800409e:	0852      	lsrs	r2, r2, #1
 80040a0:	3a01      	subs	r2, #1
 80040a2:	0552      	lsls	r2, r2, #21
 80040a4:	4311      	orrs	r1, r2
 80040a6:	687a      	ldr	r2, [r7, #4]
 80040a8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80040aa:	0852      	lsrs	r2, r2, #1
 80040ac:	3a01      	subs	r2, #1
 80040ae:	0652      	lsls	r2, r2, #25
 80040b0:	4311      	orrs	r1, r2
 80040b2:	687a      	ldr	r2, [r7, #4]
 80040b4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80040b6:	06d2      	lsls	r2, r2, #27
 80040b8:	430a      	orrs	r2, r1
 80040ba:	4943      	ldr	r1, [pc, #268]	@ (80041c8 <HAL_RCC_OscConfig+0x618>)
 80040bc:	4313      	orrs	r3, r2
 80040be:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80040c0:	4b41      	ldr	r3, [pc, #260]	@ (80041c8 <HAL_RCC_OscConfig+0x618>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a40      	ldr	r2, [pc, #256]	@ (80041c8 <HAL_RCC_OscConfig+0x618>)
 80040c6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80040ca:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80040cc:	4b3e      	ldr	r3, [pc, #248]	@ (80041c8 <HAL_RCC_OscConfig+0x618>)
 80040ce:	68db      	ldr	r3, [r3, #12]
 80040d0:	4a3d      	ldr	r2, [pc, #244]	@ (80041c8 <HAL_RCC_OscConfig+0x618>)
 80040d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80040d6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040d8:	f7fd fa02 	bl	80014e0 <HAL_GetTick>
 80040dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040de:	e008      	b.n	80040f2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040e0:	f7fd f9fe 	bl	80014e0 <HAL_GetTick>
 80040e4:	4602      	mov	r2, r0
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	1ad3      	subs	r3, r2, r3
 80040ea:	2b02      	cmp	r3, #2
 80040ec:	d901      	bls.n	80040f2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80040ee:	2303      	movs	r3, #3
 80040f0:	e066      	b.n	80041c0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040f2:	4b35      	ldr	r3, [pc, #212]	@ (80041c8 <HAL_RCC_OscConfig+0x618>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d0f0      	beq.n	80040e0 <HAL_RCC_OscConfig+0x530>
 80040fe:	e05e      	b.n	80041be <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004100:	4b31      	ldr	r3, [pc, #196]	@ (80041c8 <HAL_RCC_OscConfig+0x618>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a30      	ldr	r2, [pc, #192]	@ (80041c8 <HAL_RCC_OscConfig+0x618>)
 8004106:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800410a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800410c:	f7fd f9e8 	bl	80014e0 <HAL_GetTick>
 8004110:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004112:	e008      	b.n	8004126 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004114:	f7fd f9e4 	bl	80014e0 <HAL_GetTick>
 8004118:	4602      	mov	r2, r0
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	1ad3      	subs	r3, r2, r3
 800411e:	2b02      	cmp	r3, #2
 8004120:	d901      	bls.n	8004126 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004122:	2303      	movs	r3, #3
 8004124:	e04c      	b.n	80041c0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004126:	4b28      	ldr	r3, [pc, #160]	@ (80041c8 <HAL_RCC_OscConfig+0x618>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800412e:	2b00      	cmp	r3, #0
 8004130:	d1f0      	bne.n	8004114 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004132:	4b25      	ldr	r3, [pc, #148]	@ (80041c8 <HAL_RCC_OscConfig+0x618>)
 8004134:	68da      	ldr	r2, [r3, #12]
 8004136:	4924      	ldr	r1, [pc, #144]	@ (80041c8 <HAL_RCC_OscConfig+0x618>)
 8004138:	4b25      	ldr	r3, [pc, #148]	@ (80041d0 <HAL_RCC_OscConfig+0x620>)
 800413a:	4013      	ands	r3, r2
 800413c:	60cb      	str	r3, [r1, #12]
 800413e:	e03e      	b.n	80041be <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	69db      	ldr	r3, [r3, #28]
 8004144:	2b01      	cmp	r3, #1
 8004146:	d101      	bne.n	800414c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004148:	2301      	movs	r3, #1
 800414a:	e039      	b.n	80041c0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800414c:	4b1e      	ldr	r3, [pc, #120]	@ (80041c8 <HAL_RCC_OscConfig+0x618>)
 800414e:	68db      	ldr	r3, [r3, #12]
 8004150:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	f003 0203 	and.w	r2, r3, #3
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6a1b      	ldr	r3, [r3, #32]
 800415c:	429a      	cmp	r2, r3
 800415e:	d12c      	bne.n	80041ba <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800416a:	3b01      	subs	r3, #1
 800416c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800416e:	429a      	cmp	r2, r3
 8004170:	d123      	bne.n	80041ba <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800417c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800417e:	429a      	cmp	r2, r3
 8004180:	d11b      	bne.n	80041ba <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800418c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800418e:	429a      	cmp	r2, r3
 8004190:	d113      	bne.n	80041ba <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800419c:	085b      	lsrs	r3, r3, #1
 800419e:	3b01      	subs	r3, #1
 80041a0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80041a2:	429a      	cmp	r2, r3
 80041a4:	d109      	bne.n	80041ba <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041b0:	085b      	lsrs	r3, r3, #1
 80041b2:	3b01      	subs	r3, #1
 80041b4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80041b6:	429a      	cmp	r2, r3
 80041b8:	d001      	beq.n	80041be <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	e000      	b.n	80041c0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80041be:	2300      	movs	r3, #0
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	3720      	adds	r7, #32
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bd80      	pop	{r7, pc}
 80041c8:	40021000 	.word	0x40021000
 80041cc:	019f800c 	.word	0x019f800c
 80041d0:	feeefffc 	.word	0xfeeefffc

080041d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b086      	sub	sp, #24
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
 80041dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80041de:	2300      	movs	r3, #0
 80041e0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d101      	bne.n	80041ec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	e11e      	b.n	800442a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80041ec:	4b91      	ldr	r3, [pc, #580]	@ (8004434 <HAL_RCC_ClockConfig+0x260>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f003 030f 	and.w	r3, r3, #15
 80041f4:	683a      	ldr	r2, [r7, #0]
 80041f6:	429a      	cmp	r2, r3
 80041f8:	d910      	bls.n	800421c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041fa:	4b8e      	ldr	r3, [pc, #568]	@ (8004434 <HAL_RCC_ClockConfig+0x260>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f023 020f 	bic.w	r2, r3, #15
 8004202:	498c      	ldr	r1, [pc, #560]	@ (8004434 <HAL_RCC_ClockConfig+0x260>)
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	4313      	orrs	r3, r2
 8004208:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800420a:	4b8a      	ldr	r3, [pc, #552]	@ (8004434 <HAL_RCC_ClockConfig+0x260>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f003 030f 	and.w	r3, r3, #15
 8004212:	683a      	ldr	r2, [r7, #0]
 8004214:	429a      	cmp	r2, r3
 8004216:	d001      	beq.n	800421c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004218:	2301      	movs	r3, #1
 800421a:	e106      	b.n	800442a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f003 0301 	and.w	r3, r3, #1
 8004224:	2b00      	cmp	r3, #0
 8004226:	d073      	beq.n	8004310 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	2b03      	cmp	r3, #3
 800422e:	d129      	bne.n	8004284 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004230:	4b81      	ldr	r3, [pc, #516]	@ (8004438 <HAL_RCC_ClockConfig+0x264>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004238:	2b00      	cmp	r3, #0
 800423a:	d101      	bne.n	8004240 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800423c:	2301      	movs	r3, #1
 800423e:	e0f4      	b.n	800442a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004240:	f000 f99e 	bl	8004580 <RCC_GetSysClockFreqFromPLLSource>
 8004244:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	4a7c      	ldr	r2, [pc, #496]	@ (800443c <HAL_RCC_ClockConfig+0x268>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d93f      	bls.n	80042ce <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800424e:	4b7a      	ldr	r3, [pc, #488]	@ (8004438 <HAL_RCC_ClockConfig+0x264>)
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004256:	2b00      	cmp	r3, #0
 8004258:	d009      	beq.n	800426e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004262:	2b00      	cmp	r3, #0
 8004264:	d033      	beq.n	80042ce <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800426a:	2b00      	cmp	r3, #0
 800426c:	d12f      	bne.n	80042ce <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800426e:	4b72      	ldr	r3, [pc, #456]	@ (8004438 <HAL_RCC_ClockConfig+0x264>)
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004276:	4a70      	ldr	r2, [pc, #448]	@ (8004438 <HAL_RCC_ClockConfig+0x264>)
 8004278:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800427c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800427e:	2380      	movs	r3, #128	@ 0x80
 8004280:	617b      	str	r3, [r7, #20]
 8004282:	e024      	b.n	80042ce <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	2b02      	cmp	r3, #2
 800428a:	d107      	bne.n	800429c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800428c:	4b6a      	ldr	r3, [pc, #424]	@ (8004438 <HAL_RCC_ClockConfig+0x264>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004294:	2b00      	cmp	r3, #0
 8004296:	d109      	bne.n	80042ac <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	e0c6      	b.n	800442a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800429c:	4b66      	ldr	r3, [pc, #408]	@ (8004438 <HAL_RCC_ClockConfig+0x264>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d101      	bne.n	80042ac <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80042a8:	2301      	movs	r3, #1
 80042aa:	e0be      	b.n	800442a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80042ac:	f000 f8ce 	bl	800444c <HAL_RCC_GetSysClockFreq>
 80042b0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	4a61      	ldr	r2, [pc, #388]	@ (800443c <HAL_RCC_ClockConfig+0x268>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d909      	bls.n	80042ce <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80042ba:	4b5f      	ldr	r3, [pc, #380]	@ (8004438 <HAL_RCC_ClockConfig+0x264>)
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80042c2:	4a5d      	ldr	r2, [pc, #372]	@ (8004438 <HAL_RCC_ClockConfig+0x264>)
 80042c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80042c8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80042ca:	2380      	movs	r3, #128	@ 0x80
 80042cc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80042ce:	4b5a      	ldr	r3, [pc, #360]	@ (8004438 <HAL_RCC_ClockConfig+0x264>)
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	f023 0203 	bic.w	r2, r3, #3
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	4957      	ldr	r1, [pc, #348]	@ (8004438 <HAL_RCC_ClockConfig+0x264>)
 80042dc:	4313      	orrs	r3, r2
 80042de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042e0:	f7fd f8fe 	bl	80014e0 <HAL_GetTick>
 80042e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042e6:	e00a      	b.n	80042fe <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042e8:	f7fd f8fa 	bl	80014e0 <HAL_GetTick>
 80042ec:	4602      	mov	r2, r0
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	1ad3      	subs	r3, r2, r3
 80042f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d901      	bls.n	80042fe <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80042fa:	2303      	movs	r3, #3
 80042fc:	e095      	b.n	800442a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042fe:	4b4e      	ldr	r3, [pc, #312]	@ (8004438 <HAL_RCC_ClockConfig+0x264>)
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	f003 020c 	and.w	r2, r3, #12
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	009b      	lsls	r3, r3, #2
 800430c:	429a      	cmp	r2, r3
 800430e:	d1eb      	bne.n	80042e8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f003 0302 	and.w	r3, r3, #2
 8004318:	2b00      	cmp	r3, #0
 800431a:	d023      	beq.n	8004364 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f003 0304 	and.w	r3, r3, #4
 8004324:	2b00      	cmp	r3, #0
 8004326:	d005      	beq.n	8004334 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004328:	4b43      	ldr	r3, [pc, #268]	@ (8004438 <HAL_RCC_ClockConfig+0x264>)
 800432a:	689b      	ldr	r3, [r3, #8]
 800432c:	4a42      	ldr	r2, [pc, #264]	@ (8004438 <HAL_RCC_ClockConfig+0x264>)
 800432e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004332:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f003 0308 	and.w	r3, r3, #8
 800433c:	2b00      	cmp	r3, #0
 800433e:	d007      	beq.n	8004350 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004340:	4b3d      	ldr	r3, [pc, #244]	@ (8004438 <HAL_RCC_ClockConfig+0x264>)
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004348:	4a3b      	ldr	r2, [pc, #236]	@ (8004438 <HAL_RCC_ClockConfig+0x264>)
 800434a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800434e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004350:	4b39      	ldr	r3, [pc, #228]	@ (8004438 <HAL_RCC_ClockConfig+0x264>)
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	689b      	ldr	r3, [r3, #8]
 800435c:	4936      	ldr	r1, [pc, #216]	@ (8004438 <HAL_RCC_ClockConfig+0x264>)
 800435e:	4313      	orrs	r3, r2
 8004360:	608b      	str	r3, [r1, #8]
 8004362:	e008      	b.n	8004376 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	2b80      	cmp	r3, #128	@ 0x80
 8004368:	d105      	bne.n	8004376 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800436a:	4b33      	ldr	r3, [pc, #204]	@ (8004438 <HAL_RCC_ClockConfig+0x264>)
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	4a32      	ldr	r2, [pc, #200]	@ (8004438 <HAL_RCC_ClockConfig+0x264>)
 8004370:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004374:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004376:	4b2f      	ldr	r3, [pc, #188]	@ (8004434 <HAL_RCC_ClockConfig+0x260>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f003 030f 	and.w	r3, r3, #15
 800437e:	683a      	ldr	r2, [r7, #0]
 8004380:	429a      	cmp	r2, r3
 8004382:	d21d      	bcs.n	80043c0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004384:	4b2b      	ldr	r3, [pc, #172]	@ (8004434 <HAL_RCC_ClockConfig+0x260>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f023 020f 	bic.w	r2, r3, #15
 800438c:	4929      	ldr	r1, [pc, #164]	@ (8004434 <HAL_RCC_ClockConfig+0x260>)
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	4313      	orrs	r3, r2
 8004392:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004394:	f7fd f8a4 	bl	80014e0 <HAL_GetTick>
 8004398:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800439a:	e00a      	b.n	80043b2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800439c:	f7fd f8a0 	bl	80014e0 <HAL_GetTick>
 80043a0:	4602      	mov	r2, r0
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	1ad3      	subs	r3, r2, r3
 80043a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d901      	bls.n	80043b2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80043ae:	2303      	movs	r3, #3
 80043b0:	e03b      	b.n	800442a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043b2:	4b20      	ldr	r3, [pc, #128]	@ (8004434 <HAL_RCC_ClockConfig+0x260>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 030f 	and.w	r3, r3, #15
 80043ba:	683a      	ldr	r2, [r7, #0]
 80043bc:	429a      	cmp	r2, r3
 80043be:	d1ed      	bne.n	800439c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f003 0304 	and.w	r3, r3, #4
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d008      	beq.n	80043de <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043cc:	4b1a      	ldr	r3, [pc, #104]	@ (8004438 <HAL_RCC_ClockConfig+0x264>)
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	68db      	ldr	r3, [r3, #12]
 80043d8:	4917      	ldr	r1, [pc, #92]	@ (8004438 <HAL_RCC_ClockConfig+0x264>)
 80043da:	4313      	orrs	r3, r2
 80043dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f003 0308 	and.w	r3, r3, #8
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d009      	beq.n	80043fe <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80043ea:	4b13      	ldr	r3, [pc, #76]	@ (8004438 <HAL_RCC_ClockConfig+0x264>)
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	691b      	ldr	r3, [r3, #16]
 80043f6:	00db      	lsls	r3, r3, #3
 80043f8:	490f      	ldr	r1, [pc, #60]	@ (8004438 <HAL_RCC_ClockConfig+0x264>)
 80043fa:	4313      	orrs	r3, r2
 80043fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80043fe:	f000 f825 	bl	800444c <HAL_RCC_GetSysClockFreq>
 8004402:	4602      	mov	r2, r0
 8004404:	4b0c      	ldr	r3, [pc, #48]	@ (8004438 <HAL_RCC_ClockConfig+0x264>)
 8004406:	689b      	ldr	r3, [r3, #8]
 8004408:	091b      	lsrs	r3, r3, #4
 800440a:	f003 030f 	and.w	r3, r3, #15
 800440e:	490c      	ldr	r1, [pc, #48]	@ (8004440 <HAL_RCC_ClockConfig+0x26c>)
 8004410:	5ccb      	ldrb	r3, [r1, r3]
 8004412:	f003 031f 	and.w	r3, r3, #31
 8004416:	fa22 f303 	lsr.w	r3, r2, r3
 800441a:	4a0a      	ldr	r2, [pc, #40]	@ (8004444 <HAL_RCC_ClockConfig+0x270>)
 800441c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800441e:	4b0a      	ldr	r3, [pc, #40]	@ (8004448 <HAL_RCC_ClockConfig+0x274>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4618      	mov	r0, r3
 8004424:	f7fd f810 	bl	8001448 <HAL_InitTick>
 8004428:	4603      	mov	r3, r0
}
 800442a:	4618      	mov	r0, r3
 800442c:	3718      	adds	r7, #24
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}
 8004432:	bf00      	nop
 8004434:	40022000 	.word	0x40022000
 8004438:	40021000 	.word	0x40021000
 800443c:	04c4b400 	.word	0x04c4b400
 8004440:	080063b0 	.word	0x080063b0
 8004444:	20000000 	.word	0x20000000
 8004448:	20000004 	.word	0x20000004

0800444c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800444c:	b480      	push	{r7}
 800444e:	b087      	sub	sp, #28
 8004450:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004452:	4b2c      	ldr	r3, [pc, #176]	@ (8004504 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	f003 030c 	and.w	r3, r3, #12
 800445a:	2b04      	cmp	r3, #4
 800445c:	d102      	bne.n	8004464 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800445e:	4b2a      	ldr	r3, [pc, #168]	@ (8004508 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004460:	613b      	str	r3, [r7, #16]
 8004462:	e047      	b.n	80044f4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004464:	4b27      	ldr	r3, [pc, #156]	@ (8004504 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004466:	689b      	ldr	r3, [r3, #8]
 8004468:	f003 030c 	and.w	r3, r3, #12
 800446c:	2b08      	cmp	r3, #8
 800446e:	d102      	bne.n	8004476 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004470:	4b26      	ldr	r3, [pc, #152]	@ (800450c <HAL_RCC_GetSysClockFreq+0xc0>)
 8004472:	613b      	str	r3, [r7, #16]
 8004474:	e03e      	b.n	80044f4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004476:	4b23      	ldr	r3, [pc, #140]	@ (8004504 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	f003 030c 	and.w	r3, r3, #12
 800447e:	2b0c      	cmp	r3, #12
 8004480:	d136      	bne.n	80044f0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004482:	4b20      	ldr	r3, [pc, #128]	@ (8004504 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004484:	68db      	ldr	r3, [r3, #12]
 8004486:	f003 0303 	and.w	r3, r3, #3
 800448a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800448c:	4b1d      	ldr	r3, [pc, #116]	@ (8004504 <HAL_RCC_GetSysClockFreq+0xb8>)
 800448e:	68db      	ldr	r3, [r3, #12]
 8004490:	091b      	lsrs	r3, r3, #4
 8004492:	f003 030f 	and.w	r3, r3, #15
 8004496:	3301      	adds	r3, #1
 8004498:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2b03      	cmp	r3, #3
 800449e:	d10c      	bne.n	80044ba <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80044a0:	4a1a      	ldr	r2, [pc, #104]	@ (800450c <HAL_RCC_GetSysClockFreq+0xc0>)
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80044a8:	4a16      	ldr	r2, [pc, #88]	@ (8004504 <HAL_RCC_GetSysClockFreq+0xb8>)
 80044aa:	68d2      	ldr	r2, [r2, #12]
 80044ac:	0a12      	lsrs	r2, r2, #8
 80044ae:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80044b2:	fb02 f303 	mul.w	r3, r2, r3
 80044b6:	617b      	str	r3, [r7, #20]
      break;
 80044b8:	e00c      	b.n	80044d4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80044ba:	4a13      	ldr	r2, [pc, #76]	@ (8004508 <HAL_RCC_GetSysClockFreq+0xbc>)
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	fbb2 f3f3 	udiv	r3, r2, r3
 80044c2:	4a10      	ldr	r2, [pc, #64]	@ (8004504 <HAL_RCC_GetSysClockFreq+0xb8>)
 80044c4:	68d2      	ldr	r2, [r2, #12]
 80044c6:	0a12      	lsrs	r2, r2, #8
 80044c8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80044cc:	fb02 f303 	mul.w	r3, r2, r3
 80044d0:	617b      	str	r3, [r7, #20]
      break;
 80044d2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80044d4:	4b0b      	ldr	r3, [pc, #44]	@ (8004504 <HAL_RCC_GetSysClockFreq+0xb8>)
 80044d6:	68db      	ldr	r3, [r3, #12]
 80044d8:	0e5b      	lsrs	r3, r3, #25
 80044da:	f003 0303 	and.w	r3, r3, #3
 80044de:	3301      	adds	r3, #1
 80044e0:	005b      	lsls	r3, r3, #1
 80044e2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80044e4:	697a      	ldr	r2, [r7, #20]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80044ec:	613b      	str	r3, [r7, #16]
 80044ee:	e001      	b.n	80044f4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80044f0:	2300      	movs	r3, #0
 80044f2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80044f4:	693b      	ldr	r3, [r7, #16]
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	371c      	adds	r7, #28
 80044fa:	46bd      	mov	sp, r7
 80044fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004500:	4770      	bx	lr
 8004502:	bf00      	nop
 8004504:	40021000 	.word	0x40021000
 8004508:	00f42400 	.word	0x00f42400
 800450c:	016e3600 	.word	0x016e3600

08004510 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004510:	b480      	push	{r7}
 8004512:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004514:	4b03      	ldr	r3, [pc, #12]	@ (8004524 <HAL_RCC_GetHCLKFreq+0x14>)
 8004516:	681b      	ldr	r3, [r3, #0]
}
 8004518:	4618      	mov	r0, r3
 800451a:	46bd      	mov	sp, r7
 800451c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004520:	4770      	bx	lr
 8004522:	bf00      	nop
 8004524:	20000000 	.word	0x20000000

08004528 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800452c:	f7ff fff0 	bl	8004510 <HAL_RCC_GetHCLKFreq>
 8004530:	4602      	mov	r2, r0
 8004532:	4b06      	ldr	r3, [pc, #24]	@ (800454c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	0a1b      	lsrs	r3, r3, #8
 8004538:	f003 0307 	and.w	r3, r3, #7
 800453c:	4904      	ldr	r1, [pc, #16]	@ (8004550 <HAL_RCC_GetPCLK1Freq+0x28>)
 800453e:	5ccb      	ldrb	r3, [r1, r3]
 8004540:	f003 031f 	and.w	r3, r3, #31
 8004544:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004548:	4618      	mov	r0, r3
 800454a:	bd80      	pop	{r7, pc}
 800454c:	40021000 	.word	0x40021000
 8004550:	080063c0 	.word	0x080063c0

08004554 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004558:	f7ff ffda 	bl	8004510 <HAL_RCC_GetHCLKFreq>
 800455c:	4602      	mov	r2, r0
 800455e:	4b06      	ldr	r3, [pc, #24]	@ (8004578 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	0adb      	lsrs	r3, r3, #11
 8004564:	f003 0307 	and.w	r3, r3, #7
 8004568:	4904      	ldr	r1, [pc, #16]	@ (800457c <HAL_RCC_GetPCLK2Freq+0x28>)
 800456a:	5ccb      	ldrb	r3, [r1, r3]
 800456c:	f003 031f 	and.w	r3, r3, #31
 8004570:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004574:	4618      	mov	r0, r3
 8004576:	bd80      	pop	{r7, pc}
 8004578:	40021000 	.word	0x40021000
 800457c:	080063c0 	.word	0x080063c0

08004580 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004580:	b480      	push	{r7}
 8004582:	b087      	sub	sp, #28
 8004584:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004586:	4b1e      	ldr	r3, [pc, #120]	@ (8004600 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004588:	68db      	ldr	r3, [r3, #12]
 800458a:	f003 0303 	and.w	r3, r3, #3
 800458e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004590:	4b1b      	ldr	r3, [pc, #108]	@ (8004600 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004592:	68db      	ldr	r3, [r3, #12]
 8004594:	091b      	lsrs	r3, r3, #4
 8004596:	f003 030f 	and.w	r3, r3, #15
 800459a:	3301      	adds	r3, #1
 800459c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	2b03      	cmp	r3, #3
 80045a2:	d10c      	bne.n	80045be <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80045a4:	4a17      	ldr	r2, [pc, #92]	@ (8004604 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80045ac:	4a14      	ldr	r2, [pc, #80]	@ (8004600 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80045ae:	68d2      	ldr	r2, [r2, #12]
 80045b0:	0a12      	lsrs	r2, r2, #8
 80045b2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80045b6:	fb02 f303 	mul.w	r3, r2, r3
 80045ba:	617b      	str	r3, [r7, #20]
    break;
 80045bc:	e00c      	b.n	80045d8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80045be:	4a12      	ldr	r2, [pc, #72]	@ (8004608 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80045c6:	4a0e      	ldr	r2, [pc, #56]	@ (8004600 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80045c8:	68d2      	ldr	r2, [r2, #12]
 80045ca:	0a12      	lsrs	r2, r2, #8
 80045cc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80045d0:	fb02 f303 	mul.w	r3, r2, r3
 80045d4:	617b      	str	r3, [r7, #20]
    break;
 80045d6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80045d8:	4b09      	ldr	r3, [pc, #36]	@ (8004600 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80045da:	68db      	ldr	r3, [r3, #12]
 80045dc:	0e5b      	lsrs	r3, r3, #25
 80045de:	f003 0303 	and.w	r3, r3, #3
 80045e2:	3301      	adds	r3, #1
 80045e4:	005b      	lsls	r3, r3, #1
 80045e6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80045e8:	697a      	ldr	r2, [r7, #20]
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80045f0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80045f2:	687b      	ldr	r3, [r7, #4]
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	371c      	adds	r7, #28
 80045f8:	46bd      	mov	sp, r7
 80045fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fe:	4770      	bx	lr
 8004600:	40021000 	.word	0x40021000
 8004604:	016e3600 	.word	0x016e3600
 8004608:	00f42400 	.word	0x00f42400

0800460c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b086      	sub	sp, #24
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004614:	2300      	movs	r3, #0
 8004616:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004618:	2300      	movs	r3, #0
 800461a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004624:	2b00      	cmp	r3, #0
 8004626:	f000 8098 	beq.w	800475a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800462a:	2300      	movs	r3, #0
 800462c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800462e:	4b43      	ldr	r3, [pc, #268]	@ (800473c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004630:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004632:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004636:	2b00      	cmp	r3, #0
 8004638:	d10d      	bne.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800463a:	4b40      	ldr	r3, [pc, #256]	@ (800473c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800463c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800463e:	4a3f      	ldr	r2, [pc, #252]	@ (800473c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004640:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004644:	6593      	str	r3, [r2, #88]	@ 0x58
 8004646:	4b3d      	ldr	r3, [pc, #244]	@ (800473c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004648:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800464a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800464e:	60bb      	str	r3, [r7, #8]
 8004650:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004652:	2301      	movs	r3, #1
 8004654:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004656:	4b3a      	ldr	r3, [pc, #232]	@ (8004740 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a39      	ldr	r2, [pc, #228]	@ (8004740 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800465c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004660:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004662:	f7fc ff3d 	bl	80014e0 <HAL_GetTick>
 8004666:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004668:	e009      	b.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800466a:	f7fc ff39 	bl	80014e0 <HAL_GetTick>
 800466e:	4602      	mov	r2, r0
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	1ad3      	subs	r3, r2, r3
 8004674:	2b02      	cmp	r3, #2
 8004676:	d902      	bls.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004678:	2303      	movs	r3, #3
 800467a:	74fb      	strb	r3, [r7, #19]
        break;
 800467c:	e005      	b.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800467e:	4b30      	ldr	r3, [pc, #192]	@ (8004740 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004686:	2b00      	cmp	r3, #0
 8004688:	d0ef      	beq.n	800466a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800468a:	7cfb      	ldrb	r3, [r7, #19]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d159      	bne.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004690:	4b2a      	ldr	r3, [pc, #168]	@ (800473c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004692:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004696:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800469a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d01e      	beq.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046a6:	697a      	ldr	r2, [r7, #20]
 80046a8:	429a      	cmp	r2, r3
 80046aa:	d019      	beq.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80046ac:	4b23      	ldr	r3, [pc, #140]	@ (800473c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80046ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80046b6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80046b8:	4b20      	ldr	r3, [pc, #128]	@ (800473c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80046ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046be:	4a1f      	ldr	r2, [pc, #124]	@ (800473c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80046c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80046c8:	4b1c      	ldr	r3, [pc, #112]	@ (800473c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80046ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046ce:	4a1b      	ldr	r2, [pc, #108]	@ (800473c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80046d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80046d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80046d8:	4a18      	ldr	r2, [pc, #96]	@ (800473c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	f003 0301 	and.w	r3, r3, #1
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d016      	beq.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046ea:	f7fc fef9 	bl	80014e0 <HAL_GetTick>
 80046ee:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046f0:	e00b      	b.n	800470a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046f2:	f7fc fef5 	bl	80014e0 <HAL_GetTick>
 80046f6:	4602      	mov	r2, r0
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	1ad3      	subs	r3, r2, r3
 80046fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004700:	4293      	cmp	r3, r2
 8004702:	d902      	bls.n	800470a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004704:	2303      	movs	r3, #3
 8004706:	74fb      	strb	r3, [r7, #19]
            break;
 8004708:	e006      	b.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800470a:	4b0c      	ldr	r3, [pc, #48]	@ (800473c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800470c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004710:	f003 0302 	and.w	r3, r3, #2
 8004714:	2b00      	cmp	r3, #0
 8004716:	d0ec      	beq.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004718:	7cfb      	ldrb	r3, [r7, #19]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d10b      	bne.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800471e:	4b07      	ldr	r3, [pc, #28]	@ (800473c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004720:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004724:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800472c:	4903      	ldr	r1, [pc, #12]	@ (800473c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800472e:	4313      	orrs	r3, r2
 8004730:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004734:	e008      	b.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004736:	7cfb      	ldrb	r3, [r7, #19]
 8004738:	74bb      	strb	r3, [r7, #18]
 800473a:	e005      	b.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800473c:	40021000 	.word	0x40021000
 8004740:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004744:	7cfb      	ldrb	r3, [r7, #19]
 8004746:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004748:	7c7b      	ldrb	r3, [r7, #17]
 800474a:	2b01      	cmp	r3, #1
 800474c:	d105      	bne.n	800475a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800474e:	4ba7      	ldr	r3, [pc, #668]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004750:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004752:	4aa6      	ldr	r2, [pc, #664]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004754:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004758:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f003 0301 	and.w	r3, r3, #1
 8004762:	2b00      	cmp	r3, #0
 8004764:	d00a      	beq.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004766:	4ba1      	ldr	r3, [pc, #644]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004768:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800476c:	f023 0203 	bic.w	r2, r3, #3
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	499d      	ldr	r1, [pc, #628]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004776:	4313      	orrs	r3, r2
 8004778:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f003 0302 	and.w	r3, r3, #2
 8004784:	2b00      	cmp	r3, #0
 8004786:	d00a      	beq.n	800479e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004788:	4b98      	ldr	r3, [pc, #608]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800478a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800478e:	f023 020c 	bic.w	r2, r3, #12
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	689b      	ldr	r3, [r3, #8]
 8004796:	4995      	ldr	r1, [pc, #596]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004798:	4313      	orrs	r3, r2
 800479a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f003 0304 	and.w	r3, r3, #4
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d00a      	beq.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80047aa:	4b90      	ldr	r3, [pc, #576]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047b0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	68db      	ldr	r3, [r3, #12]
 80047b8:	498c      	ldr	r1, [pc, #560]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047ba:	4313      	orrs	r3, r2
 80047bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f003 0308 	and.w	r3, r3, #8
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d00a      	beq.n	80047e2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80047cc:	4b87      	ldr	r3, [pc, #540]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047d2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	691b      	ldr	r3, [r3, #16]
 80047da:	4984      	ldr	r1, [pc, #528]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047dc:	4313      	orrs	r3, r2
 80047de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f003 0310 	and.w	r3, r3, #16
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d00a      	beq.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80047ee:	4b7f      	ldr	r3, [pc, #508]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047f4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	695b      	ldr	r3, [r3, #20]
 80047fc:	497b      	ldr	r1, [pc, #492]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047fe:	4313      	orrs	r3, r2
 8004800:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f003 0320 	and.w	r3, r3, #32
 800480c:	2b00      	cmp	r3, #0
 800480e:	d00a      	beq.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004810:	4b76      	ldr	r3, [pc, #472]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004812:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004816:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	699b      	ldr	r3, [r3, #24]
 800481e:	4973      	ldr	r1, [pc, #460]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004820:	4313      	orrs	r3, r2
 8004822:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800482e:	2b00      	cmp	r3, #0
 8004830:	d00a      	beq.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004832:	4b6e      	ldr	r3, [pc, #440]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004834:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004838:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	69db      	ldr	r3, [r3, #28]
 8004840:	496a      	ldr	r1, [pc, #424]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004842:	4313      	orrs	r3, r2
 8004844:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004850:	2b00      	cmp	r3, #0
 8004852:	d00a      	beq.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004854:	4b65      	ldr	r3, [pc, #404]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004856:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800485a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6a1b      	ldr	r3, [r3, #32]
 8004862:	4962      	ldr	r1, [pc, #392]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004864:	4313      	orrs	r3, r2
 8004866:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004872:	2b00      	cmp	r3, #0
 8004874:	d00a      	beq.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004876:	4b5d      	ldr	r3, [pc, #372]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004878:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800487c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004884:	4959      	ldr	r1, [pc, #356]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004886:	4313      	orrs	r3, r2
 8004888:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004894:	2b00      	cmp	r3, #0
 8004896:	d00a      	beq.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004898:	4b54      	ldr	r3, [pc, #336]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800489a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800489e:	f023 0203 	bic.w	r2, r3, #3
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048a6:	4951      	ldr	r1, [pc, #324]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048a8:	4313      	orrs	r3, r2
 80048aa:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d00a      	beq.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80048ba:	4b4c      	ldr	r3, [pc, #304]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048c0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048c8:	4948      	ldr	r1, [pc, #288]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048ca:	4313      	orrs	r3, r2
 80048cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d015      	beq.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80048dc:	4b43      	ldr	r3, [pc, #268]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048e2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048ea:	4940      	ldr	r1, [pc, #256]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048ec:	4313      	orrs	r3, r2
 80048ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80048fa:	d105      	bne.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80048fc:	4b3b      	ldr	r3, [pc, #236]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048fe:	68db      	ldr	r3, [r3, #12]
 8004900:	4a3a      	ldr	r2, [pc, #232]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004902:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004906:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004910:	2b00      	cmp	r3, #0
 8004912:	d015      	beq.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004914:	4b35      	ldr	r3, [pc, #212]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004916:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800491a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004922:	4932      	ldr	r1, [pc, #200]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004924:	4313      	orrs	r3, r2
 8004926:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800492e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004932:	d105      	bne.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004934:	4b2d      	ldr	r3, [pc, #180]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004936:	68db      	ldr	r3, [r3, #12]
 8004938:	4a2c      	ldr	r2, [pc, #176]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800493a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800493e:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004948:	2b00      	cmp	r3, #0
 800494a:	d015      	beq.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800494c:	4b27      	ldr	r3, [pc, #156]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800494e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004952:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800495a:	4924      	ldr	r1, [pc, #144]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800495c:	4313      	orrs	r3, r2
 800495e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004966:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800496a:	d105      	bne.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800496c:	4b1f      	ldr	r3, [pc, #124]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800496e:	68db      	ldr	r3, [r3, #12]
 8004970:	4a1e      	ldr	r2, [pc, #120]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004972:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004976:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004980:	2b00      	cmp	r3, #0
 8004982:	d015      	beq.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004984:	4b19      	ldr	r3, [pc, #100]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004986:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800498a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004992:	4916      	ldr	r1, [pc, #88]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004994:	4313      	orrs	r3, r2
 8004996:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800499e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80049a2:	d105      	bne.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80049a4:	4b11      	ldr	r3, [pc, #68]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049a6:	68db      	ldr	r3, [r3, #12]
 80049a8:	4a10      	ldr	r2, [pc, #64]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80049ae:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d019      	beq.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80049bc:	4b0b      	ldr	r3, [pc, #44]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049c2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049ca:	4908      	ldr	r1, [pc, #32]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049cc:	4313      	orrs	r3, r2
 80049ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049d6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80049da:	d109      	bne.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80049dc:	4b03      	ldr	r3, [pc, #12]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049de:	68db      	ldr	r3, [r3, #12]
 80049e0:	4a02      	ldr	r2, [pc, #8]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80049e6:	60d3      	str	r3, [r2, #12]
 80049e8:	e002      	b.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80049ea:	bf00      	nop
 80049ec:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d015      	beq.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80049fc:	4b29      	ldr	r3, [pc, #164]	@ (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80049fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a02:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a0a:	4926      	ldr	r1, [pc, #152]	@ (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a16:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004a1a:	d105      	bne.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004a1c:	4b21      	ldr	r3, [pc, #132]	@ (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004a1e:	68db      	ldr	r3, [r3, #12]
 8004a20:	4a20      	ldr	r2, [pc, #128]	@ (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004a22:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a26:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d015      	beq.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004a34:	4b1b      	ldr	r3, [pc, #108]	@ (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004a36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a3a:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a42:	4918      	ldr	r1, [pc, #96]	@ (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004a44:	4313      	orrs	r3, r2
 8004a46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a52:	d105      	bne.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004a54:	4b13      	ldr	r3, [pc, #76]	@ (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004a56:	68db      	ldr	r3, [r3, #12]
 8004a58:	4a12      	ldr	r2, [pc, #72]	@ (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004a5a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a5e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d015      	beq.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004a6c:	4b0d      	ldr	r3, [pc, #52]	@ (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004a6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004a72:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a7a:	490a      	ldr	r1, [pc, #40]	@ (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a86:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004a8a:	d105      	bne.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a8c:	4b05      	ldr	r3, [pc, #20]	@ (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004a8e:	68db      	ldr	r3, [r3, #12]
 8004a90:	4a04      	ldr	r2, [pc, #16]	@ (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004a92:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004a96:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004a98:	7cbb      	ldrb	r3, [r7, #18]
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	3718      	adds	r7, #24
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}
 8004aa2:	bf00      	nop
 8004aa4:	40021000 	.word	0x40021000

08004aa8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b084      	sub	sp, #16
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d101      	bne.n	8004aba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	e09d      	b.n	8004bf6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d108      	bne.n	8004ad4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004aca:	d009      	beq.n	8004ae0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	61da      	str	r2, [r3, #28]
 8004ad2:	e005      	b.n	8004ae0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2200      	movs	r2, #0
 8004ade:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004aec:	b2db      	uxtb	r3, r3
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d106      	bne.n	8004b00 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2200      	movs	r2, #0
 8004af6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004afa:	6878      	ldr	r0, [r7, #4]
 8004afc:	f7fc faa8 	bl	8001050 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2202      	movs	r2, #2
 8004b04:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	681a      	ldr	r2, [r3, #0]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004b16:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	68db      	ldr	r3, [r3, #12]
 8004b1c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004b20:	d902      	bls.n	8004b28 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004b22:	2300      	movs	r3, #0
 8004b24:	60fb      	str	r3, [r7, #12]
 8004b26:	e002      	b.n	8004b2e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004b28:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004b2c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	68db      	ldr	r3, [r3, #12]
 8004b32:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004b36:	d007      	beq.n	8004b48 <HAL_SPI_Init+0xa0>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	68db      	ldr	r3, [r3, #12]
 8004b3c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004b40:	d002      	beq.n	8004b48 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2200      	movs	r2, #0
 8004b46:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004b58:	431a      	orrs	r2, r3
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	691b      	ldr	r3, [r3, #16]
 8004b5e:	f003 0302 	and.w	r3, r3, #2
 8004b62:	431a      	orrs	r2, r3
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	695b      	ldr	r3, [r3, #20]
 8004b68:	f003 0301 	and.w	r3, r3, #1
 8004b6c:	431a      	orrs	r2, r3
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	699b      	ldr	r3, [r3, #24]
 8004b72:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004b76:	431a      	orrs	r2, r3
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	69db      	ldr	r3, [r3, #28]
 8004b7c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004b80:	431a      	orrs	r2, r3
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6a1b      	ldr	r3, [r3, #32]
 8004b86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b8a:	ea42 0103 	orr.w	r1, r2, r3
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b92:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	430a      	orrs	r2, r1
 8004b9c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	699b      	ldr	r3, [r3, #24]
 8004ba2:	0c1b      	lsrs	r3, r3, #16
 8004ba4:	f003 0204 	and.w	r2, r3, #4
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bac:	f003 0310 	and.w	r3, r3, #16
 8004bb0:	431a      	orrs	r2, r3
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004bb6:	f003 0308 	and.w	r3, r3, #8
 8004bba:	431a      	orrs	r2, r3
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	68db      	ldr	r3, [r3, #12]
 8004bc0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004bc4:	ea42 0103 	orr.w	r1, r2, r3
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	430a      	orrs	r2, r1
 8004bd4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	69da      	ldr	r2, [r3, #28]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004be4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2200      	movs	r2, #0
 8004bea:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2201      	movs	r2, #1
 8004bf0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004bf4:	2300      	movs	r3, #0
}
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	3710      	adds	r7, #16
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd80      	pop	{r7, pc}

08004bfe <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004bfe:	b580      	push	{r7, lr}
 8004c00:	b082      	sub	sp, #8
 8004c02:	af00      	add	r7, sp, #0
 8004c04:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d101      	bne.n	8004c10 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	e042      	b.n	8004c96 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d106      	bne.n	8004c28 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	f7fc fb76 	bl	8001314 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2224      	movs	r2, #36	@ 0x24
 8004c2c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	681a      	ldr	r2, [r3, #0]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f022 0201 	bic.w	r2, r2, #1
 8004c3e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d002      	beq.n	8004c4e <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004c48:	6878      	ldr	r0, [r7, #4]
 8004c4a:	f000 fbb3 	bl	80053b4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f000 f8b4 	bl	8004dbc <UART_SetConfig>
 8004c54:	4603      	mov	r3, r0
 8004c56:	2b01      	cmp	r3, #1
 8004c58:	d101      	bne.n	8004c5e <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	e01b      	b.n	8004c96 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	685a      	ldr	r2, [r3, #4]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004c6c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	689a      	ldr	r2, [r3, #8]
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004c7c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	681a      	ldr	r2, [r3, #0]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f042 0201 	orr.w	r2, r2, #1
 8004c8c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	f000 fc32 	bl	80054f8 <UART_CheckIdleState>
 8004c94:	4603      	mov	r3, r0
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	3708      	adds	r7, #8
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}

08004c9e <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c9e:	b580      	push	{r7, lr}
 8004ca0:	b08a      	sub	sp, #40	@ 0x28
 8004ca2:	af02      	add	r7, sp, #8
 8004ca4:	60f8      	str	r0, [r7, #12]
 8004ca6:	60b9      	str	r1, [r7, #8]
 8004ca8:	603b      	str	r3, [r7, #0]
 8004caa:	4613      	mov	r3, r2
 8004cac:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cb4:	2b20      	cmp	r3, #32
 8004cb6:	d17b      	bne.n	8004db0 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d002      	beq.n	8004cc4 <HAL_UART_Transmit+0x26>
 8004cbe:	88fb      	ldrh	r3, [r7, #6]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d101      	bne.n	8004cc8 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	e074      	b.n	8004db2 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	2221      	movs	r2, #33	@ 0x21
 8004cd4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004cd8:	f7fc fc02 	bl	80014e0 <HAL_GetTick>
 8004cdc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	88fa      	ldrh	r2, [r7, #6]
 8004ce2:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	88fa      	ldrh	r2, [r7, #6]
 8004cea:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	689b      	ldr	r3, [r3, #8]
 8004cf2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004cf6:	d108      	bne.n	8004d0a <HAL_UART_Transmit+0x6c>
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	691b      	ldr	r3, [r3, #16]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d104      	bne.n	8004d0a <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004d00:	2300      	movs	r3, #0
 8004d02:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	61bb      	str	r3, [r7, #24]
 8004d08:	e003      	b.n	8004d12 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d0e:	2300      	movs	r3, #0
 8004d10:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004d12:	e030      	b.n	8004d76 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	9300      	str	r3, [sp, #0]
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	2180      	movs	r1, #128	@ 0x80
 8004d1e:	68f8      	ldr	r0, [r7, #12]
 8004d20:	f000 fc94 	bl	800564c <UART_WaitOnFlagUntilTimeout>
 8004d24:	4603      	mov	r3, r0
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d005      	beq.n	8004d36 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	2220      	movs	r2, #32
 8004d2e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8004d32:	2303      	movs	r3, #3
 8004d34:	e03d      	b.n	8004db2 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8004d36:	69fb      	ldr	r3, [r7, #28]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d10b      	bne.n	8004d54 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004d3c:	69bb      	ldr	r3, [r7, #24]
 8004d3e:	881b      	ldrh	r3, [r3, #0]
 8004d40:	461a      	mov	r2, r3
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d4a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004d4c:	69bb      	ldr	r3, [r7, #24]
 8004d4e:	3302      	adds	r3, #2
 8004d50:	61bb      	str	r3, [r7, #24]
 8004d52:	e007      	b.n	8004d64 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004d54:	69fb      	ldr	r3, [r7, #28]
 8004d56:	781a      	ldrb	r2, [r3, #0]
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004d5e:	69fb      	ldr	r3, [r7, #28]
 8004d60:	3301      	adds	r3, #1
 8004d62:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004d6a:	b29b      	uxth	r3, r3
 8004d6c:	3b01      	subs	r3, #1
 8004d6e:	b29a      	uxth	r2, r3
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004d7c:	b29b      	uxth	r3, r3
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d1c8      	bne.n	8004d14 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	9300      	str	r3, [sp, #0]
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	2140      	movs	r1, #64	@ 0x40
 8004d8c:	68f8      	ldr	r0, [r7, #12]
 8004d8e:	f000 fc5d 	bl	800564c <UART_WaitOnFlagUntilTimeout>
 8004d92:	4603      	mov	r3, r0
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d005      	beq.n	8004da4 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2220      	movs	r2, #32
 8004d9c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8004da0:	2303      	movs	r3, #3
 8004da2:	e006      	b.n	8004db2 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2220      	movs	r2, #32
 8004da8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8004dac:	2300      	movs	r3, #0
 8004dae:	e000      	b.n	8004db2 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8004db0:	2302      	movs	r3, #2
  }
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	3720      	adds	r7, #32
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}
	...

08004dbc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004dbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004dc0:	b08c      	sub	sp, #48	@ 0x30
 8004dc2:	af00      	add	r7, sp, #0
 8004dc4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	689a      	ldr	r2, [r3, #8]
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	691b      	ldr	r3, [r3, #16]
 8004dd4:	431a      	orrs	r2, r3
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	695b      	ldr	r3, [r3, #20]
 8004dda:	431a      	orrs	r2, r3
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	69db      	ldr	r3, [r3, #28]
 8004de0:	4313      	orrs	r3, r2
 8004de2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	681a      	ldr	r2, [r3, #0]
 8004dea:	4baa      	ldr	r3, [pc, #680]	@ (8005094 <UART_SetConfig+0x2d8>)
 8004dec:	4013      	ands	r3, r2
 8004dee:	697a      	ldr	r2, [r7, #20]
 8004df0:	6812      	ldr	r2, [r2, #0]
 8004df2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004df4:	430b      	orrs	r3, r1
 8004df6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	68da      	ldr	r2, [r3, #12]
 8004e06:	697b      	ldr	r3, [r7, #20]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	430a      	orrs	r2, r1
 8004e0c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	699b      	ldr	r3, [r3, #24]
 8004e12:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a9f      	ldr	r2, [pc, #636]	@ (8005098 <UART_SetConfig+0x2dc>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d004      	beq.n	8004e28 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	6a1b      	ldr	r3, [r3, #32]
 8004e22:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004e24:	4313      	orrs	r3, r2
 8004e26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	689b      	ldr	r3, [r3, #8]
 8004e2e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8004e32:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8004e36:	697a      	ldr	r2, [r7, #20]
 8004e38:	6812      	ldr	r2, [r2, #0]
 8004e3a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004e3c:	430b      	orrs	r3, r1
 8004e3e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e46:	f023 010f 	bic.w	r1, r3, #15
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004e4e:	697b      	ldr	r3, [r7, #20]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	430a      	orrs	r2, r1
 8004e54:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a90      	ldr	r2, [pc, #576]	@ (800509c <UART_SetConfig+0x2e0>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d125      	bne.n	8004eac <UART_SetConfig+0xf0>
 8004e60:	4b8f      	ldr	r3, [pc, #572]	@ (80050a0 <UART_SetConfig+0x2e4>)
 8004e62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e66:	f003 0303 	and.w	r3, r3, #3
 8004e6a:	2b03      	cmp	r3, #3
 8004e6c:	d81a      	bhi.n	8004ea4 <UART_SetConfig+0xe8>
 8004e6e:	a201      	add	r2, pc, #4	@ (adr r2, 8004e74 <UART_SetConfig+0xb8>)
 8004e70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e74:	08004e85 	.word	0x08004e85
 8004e78:	08004e95 	.word	0x08004e95
 8004e7c:	08004e8d 	.word	0x08004e8d
 8004e80:	08004e9d 	.word	0x08004e9d
 8004e84:	2301      	movs	r3, #1
 8004e86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e8a:	e116      	b.n	80050ba <UART_SetConfig+0x2fe>
 8004e8c:	2302      	movs	r3, #2
 8004e8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e92:	e112      	b.n	80050ba <UART_SetConfig+0x2fe>
 8004e94:	2304      	movs	r3, #4
 8004e96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e9a:	e10e      	b.n	80050ba <UART_SetConfig+0x2fe>
 8004e9c:	2308      	movs	r3, #8
 8004e9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ea2:	e10a      	b.n	80050ba <UART_SetConfig+0x2fe>
 8004ea4:	2310      	movs	r3, #16
 8004ea6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004eaa:	e106      	b.n	80050ba <UART_SetConfig+0x2fe>
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a7c      	ldr	r2, [pc, #496]	@ (80050a4 <UART_SetConfig+0x2e8>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d138      	bne.n	8004f28 <UART_SetConfig+0x16c>
 8004eb6:	4b7a      	ldr	r3, [pc, #488]	@ (80050a0 <UART_SetConfig+0x2e4>)
 8004eb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ebc:	f003 030c 	and.w	r3, r3, #12
 8004ec0:	2b0c      	cmp	r3, #12
 8004ec2:	d82d      	bhi.n	8004f20 <UART_SetConfig+0x164>
 8004ec4:	a201      	add	r2, pc, #4	@ (adr r2, 8004ecc <UART_SetConfig+0x110>)
 8004ec6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eca:	bf00      	nop
 8004ecc:	08004f01 	.word	0x08004f01
 8004ed0:	08004f21 	.word	0x08004f21
 8004ed4:	08004f21 	.word	0x08004f21
 8004ed8:	08004f21 	.word	0x08004f21
 8004edc:	08004f11 	.word	0x08004f11
 8004ee0:	08004f21 	.word	0x08004f21
 8004ee4:	08004f21 	.word	0x08004f21
 8004ee8:	08004f21 	.word	0x08004f21
 8004eec:	08004f09 	.word	0x08004f09
 8004ef0:	08004f21 	.word	0x08004f21
 8004ef4:	08004f21 	.word	0x08004f21
 8004ef8:	08004f21 	.word	0x08004f21
 8004efc:	08004f19 	.word	0x08004f19
 8004f00:	2300      	movs	r3, #0
 8004f02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f06:	e0d8      	b.n	80050ba <UART_SetConfig+0x2fe>
 8004f08:	2302      	movs	r3, #2
 8004f0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f0e:	e0d4      	b.n	80050ba <UART_SetConfig+0x2fe>
 8004f10:	2304      	movs	r3, #4
 8004f12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f16:	e0d0      	b.n	80050ba <UART_SetConfig+0x2fe>
 8004f18:	2308      	movs	r3, #8
 8004f1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f1e:	e0cc      	b.n	80050ba <UART_SetConfig+0x2fe>
 8004f20:	2310      	movs	r3, #16
 8004f22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f26:	e0c8      	b.n	80050ba <UART_SetConfig+0x2fe>
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a5e      	ldr	r2, [pc, #376]	@ (80050a8 <UART_SetConfig+0x2ec>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d125      	bne.n	8004f7e <UART_SetConfig+0x1c2>
 8004f32:	4b5b      	ldr	r3, [pc, #364]	@ (80050a0 <UART_SetConfig+0x2e4>)
 8004f34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f38:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004f3c:	2b30      	cmp	r3, #48	@ 0x30
 8004f3e:	d016      	beq.n	8004f6e <UART_SetConfig+0x1b2>
 8004f40:	2b30      	cmp	r3, #48	@ 0x30
 8004f42:	d818      	bhi.n	8004f76 <UART_SetConfig+0x1ba>
 8004f44:	2b20      	cmp	r3, #32
 8004f46:	d00a      	beq.n	8004f5e <UART_SetConfig+0x1a2>
 8004f48:	2b20      	cmp	r3, #32
 8004f4a:	d814      	bhi.n	8004f76 <UART_SetConfig+0x1ba>
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d002      	beq.n	8004f56 <UART_SetConfig+0x19a>
 8004f50:	2b10      	cmp	r3, #16
 8004f52:	d008      	beq.n	8004f66 <UART_SetConfig+0x1aa>
 8004f54:	e00f      	b.n	8004f76 <UART_SetConfig+0x1ba>
 8004f56:	2300      	movs	r3, #0
 8004f58:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f5c:	e0ad      	b.n	80050ba <UART_SetConfig+0x2fe>
 8004f5e:	2302      	movs	r3, #2
 8004f60:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f64:	e0a9      	b.n	80050ba <UART_SetConfig+0x2fe>
 8004f66:	2304      	movs	r3, #4
 8004f68:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f6c:	e0a5      	b.n	80050ba <UART_SetConfig+0x2fe>
 8004f6e:	2308      	movs	r3, #8
 8004f70:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f74:	e0a1      	b.n	80050ba <UART_SetConfig+0x2fe>
 8004f76:	2310      	movs	r3, #16
 8004f78:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f7c:	e09d      	b.n	80050ba <UART_SetConfig+0x2fe>
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a4a      	ldr	r2, [pc, #296]	@ (80050ac <UART_SetConfig+0x2f0>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d125      	bne.n	8004fd4 <UART_SetConfig+0x218>
 8004f88:	4b45      	ldr	r3, [pc, #276]	@ (80050a0 <UART_SetConfig+0x2e4>)
 8004f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f8e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004f92:	2bc0      	cmp	r3, #192	@ 0xc0
 8004f94:	d016      	beq.n	8004fc4 <UART_SetConfig+0x208>
 8004f96:	2bc0      	cmp	r3, #192	@ 0xc0
 8004f98:	d818      	bhi.n	8004fcc <UART_SetConfig+0x210>
 8004f9a:	2b80      	cmp	r3, #128	@ 0x80
 8004f9c:	d00a      	beq.n	8004fb4 <UART_SetConfig+0x1f8>
 8004f9e:	2b80      	cmp	r3, #128	@ 0x80
 8004fa0:	d814      	bhi.n	8004fcc <UART_SetConfig+0x210>
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d002      	beq.n	8004fac <UART_SetConfig+0x1f0>
 8004fa6:	2b40      	cmp	r3, #64	@ 0x40
 8004fa8:	d008      	beq.n	8004fbc <UART_SetConfig+0x200>
 8004faa:	e00f      	b.n	8004fcc <UART_SetConfig+0x210>
 8004fac:	2300      	movs	r3, #0
 8004fae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004fb2:	e082      	b.n	80050ba <UART_SetConfig+0x2fe>
 8004fb4:	2302      	movs	r3, #2
 8004fb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004fba:	e07e      	b.n	80050ba <UART_SetConfig+0x2fe>
 8004fbc:	2304      	movs	r3, #4
 8004fbe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004fc2:	e07a      	b.n	80050ba <UART_SetConfig+0x2fe>
 8004fc4:	2308      	movs	r3, #8
 8004fc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004fca:	e076      	b.n	80050ba <UART_SetConfig+0x2fe>
 8004fcc:	2310      	movs	r3, #16
 8004fce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004fd2:	e072      	b.n	80050ba <UART_SetConfig+0x2fe>
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a35      	ldr	r2, [pc, #212]	@ (80050b0 <UART_SetConfig+0x2f4>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d12a      	bne.n	8005034 <UART_SetConfig+0x278>
 8004fde:	4b30      	ldr	r3, [pc, #192]	@ (80050a0 <UART_SetConfig+0x2e4>)
 8004fe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fe4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004fe8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004fec:	d01a      	beq.n	8005024 <UART_SetConfig+0x268>
 8004fee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004ff2:	d81b      	bhi.n	800502c <UART_SetConfig+0x270>
 8004ff4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ff8:	d00c      	beq.n	8005014 <UART_SetConfig+0x258>
 8004ffa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ffe:	d815      	bhi.n	800502c <UART_SetConfig+0x270>
 8005000:	2b00      	cmp	r3, #0
 8005002:	d003      	beq.n	800500c <UART_SetConfig+0x250>
 8005004:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005008:	d008      	beq.n	800501c <UART_SetConfig+0x260>
 800500a:	e00f      	b.n	800502c <UART_SetConfig+0x270>
 800500c:	2300      	movs	r3, #0
 800500e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005012:	e052      	b.n	80050ba <UART_SetConfig+0x2fe>
 8005014:	2302      	movs	r3, #2
 8005016:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800501a:	e04e      	b.n	80050ba <UART_SetConfig+0x2fe>
 800501c:	2304      	movs	r3, #4
 800501e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005022:	e04a      	b.n	80050ba <UART_SetConfig+0x2fe>
 8005024:	2308      	movs	r3, #8
 8005026:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800502a:	e046      	b.n	80050ba <UART_SetConfig+0x2fe>
 800502c:	2310      	movs	r3, #16
 800502e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005032:	e042      	b.n	80050ba <UART_SetConfig+0x2fe>
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a17      	ldr	r2, [pc, #92]	@ (8005098 <UART_SetConfig+0x2dc>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d13a      	bne.n	80050b4 <UART_SetConfig+0x2f8>
 800503e:	4b18      	ldr	r3, [pc, #96]	@ (80050a0 <UART_SetConfig+0x2e4>)
 8005040:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005044:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005048:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800504c:	d01a      	beq.n	8005084 <UART_SetConfig+0x2c8>
 800504e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005052:	d81b      	bhi.n	800508c <UART_SetConfig+0x2d0>
 8005054:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005058:	d00c      	beq.n	8005074 <UART_SetConfig+0x2b8>
 800505a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800505e:	d815      	bhi.n	800508c <UART_SetConfig+0x2d0>
 8005060:	2b00      	cmp	r3, #0
 8005062:	d003      	beq.n	800506c <UART_SetConfig+0x2b0>
 8005064:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005068:	d008      	beq.n	800507c <UART_SetConfig+0x2c0>
 800506a:	e00f      	b.n	800508c <UART_SetConfig+0x2d0>
 800506c:	2300      	movs	r3, #0
 800506e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005072:	e022      	b.n	80050ba <UART_SetConfig+0x2fe>
 8005074:	2302      	movs	r3, #2
 8005076:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800507a:	e01e      	b.n	80050ba <UART_SetConfig+0x2fe>
 800507c:	2304      	movs	r3, #4
 800507e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005082:	e01a      	b.n	80050ba <UART_SetConfig+0x2fe>
 8005084:	2308      	movs	r3, #8
 8005086:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800508a:	e016      	b.n	80050ba <UART_SetConfig+0x2fe>
 800508c:	2310      	movs	r3, #16
 800508e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005092:	e012      	b.n	80050ba <UART_SetConfig+0x2fe>
 8005094:	cfff69f3 	.word	0xcfff69f3
 8005098:	40008000 	.word	0x40008000
 800509c:	40013800 	.word	0x40013800
 80050a0:	40021000 	.word	0x40021000
 80050a4:	40004400 	.word	0x40004400
 80050a8:	40004800 	.word	0x40004800
 80050ac:	40004c00 	.word	0x40004c00
 80050b0:	40005000 	.word	0x40005000
 80050b4:	2310      	movs	r3, #16
 80050b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4aae      	ldr	r2, [pc, #696]	@ (8005378 <UART_SetConfig+0x5bc>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	f040 8097 	bne.w	80051f4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80050c6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80050ca:	2b08      	cmp	r3, #8
 80050cc:	d823      	bhi.n	8005116 <UART_SetConfig+0x35a>
 80050ce:	a201      	add	r2, pc, #4	@ (adr r2, 80050d4 <UART_SetConfig+0x318>)
 80050d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050d4:	080050f9 	.word	0x080050f9
 80050d8:	08005117 	.word	0x08005117
 80050dc:	08005101 	.word	0x08005101
 80050e0:	08005117 	.word	0x08005117
 80050e4:	08005107 	.word	0x08005107
 80050e8:	08005117 	.word	0x08005117
 80050ec:	08005117 	.word	0x08005117
 80050f0:	08005117 	.word	0x08005117
 80050f4:	0800510f 	.word	0x0800510f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050f8:	f7ff fa16 	bl	8004528 <HAL_RCC_GetPCLK1Freq>
 80050fc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80050fe:	e010      	b.n	8005122 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005100:	4b9e      	ldr	r3, [pc, #632]	@ (800537c <UART_SetConfig+0x5c0>)
 8005102:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005104:	e00d      	b.n	8005122 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005106:	f7ff f9a1 	bl	800444c <HAL_RCC_GetSysClockFreq>
 800510a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800510c:	e009      	b.n	8005122 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800510e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005112:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005114:	e005      	b.n	8005122 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8005116:	2300      	movs	r3, #0
 8005118:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800511a:	2301      	movs	r3, #1
 800511c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005120:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005124:	2b00      	cmp	r3, #0
 8005126:	f000 8130 	beq.w	800538a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800512e:	4a94      	ldr	r2, [pc, #592]	@ (8005380 <UART_SetConfig+0x5c4>)
 8005130:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005134:	461a      	mov	r2, r3
 8005136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005138:	fbb3 f3f2 	udiv	r3, r3, r2
 800513c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	685a      	ldr	r2, [r3, #4]
 8005142:	4613      	mov	r3, r2
 8005144:	005b      	lsls	r3, r3, #1
 8005146:	4413      	add	r3, r2
 8005148:	69ba      	ldr	r2, [r7, #24]
 800514a:	429a      	cmp	r2, r3
 800514c:	d305      	bcc.n	800515a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005154:	69ba      	ldr	r2, [r7, #24]
 8005156:	429a      	cmp	r2, r3
 8005158:	d903      	bls.n	8005162 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800515a:	2301      	movs	r3, #1
 800515c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005160:	e113      	b.n	800538a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005164:	2200      	movs	r2, #0
 8005166:	60bb      	str	r3, [r7, #8]
 8005168:	60fa      	str	r2, [r7, #12]
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800516e:	4a84      	ldr	r2, [pc, #528]	@ (8005380 <UART_SetConfig+0x5c4>)
 8005170:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005174:	b29b      	uxth	r3, r3
 8005176:	2200      	movs	r2, #0
 8005178:	603b      	str	r3, [r7, #0]
 800517a:	607a      	str	r2, [r7, #4]
 800517c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005180:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005184:	f7fb f8a4 	bl	80002d0 <__aeabi_uldivmod>
 8005188:	4602      	mov	r2, r0
 800518a:	460b      	mov	r3, r1
 800518c:	4610      	mov	r0, r2
 800518e:	4619      	mov	r1, r3
 8005190:	f04f 0200 	mov.w	r2, #0
 8005194:	f04f 0300 	mov.w	r3, #0
 8005198:	020b      	lsls	r3, r1, #8
 800519a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800519e:	0202      	lsls	r2, r0, #8
 80051a0:	6979      	ldr	r1, [r7, #20]
 80051a2:	6849      	ldr	r1, [r1, #4]
 80051a4:	0849      	lsrs	r1, r1, #1
 80051a6:	2000      	movs	r0, #0
 80051a8:	460c      	mov	r4, r1
 80051aa:	4605      	mov	r5, r0
 80051ac:	eb12 0804 	adds.w	r8, r2, r4
 80051b0:	eb43 0905 	adc.w	r9, r3, r5
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	2200      	movs	r2, #0
 80051ba:	469a      	mov	sl, r3
 80051bc:	4693      	mov	fp, r2
 80051be:	4652      	mov	r2, sl
 80051c0:	465b      	mov	r3, fp
 80051c2:	4640      	mov	r0, r8
 80051c4:	4649      	mov	r1, r9
 80051c6:	f7fb f883 	bl	80002d0 <__aeabi_uldivmod>
 80051ca:	4602      	mov	r2, r0
 80051cc:	460b      	mov	r3, r1
 80051ce:	4613      	mov	r3, r2
 80051d0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80051d2:	6a3b      	ldr	r3, [r7, #32]
 80051d4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80051d8:	d308      	bcc.n	80051ec <UART_SetConfig+0x430>
 80051da:	6a3b      	ldr	r3, [r7, #32]
 80051dc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80051e0:	d204      	bcs.n	80051ec <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	6a3a      	ldr	r2, [r7, #32]
 80051e8:	60da      	str	r2, [r3, #12]
 80051ea:	e0ce      	b.n	800538a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80051ec:	2301      	movs	r3, #1
 80051ee:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80051f2:	e0ca      	b.n	800538a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	69db      	ldr	r3, [r3, #28]
 80051f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80051fc:	d166      	bne.n	80052cc <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80051fe:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005202:	2b08      	cmp	r3, #8
 8005204:	d827      	bhi.n	8005256 <UART_SetConfig+0x49a>
 8005206:	a201      	add	r2, pc, #4	@ (adr r2, 800520c <UART_SetConfig+0x450>)
 8005208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800520c:	08005231 	.word	0x08005231
 8005210:	08005239 	.word	0x08005239
 8005214:	08005241 	.word	0x08005241
 8005218:	08005257 	.word	0x08005257
 800521c:	08005247 	.word	0x08005247
 8005220:	08005257 	.word	0x08005257
 8005224:	08005257 	.word	0x08005257
 8005228:	08005257 	.word	0x08005257
 800522c:	0800524f 	.word	0x0800524f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005230:	f7ff f97a 	bl	8004528 <HAL_RCC_GetPCLK1Freq>
 8005234:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005236:	e014      	b.n	8005262 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005238:	f7ff f98c 	bl	8004554 <HAL_RCC_GetPCLK2Freq>
 800523c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800523e:	e010      	b.n	8005262 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005240:	4b4e      	ldr	r3, [pc, #312]	@ (800537c <UART_SetConfig+0x5c0>)
 8005242:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005244:	e00d      	b.n	8005262 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005246:	f7ff f901 	bl	800444c <HAL_RCC_GetSysClockFreq>
 800524a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800524c:	e009      	b.n	8005262 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800524e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005252:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005254:	e005      	b.n	8005262 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8005256:	2300      	movs	r3, #0
 8005258:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800525a:	2301      	movs	r3, #1
 800525c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005260:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005264:	2b00      	cmp	r3, #0
 8005266:	f000 8090 	beq.w	800538a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800526e:	4a44      	ldr	r2, [pc, #272]	@ (8005380 <UART_SetConfig+0x5c4>)
 8005270:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005274:	461a      	mov	r2, r3
 8005276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005278:	fbb3 f3f2 	udiv	r3, r3, r2
 800527c:	005a      	lsls	r2, r3, #1
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	085b      	lsrs	r3, r3, #1
 8005284:	441a      	add	r2, r3
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	fbb2 f3f3 	udiv	r3, r2, r3
 800528e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005290:	6a3b      	ldr	r3, [r7, #32]
 8005292:	2b0f      	cmp	r3, #15
 8005294:	d916      	bls.n	80052c4 <UART_SetConfig+0x508>
 8005296:	6a3b      	ldr	r3, [r7, #32]
 8005298:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800529c:	d212      	bcs.n	80052c4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800529e:	6a3b      	ldr	r3, [r7, #32]
 80052a0:	b29b      	uxth	r3, r3
 80052a2:	f023 030f 	bic.w	r3, r3, #15
 80052a6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80052a8:	6a3b      	ldr	r3, [r7, #32]
 80052aa:	085b      	lsrs	r3, r3, #1
 80052ac:	b29b      	uxth	r3, r3
 80052ae:	f003 0307 	and.w	r3, r3, #7
 80052b2:	b29a      	uxth	r2, r3
 80052b4:	8bfb      	ldrh	r3, [r7, #30]
 80052b6:	4313      	orrs	r3, r2
 80052b8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	8bfa      	ldrh	r2, [r7, #30]
 80052c0:	60da      	str	r2, [r3, #12]
 80052c2:	e062      	b.n	800538a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80052c4:	2301      	movs	r3, #1
 80052c6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80052ca:	e05e      	b.n	800538a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80052cc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80052d0:	2b08      	cmp	r3, #8
 80052d2:	d828      	bhi.n	8005326 <UART_SetConfig+0x56a>
 80052d4:	a201      	add	r2, pc, #4	@ (adr r2, 80052dc <UART_SetConfig+0x520>)
 80052d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052da:	bf00      	nop
 80052dc:	08005301 	.word	0x08005301
 80052e0:	08005309 	.word	0x08005309
 80052e4:	08005311 	.word	0x08005311
 80052e8:	08005327 	.word	0x08005327
 80052ec:	08005317 	.word	0x08005317
 80052f0:	08005327 	.word	0x08005327
 80052f4:	08005327 	.word	0x08005327
 80052f8:	08005327 	.word	0x08005327
 80052fc:	0800531f 	.word	0x0800531f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005300:	f7ff f912 	bl	8004528 <HAL_RCC_GetPCLK1Freq>
 8005304:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005306:	e014      	b.n	8005332 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005308:	f7ff f924 	bl	8004554 <HAL_RCC_GetPCLK2Freq>
 800530c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800530e:	e010      	b.n	8005332 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005310:	4b1a      	ldr	r3, [pc, #104]	@ (800537c <UART_SetConfig+0x5c0>)
 8005312:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005314:	e00d      	b.n	8005332 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005316:	f7ff f899 	bl	800444c <HAL_RCC_GetSysClockFreq>
 800531a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800531c:	e009      	b.n	8005332 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800531e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005322:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005324:	e005      	b.n	8005332 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8005326:	2300      	movs	r3, #0
 8005328:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800532a:	2301      	movs	r3, #1
 800532c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005330:	bf00      	nop
    }

    if (pclk != 0U)
 8005332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005334:	2b00      	cmp	r3, #0
 8005336:	d028      	beq.n	800538a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800533c:	4a10      	ldr	r2, [pc, #64]	@ (8005380 <UART_SetConfig+0x5c4>)
 800533e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005342:	461a      	mov	r2, r3
 8005344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005346:	fbb3 f2f2 	udiv	r2, r3, r2
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	085b      	lsrs	r3, r3, #1
 8005350:	441a      	add	r2, r3
 8005352:	697b      	ldr	r3, [r7, #20]
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	fbb2 f3f3 	udiv	r3, r2, r3
 800535a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800535c:	6a3b      	ldr	r3, [r7, #32]
 800535e:	2b0f      	cmp	r3, #15
 8005360:	d910      	bls.n	8005384 <UART_SetConfig+0x5c8>
 8005362:	6a3b      	ldr	r3, [r7, #32]
 8005364:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005368:	d20c      	bcs.n	8005384 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800536a:	6a3b      	ldr	r3, [r7, #32]
 800536c:	b29a      	uxth	r2, r3
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	60da      	str	r2, [r3, #12]
 8005374:	e009      	b.n	800538a <UART_SetConfig+0x5ce>
 8005376:	bf00      	nop
 8005378:	40008000 	.word	0x40008000
 800537c:	00f42400 	.word	0x00f42400
 8005380:	080063c8 	.word	0x080063c8
      }
      else
      {
        ret = HAL_ERROR;
 8005384:	2301      	movs	r3, #1
 8005386:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	2201      	movs	r2, #1
 800538e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	2201      	movs	r2, #1
 8005396:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	2200      	movs	r2, #0
 800539e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	2200      	movs	r2, #0
 80053a4:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80053a6:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	3730      	adds	r7, #48	@ 0x30
 80053ae:	46bd      	mov	sp, r7
 80053b0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080053b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80053b4:	b480      	push	{r7}
 80053b6:	b083      	sub	sp, #12
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053c0:	f003 0308 	and.w	r3, r3, #8
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d00a      	beq.n	80053de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	430a      	orrs	r2, r1
 80053dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053e2:	f003 0301 	and.w	r3, r3, #1
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d00a      	beq.n	8005400 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	430a      	orrs	r2, r1
 80053fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005404:	f003 0302 	and.w	r3, r3, #2
 8005408:	2b00      	cmp	r3, #0
 800540a:	d00a      	beq.n	8005422 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	685b      	ldr	r3, [r3, #4]
 8005412:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	430a      	orrs	r2, r1
 8005420:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005426:	f003 0304 	and.w	r3, r3, #4
 800542a:	2b00      	cmp	r3, #0
 800542c:	d00a      	beq.n	8005444 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	430a      	orrs	r2, r1
 8005442:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005448:	f003 0310 	and.w	r3, r3, #16
 800544c:	2b00      	cmp	r3, #0
 800544e:	d00a      	beq.n	8005466 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	689b      	ldr	r3, [r3, #8]
 8005456:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	430a      	orrs	r2, r1
 8005464:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800546a:	f003 0320 	and.w	r3, r3, #32
 800546e:	2b00      	cmp	r3, #0
 8005470:	d00a      	beq.n	8005488 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	689b      	ldr	r3, [r3, #8]
 8005478:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	430a      	orrs	r2, r1
 8005486:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800548c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005490:	2b00      	cmp	r3, #0
 8005492:	d01a      	beq.n	80054ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	430a      	orrs	r2, r1
 80054a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80054b2:	d10a      	bne.n	80054ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	685b      	ldr	r3, [r3, #4]
 80054ba:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	430a      	orrs	r2, r1
 80054c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d00a      	beq.n	80054ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	430a      	orrs	r2, r1
 80054ea:	605a      	str	r2, [r3, #4]
  }
}
 80054ec:	bf00      	nop
 80054ee:	370c      	adds	r7, #12
 80054f0:	46bd      	mov	sp, r7
 80054f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f6:	4770      	bx	lr

080054f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b098      	sub	sp, #96	@ 0x60
 80054fc:	af02      	add	r7, sp, #8
 80054fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2200      	movs	r2, #0
 8005504:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005508:	f7fb ffea 	bl	80014e0 <HAL_GetTick>
 800550c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f003 0308 	and.w	r3, r3, #8
 8005518:	2b08      	cmp	r3, #8
 800551a:	d12f      	bne.n	800557c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800551c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005520:	9300      	str	r3, [sp, #0]
 8005522:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005524:	2200      	movs	r2, #0
 8005526:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	f000 f88e 	bl	800564c <UART_WaitOnFlagUntilTimeout>
 8005530:	4603      	mov	r3, r0
 8005532:	2b00      	cmp	r3, #0
 8005534:	d022      	beq.n	800557c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800553c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800553e:	e853 3f00 	ldrex	r3, [r3]
 8005542:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005544:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005546:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800554a:	653b      	str	r3, [r7, #80]	@ 0x50
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	461a      	mov	r2, r3
 8005552:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005554:	647b      	str	r3, [r7, #68]	@ 0x44
 8005556:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005558:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800555a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800555c:	e841 2300 	strex	r3, r2, [r1]
 8005560:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005562:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005564:	2b00      	cmp	r3, #0
 8005566:	d1e6      	bne.n	8005536 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2220      	movs	r2, #32
 800556c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2200      	movs	r2, #0
 8005574:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005578:	2303      	movs	r3, #3
 800557a:	e063      	b.n	8005644 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f003 0304 	and.w	r3, r3, #4
 8005586:	2b04      	cmp	r3, #4
 8005588:	d149      	bne.n	800561e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800558a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800558e:	9300      	str	r3, [sp, #0]
 8005590:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005592:	2200      	movs	r2, #0
 8005594:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005598:	6878      	ldr	r0, [r7, #4]
 800559a:	f000 f857 	bl	800564c <UART_WaitOnFlagUntilTimeout>
 800559e:	4603      	mov	r3, r0
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d03c      	beq.n	800561e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055ac:	e853 3f00 	ldrex	r3, [r3]
 80055b0:	623b      	str	r3, [r7, #32]
   return(result);
 80055b2:	6a3b      	ldr	r3, [r7, #32]
 80055b4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80055b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	461a      	mov	r2, r3
 80055c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80055c2:	633b      	str	r3, [r7, #48]	@ 0x30
 80055c4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055c6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80055c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80055ca:	e841 2300 	strex	r3, r2, [r1]
 80055ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80055d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d1e6      	bne.n	80055a4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	3308      	adds	r3, #8
 80055dc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055de:	693b      	ldr	r3, [r7, #16]
 80055e0:	e853 3f00 	ldrex	r3, [r3]
 80055e4:	60fb      	str	r3, [r7, #12]
   return(result);
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	f023 0301 	bic.w	r3, r3, #1
 80055ec:	64bb      	str	r3, [r7, #72]	@ 0x48
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	3308      	adds	r3, #8
 80055f4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80055f6:	61fa      	str	r2, [r7, #28]
 80055f8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055fa:	69b9      	ldr	r1, [r7, #24]
 80055fc:	69fa      	ldr	r2, [r7, #28]
 80055fe:	e841 2300 	strex	r3, r2, [r1]
 8005602:	617b      	str	r3, [r7, #20]
   return(result);
 8005604:	697b      	ldr	r3, [r7, #20]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d1e5      	bne.n	80055d6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2220      	movs	r2, #32
 800560e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2200      	movs	r2, #0
 8005616:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800561a:	2303      	movs	r3, #3
 800561c:	e012      	b.n	8005644 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2220      	movs	r2, #32
 8005622:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2220      	movs	r2, #32
 800562a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2200      	movs	r2, #0
 8005632:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2200      	movs	r2, #0
 8005638:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2200      	movs	r2, #0
 800563e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005642:	2300      	movs	r3, #0
}
 8005644:	4618      	mov	r0, r3
 8005646:	3758      	adds	r7, #88	@ 0x58
 8005648:	46bd      	mov	sp, r7
 800564a:	bd80      	pop	{r7, pc}

0800564c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b084      	sub	sp, #16
 8005650:	af00      	add	r7, sp, #0
 8005652:	60f8      	str	r0, [r7, #12]
 8005654:	60b9      	str	r1, [r7, #8]
 8005656:	603b      	str	r3, [r7, #0]
 8005658:	4613      	mov	r3, r2
 800565a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800565c:	e04f      	b.n	80056fe <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800565e:	69bb      	ldr	r3, [r7, #24]
 8005660:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005664:	d04b      	beq.n	80056fe <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005666:	f7fb ff3b 	bl	80014e0 <HAL_GetTick>
 800566a:	4602      	mov	r2, r0
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	1ad3      	subs	r3, r2, r3
 8005670:	69ba      	ldr	r2, [r7, #24]
 8005672:	429a      	cmp	r2, r3
 8005674:	d302      	bcc.n	800567c <UART_WaitOnFlagUntilTimeout+0x30>
 8005676:	69bb      	ldr	r3, [r7, #24]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d101      	bne.n	8005680 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800567c:	2303      	movs	r3, #3
 800567e:	e04e      	b.n	800571e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f003 0304 	and.w	r3, r3, #4
 800568a:	2b00      	cmp	r3, #0
 800568c:	d037      	beq.n	80056fe <UART_WaitOnFlagUntilTimeout+0xb2>
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	2b80      	cmp	r3, #128	@ 0x80
 8005692:	d034      	beq.n	80056fe <UART_WaitOnFlagUntilTimeout+0xb2>
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	2b40      	cmp	r3, #64	@ 0x40
 8005698:	d031      	beq.n	80056fe <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	69db      	ldr	r3, [r3, #28]
 80056a0:	f003 0308 	and.w	r3, r3, #8
 80056a4:	2b08      	cmp	r3, #8
 80056a6:	d110      	bne.n	80056ca <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	2208      	movs	r2, #8
 80056ae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80056b0:	68f8      	ldr	r0, [r7, #12]
 80056b2:	f000 f838 	bl	8005726 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	2208      	movs	r2, #8
 80056ba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	2200      	movs	r2, #0
 80056c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80056c6:	2301      	movs	r3, #1
 80056c8:	e029      	b.n	800571e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	69db      	ldr	r3, [r3, #28]
 80056d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80056d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80056d8:	d111      	bne.n	80056fe <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80056e2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80056e4:	68f8      	ldr	r0, [r7, #12]
 80056e6:	f000 f81e 	bl	8005726 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	2220      	movs	r2, #32
 80056ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	2200      	movs	r2, #0
 80056f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80056fa:	2303      	movs	r3, #3
 80056fc:	e00f      	b.n	800571e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	69da      	ldr	r2, [r3, #28]
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	4013      	ands	r3, r2
 8005708:	68ba      	ldr	r2, [r7, #8]
 800570a:	429a      	cmp	r2, r3
 800570c:	bf0c      	ite	eq
 800570e:	2301      	moveq	r3, #1
 8005710:	2300      	movne	r3, #0
 8005712:	b2db      	uxtb	r3, r3
 8005714:	461a      	mov	r2, r3
 8005716:	79fb      	ldrb	r3, [r7, #7]
 8005718:	429a      	cmp	r2, r3
 800571a:	d0a0      	beq.n	800565e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800571c:	2300      	movs	r3, #0
}
 800571e:	4618      	mov	r0, r3
 8005720:	3710      	adds	r7, #16
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}

08005726 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005726:	b480      	push	{r7}
 8005728:	b095      	sub	sp, #84	@ 0x54
 800572a:	af00      	add	r7, sp, #0
 800572c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005734:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005736:	e853 3f00 	ldrex	r3, [r3]
 800573a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800573c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800573e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005742:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	461a      	mov	r2, r3
 800574a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800574c:	643b      	str	r3, [r7, #64]	@ 0x40
 800574e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005750:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005752:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005754:	e841 2300 	strex	r3, r2, [r1]
 8005758:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800575a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800575c:	2b00      	cmp	r3, #0
 800575e:	d1e6      	bne.n	800572e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	3308      	adds	r3, #8
 8005766:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005768:	6a3b      	ldr	r3, [r7, #32]
 800576a:	e853 3f00 	ldrex	r3, [r3]
 800576e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005770:	69fb      	ldr	r3, [r7, #28]
 8005772:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005776:	f023 0301 	bic.w	r3, r3, #1
 800577a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	3308      	adds	r3, #8
 8005782:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005784:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005786:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005788:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800578a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800578c:	e841 2300 	strex	r3, r2, [r1]
 8005790:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005794:	2b00      	cmp	r3, #0
 8005796:	d1e3      	bne.n	8005760 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800579c:	2b01      	cmp	r3, #1
 800579e:	d118      	bne.n	80057d2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	e853 3f00 	ldrex	r3, [r3]
 80057ac:	60bb      	str	r3, [r7, #8]
   return(result);
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	f023 0310 	bic.w	r3, r3, #16
 80057b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	461a      	mov	r2, r3
 80057bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80057be:	61bb      	str	r3, [r7, #24]
 80057c0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057c2:	6979      	ldr	r1, [r7, #20]
 80057c4:	69ba      	ldr	r2, [r7, #24]
 80057c6:	e841 2300 	strex	r3, r2, [r1]
 80057ca:	613b      	str	r3, [r7, #16]
   return(result);
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d1e6      	bne.n	80057a0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2220      	movs	r2, #32
 80057d6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2200      	movs	r2, #0
 80057de:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2200      	movs	r2, #0
 80057e4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80057e6:	bf00      	nop
 80057e8:	3754      	adds	r7, #84	@ 0x54
 80057ea:	46bd      	mov	sp, r7
 80057ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f0:	4770      	bx	lr

080057f2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80057f2:	b480      	push	{r7}
 80057f4:	b085      	sub	sp, #20
 80057f6:	af00      	add	r7, sp, #0
 80057f8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005800:	2b01      	cmp	r3, #1
 8005802:	d101      	bne.n	8005808 <HAL_UARTEx_DisableFifoMode+0x16>
 8005804:	2302      	movs	r3, #2
 8005806:	e027      	b.n	8005858 <HAL_UARTEx_DisableFifoMode+0x66>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2201      	movs	r2, #1
 800580c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2224      	movs	r2, #36	@ 0x24
 8005814:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	681a      	ldr	r2, [r3, #0]
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f022 0201 	bic.w	r2, r2, #1
 800582e:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005836:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2200      	movs	r2, #0
 800583c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	68fa      	ldr	r2, [r7, #12]
 8005844:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2220      	movs	r2, #32
 800584a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2200      	movs	r2, #0
 8005852:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005856:	2300      	movs	r3, #0
}
 8005858:	4618      	mov	r0, r3
 800585a:	3714      	adds	r7, #20
 800585c:	46bd      	mov	sp, r7
 800585e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005862:	4770      	bx	lr

08005864 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b084      	sub	sp, #16
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
 800586c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005874:	2b01      	cmp	r3, #1
 8005876:	d101      	bne.n	800587c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005878:	2302      	movs	r3, #2
 800587a:	e02d      	b.n	80058d8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2201      	movs	r2, #1
 8005880:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2224      	movs	r2, #36	@ 0x24
 8005888:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	681a      	ldr	r2, [r3, #0]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f022 0201 	bic.w	r2, r2, #1
 80058a2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	689b      	ldr	r3, [r3, #8]
 80058aa:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	683a      	ldr	r2, [r7, #0]
 80058b4:	430a      	orrs	r2, r1
 80058b6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80058b8:	6878      	ldr	r0, [r7, #4]
 80058ba:	f000 f84f 	bl	800595c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	68fa      	ldr	r2, [r7, #12]
 80058c4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2220      	movs	r2, #32
 80058ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2200      	movs	r2, #0
 80058d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80058d6:	2300      	movs	r3, #0
}
 80058d8:	4618      	mov	r0, r3
 80058da:	3710      	adds	r7, #16
 80058dc:	46bd      	mov	sp, r7
 80058de:	bd80      	pop	{r7, pc}

080058e0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b084      	sub	sp, #16
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
 80058e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80058f0:	2b01      	cmp	r3, #1
 80058f2:	d101      	bne.n	80058f8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80058f4:	2302      	movs	r3, #2
 80058f6:	e02d      	b.n	8005954 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2201      	movs	r2, #1
 80058fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2224      	movs	r2, #36	@ 0x24
 8005904:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	681a      	ldr	r2, [r3, #0]
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f022 0201 	bic.w	r2, r2, #1
 800591e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	689b      	ldr	r3, [r3, #8]
 8005926:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	683a      	ldr	r2, [r7, #0]
 8005930:	430a      	orrs	r2, r1
 8005932:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005934:	6878      	ldr	r0, [r7, #4]
 8005936:	f000 f811 	bl	800595c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	68fa      	ldr	r2, [r7, #12]
 8005940:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2220      	movs	r2, #32
 8005946:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2200      	movs	r2, #0
 800594e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005952:	2300      	movs	r3, #0
}
 8005954:	4618      	mov	r0, r3
 8005956:	3710      	adds	r7, #16
 8005958:	46bd      	mov	sp, r7
 800595a:	bd80      	pop	{r7, pc}

0800595c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800595c:	b480      	push	{r7}
 800595e:	b085      	sub	sp, #20
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005968:	2b00      	cmp	r3, #0
 800596a:	d108      	bne.n	800597e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2201      	movs	r2, #1
 8005970:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2201      	movs	r2, #1
 8005978:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800597c:	e031      	b.n	80059e2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800597e:	2308      	movs	r3, #8
 8005980:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005982:	2308      	movs	r3, #8
 8005984:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	689b      	ldr	r3, [r3, #8]
 800598c:	0e5b      	lsrs	r3, r3, #25
 800598e:	b2db      	uxtb	r3, r3
 8005990:	f003 0307 	and.w	r3, r3, #7
 8005994:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	689b      	ldr	r3, [r3, #8]
 800599c:	0f5b      	lsrs	r3, r3, #29
 800599e:	b2db      	uxtb	r3, r3
 80059a0:	f003 0307 	and.w	r3, r3, #7
 80059a4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80059a6:	7bbb      	ldrb	r3, [r7, #14]
 80059a8:	7b3a      	ldrb	r2, [r7, #12]
 80059aa:	4911      	ldr	r1, [pc, #68]	@ (80059f0 <UARTEx_SetNbDataToProcess+0x94>)
 80059ac:	5c8a      	ldrb	r2, [r1, r2]
 80059ae:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80059b2:	7b3a      	ldrb	r2, [r7, #12]
 80059b4:	490f      	ldr	r1, [pc, #60]	@ (80059f4 <UARTEx_SetNbDataToProcess+0x98>)
 80059b6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80059b8:	fb93 f3f2 	sdiv	r3, r3, r2
 80059bc:	b29a      	uxth	r2, r3
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80059c4:	7bfb      	ldrb	r3, [r7, #15]
 80059c6:	7b7a      	ldrb	r2, [r7, #13]
 80059c8:	4909      	ldr	r1, [pc, #36]	@ (80059f0 <UARTEx_SetNbDataToProcess+0x94>)
 80059ca:	5c8a      	ldrb	r2, [r1, r2]
 80059cc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80059d0:	7b7a      	ldrb	r2, [r7, #13]
 80059d2:	4908      	ldr	r1, [pc, #32]	@ (80059f4 <UARTEx_SetNbDataToProcess+0x98>)
 80059d4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80059d6:	fb93 f3f2 	sdiv	r3, r3, r2
 80059da:	b29a      	uxth	r2, r3
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80059e2:	bf00      	nop
 80059e4:	3714      	adds	r7, #20
 80059e6:	46bd      	mov	sp, r7
 80059e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ec:	4770      	bx	lr
 80059ee:	bf00      	nop
 80059f0:	080063e0 	.word	0x080063e0
 80059f4:	080063e8 	.word	0x080063e8

080059f8 <sniprintf>:
 80059f8:	b40c      	push	{r2, r3}
 80059fa:	b530      	push	{r4, r5, lr}
 80059fc:	4b17      	ldr	r3, [pc, #92]	@ (8005a5c <sniprintf+0x64>)
 80059fe:	1e0c      	subs	r4, r1, #0
 8005a00:	681d      	ldr	r5, [r3, #0]
 8005a02:	b09d      	sub	sp, #116	@ 0x74
 8005a04:	da08      	bge.n	8005a18 <sniprintf+0x20>
 8005a06:	238b      	movs	r3, #139	@ 0x8b
 8005a08:	602b      	str	r3, [r5, #0]
 8005a0a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005a0e:	b01d      	add	sp, #116	@ 0x74
 8005a10:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005a14:	b002      	add	sp, #8
 8005a16:	4770      	bx	lr
 8005a18:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8005a1c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005a20:	bf14      	ite	ne
 8005a22:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8005a26:	4623      	moveq	r3, r4
 8005a28:	9304      	str	r3, [sp, #16]
 8005a2a:	9307      	str	r3, [sp, #28]
 8005a2c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005a30:	9002      	str	r0, [sp, #8]
 8005a32:	9006      	str	r0, [sp, #24]
 8005a34:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005a38:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005a3a:	ab21      	add	r3, sp, #132	@ 0x84
 8005a3c:	a902      	add	r1, sp, #8
 8005a3e:	4628      	mov	r0, r5
 8005a40:	9301      	str	r3, [sp, #4]
 8005a42:	f000 f995 	bl	8005d70 <_svfiprintf_r>
 8005a46:	1c43      	adds	r3, r0, #1
 8005a48:	bfbc      	itt	lt
 8005a4a:	238b      	movlt	r3, #139	@ 0x8b
 8005a4c:	602b      	strlt	r3, [r5, #0]
 8005a4e:	2c00      	cmp	r4, #0
 8005a50:	d0dd      	beq.n	8005a0e <sniprintf+0x16>
 8005a52:	9b02      	ldr	r3, [sp, #8]
 8005a54:	2200      	movs	r2, #0
 8005a56:	701a      	strb	r2, [r3, #0]
 8005a58:	e7d9      	b.n	8005a0e <sniprintf+0x16>
 8005a5a:	bf00      	nop
 8005a5c:	2000000c 	.word	0x2000000c

08005a60 <memset>:
 8005a60:	4402      	add	r2, r0
 8005a62:	4603      	mov	r3, r0
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d100      	bne.n	8005a6a <memset+0xa>
 8005a68:	4770      	bx	lr
 8005a6a:	f803 1b01 	strb.w	r1, [r3], #1
 8005a6e:	e7f9      	b.n	8005a64 <memset+0x4>

08005a70 <__errno>:
 8005a70:	4b01      	ldr	r3, [pc, #4]	@ (8005a78 <__errno+0x8>)
 8005a72:	6818      	ldr	r0, [r3, #0]
 8005a74:	4770      	bx	lr
 8005a76:	bf00      	nop
 8005a78:	2000000c 	.word	0x2000000c

08005a7c <__libc_init_array>:
 8005a7c:	b570      	push	{r4, r5, r6, lr}
 8005a7e:	4d0d      	ldr	r5, [pc, #52]	@ (8005ab4 <__libc_init_array+0x38>)
 8005a80:	4c0d      	ldr	r4, [pc, #52]	@ (8005ab8 <__libc_init_array+0x3c>)
 8005a82:	1b64      	subs	r4, r4, r5
 8005a84:	10a4      	asrs	r4, r4, #2
 8005a86:	2600      	movs	r6, #0
 8005a88:	42a6      	cmp	r6, r4
 8005a8a:	d109      	bne.n	8005aa0 <__libc_init_array+0x24>
 8005a8c:	4d0b      	ldr	r5, [pc, #44]	@ (8005abc <__libc_init_array+0x40>)
 8005a8e:	4c0c      	ldr	r4, [pc, #48]	@ (8005ac0 <__libc_init_array+0x44>)
 8005a90:	f000 fc66 	bl	8006360 <_init>
 8005a94:	1b64      	subs	r4, r4, r5
 8005a96:	10a4      	asrs	r4, r4, #2
 8005a98:	2600      	movs	r6, #0
 8005a9a:	42a6      	cmp	r6, r4
 8005a9c:	d105      	bne.n	8005aaa <__libc_init_array+0x2e>
 8005a9e:	bd70      	pop	{r4, r5, r6, pc}
 8005aa0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005aa4:	4798      	blx	r3
 8005aa6:	3601      	adds	r6, #1
 8005aa8:	e7ee      	b.n	8005a88 <__libc_init_array+0xc>
 8005aaa:	f855 3b04 	ldr.w	r3, [r5], #4
 8005aae:	4798      	blx	r3
 8005ab0:	3601      	adds	r6, #1
 8005ab2:	e7f2      	b.n	8005a9a <__libc_init_array+0x1e>
 8005ab4:	0800642c 	.word	0x0800642c
 8005ab8:	0800642c 	.word	0x0800642c
 8005abc:	0800642c 	.word	0x0800642c
 8005ac0:	08006430 	.word	0x08006430

08005ac4 <__retarget_lock_acquire_recursive>:
 8005ac4:	4770      	bx	lr

08005ac6 <__retarget_lock_release_recursive>:
 8005ac6:	4770      	bx	lr

08005ac8 <_free_r>:
 8005ac8:	b538      	push	{r3, r4, r5, lr}
 8005aca:	4605      	mov	r5, r0
 8005acc:	2900      	cmp	r1, #0
 8005ace:	d041      	beq.n	8005b54 <_free_r+0x8c>
 8005ad0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ad4:	1f0c      	subs	r4, r1, #4
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	bfb8      	it	lt
 8005ada:	18e4      	addlt	r4, r4, r3
 8005adc:	f000 f8e0 	bl	8005ca0 <__malloc_lock>
 8005ae0:	4a1d      	ldr	r2, [pc, #116]	@ (8005b58 <_free_r+0x90>)
 8005ae2:	6813      	ldr	r3, [r2, #0]
 8005ae4:	b933      	cbnz	r3, 8005af4 <_free_r+0x2c>
 8005ae6:	6063      	str	r3, [r4, #4]
 8005ae8:	6014      	str	r4, [r2, #0]
 8005aea:	4628      	mov	r0, r5
 8005aec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005af0:	f000 b8dc 	b.w	8005cac <__malloc_unlock>
 8005af4:	42a3      	cmp	r3, r4
 8005af6:	d908      	bls.n	8005b0a <_free_r+0x42>
 8005af8:	6820      	ldr	r0, [r4, #0]
 8005afa:	1821      	adds	r1, r4, r0
 8005afc:	428b      	cmp	r3, r1
 8005afe:	bf01      	itttt	eq
 8005b00:	6819      	ldreq	r1, [r3, #0]
 8005b02:	685b      	ldreq	r3, [r3, #4]
 8005b04:	1809      	addeq	r1, r1, r0
 8005b06:	6021      	streq	r1, [r4, #0]
 8005b08:	e7ed      	b.n	8005ae6 <_free_r+0x1e>
 8005b0a:	461a      	mov	r2, r3
 8005b0c:	685b      	ldr	r3, [r3, #4]
 8005b0e:	b10b      	cbz	r3, 8005b14 <_free_r+0x4c>
 8005b10:	42a3      	cmp	r3, r4
 8005b12:	d9fa      	bls.n	8005b0a <_free_r+0x42>
 8005b14:	6811      	ldr	r1, [r2, #0]
 8005b16:	1850      	adds	r0, r2, r1
 8005b18:	42a0      	cmp	r0, r4
 8005b1a:	d10b      	bne.n	8005b34 <_free_r+0x6c>
 8005b1c:	6820      	ldr	r0, [r4, #0]
 8005b1e:	4401      	add	r1, r0
 8005b20:	1850      	adds	r0, r2, r1
 8005b22:	4283      	cmp	r3, r0
 8005b24:	6011      	str	r1, [r2, #0]
 8005b26:	d1e0      	bne.n	8005aea <_free_r+0x22>
 8005b28:	6818      	ldr	r0, [r3, #0]
 8005b2a:	685b      	ldr	r3, [r3, #4]
 8005b2c:	6053      	str	r3, [r2, #4]
 8005b2e:	4408      	add	r0, r1
 8005b30:	6010      	str	r0, [r2, #0]
 8005b32:	e7da      	b.n	8005aea <_free_r+0x22>
 8005b34:	d902      	bls.n	8005b3c <_free_r+0x74>
 8005b36:	230c      	movs	r3, #12
 8005b38:	602b      	str	r3, [r5, #0]
 8005b3a:	e7d6      	b.n	8005aea <_free_r+0x22>
 8005b3c:	6820      	ldr	r0, [r4, #0]
 8005b3e:	1821      	adds	r1, r4, r0
 8005b40:	428b      	cmp	r3, r1
 8005b42:	bf04      	itt	eq
 8005b44:	6819      	ldreq	r1, [r3, #0]
 8005b46:	685b      	ldreq	r3, [r3, #4]
 8005b48:	6063      	str	r3, [r4, #4]
 8005b4a:	bf04      	itt	eq
 8005b4c:	1809      	addeq	r1, r1, r0
 8005b4e:	6021      	streq	r1, [r4, #0]
 8005b50:	6054      	str	r4, [r2, #4]
 8005b52:	e7ca      	b.n	8005aea <_free_r+0x22>
 8005b54:	bd38      	pop	{r3, r4, r5, pc}
 8005b56:	bf00      	nop
 8005b58:	2000045c 	.word	0x2000045c

08005b5c <sbrk_aligned>:
 8005b5c:	b570      	push	{r4, r5, r6, lr}
 8005b5e:	4e0f      	ldr	r6, [pc, #60]	@ (8005b9c <sbrk_aligned+0x40>)
 8005b60:	460c      	mov	r4, r1
 8005b62:	6831      	ldr	r1, [r6, #0]
 8005b64:	4605      	mov	r5, r0
 8005b66:	b911      	cbnz	r1, 8005b6e <sbrk_aligned+0x12>
 8005b68:	f000 fba6 	bl	80062b8 <_sbrk_r>
 8005b6c:	6030      	str	r0, [r6, #0]
 8005b6e:	4621      	mov	r1, r4
 8005b70:	4628      	mov	r0, r5
 8005b72:	f000 fba1 	bl	80062b8 <_sbrk_r>
 8005b76:	1c43      	adds	r3, r0, #1
 8005b78:	d103      	bne.n	8005b82 <sbrk_aligned+0x26>
 8005b7a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8005b7e:	4620      	mov	r0, r4
 8005b80:	bd70      	pop	{r4, r5, r6, pc}
 8005b82:	1cc4      	adds	r4, r0, #3
 8005b84:	f024 0403 	bic.w	r4, r4, #3
 8005b88:	42a0      	cmp	r0, r4
 8005b8a:	d0f8      	beq.n	8005b7e <sbrk_aligned+0x22>
 8005b8c:	1a21      	subs	r1, r4, r0
 8005b8e:	4628      	mov	r0, r5
 8005b90:	f000 fb92 	bl	80062b8 <_sbrk_r>
 8005b94:	3001      	adds	r0, #1
 8005b96:	d1f2      	bne.n	8005b7e <sbrk_aligned+0x22>
 8005b98:	e7ef      	b.n	8005b7a <sbrk_aligned+0x1e>
 8005b9a:	bf00      	nop
 8005b9c:	20000458 	.word	0x20000458

08005ba0 <_malloc_r>:
 8005ba0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ba4:	1ccd      	adds	r5, r1, #3
 8005ba6:	f025 0503 	bic.w	r5, r5, #3
 8005baa:	3508      	adds	r5, #8
 8005bac:	2d0c      	cmp	r5, #12
 8005bae:	bf38      	it	cc
 8005bb0:	250c      	movcc	r5, #12
 8005bb2:	2d00      	cmp	r5, #0
 8005bb4:	4606      	mov	r6, r0
 8005bb6:	db01      	blt.n	8005bbc <_malloc_r+0x1c>
 8005bb8:	42a9      	cmp	r1, r5
 8005bba:	d904      	bls.n	8005bc6 <_malloc_r+0x26>
 8005bbc:	230c      	movs	r3, #12
 8005bbe:	6033      	str	r3, [r6, #0]
 8005bc0:	2000      	movs	r0, #0
 8005bc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005bc6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005c9c <_malloc_r+0xfc>
 8005bca:	f000 f869 	bl	8005ca0 <__malloc_lock>
 8005bce:	f8d8 3000 	ldr.w	r3, [r8]
 8005bd2:	461c      	mov	r4, r3
 8005bd4:	bb44      	cbnz	r4, 8005c28 <_malloc_r+0x88>
 8005bd6:	4629      	mov	r1, r5
 8005bd8:	4630      	mov	r0, r6
 8005bda:	f7ff ffbf 	bl	8005b5c <sbrk_aligned>
 8005bde:	1c43      	adds	r3, r0, #1
 8005be0:	4604      	mov	r4, r0
 8005be2:	d158      	bne.n	8005c96 <_malloc_r+0xf6>
 8005be4:	f8d8 4000 	ldr.w	r4, [r8]
 8005be8:	4627      	mov	r7, r4
 8005bea:	2f00      	cmp	r7, #0
 8005bec:	d143      	bne.n	8005c76 <_malloc_r+0xd6>
 8005bee:	2c00      	cmp	r4, #0
 8005bf0:	d04b      	beq.n	8005c8a <_malloc_r+0xea>
 8005bf2:	6823      	ldr	r3, [r4, #0]
 8005bf4:	4639      	mov	r1, r7
 8005bf6:	4630      	mov	r0, r6
 8005bf8:	eb04 0903 	add.w	r9, r4, r3
 8005bfc:	f000 fb5c 	bl	80062b8 <_sbrk_r>
 8005c00:	4581      	cmp	r9, r0
 8005c02:	d142      	bne.n	8005c8a <_malloc_r+0xea>
 8005c04:	6821      	ldr	r1, [r4, #0]
 8005c06:	1a6d      	subs	r5, r5, r1
 8005c08:	4629      	mov	r1, r5
 8005c0a:	4630      	mov	r0, r6
 8005c0c:	f7ff ffa6 	bl	8005b5c <sbrk_aligned>
 8005c10:	3001      	adds	r0, #1
 8005c12:	d03a      	beq.n	8005c8a <_malloc_r+0xea>
 8005c14:	6823      	ldr	r3, [r4, #0]
 8005c16:	442b      	add	r3, r5
 8005c18:	6023      	str	r3, [r4, #0]
 8005c1a:	f8d8 3000 	ldr.w	r3, [r8]
 8005c1e:	685a      	ldr	r2, [r3, #4]
 8005c20:	bb62      	cbnz	r2, 8005c7c <_malloc_r+0xdc>
 8005c22:	f8c8 7000 	str.w	r7, [r8]
 8005c26:	e00f      	b.n	8005c48 <_malloc_r+0xa8>
 8005c28:	6822      	ldr	r2, [r4, #0]
 8005c2a:	1b52      	subs	r2, r2, r5
 8005c2c:	d420      	bmi.n	8005c70 <_malloc_r+0xd0>
 8005c2e:	2a0b      	cmp	r2, #11
 8005c30:	d917      	bls.n	8005c62 <_malloc_r+0xc2>
 8005c32:	1961      	adds	r1, r4, r5
 8005c34:	42a3      	cmp	r3, r4
 8005c36:	6025      	str	r5, [r4, #0]
 8005c38:	bf18      	it	ne
 8005c3a:	6059      	strne	r1, [r3, #4]
 8005c3c:	6863      	ldr	r3, [r4, #4]
 8005c3e:	bf08      	it	eq
 8005c40:	f8c8 1000 	streq.w	r1, [r8]
 8005c44:	5162      	str	r2, [r4, r5]
 8005c46:	604b      	str	r3, [r1, #4]
 8005c48:	4630      	mov	r0, r6
 8005c4a:	f000 f82f 	bl	8005cac <__malloc_unlock>
 8005c4e:	f104 000b 	add.w	r0, r4, #11
 8005c52:	1d23      	adds	r3, r4, #4
 8005c54:	f020 0007 	bic.w	r0, r0, #7
 8005c58:	1ac2      	subs	r2, r0, r3
 8005c5a:	bf1c      	itt	ne
 8005c5c:	1a1b      	subne	r3, r3, r0
 8005c5e:	50a3      	strne	r3, [r4, r2]
 8005c60:	e7af      	b.n	8005bc2 <_malloc_r+0x22>
 8005c62:	6862      	ldr	r2, [r4, #4]
 8005c64:	42a3      	cmp	r3, r4
 8005c66:	bf0c      	ite	eq
 8005c68:	f8c8 2000 	streq.w	r2, [r8]
 8005c6c:	605a      	strne	r2, [r3, #4]
 8005c6e:	e7eb      	b.n	8005c48 <_malloc_r+0xa8>
 8005c70:	4623      	mov	r3, r4
 8005c72:	6864      	ldr	r4, [r4, #4]
 8005c74:	e7ae      	b.n	8005bd4 <_malloc_r+0x34>
 8005c76:	463c      	mov	r4, r7
 8005c78:	687f      	ldr	r7, [r7, #4]
 8005c7a:	e7b6      	b.n	8005bea <_malloc_r+0x4a>
 8005c7c:	461a      	mov	r2, r3
 8005c7e:	685b      	ldr	r3, [r3, #4]
 8005c80:	42a3      	cmp	r3, r4
 8005c82:	d1fb      	bne.n	8005c7c <_malloc_r+0xdc>
 8005c84:	2300      	movs	r3, #0
 8005c86:	6053      	str	r3, [r2, #4]
 8005c88:	e7de      	b.n	8005c48 <_malloc_r+0xa8>
 8005c8a:	230c      	movs	r3, #12
 8005c8c:	6033      	str	r3, [r6, #0]
 8005c8e:	4630      	mov	r0, r6
 8005c90:	f000 f80c 	bl	8005cac <__malloc_unlock>
 8005c94:	e794      	b.n	8005bc0 <_malloc_r+0x20>
 8005c96:	6005      	str	r5, [r0, #0]
 8005c98:	e7d6      	b.n	8005c48 <_malloc_r+0xa8>
 8005c9a:	bf00      	nop
 8005c9c:	2000045c 	.word	0x2000045c

08005ca0 <__malloc_lock>:
 8005ca0:	4801      	ldr	r0, [pc, #4]	@ (8005ca8 <__malloc_lock+0x8>)
 8005ca2:	f7ff bf0f 	b.w	8005ac4 <__retarget_lock_acquire_recursive>
 8005ca6:	bf00      	nop
 8005ca8:	20000454 	.word	0x20000454

08005cac <__malloc_unlock>:
 8005cac:	4801      	ldr	r0, [pc, #4]	@ (8005cb4 <__malloc_unlock+0x8>)
 8005cae:	f7ff bf0a 	b.w	8005ac6 <__retarget_lock_release_recursive>
 8005cb2:	bf00      	nop
 8005cb4:	20000454 	.word	0x20000454

08005cb8 <__ssputs_r>:
 8005cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005cbc:	688e      	ldr	r6, [r1, #8]
 8005cbe:	461f      	mov	r7, r3
 8005cc0:	42be      	cmp	r6, r7
 8005cc2:	680b      	ldr	r3, [r1, #0]
 8005cc4:	4682      	mov	sl, r0
 8005cc6:	460c      	mov	r4, r1
 8005cc8:	4690      	mov	r8, r2
 8005cca:	d82d      	bhi.n	8005d28 <__ssputs_r+0x70>
 8005ccc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005cd0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005cd4:	d026      	beq.n	8005d24 <__ssputs_r+0x6c>
 8005cd6:	6965      	ldr	r5, [r4, #20]
 8005cd8:	6909      	ldr	r1, [r1, #16]
 8005cda:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005cde:	eba3 0901 	sub.w	r9, r3, r1
 8005ce2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005ce6:	1c7b      	adds	r3, r7, #1
 8005ce8:	444b      	add	r3, r9
 8005cea:	106d      	asrs	r5, r5, #1
 8005cec:	429d      	cmp	r5, r3
 8005cee:	bf38      	it	cc
 8005cf0:	461d      	movcc	r5, r3
 8005cf2:	0553      	lsls	r3, r2, #21
 8005cf4:	d527      	bpl.n	8005d46 <__ssputs_r+0x8e>
 8005cf6:	4629      	mov	r1, r5
 8005cf8:	f7ff ff52 	bl	8005ba0 <_malloc_r>
 8005cfc:	4606      	mov	r6, r0
 8005cfe:	b360      	cbz	r0, 8005d5a <__ssputs_r+0xa2>
 8005d00:	6921      	ldr	r1, [r4, #16]
 8005d02:	464a      	mov	r2, r9
 8005d04:	f000 fae8 	bl	80062d8 <memcpy>
 8005d08:	89a3      	ldrh	r3, [r4, #12]
 8005d0a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005d0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d12:	81a3      	strh	r3, [r4, #12]
 8005d14:	6126      	str	r6, [r4, #16]
 8005d16:	6165      	str	r5, [r4, #20]
 8005d18:	444e      	add	r6, r9
 8005d1a:	eba5 0509 	sub.w	r5, r5, r9
 8005d1e:	6026      	str	r6, [r4, #0]
 8005d20:	60a5      	str	r5, [r4, #8]
 8005d22:	463e      	mov	r6, r7
 8005d24:	42be      	cmp	r6, r7
 8005d26:	d900      	bls.n	8005d2a <__ssputs_r+0x72>
 8005d28:	463e      	mov	r6, r7
 8005d2a:	6820      	ldr	r0, [r4, #0]
 8005d2c:	4632      	mov	r2, r6
 8005d2e:	4641      	mov	r1, r8
 8005d30:	f000 faa8 	bl	8006284 <memmove>
 8005d34:	68a3      	ldr	r3, [r4, #8]
 8005d36:	1b9b      	subs	r3, r3, r6
 8005d38:	60a3      	str	r3, [r4, #8]
 8005d3a:	6823      	ldr	r3, [r4, #0]
 8005d3c:	4433      	add	r3, r6
 8005d3e:	6023      	str	r3, [r4, #0]
 8005d40:	2000      	movs	r0, #0
 8005d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d46:	462a      	mov	r2, r5
 8005d48:	f000 fad4 	bl	80062f4 <_realloc_r>
 8005d4c:	4606      	mov	r6, r0
 8005d4e:	2800      	cmp	r0, #0
 8005d50:	d1e0      	bne.n	8005d14 <__ssputs_r+0x5c>
 8005d52:	6921      	ldr	r1, [r4, #16]
 8005d54:	4650      	mov	r0, sl
 8005d56:	f7ff feb7 	bl	8005ac8 <_free_r>
 8005d5a:	230c      	movs	r3, #12
 8005d5c:	f8ca 3000 	str.w	r3, [sl]
 8005d60:	89a3      	ldrh	r3, [r4, #12]
 8005d62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005d66:	81a3      	strh	r3, [r4, #12]
 8005d68:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005d6c:	e7e9      	b.n	8005d42 <__ssputs_r+0x8a>
	...

08005d70 <_svfiprintf_r>:
 8005d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d74:	4698      	mov	r8, r3
 8005d76:	898b      	ldrh	r3, [r1, #12]
 8005d78:	061b      	lsls	r3, r3, #24
 8005d7a:	b09d      	sub	sp, #116	@ 0x74
 8005d7c:	4607      	mov	r7, r0
 8005d7e:	460d      	mov	r5, r1
 8005d80:	4614      	mov	r4, r2
 8005d82:	d510      	bpl.n	8005da6 <_svfiprintf_r+0x36>
 8005d84:	690b      	ldr	r3, [r1, #16]
 8005d86:	b973      	cbnz	r3, 8005da6 <_svfiprintf_r+0x36>
 8005d88:	2140      	movs	r1, #64	@ 0x40
 8005d8a:	f7ff ff09 	bl	8005ba0 <_malloc_r>
 8005d8e:	6028      	str	r0, [r5, #0]
 8005d90:	6128      	str	r0, [r5, #16]
 8005d92:	b930      	cbnz	r0, 8005da2 <_svfiprintf_r+0x32>
 8005d94:	230c      	movs	r3, #12
 8005d96:	603b      	str	r3, [r7, #0]
 8005d98:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005d9c:	b01d      	add	sp, #116	@ 0x74
 8005d9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005da2:	2340      	movs	r3, #64	@ 0x40
 8005da4:	616b      	str	r3, [r5, #20]
 8005da6:	2300      	movs	r3, #0
 8005da8:	9309      	str	r3, [sp, #36]	@ 0x24
 8005daa:	2320      	movs	r3, #32
 8005dac:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005db0:	f8cd 800c 	str.w	r8, [sp, #12]
 8005db4:	2330      	movs	r3, #48	@ 0x30
 8005db6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005f54 <_svfiprintf_r+0x1e4>
 8005dba:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005dbe:	f04f 0901 	mov.w	r9, #1
 8005dc2:	4623      	mov	r3, r4
 8005dc4:	469a      	mov	sl, r3
 8005dc6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005dca:	b10a      	cbz	r2, 8005dd0 <_svfiprintf_r+0x60>
 8005dcc:	2a25      	cmp	r2, #37	@ 0x25
 8005dce:	d1f9      	bne.n	8005dc4 <_svfiprintf_r+0x54>
 8005dd0:	ebba 0b04 	subs.w	fp, sl, r4
 8005dd4:	d00b      	beq.n	8005dee <_svfiprintf_r+0x7e>
 8005dd6:	465b      	mov	r3, fp
 8005dd8:	4622      	mov	r2, r4
 8005dda:	4629      	mov	r1, r5
 8005ddc:	4638      	mov	r0, r7
 8005dde:	f7ff ff6b 	bl	8005cb8 <__ssputs_r>
 8005de2:	3001      	adds	r0, #1
 8005de4:	f000 80a7 	beq.w	8005f36 <_svfiprintf_r+0x1c6>
 8005de8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005dea:	445a      	add	r2, fp
 8005dec:	9209      	str	r2, [sp, #36]	@ 0x24
 8005dee:	f89a 3000 	ldrb.w	r3, [sl]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	f000 809f 	beq.w	8005f36 <_svfiprintf_r+0x1c6>
 8005df8:	2300      	movs	r3, #0
 8005dfa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005dfe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005e02:	f10a 0a01 	add.w	sl, sl, #1
 8005e06:	9304      	str	r3, [sp, #16]
 8005e08:	9307      	str	r3, [sp, #28]
 8005e0a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005e0e:	931a      	str	r3, [sp, #104]	@ 0x68
 8005e10:	4654      	mov	r4, sl
 8005e12:	2205      	movs	r2, #5
 8005e14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e18:	484e      	ldr	r0, [pc, #312]	@ (8005f54 <_svfiprintf_r+0x1e4>)
 8005e1a:	f7fa fa09 	bl	8000230 <memchr>
 8005e1e:	9a04      	ldr	r2, [sp, #16]
 8005e20:	b9d8      	cbnz	r0, 8005e5a <_svfiprintf_r+0xea>
 8005e22:	06d0      	lsls	r0, r2, #27
 8005e24:	bf44      	itt	mi
 8005e26:	2320      	movmi	r3, #32
 8005e28:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005e2c:	0711      	lsls	r1, r2, #28
 8005e2e:	bf44      	itt	mi
 8005e30:	232b      	movmi	r3, #43	@ 0x2b
 8005e32:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005e36:	f89a 3000 	ldrb.w	r3, [sl]
 8005e3a:	2b2a      	cmp	r3, #42	@ 0x2a
 8005e3c:	d015      	beq.n	8005e6a <_svfiprintf_r+0xfa>
 8005e3e:	9a07      	ldr	r2, [sp, #28]
 8005e40:	4654      	mov	r4, sl
 8005e42:	2000      	movs	r0, #0
 8005e44:	f04f 0c0a 	mov.w	ip, #10
 8005e48:	4621      	mov	r1, r4
 8005e4a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005e4e:	3b30      	subs	r3, #48	@ 0x30
 8005e50:	2b09      	cmp	r3, #9
 8005e52:	d94b      	bls.n	8005eec <_svfiprintf_r+0x17c>
 8005e54:	b1b0      	cbz	r0, 8005e84 <_svfiprintf_r+0x114>
 8005e56:	9207      	str	r2, [sp, #28]
 8005e58:	e014      	b.n	8005e84 <_svfiprintf_r+0x114>
 8005e5a:	eba0 0308 	sub.w	r3, r0, r8
 8005e5e:	fa09 f303 	lsl.w	r3, r9, r3
 8005e62:	4313      	orrs	r3, r2
 8005e64:	9304      	str	r3, [sp, #16]
 8005e66:	46a2      	mov	sl, r4
 8005e68:	e7d2      	b.n	8005e10 <_svfiprintf_r+0xa0>
 8005e6a:	9b03      	ldr	r3, [sp, #12]
 8005e6c:	1d19      	adds	r1, r3, #4
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	9103      	str	r1, [sp, #12]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	bfbb      	ittet	lt
 8005e76:	425b      	neglt	r3, r3
 8005e78:	f042 0202 	orrlt.w	r2, r2, #2
 8005e7c:	9307      	strge	r3, [sp, #28]
 8005e7e:	9307      	strlt	r3, [sp, #28]
 8005e80:	bfb8      	it	lt
 8005e82:	9204      	strlt	r2, [sp, #16]
 8005e84:	7823      	ldrb	r3, [r4, #0]
 8005e86:	2b2e      	cmp	r3, #46	@ 0x2e
 8005e88:	d10a      	bne.n	8005ea0 <_svfiprintf_r+0x130>
 8005e8a:	7863      	ldrb	r3, [r4, #1]
 8005e8c:	2b2a      	cmp	r3, #42	@ 0x2a
 8005e8e:	d132      	bne.n	8005ef6 <_svfiprintf_r+0x186>
 8005e90:	9b03      	ldr	r3, [sp, #12]
 8005e92:	1d1a      	adds	r2, r3, #4
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	9203      	str	r2, [sp, #12]
 8005e98:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005e9c:	3402      	adds	r4, #2
 8005e9e:	9305      	str	r3, [sp, #20]
 8005ea0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005f64 <_svfiprintf_r+0x1f4>
 8005ea4:	7821      	ldrb	r1, [r4, #0]
 8005ea6:	2203      	movs	r2, #3
 8005ea8:	4650      	mov	r0, sl
 8005eaa:	f7fa f9c1 	bl	8000230 <memchr>
 8005eae:	b138      	cbz	r0, 8005ec0 <_svfiprintf_r+0x150>
 8005eb0:	9b04      	ldr	r3, [sp, #16]
 8005eb2:	eba0 000a 	sub.w	r0, r0, sl
 8005eb6:	2240      	movs	r2, #64	@ 0x40
 8005eb8:	4082      	lsls	r2, r0
 8005eba:	4313      	orrs	r3, r2
 8005ebc:	3401      	adds	r4, #1
 8005ebe:	9304      	str	r3, [sp, #16]
 8005ec0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ec4:	4824      	ldr	r0, [pc, #144]	@ (8005f58 <_svfiprintf_r+0x1e8>)
 8005ec6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005eca:	2206      	movs	r2, #6
 8005ecc:	f7fa f9b0 	bl	8000230 <memchr>
 8005ed0:	2800      	cmp	r0, #0
 8005ed2:	d036      	beq.n	8005f42 <_svfiprintf_r+0x1d2>
 8005ed4:	4b21      	ldr	r3, [pc, #132]	@ (8005f5c <_svfiprintf_r+0x1ec>)
 8005ed6:	bb1b      	cbnz	r3, 8005f20 <_svfiprintf_r+0x1b0>
 8005ed8:	9b03      	ldr	r3, [sp, #12]
 8005eda:	3307      	adds	r3, #7
 8005edc:	f023 0307 	bic.w	r3, r3, #7
 8005ee0:	3308      	adds	r3, #8
 8005ee2:	9303      	str	r3, [sp, #12]
 8005ee4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ee6:	4433      	add	r3, r6
 8005ee8:	9309      	str	r3, [sp, #36]	@ 0x24
 8005eea:	e76a      	b.n	8005dc2 <_svfiprintf_r+0x52>
 8005eec:	fb0c 3202 	mla	r2, ip, r2, r3
 8005ef0:	460c      	mov	r4, r1
 8005ef2:	2001      	movs	r0, #1
 8005ef4:	e7a8      	b.n	8005e48 <_svfiprintf_r+0xd8>
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	3401      	adds	r4, #1
 8005efa:	9305      	str	r3, [sp, #20]
 8005efc:	4619      	mov	r1, r3
 8005efe:	f04f 0c0a 	mov.w	ip, #10
 8005f02:	4620      	mov	r0, r4
 8005f04:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005f08:	3a30      	subs	r2, #48	@ 0x30
 8005f0a:	2a09      	cmp	r2, #9
 8005f0c:	d903      	bls.n	8005f16 <_svfiprintf_r+0x1a6>
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d0c6      	beq.n	8005ea0 <_svfiprintf_r+0x130>
 8005f12:	9105      	str	r1, [sp, #20]
 8005f14:	e7c4      	b.n	8005ea0 <_svfiprintf_r+0x130>
 8005f16:	fb0c 2101 	mla	r1, ip, r1, r2
 8005f1a:	4604      	mov	r4, r0
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	e7f0      	b.n	8005f02 <_svfiprintf_r+0x192>
 8005f20:	ab03      	add	r3, sp, #12
 8005f22:	9300      	str	r3, [sp, #0]
 8005f24:	462a      	mov	r2, r5
 8005f26:	4b0e      	ldr	r3, [pc, #56]	@ (8005f60 <_svfiprintf_r+0x1f0>)
 8005f28:	a904      	add	r1, sp, #16
 8005f2a:	4638      	mov	r0, r7
 8005f2c:	f3af 8000 	nop.w
 8005f30:	1c42      	adds	r2, r0, #1
 8005f32:	4606      	mov	r6, r0
 8005f34:	d1d6      	bne.n	8005ee4 <_svfiprintf_r+0x174>
 8005f36:	89ab      	ldrh	r3, [r5, #12]
 8005f38:	065b      	lsls	r3, r3, #25
 8005f3a:	f53f af2d 	bmi.w	8005d98 <_svfiprintf_r+0x28>
 8005f3e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005f40:	e72c      	b.n	8005d9c <_svfiprintf_r+0x2c>
 8005f42:	ab03      	add	r3, sp, #12
 8005f44:	9300      	str	r3, [sp, #0]
 8005f46:	462a      	mov	r2, r5
 8005f48:	4b05      	ldr	r3, [pc, #20]	@ (8005f60 <_svfiprintf_r+0x1f0>)
 8005f4a:	a904      	add	r1, sp, #16
 8005f4c:	4638      	mov	r0, r7
 8005f4e:	f000 f879 	bl	8006044 <_printf_i>
 8005f52:	e7ed      	b.n	8005f30 <_svfiprintf_r+0x1c0>
 8005f54:	080063f0 	.word	0x080063f0
 8005f58:	080063fa 	.word	0x080063fa
 8005f5c:	00000000 	.word	0x00000000
 8005f60:	08005cb9 	.word	0x08005cb9
 8005f64:	080063f6 	.word	0x080063f6

08005f68 <_printf_common>:
 8005f68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f6c:	4616      	mov	r6, r2
 8005f6e:	4698      	mov	r8, r3
 8005f70:	688a      	ldr	r2, [r1, #8]
 8005f72:	690b      	ldr	r3, [r1, #16]
 8005f74:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	bfb8      	it	lt
 8005f7c:	4613      	movlt	r3, r2
 8005f7e:	6033      	str	r3, [r6, #0]
 8005f80:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005f84:	4607      	mov	r7, r0
 8005f86:	460c      	mov	r4, r1
 8005f88:	b10a      	cbz	r2, 8005f8e <_printf_common+0x26>
 8005f8a:	3301      	adds	r3, #1
 8005f8c:	6033      	str	r3, [r6, #0]
 8005f8e:	6823      	ldr	r3, [r4, #0]
 8005f90:	0699      	lsls	r1, r3, #26
 8005f92:	bf42      	ittt	mi
 8005f94:	6833      	ldrmi	r3, [r6, #0]
 8005f96:	3302      	addmi	r3, #2
 8005f98:	6033      	strmi	r3, [r6, #0]
 8005f9a:	6825      	ldr	r5, [r4, #0]
 8005f9c:	f015 0506 	ands.w	r5, r5, #6
 8005fa0:	d106      	bne.n	8005fb0 <_printf_common+0x48>
 8005fa2:	f104 0a19 	add.w	sl, r4, #25
 8005fa6:	68e3      	ldr	r3, [r4, #12]
 8005fa8:	6832      	ldr	r2, [r6, #0]
 8005faa:	1a9b      	subs	r3, r3, r2
 8005fac:	42ab      	cmp	r3, r5
 8005fae:	dc26      	bgt.n	8005ffe <_printf_common+0x96>
 8005fb0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005fb4:	6822      	ldr	r2, [r4, #0]
 8005fb6:	3b00      	subs	r3, #0
 8005fb8:	bf18      	it	ne
 8005fba:	2301      	movne	r3, #1
 8005fbc:	0692      	lsls	r2, r2, #26
 8005fbe:	d42b      	bmi.n	8006018 <_printf_common+0xb0>
 8005fc0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005fc4:	4641      	mov	r1, r8
 8005fc6:	4638      	mov	r0, r7
 8005fc8:	47c8      	blx	r9
 8005fca:	3001      	adds	r0, #1
 8005fcc:	d01e      	beq.n	800600c <_printf_common+0xa4>
 8005fce:	6823      	ldr	r3, [r4, #0]
 8005fd0:	6922      	ldr	r2, [r4, #16]
 8005fd2:	f003 0306 	and.w	r3, r3, #6
 8005fd6:	2b04      	cmp	r3, #4
 8005fd8:	bf02      	ittt	eq
 8005fda:	68e5      	ldreq	r5, [r4, #12]
 8005fdc:	6833      	ldreq	r3, [r6, #0]
 8005fde:	1aed      	subeq	r5, r5, r3
 8005fe0:	68a3      	ldr	r3, [r4, #8]
 8005fe2:	bf0c      	ite	eq
 8005fe4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005fe8:	2500      	movne	r5, #0
 8005fea:	4293      	cmp	r3, r2
 8005fec:	bfc4      	itt	gt
 8005fee:	1a9b      	subgt	r3, r3, r2
 8005ff0:	18ed      	addgt	r5, r5, r3
 8005ff2:	2600      	movs	r6, #0
 8005ff4:	341a      	adds	r4, #26
 8005ff6:	42b5      	cmp	r5, r6
 8005ff8:	d11a      	bne.n	8006030 <_printf_common+0xc8>
 8005ffa:	2000      	movs	r0, #0
 8005ffc:	e008      	b.n	8006010 <_printf_common+0xa8>
 8005ffe:	2301      	movs	r3, #1
 8006000:	4652      	mov	r2, sl
 8006002:	4641      	mov	r1, r8
 8006004:	4638      	mov	r0, r7
 8006006:	47c8      	blx	r9
 8006008:	3001      	adds	r0, #1
 800600a:	d103      	bne.n	8006014 <_printf_common+0xac>
 800600c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006010:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006014:	3501      	adds	r5, #1
 8006016:	e7c6      	b.n	8005fa6 <_printf_common+0x3e>
 8006018:	18e1      	adds	r1, r4, r3
 800601a:	1c5a      	adds	r2, r3, #1
 800601c:	2030      	movs	r0, #48	@ 0x30
 800601e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006022:	4422      	add	r2, r4
 8006024:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006028:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800602c:	3302      	adds	r3, #2
 800602e:	e7c7      	b.n	8005fc0 <_printf_common+0x58>
 8006030:	2301      	movs	r3, #1
 8006032:	4622      	mov	r2, r4
 8006034:	4641      	mov	r1, r8
 8006036:	4638      	mov	r0, r7
 8006038:	47c8      	blx	r9
 800603a:	3001      	adds	r0, #1
 800603c:	d0e6      	beq.n	800600c <_printf_common+0xa4>
 800603e:	3601      	adds	r6, #1
 8006040:	e7d9      	b.n	8005ff6 <_printf_common+0x8e>
	...

08006044 <_printf_i>:
 8006044:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006048:	7e0f      	ldrb	r7, [r1, #24]
 800604a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800604c:	2f78      	cmp	r7, #120	@ 0x78
 800604e:	4691      	mov	r9, r2
 8006050:	4680      	mov	r8, r0
 8006052:	460c      	mov	r4, r1
 8006054:	469a      	mov	sl, r3
 8006056:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800605a:	d807      	bhi.n	800606c <_printf_i+0x28>
 800605c:	2f62      	cmp	r7, #98	@ 0x62
 800605e:	d80a      	bhi.n	8006076 <_printf_i+0x32>
 8006060:	2f00      	cmp	r7, #0
 8006062:	f000 80d2 	beq.w	800620a <_printf_i+0x1c6>
 8006066:	2f58      	cmp	r7, #88	@ 0x58
 8006068:	f000 80b9 	beq.w	80061de <_printf_i+0x19a>
 800606c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006070:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006074:	e03a      	b.n	80060ec <_printf_i+0xa8>
 8006076:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800607a:	2b15      	cmp	r3, #21
 800607c:	d8f6      	bhi.n	800606c <_printf_i+0x28>
 800607e:	a101      	add	r1, pc, #4	@ (adr r1, 8006084 <_printf_i+0x40>)
 8006080:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006084:	080060dd 	.word	0x080060dd
 8006088:	080060f1 	.word	0x080060f1
 800608c:	0800606d 	.word	0x0800606d
 8006090:	0800606d 	.word	0x0800606d
 8006094:	0800606d 	.word	0x0800606d
 8006098:	0800606d 	.word	0x0800606d
 800609c:	080060f1 	.word	0x080060f1
 80060a0:	0800606d 	.word	0x0800606d
 80060a4:	0800606d 	.word	0x0800606d
 80060a8:	0800606d 	.word	0x0800606d
 80060ac:	0800606d 	.word	0x0800606d
 80060b0:	080061f1 	.word	0x080061f1
 80060b4:	0800611b 	.word	0x0800611b
 80060b8:	080061ab 	.word	0x080061ab
 80060bc:	0800606d 	.word	0x0800606d
 80060c0:	0800606d 	.word	0x0800606d
 80060c4:	08006213 	.word	0x08006213
 80060c8:	0800606d 	.word	0x0800606d
 80060cc:	0800611b 	.word	0x0800611b
 80060d0:	0800606d 	.word	0x0800606d
 80060d4:	0800606d 	.word	0x0800606d
 80060d8:	080061b3 	.word	0x080061b3
 80060dc:	6833      	ldr	r3, [r6, #0]
 80060de:	1d1a      	adds	r2, r3, #4
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	6032      	str	r2, [r6, #0]
 80060e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80060e8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80060ec:	2301      	movs	r3, #1
 80060ee:	e09d      	b.n	800622c <_printf_i+0x1e8>
 80060f0:	6833      	ldr	r3, [r6, #0]
 80060f2:	6820      	ldr	r0, [r4, #0]
 80060f4:	1d19      	adds	r1, r3, #4
 80060f6:	6031      	str	r1, [r6, #0]
 80060f8:	0606      	lsls	r6, r0, #24
 80060fa:	d501      	bpl.n	8006100 <_printf_i+0xbc>
 80060fc:	681d      	ldr	r5, [r3, #0]
 80060fe:	e003      	b.n	8006108 <_printf_i+0xc4>
 8006100:	0645      	lsls	r5, r0, #25
 8006102:	d5fb      	bpl.n	80060fc <_printf_i+0xb8>
 8006104:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006108:	2d00      	cmp	r5, #0
 800610a:	da03      	bge.n	8006114 <_printf_i+0xd0>
 800610c:	232d      	movs	r3, #45	@ 0x2d
 800610e:	426d      	negs	r5, r5
 8006110:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006114:	4859      	ldr	r0, [pc, #356]	@ (800627c <_printf_i+0x238>)
 8006116:	230a      	movs	r3, #10
 8006118:	e011      	b.n	800613e <_printf_i+0xfa>
 800611a:	6821      	ldr	r1, [r4, #0]
 800611c:	6833      	ldr	r3, [r6, #0]
 800611e:	0608      	lsls	r0, r1, #24
 8006120:	f853 5b04 	ldr.w	r5, [r3], #4
 8006124:	d402      	bmi.n	800612c <_printf_i+0xe8>
 8006126:	0649      	lsls	r1, r1, #25
 8006128:	bf48      	it	mi
 800612a:	b2ad      	uxthmi	r5, r5
 800612c:	2f6f      	cmp	r7, #111	@ 0x6f
 800612e:	4853      	ldr	r0, [pc, #332]	@ (800627c <_printf_i+0x238>)
 8006130:	6033      	str	r3, [r6, #0]
 8006132:	bf14      	ite	ne
 8006134:	230a      	movne	r3, #10
 8006136:	2308      	moveq	r3, #8
 8006138:	2100      	movs	r1, #0
 800613a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800613e:	6866      	ldr	r6, [r4, #4]
 8006140:	60a6      	str	r6, [r4, #8]
 8006142:	2e00      	cmp	r6, #0
 8006144:	bfa2      	ittt	ge
 8006146:	6821      	ldrge	r1, [r4, #0]
 8006148:	f021 0104 	bicge.w	r1, r1, #4
 800614c:	6021      	strge	r1, [r4, #0]
 800614e:	b90d      	cbnz	r5, 8006154 <_printf_i+0x110>
 8006150:	2e00      	cmp	r6, #0
 8006152:	d04b      	beq.n	80061ec <_printf_i+0x1a8>
 8006154:	4616      	mov	r6, r2
 8006156:	fbb5 f1f3 	udiv	r1, r5, r3
 800615a:	fb03 5711 	mls	r7, r3, r1, r5
 800615e:	5dc7      	ldrb	r7, [r0, r7]
 8006160:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006164:	462f      	mov	r7, r5
 8006166:	42bb      	cmp	r3, r7
 8006168:	460d      	mov	r5, r1
 800616a:	d9f4      	bls.n	8006156 <_printf_i+0x112>
 800616c:	2b08      	cmp	r3, #8
 800616e:	d10b      	bne.n	8006188 <_printf_i+0x144>
 8006170:	6823      	ldr	r3, [r4, #0]
 8006172:	07df      	lsls	r7, r3, #31
 8006174:	d508      	bpl.n	8006188 <_printf_i+0x144>
 8006176:	6923      	ldr	r3, [r4, #16]
 8006178:	6861      	ldr	r1, [r4, #4]
 800617a:	4299      	cmp	r1, r3
 800617c:	bfde      	ittt	le
 800617e:	2330      	movle	r3, #48	@ 0x30
 8006180:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006184:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8006188:	1b92      	subs	r2, r2, r6
 800618a:	6122      	str	r2, [r4, #16]
 800618c:	f8cd a000 	str.w	sl, [sp]
 8006190:	464b      	mov	r3, r9
 8006192:	aa03      	add	r2, sp, #12
 8006194:	4621      	mov	r1, r4
 8006196:	4640      	mov	r0, r8
 8006198:	f7ff fee6 	bl	8005f68 <_printf_common>
 800619c:	3001      	adds	r0, #1
 800619e:	d14a      	bne.n	8006236 <_printf_i+0x1f2>
 80061a0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80061a4:	b004      	add	sp, #16
 80061a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061aa:	6823      	ldr	r3, [r4, #0]
 80061ac:	f043 0320 	orr.w	r3, r3, #32
 80061b0:	6023      	str	r3, [r4, #0]
 80061b2:	4833      	ldr	r0, [pc, #204]	@ (8006280 <_printf_i+0x23c>)
 80061b4:	2778      	movs	r7, #120	@ 0x78
 80061b6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80061ba:	6823      	ldr	r3, [r4, #0]
 80061bc:	6831      	ldr	r1, [r6, #0]
 80061be:	061f      	lsls	r7, r3, #24
 80061c0:	f851 5b04 	ldr.w	r5, [r1], #4
 80061c4:	d402      	bmi.n	80061cc <_printf_i+0x188>
 80061c6:	065f      	lsls	r7, r3, #25
 80061c8:	bf48      	it	mi
 80061ca:	b2ad      	uxthmi	r5, r5
 80061cc:	6031      	str	r1, [r6, #0]
 80061ce:	07d9      	lsls	r1, r3, #31
 80061d0:	bf44      	itt	mi
 80061d2:	f043 0320 	orrmi.w	r3, r3, #32
 80061d6:	6023      	strmi	r3, [r4, #0]
 80061d8:	b11d      	cbz	r5, 80061e2 <_printf_i+0x19e>
 80061da:	2310      	movs	r3, #16
 80061dc:	e7ac      	b.n	8006138 <_printf_i+0xf4>
 80061de:	4827      	ldr	r0, [pc, #156]	@ (800627c <_printf_i+0x238>)
 80061e0:	e7e9      	b.n	80061b6 <_printf_i+0x172>
 80061e2:	6823      	ldr	r3, [r4, #0]
 80061e4:	f023 0320 	bic.w	r3, r3, #32
 80061e8:	6023      	str	r3, [r4, #0]
 80061ea:	e7f6      	b.n	80061da <_printf_i+0x196>
 80061ec:	4616      	mov	r6, r2
 80061ee:	e7bd      	b.n	800616c <_printf_i+0x128>
 80061f0:	6833      	ldr	r3, [r6, #0]
 80061f2:	6825      	ldr	r5, [r4, #0]
 80061f4:	6961      	ldr	r1, [r4, #20]
 80061f6:	1d18      	adds	r0, r3, #4
 80061f8:	6030      	str	r0, [r6, #0]
 80061fa:	062e      	lsls	r6, r5, #24
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	d501      	bpl.n	8006204 <_printf_i+0x1c0>
 8006200:	6019      	str	r1, [r3, #0]
 8006202:	e002      	b.n	800620a <_printf_i+0x1c6>
 8006204:	0668      	lsls	r0, r5, #25
 8006206:	d5fb      	bpl.n	8006200 <_printf_i+0x1bc>
 8006208:	8019      	strh	r1, [r3, #0]
 800620a:	2300      	movs	r3, #0
 800620c:	6123      	str	r3, [r4, #16]
 800620e:	4616      	mov	r6, r2
 8006210:	e7bc      	b.n	800618c <_printf_i+0x148>
 8006212:	6833      	ldr	r3, [r6, #0]
 8006214:	1d1a      	adds	r2, r3, #4
 8006216:	6032      	str	r2, [r6, #0]
 8006218:	681e      	ldr	r6, [r3, #0]
 800621a:	6862      	ldr	r2, [r4, #4]
 800621c:	2100      	movs	r1, #0
 800621e:	4630      	mov	r0, r6
 8006220:	f7fa f806 	bl	8000230 <memchr>
 8006224:	b108      	cbz	r0, 800622a <_printf_i+0x1e6>
 8006226:	1b80      	subs	r0, r0, r6
 8006228:	6060      	str	r0, [r4, #4]
 800622a:	6863      	ldr	r3, [r4, #4]
 800622c:	6123      	str	r3, [r4, #16]
 800622e:	2300      	movs	r3, #0
 8006230:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006234:	e7aa      	b.n	800618c <_printf_i+0x148>
 8006236:	6923      	ldr	r3, [r4, #16]
 8006238:	4632      	mov	r2, r6
 800623a:	4649      	mov	r1, r9
 800623c:	4640      	mov	r0, r8
 800623e:	47d0      	blx	sl
 8006240:	3001      	adds	r0, #1
 8006242:	d0ad      	beq.n	80061a0 <_printf_i+0x15c>
 8006244:	6823      	ldr	r3, [r4, #0]
 8006246:	079b      	lsls	r3, r3, #30
 8006248:	d413      	bmi.n	8006272 <_printf_i+0x22e>
 800624a:	68e0      	ldr	r0, [r4, #12]
 800624c:	9b03      	ldr	r3, [sp, #12]
 800624e:	4298      	cmp	r0, r3
 8006250:	bfb8      	it	lt
 8006252:	4618      	movlt	r0, r3
 8006254:	e7a6      	b.n	80061a4 <_printf_i+0x160>
 8006256:	2301      	movs	r3, #1
 8006258:	4632      	mov	r2, r6
 800625a:	4649      	mov	r1, r9
 800625c:	4640      	mov	r0, r8
 800625e:	47d0      	blx	sl
 8006260:	3001      	adds	r0, #1
 8006262:	d09d      	beq.n	80061a0 <_printf_i+0x15c>
 8006264:	3501      	adds	r5, #1
 8006266:	68e3      	ldr	r3, [r4, #12]
 8006268:	9903      	ldr	r1, [sp, #12]
 800626a:	1a5b      	subs	r3, r3, r1
 800626c:	42ab      	cmp	r3, r5
 800626e:	dcf2      	bgt.n	8006256 <_printf_i+0x212>
 8006270:	e7eb      	b.n	800624a <_printf_i+0x206>
 8006272:	2500      	movs	r5, #0
 8006274:	f104 0619 	add.w	r6, r4, #25
 8006278:	e7f5      	b.n	8006266 <_printf_i+0x222>
 800627a:	bf00      	nop
 800627c:	08006401 	.word	0x08006401
 8006280:	08006412 	.word	0x08006412

08006284 <memmove>:
 8006284:	4288      	cmp	r0, r1
 8006286:	b510      	push	{r4, lr}
 8006288:	eb01 0402 	add.w	r4, r1, r2
 800628c:	d902      	bls.n	8006294 <memmove+0x10>
 800628e:	4284      	cmp	r4, r0
 8006290:	4623      	mov	r3, r4
 8006292:	d807      	bhi.n	80062a4 <memmove+0x20>
 8006294:	1e43      	subs	r3, r0, #1
 8006296:	42a1      	cmp	r1, r4
 8006298:	d008      	beq.n	80062ac <memmove+0x28>
 800629a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800629e:	f803 2f01 	strb.w	r2, [r3, #1]!
 80062a2:	e7f8      	b.n	8006296 <memmove+0x12>
 80062a4:	4402      	add	r2, r0
 80062a6:	4601      	mov	r1, r0
 80062a8:	428a      	cmp	r2, r1
 80062aa:	d100      	bne.n	80062ae <memmove+0x2a>
 80062ac:	bd10      	pop	{r4, pc}
 80062ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80062b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80062b6:	e7f7      	b.n	80062a8 <memmove+0x24>

080062b8 <_sbrk_r>:
 80062b8:	b538      	push	{r3, r4, r5, lr}
 80062ba:	4d06      	ldr	r5, [pc, #24]	@ (80062d4 <_sbrk_r+0x1c>)
 80062bc:	2300      	movs	r3, #0
 80062be:	4604      	mov	r4, r0
 80062c0:	4608      	mov	r0, r1
 80062c2:	602b      	str	r3, [r5, #0]
 80062c4:	f7fa ff94 	bl	80011f0 <_sbrk>
 80062c8:	1c43      	adds	r3, r0, #1
 80062ca:	d102      	bne.n	80062d2 <_sbrk_r+0x1a>
 80062cc:	682b      	ldr	r3, [r5, #0]
 80062ce:	b103      	cbz	r3, 80062d2 <_sbrk_r+0x1a>
 80062d0:	6023      	str	r3, [r4, #0]
 80062d2:	bd38      	pop	{r3, r4, r5, pc}
 80062d4:	20000450 	.word	0x20000450

080062d8 <memcpy>:
 80062d8:	440a      	add	r2, r1
 80062da:	4291      	cmp	r1, r2
 80062dc:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80062e0:	d100      	bne.n	80062e4 <memcpy+0xc>
 80062e2:	4770      	bx	lr
 80062e4:	b510      	push	{r4, lr}
 80062e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80062ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 80062ee:	4291      	cmp	r1, r2
 80062f0:	d1f9      	bne.n	80062e6 <memcpy+0xe>
 80062f2:	bd10      	pop	{r4, pc}

080062f4 <_realloc_r>:
 80062f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062f8:	4680      	mov	r8, r0
 80062fa:	4615      	mov	r5, r2
 80062fc:	460c      	mov	r4, r1
 80062fe:	b921      	cbnz	r1, 800630a <_realloc_r+0x16>
 8006300:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006304:	4611      	mov	r1, r2
 8006306:	f7ff bc4b 	b.w	8005ba0 <_malloc_r>
 800630a:	b92a      	cbnz	r2, 8006318 <_realloc_r+0x24>
 800630c:	f7ff fbdc 	bl	8005ac8 <_free_r>
 8006310:	2400      	movs	r4, #0
 8006312:	4620      	mov	r0, r4
 8006314:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006318:	f000 f81a 	bl	8006350 <_malloc_usable_size_r>
 800631c:	4285      	cmp	r5, r0
 800631e:	4606      	mov	r6, r0
 8006320:	d802      	bhi.n	8006328 <_realloc_r+0x34>
 8006322:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006326:	d8f4      	bhi.n	8006312 <_realloc_r+0x1e>
 8006328:	4629      	mov	r1, r5
 800632a:	4640      	mov	r0, r8
 800632c:	f7ff fc38 	bl	8005ba0 <_malloc_r>
 8006330:	4607      	mov	r7, r0
 8006332:	2800      	cmp	r0, #0
 8006334:	d0ec      	beq.n	8006310 <_realloc_r+0x1c>
 8006336:	42b5      	cmp	r5, r6
 8006338:	462a      	mov	r2, r5
 800633a:	4621      	mov	r1, r4
 800633c:	bf28      	it	cs
 800633e:	4632      	movcs	r2, r6
 8006340:	f7ff ffca 	bl	80062d8 <memcpy>
 8006344:	4621      	mov	r1, r4
 8006346:	4640      	mov	r0, r8
 8006348:	f7ff fbbe 	bl	8005ac8 <_free_r>
 800634c:	463c      	mov	r4, r7
 800634e:	e7e0      	b.n	8006312 <_realloc_r+0x1e>

08006350 <_malloc_usable_size_r>:
 8006350:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006354:	1f18      	subs	r0, r3, #4
 8006356:	2b00      	cmp	r3, #0
 8006358:	bfbc      	itt	lt
 800635a:	580b      	ldrlt	r3, [r1, r0]
 800635c:	18c0      	addlt	r0, r0, r3
 800635e:	4770      	bx	lr

08006360 <_init>:
 8006360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006362:	bf00      	nop
 8006364:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006366:	bc08      	pop	{r3}
 8006368:	469e      	mov	lr, r3
 800636a:	4770      	bx	lr

0800636c <_fini>:
 800636c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800636e:	bf00      	nop
 8006370:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006372:	bc08      	pop	{r3}
 8006374:	469e      	mov	lr, r3
 8006376:	4770      	bx	lr
