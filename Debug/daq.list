
daq.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006268  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08006448  08006448  00007448  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006514  08006514  0000805c  2**0
                  CONTENTS
  4 .ARM          00000008  08006514  08006514  00007514  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800651c  0800651c  0000805c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800651c  0800651c  0000751c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006520  08006520  00007520  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08006524  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000340  2000005c  08006580  0000805c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000039c  08006580  0000839c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000805c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000136fb  00000000  00000000  0000808c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b2e  00000000  00000000  0001b787  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ee8  00000000  00000000  0001e2b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b5a  00000000  00000000  0001f1a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027b72  00000000  00000000  0001fcfa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012e72  00000000  00000000  0004786c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001007e8  00000000  00000000  0005a6de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015aec6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004240  00000000  00000000  0015af0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  0015f14c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000005c 	.word	0x2000005c
 80001fc:	00000000 	.word	0x00000000
 8000200:	08006430 	.word	0x08006430

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000060 	.word	0x20000060
 800021c:	08006430 	.word	0x08006430

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002e4:	f000 b96a 	b.w	80005bc <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9d08      	ldr	r5, [sp, #32]
 8000306:	460c      	mov	r4, r1
 8000308:	2b00      	cmp	r3, #0
 800030a:	d14e      	bne.n	80003aa <__udivmoddi4+0xaa>
 800030c:	4694      	mov	ip, r2
 800030e:	458c      	cmp	ip, r1
 8000310:	4686      	mov	lr, r0
 8000312:	fab2 f282 	clz	r2, r2
 8000316:	d962      	bls.n	80003de <__udivmoddi4+0xde>
 8000318:	b14a      	cbz	r2, 800032e <__udivmoddi4+0x2e>
 800031a:	f1c2 0320 	rsb	r3, r2, #32
 800031e:	4091      	lsls	r1, r2
 8000320:	fa20 f303 	lsr.w	r3, r0, r3
 8000324:	fa0c fc02 	lsl.w	ip, ip, r2
 8000328:	4319      	orrs	r1, r3
 800032a:	fa00 fe02 	lsl.w	lr, r0, r2
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f f68c 	uxth.w	r6, ip
 8000336:	fbb1 f4f7 	udiv	r4, r1, r7
 800033a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800033e:	fb07 1114 	mls	r1, r7, r4, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb04 f106 	mul.w	r1, r4, r6
 800034a:	4299      	cmp	r1, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x64>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000356:	f080 8112 	bcs.w	800057e <__udivmoddi4+0x27e>
 800035a:	4299      	cmp	r1, r3
 800035c:	f240 810f 	bls.w	800057e <__udivmoddi4+0x27e>
 8000360:	3c02      	subs	r4, #2
 8000362:	4463      	add	r3, ip
 8000364:	1a59      	subs	r1, r3, r1
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb1 f0f7 	udiv	r0, r1, r7
 800036e:	fb07 1110 	mls	r1, r7, r0, r1
 8000372:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000376:	fb00 f606 	mul.w	r6, r0, r6
 800037a:	429e      	cmp	r6, r3
 800037c:	d90a      	bls.n	8000394 <__udivmoddi4+0x94>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000386:	f080 80fc 	bcs.w	8000582 <__udivmoddi4+0x282>
 800038a:	429e      	cmp	r6, r3
 800038c:	f240 80f9 	bls.w	8000582 <__udivmoddi4+0x282>
 8000390:	4463      	add	r3, ip
 8000392:	3802      	subs	r0, #2
 8000394:	1b9b      	subs	r3, r3, r6
 8000396:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800039a:	2100      	movs	r1, #0
 800039c:	b11d      	cbz	r5, 80003a6 <__udivmoddi4+0xa6>
 800039e:	40d3      	lsrs	r3, r2
 80003a0:	2200      	movs	r2, #0
 80003a2:	e9c5 3200 	strd	r3, r2, [r5]
 80003a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d905      	bls.n	80003ba <__udivmoddi4+0xba>
 80003ae:	b10d      	cbz	r5, 80003b4 <__udivmoddi4+0xb4>
 80003b0:	e9c5 0100 	strd	r0, r1, [r5]
 80003b4:	2100      	movs	r1, #0
 80003b6:	4608      	mov	r0, r1
 80003b8:	e7f5      	b.n	80003a6 <__udivmoddi4+0xa6>
 80003ba:	fab3 f183 	clz	r1, r3
 80003be:	2900      	cmp	r1, #0
 80003c0:	d146      	bne.n	8000450 <__udivmoddi4+0x150>
 80003c2:	42a3      	cmp	r3, r4
 80003c4:	d302      	bcc.n	80003cc <__udivmoddi4+0xcc>
 80003c6:	4290      	cmp	r0, r2
 80003c8:	f0c0 80f0 	bcc.w	80005ac <__udivmoddi4+0x2ac>
 80003cc:	1a86      	subs	r6, r0, r2
 80003ce:	eb64 0303 	sbc.w	r3, r4, r3
 80003d2:	2001      	movs	r0, #1
 80003d4:	2d00      	cmp	r5, #0
 80003d6:	d0e6      	beq.n	80003a6 <__udivmoddi4+0xa6>
 80003d8:	e9c5 6300 	strd	r6, r3, [r5]
 80003dc:	e7e3      	b.n	80003a6 <__udivmoddi4+0xa6>
 80003de:	2a00      	cmp	r2, #0
 80003e0:	f040 8090 	bne.w	8000504 <__udivmoddi4+0x204>
 80003e4:	eba1 040c 	sub.w	r4, r1, ip
 80003e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ec:	fa1f f78c 	uxth.w	r7, ip
 80003f0:	2101      	movs	r1, #1
 80003f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fa:	fb08 4416 	mls	r4, r8, r6, r4
 80003fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000402:	fb07 f006 	mul.w	r0, r7, r6
 8000406:	4298      	cmp	r0, r3
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x11c>
 800040a:	eb1c 0303 	adds.w	r3, ip, r3
 800040e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x11a>
 8000414:	4298      	cmp	r0, r3
 8000416:	f200 80cd 	bhi.w	80005b4 <__udivmoddi4+0x2b4>
 800041a:	4626      	mov	r6, r4
 800041c:	1a1c      	subs	r4, r3, r0
 800041e:	fa1f f38e 	uxth.w	r3, lr
 8000422:	fbb4 f0f8 	udiv	r0, r4, r8
 8000426:	fb08 4410 	mls	r4, r8, r0, r4
 800042a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800042e:	fb00 f707 	mul.w	r7, r0, r7
 8000432:	429f      	cmp	r7, r3
 8000434:	d908      	bls.n	8000448 <__udivmoddi4+0x148>
 8000436:	eb1c 0303 	adds.w	r3, ip, r3
 800043a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800043e:	d202      	bcs.n	8000446 <__udivmoddi4+0x146>
 8000440:	429f      	cmp	r7, r3
 8000442:	f200 80b0 	bhi.w	80005a6 <__udivmoddi4+0x2a6>
 8000446:	4620      	mov	r0, r4
 8000448:	1bdb      	subs	r3, r3, r7
 800044a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800044e:	e7a5      	b.n	800039c <__udivmoddi4+0x9c>
 8000450:	f1c1 0620 	rsb	r6, r1, #32
 8000454:	408b      	lsls	r3, r1
 8000456:	fa22 f706 	lsr.w	r7, r2, r6
 800045a:	431f      	orrs	r7, r3
 800045c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000460:	fa04 f301 	lsl.w	r3, r4, r1
 8000464:	ea43 030c 	orr.w	r3, r3, ip
 8000468:	40f4      	lsrs	r4, r6
 800046a:	fa00 f801 	lsl.w	r8, r0, r1
 800046e:	0c38      	lsrs	r0, r7, #16
 8000470:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000474:	fbb4 fef0 	udiv	lr, r4, r0
 8000478:	fa1f fc87 	uxth.w	ip, r7
 800047c:	fb00 441e 	mls	r4, r0, lr, r4
 8000480:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000484:	fb0e f90c 	mul.w	r9, lr, ip
 8000488:	45a1      	cmp	r9, r4
 800048a:	fa02 f201 	lsl.w	r2, r2, r1
 800048e:	d90a      	bls.n	80004a6 <__udivmoddi4+0x1a6>
 8000490:	193c      	adds	r4, r7, r4
 8000492:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000496:	f080 8084 	bcs.w	80005a2 <__udivmoddi4+0x2a2>
 800049a:	45a1      	cmp	r9, r4
 800049c:	f240 8081 	bls.w	80005a2 <__udivmoddi4+0x2a2>
 80004a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004a4:	443c      	add	r4, r7
 80004a6:	eba4 0409 	sub.w	r4, r4, r9
 80004aa:	fa1f f983 	uxth.w	r9, r3
 80004ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80004b2:	fb00 4413 	mls	r4, r0, r3, r4
 80004b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80004be:	45a4      	cmp	ip, r4
 80004c0:	d907      	bls.n	80004d2 <__udivmoddi4+0x1d2>
 80004c2:	193c      	adds	r4, r7, r4
 80004c4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004c8:	d267      	bcs.n	800059a <__udivmoddi4+0x29a>
 80004ca:	45a4      	cmp	ip, r4
 80004cc:	d965      	bls.n	800059a <__udivmoddi4+0x29a>
 80004ce:	3b02      	subs	r3, #2
 80004d0:	443c      	add	r4, r7
 80004d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004d6:	fba0 9302 	umull	r9, r3, r0, r2
 80004da:	eba4 040c 	sub.w	r4, r4, ip
 80004de:	429c      	cmp	r4, r3
 80004e0:	46ce      	mov	lr, r9
 80004e2:	469c      	mov	ip, r3
 80004e4:	d351      	bcc.n	800058a <__udivmoddi4+0x28a>
 80004e6:	d04e      	beq.n	8000586 <__udivmoddi4+0x286>
 80004e8:	b155      	cbz	r5, 8000500 <__udivmoddi4+0x200>
 80004ea:	ebb8 030e 	subs.w	r3, r8, lr
 80004ee:	eb64 040c 	sbc.w	r4, r4, ip
 80004f2:	fa04 f606 	lsl.w	r6, r4, r6
 80004f6:	40cb      	lsrs	r3, r1
 80004f8:	431e      	orrs	r6, r3
 80004fa:	40cc      	lsrs	r4, r1
 80004fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000500:	2100      	movs	r1, #0
 8000502:	e750      	b.n	80003a6 <__udivmoddi4+0xa6>
 8000504:	f1c2 0320 	rsb	r3, r2, #32
 8000508:	fa20 f103 	lsr.w	r1, r0, r3
 800050c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000510:	fa24 f303 	lsr.w	r3, r4, r3
 8000514:	4094      	lsls	r4, r2
 8000516:	430c      	orrs	r4, r1
 8000518:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800051c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000520:	fa1f f78c 	uxth.w	r7, ip
 8000524:	fbb3 f0f8 	udiv	r0, r3, r8
 8000528:	fb08 3110 	mls	r1, r8, r0, r3
 800052c:	0c23      	lsrs	r3, r4, #16
 800052e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000532:	fb00 f107 	mul.w	r1, r0, r7
 8000536:	4299      	cmp	r1, r3
 8000538:	d908      	bls.n	800054c <__udivmoddi4+0x24c>
 800053a:	eb1c 0303 	adds.w	r3, ip, r3
 800053e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000542:	d22c      	bcs.n	800059e <__udivmoddi4+0x29e>
 8000544:	4299      	cmp	r1, r3
 8000546:	d92a      	bls.n	800059e <__udivmoddi4+0x29e>
 8000548:	3802      	subs	r0, #2
 800054a:	4463      	add	r3, ip
 800054c:	1a5b      	subs	r3, r3, r1
 800054e:	b2a4      	uxth	r4, r4
 8000550:	fbb3 f1f8 	udiv	r1, r3, r8
 8000554:	fb08 3311 	mls	r3, r8, r1, r3
 8000558:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800055c:	fb01 f307 	mul.w	r3, r1, r7
 8000560:	42a3      	cmp	r3, r4
 8000562:	d908      	bls.n	8000576 <__udivmoddi4+0x276>
 8000564:	eb1c 0404 	adds.w	r4, ip, r4
 8000568:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800056c:	d213      	bcs.n	8000596 <__udivmoddi4+0x296>
 800056e:	42a3      	cmp	r3, r4
 8000570:	d911      	bls.n	8000596 <__udivmoddi4+0x296>
 8000572:	3902      	subs	r1, #2
 8000574:	4464      	add	r4, ip
 8000576:	1ae4      	subs	r4, r4, r3
 8000578:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800057c:	e739      	b.n	80003f2 <__udivmoddi4+0xf2>
 800057e:	4604      	mov	r4, r0
 8000580:	e6f0      	b.n	8000364 <__udivmoddi4+0x64>
 8000582:	4608      	mov	r0, r1
 8000584:	e706      	b.n	8000394 <__udivmoddi4+0x94>
 8000586:	45c8      	cmp	r8, r9
 8000588:	d2ae      	bcs.n	80004e8 <__udivmoddi4+0x1e8>
 800058a:	ebb9 0e02 	subs.w	lr, r9, r2
 800058e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000592:	3801      	subs	r0, #1
 8000594:	e7a8      	b.n	80004e8 <__udivmoddi4+0x1e8>
 8000596:	4631      	mov	r1, r6
 8000598:	e7ed      	b.n	8000576 <__udivmoddi4+0x276>
 800059a:	4603      	mov	r3, r0
 800059c:	e799      	b.n	80004d2 <__udivmoddi4+0x1d2>
 800059e:	4630      	mov	r0, r6
 80005a0:	e7d4      	b.n	800054c <__udivmoddi4+0x24c>
 80005a2:	46d6      	mov	lr, sl
 80005a4:	e77f      	b.n	80004a6 <__udivmoddi4+0x1a6>
 80005a6:	4463      	add	r3, ip
 80005a8:	3802      	subs	r0, #2
 80005aa:	e74d      	b.n	8000448 <__udivmoddi4+0x148>
 80005ac:	4606      	mov	r6, r0
 80005ae:	4623      	mov	r3, r4
 80005b0:	4608      	mov	r0, r1
 80005b2:	e70f      	b.n	80003d4 <__udivmoddi4+0xd4>
 80005b4:	3e02      	subs	r6, #2
 80005b6:	4463      	add	r3, ip
 80005b8:	e730      	b.n	800041c <__udivmoddi4+0x11c>
 80005ba:	bf00      	nop

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <plotter_get_time_us>:

#include "usart.h"
#include <stdio.h>
#include <string.h>

uint32_t plotter_get_time_us(void) {
 80005c0:	b480      	push	{r7}
 80005c2:	b083      	sub	sp, #12
 80005c4:	af00      	add	r7, sp, #0
    uint32_t cycles = DWT->CYCCNT;
 80005c6:	4b08      	ldr	r3, [pc, #32]	@ (80005e8 <plotter_get_time_us+0x28>)
 80005c8:	685b      	ldr	r3, [r3, #4]
 80005ca:	607b      	str	r3, [r7, #4]
    uint32_t us = cycles / 170; // clock is 170Mhz. us = cycles / clock * 1M
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	4a07      	ldr	r2, [pc, #28]	@ (80005ec <plotter_get_time_us+0x2c>)
 80005d0:	fba2 2303 	umull	r2, r3, r2, r3
 80005d4:	09db      	lsrs	r3, r3, #7
 80005d6:	603b      	str	r3, [r7, #0]
    return us;
 80005d8:	683b      	ldr	r3, [r7, #0]
}
 80005da:	4618      	mov	r0, r3
 80005dc:	370c      	adds	r7, #12
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	e0001000 	.word	0xe0001000
 80005ec:	c0c0c0c1 	.word	0xc0c0c0c1

080005f0 <plotter_transmit_data>:

void plotter_transmit_data(data_point_t *data, size_t size) {
 80005f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80005f4:	b089      	sub	sp, #36	@ 0x24
 80005f6:	af02      	add	r7, sp, #8
 80005f8:	6078      	str	r0, [r7, #4]
 80005fa:	6039      	str	r1, [r7, #0]
 80005fc:	466b      	mov	r3, sp
 80005fe:	461e      	mov	r6, r3
    const uint8_t buffer_size = 128;
 8000600:	2380      	movs	r3, #128	@ 0x80
 8000602:	74fb      	strb	r3, [r7, #19]
    char buffer[buffer_size];
 8000604:	7cfb      	ldrb	r3, [r7, #19]
 8000606:	3b01      	subs	r3, #1
 8000608:	60fb      	str	r3, [r7, #12]
 800060a:	7cfb      	ldrb	r3, [r7, #19]
 800060c:	2200      	movs	r2, #0
 800060e:	4698      	mov	r8, r3
 8000610:	4691      	mov	r9, r2
 8000612:	f04f 0200 	mov.w	r2, #0
 8000616:	f04f 0300 	mov.w	r3, #0
 800061a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800061e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000622:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000626:	7cfb      	ldrb	r3, [r7, #19]
 8000628:	2200      	movs	r2, #0
 800062a:	461c      	mov	r4, r3
 800062c:	4615      	mov	r5, r2
 800062e:	f04f 0200 	mov.w	r2, #0
 8000632:	f04f 0300 	mov.w	r3, #0
 8000636:	00eb      	lsls	r3, r5, #3
 8000638:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800063c:	00e2      	lsls	r2, r4, #3
 800063e:	7cfb      	ldrb	r3, [r7, #19]
 8000640:	3307      	adds	r3, #7
 8000642:	08db      	lsrs	r3, r3, #3
 8000644:	00db      	lsls	r3, r3, #3
 8000646:	ebad 0d03 	sub.w	sp, sp, r3
 800064a:	ab02      	add	r3, sp, #8
 800064c:	3300      	adds	r3, #0
 800064e:	60bb      	str	r3, [r7, #8]

    for (size_t i = 0; i < size; i++) {
 8000650:	2300      	movs	r3, #0
 8000652:	617b      	str	r3, [r7, #20]
 8000654:	e030      	b.n	80006b8 <plotter_transmit_data+0xc8>
        if (data[i].time == ~0) {
 8000656:	697b      	ldr	r3, [r7, #20]
 8000658:	00db      	lsls	r3, r3, #3
 800065a:	687a      	ldr	r2, [r7, #4]
 800065c:	4413      	add	r3, r2
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000664:	d10a      	bne.n	800067c <plotter_transmit_data+0x8c>
            snprintf(buffer, buffer_size, "* %lu\n", data[i].value);
 8000666:	7cf9      	ldrb	r1, [r7, #19]
 8000668:	697b      	ldr	r3, [r7, #20]
 800066a:	00db      	lsls	r3, r3, #3
 800066c:	687a      	ldr	r2, [r7, #4]
 800066e:	4413      	add	r3, r2
 8000670:	685b      	ldr	r3, [r3, #4]
 8000672:	4a16      	ldr	r2, [pc, #88]	@ (80006cc <plotter_transmit_data+0xdc>)
 8000674:	68b8      	ldr	r0, [r7, #8]
 8000676:	f005 fa27 	bl	8005ac8 <sniprintf>
 800067a:	e010      	b.n	800069e <plotter_transmit_data+0xae>
        } else {
            snprintf(buffer, buffer_size, "%lu %lu\n", data[i].time,
 800067c:	7cf9      	ldrb	r1, [r7, #19]
 800067e:	697b      	ldr	r3, [r7, #20]
 8000680:	00db      	lsls	r3, r3, #3
 8000682:	687a      	ldr	r2, [r7, #4]
 8000684:	4413      	add	r3, r2
 8000686:	6818      	ldr	r0, [r3, #0]
                     data[i].value);
 8000688:	697b      	ldr	r3, [r7, #20]
 800068a:	00db      	lsls	r3, r3, #3
 800068c:	687a      	ldr	r2, [r7, #4]
 800068e:	4413      	add	r3, r2
            snprintf(buffer, buffer_size, "%lu %lu\n", data[i].time,
 8000690:	685b      	ldr	r3, [r3, #4]
 8000692:	9300      	str	r3, [sp, #0]
 8000694:	4603      	mov	r3, r0
 8000696:	4a0e      	ldr	r2, [pc, #56]	@ (80006d0 <plotter_transmit_data+0xe0>)
 8000698:	68b8      	ldr	r0, [r7, #8]
 800069a:	f005 fa15 	bl	8005ac8 <sniprintf>
        }
        HAL_UART_Transmit(&hlpuart1, (uint8_t *)buffer, strlen(buffer), 100);
 800069e:	68b8      	ldr	r0, [r7, #8]
 80006a0:	f7ff fdbe 	bl	8000220 <strlen>
 80006a4:	4603      	mov	r3, r0
 80006a6:	b29a      	uxth	r2, r3
 80006a8:	2364      	movs	r3, #100	@ 0x64
 80006aa:	68b9      	ldr	r1, [r7, #8]
 80006ac:	4809      	ldr	r0, [pc, #36]	@ (80006d4 <plotter_transmit_data+0xe4>)
 80006ae:	f004 fb5f 	bl	8004d70 <HAL_UART_Transmit>
    for (size_t i = 0; i < size; i++) {
 80006b2:	697b      	ldr	r3, [r7, #20]
 80006b4:	3301      	adds	r3, #1
 80006b6:	617b      	str	r3, [r7, #20]
 80006b8:	697a      	ldr	r2, [r7, #20]
 80006ba:	683b      	ldr	r3, [r7, #0]
 80006bc:	429a      	cmp	r2, r3
 80006be:	d3ca      	bcc.n	8000656 <plotter_transmit_data+0x66>
 80006c0:	46b5      	mov	sp, r6
    }
}
 80006c2:	bf00      	nop
 80006c4:	371c      	adds	r7, #28
 80006c6:	46bd      	mov	sp, r7
 80006c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80006cc:	08006448 	.word	0x08006448
 80006d0:	08006450 	.word	0x08006450
 80006d4:	200001bc 	.word	0x200001bc

080006d8 <plotter_send_signal>:

void plotter_send_signal(const char *name, data_point_t *data, size_t size) {
 80006d8:	b580      	push	{r7, lr}
 80006da:	b086      	sub	sp, #24
 80006dc:	af00      	add	r7, sp, #0
 80006de:	60f8      	str	r0, [r7, #12]
 80006e0:	60b9      	str	r1, [r7, #8]
 80006e2:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&hlpuart1, (uint8_t *)name, strlen(name), 100);
 80006e4:	68f8      	ldr	r0, [r7, #12]
 80006e6:	f7ff fd9b 	bl	8000220 <strlen>
 80006ea:	4603      	mov	r3, r0
 80006ec:	b29a      	uxth	r2, r3
 80006ee:	2364      	movs	r3, #100	@ 0x64
 80006f0:	68f9      	ldr	r1, [r7, #12]
 80006f2:	480e      	ldr	r0, [pc, #56]	@ (800072c <plotter_send_signal+0x54>)
 80006f4:	f004 fb3c 	bl	8004d70 <HAL_UART_Transmit>
    HAL_UART_Transmit(&hlpuart1, (uint8_t *)"\n", 1, 100);
 80006f8:	2364      	movs	r3, #100	@ 0x64
 80006fa:	2201      	movs	r2, #1
 80006fc:	490c      	ldr	r1, [pc, #48]	@ (8000730 <plotter_send_signal+0x58>)
 80006fe:	480b      	ldr	r0, [pc, #44]	@ (800072c <plotter_send_signal+0x54>)
 8000700:	f004 fb36 	bl	8004d70 <HAL_UART_Transmit>

    plotter_transmit_data(data, size);
 8000704:	6879      	ldr	r1, [r7, #4]
 8000706:	68b8      	ldr	r0, [r7, #8]
 8000708:	f7ff ff72 	bl	80005f0 <plotter_transmit_data>

    const char *buffer = "END_OF_SIGNAL\n";
 800070c:	4b09      	ldr	r3, [pc, #36]	@ (8000734 <plotter_send_signal+0x5c>)
 800070e:	617b      	str	r3, [r7, #20]
    HAL_UART_Transmit(&hlpuart1, (uint8_t *)buffer, strlen(buffer), 100);
 8000710:	6978      	ldr	r0, [r7, #20]
 8000712:	f7ff fd85 	bl	8000220 <strlen>
 8000716:	4603      	mov	r3, r0
 8000718:	b29a      	uxth	r2, r3
 800071a:	2364      	movs	r3, #100	@ 0x64
 800071c:	6979      	ldr	r1, [r7, #20]
 800071e:	4803      	ldr	r0, [pc, #12]	@ (800072c <plotter_send_signal+0x54>)
 8000720:	f004 fb26 	bl	8004d70 <HAL_UART_Transmit>
}
 8000724:	bf00      	nop
 8000726:	3718      	adds	r7, #24
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	200001bc 	.word	0x200001bc
 8000730:	0800645c 	.word	0x0800645c
 8000734:	08006460 	.word	0x08006460

08000738 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b08c      	sub	sp, #48	@ 0x30
 800073c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800073e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000742:	2200      	movs	r2, #0
 8000744:	601a      	str	r2, [r3, #0]
 8000746:	605a      	str	r2, [r3, #4]
 8000748:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800074a:	1d3b      	adds	r3, r7, #4
 800074c:	2220      	movs	r2, #32
 800074e:	2100      	movs	r1, #0
 8000750:	4618      	mov	r0, r3
 8000752:	f005 f9ed 	bl	8005b30 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000756:	4b34      	ldr	r3, [pc, #208]	@ (8000828 <MX_ADC1_Init+0xf0>)
 8000758:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800075c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800075e:	4b32      	ldr	r3, [pc, #200]	@ (8000828 <MX_ADC1_Init+0xf0>)
 8000760:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000764:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000766:	4b30      	ldr	r3, [pc, #192]	@ (8000828 <MX_ADC1_Init+0xf0>)
 8000768:	2200      	movs	r2, #0
 800076a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800076c:	4b2e      	ldr	r3, [pc, #184]	@ (8000828 <MX_ADC1_Init+0xf0>)
 800076e:	2200      	movs	r2, #0
 8000770:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000772:	4b2d      	ldr	r3, [pc, #180]	@ (8000828 <MX_ADC1_Init+0xf0>)
 8000774:	2200      	movs	r2, #0
 8000776:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000778:	4b2b      	ldr	r3, [pc, #172]	@ (8000828 <MX_ADC1_Init+0xf0>)
 800077a:	2200      	movs	r2, #0
 800077c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800077e:	4b2a      	ldr	r3, [pc, #168]	@ (8000828 <MX_ADC1_Init+0xf0>)
 8000780:	2204      	movs	r2, #4
 8000782:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000784:	4b28      	ldr	r3, [pc, #160]	@ (8000828 <MX_ADC1_Init+0xf0>)
 8000786:	2200      	movs	r2, #0
 8000788:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800078a:	4b27      	ldr	r3, [pc, #156]	@ (8000828 <MX_ADC1_Init+0xf0>)
 800078c:	2201      	movs	r2, #1
 800078e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000790:	4b25      	ldr	r3, [pc, #148]	@ (8000828 <MX_ADC1_Init+0xf0>)
 8000792:	2201      	movs	r2, #1
 8000794:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000796:	4b24      	ldr	r3, [pc, #144]	@ (8000828 <MX_ADC1_Init+0xf0>)
 8000798:	2200      	movs	r2, #0
 800079a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800079e:	4b22      	ldr	r3, [pc, #136]	@ (8000828 <MX_ADC1_Init+0xf0>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007a4:	4b20      	ldr	r3, [pc, #128]	@ (8000828 <MX_ADC1_Init+0xf0>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80007aa:	4b1f      	ldr	r3, [pc, #124]	@ (8000828 <MX_ADC1_Init+0xf0>)
 80007ac:	2201      	movs	r2, #1
 80007ae:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007b2:	4b1d      	ldr	r3, [pc, #116]	@ (8000828 <MX_ADC1_Init+0xf0>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80007b8:	4b1b      	ldr	r3, [pc, #108]	@ (8000828 <MX_ADC1_Init+0xf0>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007c0:	4819      	ldr	r0, [pc, #100]	@ (8000828 <MX_ADC1_Init+0xf0>)
 80007c2:	f001 f801 	bl	80017c8 <HAL_ADC_Init>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80007cc:	f000 fb9f 	bl	8000f0e <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_DUALMODE_REGSIMULT;
 80007d0:	2306      	movs	r3, #6
 80007d2:	627b      	str	r3, [r7, #36]	@ 0x24
  multimode.DMAAccessMode = ADC_DMAACCESSMODE_DISABLED;
 80007d4:	2300      	movs	r3, #0
 80007d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_1CYCLE;
 80007d8:	2300      	movs	r3, #0
 80007da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80007dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007e0:	4619      	mov	r1, r3
 80007e2:	4811      	ldr	r0, [pc, #68]	@ (8000828 <MX_ADC1_Init+0xf0>)
 80007e4:	f002 fbba 	bl	8002f5c <HAL_ADCEx_MultiModeConfigChannel>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <MX_ADC1_Init+0xba>
  {
    Error_Handler();
 80007ee:	f000 fb8e 	bl	8000f0e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80007f2:	4b0e      	ldr	r3, [pc, #56]	@ (800082c <MX_ADC1_Init+0xf4>)
 80007f4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007f6:	2306      	movs	r3, #6
 80007f8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80007fa:	2300      	movs	r3, #0
 80007fc:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80007fe:	237f      	movs	r3, #127	@ 0x7f
 8000800:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000802:	2304      	movs	r3, #4
 8000804:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000806:	2300      	movs	r3, #0
 8000808:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800080a:	1d3b      	adds	r3, r7, #4
 800080c:	4619      	mov	r1, r3
 800080e:	4806      	ldr	r0, [pc, #24]	@ (8000828 <MX_ADC1_Init+0xf0>)
 8000810:	f001 fac2 	bl	8001d98 <HAL_ADC_ConfigChannel>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 800081a:	f000 fb78 	bl	8000f0e <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800081e:	bf00      	nop
 8000820:	3730      	adds	r7, #48	@ 0x30
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	20000078 	.word	0x20000078
 800082c:	04300002 	.word	0x04300002

08000830 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b088      	sub	sp, #32
 8000834:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000836:	463b      	mov	r3, r7
 8000838:	2220      	movs	r2, #32
 800083a:	2100      	movs	r1, #0
 800083c:	4618      	mov	r0, r3
 800083e:	f005 f977 	bl	8005b30 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000842:	4b28      	ldr	r3, [pc, #160]	@ (80008e4 <MX_ADC2_Init+0xb4>)
 8000844:	4a28      	ldr	r2, [pc, #160]	@ (80008e8 <MX_ADC2_Init+0xb8>)
 8000846:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000848:	4b26      	ldr	r3, [pc, #152]	@ (80008e4 <MX_ADC2_Init+0xb4>)
 800084a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800084e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000850:	4b24      	ldr	r3, [pc, #144]	@ (80008e4 <MX_ADC2_Init+0xb4>)
 8000852:	2200      	movs	r2, #0
 8000854:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000856:	4b23      	ldr	r3, [pc, #140]	@ (80008e4 <MX_ADC2_Init+0xb4>)
 8000858:	2200      	movs	r2, #0
 800085a:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 800085c:	4b21      	ldr	r3, [pc, #132]	@ (80008e4 <MX_ADC2_Init+0xb4>)
 800085e:	2200      	movs	r2, #0
 8000860:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000862:	4b20      	ldr	r3, [pc, #128]	@ (80008e4 <MX_ADC2_Init+0xb4>)
 8000864:	2200      	movs	r2, #0
 8000866:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000868:	4b1e      	ldr	r3, [pc, #120]	@ (80008e4 <MX_ADC2_Init+0xb4>)
 800086a:	2204      	movs	r2, #4
 800086c:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800086e:	4b1d      	ldr	r3, [pc, #116]	@ (80008e4 <MX_ADC2_Init+0xb4>)
 8000870:	2200      	movs	r2, #0
 8000872:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000874:	4b1b      	ldr	r3, [pc, #108]	@ (80008e4 <MX_ADC2_Init+0xb4>)
 8000876:	2201      	movs	r2, #1
 8000878:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 800087a:	4b1a      	ldr	r3, [pc, #104]	@ (80008e4 <MX_ADC2_Init+0xb4>)
 800087c:	2201      	movs	r2, #1
 800087e:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000880:	4b18      	ldr	r3, [pc, #96]	@ (80008e4 <MX_ADC2_Init+0xb4>)
 8000882:	2200      	movs	r2, #0
 8000884:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000888:	4b16      	ldr	r3, [pc, #88]	@ (80008e4 <MX_ADC2_Init+0xb4>)
 800088a:	2200      	movs	r2, #0
 800088c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000890:	4b14      	ldr	r3, [pc, #80]	@ (80008e4 <MX_ADC2_Init+0xb4>)
 8000892:	2200      	movs	r2, #0
 8000894:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000896:	4b13      	ldr	r3, [pc, #76]	@ (80008e4 <MX_ADC2_Init+0xb4>)
 8000898:	2200      	movs	r2, #0
 800089a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800089e:	4811      	ldr	r0, [pc, #68]	@ (80008e4 <MX_ADC2_Init+0xb4>)
 80008a0:	f000 ff92 	bl	80017c8 <HAL_ADC_Init>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 80008aa:	f000 fb30 	bl	8000f0e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80008ae:	4b0f      	ldr	r3, [pc, #60]	@ (80008ec <MX_ADC2_Init+0xbc>)
 80008b0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008b2:	2306      	movs	r3, #6
 80008b4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80008b6:	2300      	movs	r3, #0
 80008b8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008ba:	237f      	movs	r3, #127	@ 0x7f
 80008bc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008be:	2304      	movs	r3, #4
 80008c0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80008c2:	2300      	movs	r3, #0
 80008c4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80008c6:	463b      	mov	r3, r7
 80008c8:	4619      	mov	r1, r3
 80008ca:	4806      	ldr	r0, [pc, #24]	@ (80008e4 <MX_ADC2_Init+0xb4>)
 80008cc:	f001 fa64 	bl	8001d98 <HAL_ADC_ConfigChannel>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 80008d6:	f000 fb1a 	bl	8000f0e <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80008da:	bf00      	nop
 80008dc:	3720      	adds	r7, #32
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	200000e4 	.word	0x200000e4
 80008e8:	50000100 	.word	0x50000100
 80008ec:	0c900008 	.word	0x0c900008

080008f0 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b0a0      	sub	sp, #128	@ 0x80
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80008fc:	2200      	movs	r2, #0
 80008fe:	601a      	str	r2, [r3, #0]
 8000900:	605a      	str	r2, [r3, #4]
 8000902:	609a      	str	r2, [r3, #8]
 8000904:	60da      	str	r2, [r3, #12]
 8000906:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000908:	f107 0318 	add.w	r3, r7, #24
 800090c:	2254      	movs	r2, #84	@ 0x54
 800090e:	2100      	movs	r1, #0
 8000910:	4618      	mov	r0, r3
 8000912:	f005 f90d 	bl	8005b30 <memset>
  if(adcHandle->Instance==ADC1)
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800091e:	d169      	bne.n	80009f4 <HAL_ADC_MspInit+0x104>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000920:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000924:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000926:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800092a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800092c:	f107 0318 	add.w	r3, r7, #24
 8000930:	4618      	mov	r0, r3
 8000932:	f003 ff7f 	bl	8004834 <HAL_RCCEx_PeriphCLKConfig>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 800093c:	f000 fae7 	bl	8000f0e <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000940:	4b50      	ldr	r3, [pc, #320]	@ (8000a84 <HAL_ADC_MspInit+0x194>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	3301      	adds	r3, #1
 8000946:	4a4f      	ldr	r2, [pc, #316]	@ (8000a84 <HAL_ADC_MspInit+0x194>)
 8000948:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800094a:	4b4e      	ldr	r3, [pc, #312]	@ (8000a84 <HAL_ADC_MspInit+0x194>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	2b01      	cmp	r3, #1
 8000950:	d10b      	bne.n	800096a <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000952:	4b4d      	ldr	r3, [pc, #308]	@ (8000a88 <HAL_ADC_MspInit+0x198>)
 8000954:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000956:	4a4c      	ldr	r2, [pc, #304]	@ (8000a88 <HAL_ADC_MspInit+0x198>)
 8000958:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800095c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800095e:	4b4a      	ldr	r3, [pc, #296]	@ (8000a88 <HAL_ADC_MspInit+0x198>)
 8000960:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000962:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000966:	617b      	str	r3, [r7, #20]
 8000968:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800096a:	4b47      	ldr	r3, [pc, #284]	@ (8000a88 <HAL_ADC_MspInit+0x198>)
 800096c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800096e:	4a46      	ldr	r2, [pc, #280]	@ (8000a88 <HAL_ADC_MspInit+0x198>)
 8000970:	f043 0301 	orr.w	r3, r3, #1
 8000974:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000976:	4b44      	ldr	r3, [pc, #272]	@ (8000a88 <HAL_ADC_MspInit+0x198>)
 8000978:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800097a:	f003 0301 	and.w	r3, r3, #1
 800097e:	613b      	str	r3, [r7, #16]
 8000980:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000982:	2301      	movs	r3, #1
 8000984:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000986:	2303      	movs	r3, #3
 8000988:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098a:	2300      	movs	r3, #0
 800098c:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800098e:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000992:	4619      	mov	r1, r3
 8000994:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000998:	f002 ffc4 	bl	8003924 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800099c:	4b3b      	ldr	r3, [pc, #236]	@ (8000a8c <HAL_ADC_MspInit+0x19c>)
 800099e:	4a3c      	ldr	r2, [pc, #240]	@ (8000a90 <HAL_ADC_MspInit+0x1a0>)
 80009a0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80009a2:	4b3a      	ldr	r3, [pc, #232]	@ (8000a8c <HAL_ADC_MspInit+0x19c>)
 80009a4:	2205      	movs	r2, #5
 80009a6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80009a8:	4b38      	ldr	r3, [pc, #224]	@ (8000a8c <HAL_ADC_MspInit+0x19c>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80009ae:	4b37      	ldr	r3, [pc, #220]	@ (8000a8c <HAL_ADC_MspInit+0x19c>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80009b4:	4b35      	ldr	r3, [pc, #212]	@ (8000a8c <HAL_ADC_MspInit+0x19c>)
 80009b6:	2280      	movs	r2, #128	@ 0x80
 80009b8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80009ba:	4b34      	ldr	r3, [pc, #208]	@ (8000a8c <HAL_ADC_MspInit+0x19c>)
 80009bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80009c0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80009c2:	4b32      	ldr	r3, [pc, #200]	@ (8000a8c <HAL_ADC_MspInit+0x19c>)
 80009c4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80009c8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80009ca:	4b30      	ldr	r3, [pc, #192]	@ (8000a8c <HAL_ADC_MspInit+0x19c>)
 80009cc:	2220      	movs	r2, #32
 80009ce:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80009d0:	4b2e      	ldr	r3, [pc, #184]	@ (8000a8c <HAL_ADC_MspInit+0x19c>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80009d6:	482d      	ldr	r0, [pc, #180]	@ (8000a8c <HAL_ADC_MspInit+0x19c>)
 80009d8:	f002 fcd8 	bl	800338c <HAL_DMA_Init>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <HAL_ADC_MspInit+0xf6>
    {
      Error_Handler();
 80009e2:	f000 fa94 	bl	8000f0e <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	4a28      	ldr	r2, [pc, #160]	@ (8000a8c <HAL_ADC_MspInit+0x19c>)
 80009ea:	655a      	str	r2, [r3, #84]	@ 0x54
 80009ec:	4a27      	ldr	r2, [pc, #156]	@ (8000a8c <HAL_ADC_MspInit+0x19c>)
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80009f2:	e042      	b.n	8000a7a <HAL_ADC_MspInit+0x18a>
  else if(adcHandle->Instance==ADC2)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4a26      	ldr	r2, [pc, #152]	@ (8000a94 <HAL_ADC_MspInit+0x1a4>)
 80009fa:	4293      	cmp	r3, r2
 80009fc:	d13d      	bne.n	8000a7a <HAL_ADC_MspInit+0x18a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80009fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000a02:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000a04:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000a08:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a0a:	f107 0318 	add.w	r3, r7, #24
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f003 ff10 	bl	8004834 <HAL_RCCEx_PeriphCLKConfig>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <HAL_ADC_MspInit+0x12e>
      Error_Handler();
 8000a1a:	f000 fa78 	bl	8000f0e <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000a1e:	4b19      	ldr	r3, [pc, #100]	@ (8000a84 <HAL_ADC_MspInit+0x194>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	3301      	adds	r3, #1
 8000a24:	4a17      	ldr	r2, [pc, #92]	@ (8000a84 <HAL_ADC_MspInit+0x194>)
 8000a26:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000a28:	4b16      	ldr	r3, [pc, #88]	@ (8000a84 <HAL_ADC_MspInit+0x194>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	2b01      	cmp	r3, #1
 8000a2e:	d10b      	bne.n	8000a48 <HAL_ADC_MspInit+0x158>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000a30:	4b15      	ldr	r3, [pc, #84]	@ (8000a88 <HAL_ADC_MspInit+0x198>)
 8000a32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a34:	4a14      	ldr	r2, [pc, #80]	@ (8000a88 <HAL_ADC_MspInit+0x198>)
 8000a36:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000a3a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a3c:	4b12      	ldr	r3, [pc, #72]	@ (8000a88 <HAL_ADC_MspInit+0x198>)
 8000a3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a40:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000a44:	60fb      	str	r3, [r7, #12]
 8000a46:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a48:	4b0f      	ldr	r3, [pc, #60]	@ (8000a88 <HAL_ADC_MspInit+0x198>)
 8000a4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a4c:	4a0e      	ldr	r2, [pc, #56]	@ (8000a88 <HAL_ADC_MspInit+0x198>)
 8000a4e:	f043 0301 	orr.w	r3, r3, #1
 8000a52:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a54:	4b0c      	ldr	r3, [pc, #48]	@ (8000a88 <HAL_ADC_MspInit+0x198>)
 8000a56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a58:	f003 0301 	and.w	r3, r3, #1
 8000a5c:	60bb      	str	r3, [r7, #8]
 8000a5e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000a60:	2340      	movs	r3, #64	@ 0x40
 8000a62:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a64:	2303      	movs	r3, #3
 8000a66:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a6c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000a70:	4619      	mov	r1, r3
 8000a72:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a76:	f002 ff55 	bl	8003924 <HAL_GPIO_Init>
}
 8000a7a:	bf00      	nop
 8000a7c:	3780      	adds	r7, #128	@ 0x80
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	200001b0 	.word	0x200001b0
 8000a88:	40021000 	.word	0x40021000
 8000a8c:	20000150 	.word	0x20000150
 8000a90:	40020008 	.word	0x40020008
 8000a94:	50000100 	.word	0x50000100

08000a98 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000a9e:	4b12      	ldr	r3, [pc, #72]	@ (8000ae8 <MX_DMA_Init+0x50>)
 8000aa0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000aa2:	4a11      	ldr	r2, [pc, #68]	@ (8000ae8 <MX_DMA_Init+0x50>)
 8000aa4:	f043 0304 	orr.w	r3, r3, #4
 8000aa8:	6493      	str	r3, [r2, #72]	@ 0x48
 8000aaa:	4b0f      	ldr	r3, [pc, #60]	@ (8000ae8 <MX_DMA_Init+0x50>)
 8000aac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000aae:	f003 0304 	and.w	r3, r3, #4
 8000ab2:	607b      	str	r3, [r7, #4]
 8000ab4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ab6:	4b0c      	ldr	r3, [pc, #48]	@ (8000ae8 <MX_DMA_Init+0x50>)
 8000ab8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000aba:	4a0b      	ldr	r2, [pc, #44]	@ (8000ae8 <MX_DMA_Init+0x50>)
 8000abc:	f043 0301 	orr.w	r3, r3, #1
 8000ac0:	6493      	str	r3, [r2, #72]	@ 0x48
 8000ac2:	4b09      	ldr	r3, [pc, #36]	@ (8000ae8 <MX_DMA_Init+0x50>)
 8000ac4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000ac6:	f003 0301 	and.w	r3, r3, #1
 8000aca:	603b      	str	r3, [r7, #0]
 8000acc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000ace:	2200      	movs	r2, #0
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	200b      	movs	r0, #11
 8000ad4:	f002 fc25 	bl	8003322 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000ad8:	200b      	movs	r0, #11
 8000ada:	f002 fc3c 	bl	8003356 <HAL_NVIC_EnableIRQ>

}
 8000ade:	bf00      	nop
 8000ae0:	3708      	adds	r7, #8
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	40021000 	.word	0x40021000

08000aec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b08a      	sub	sp, #40	@ 0x28
 8000af0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af2:	f107 0314 	add.w	r3, r7, #20
 8000af6:	2200      	movs	r2, #0
 8000af8:	601a      	str	r2, [r3, #0]
 8000afa:	605a      	str	r2, [r3, #4]
 8000afc:	609a      	str	r2, [r3, #8]
 8000afe:	60da      	str	r2, [r3, #12]
 8000b00:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b02:	4b25      	ldr	r3, [pc, #148]	@ (8000b98 <MX_GPIO_Init+0xac>)
 8000b04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b06:	4a24      	ldr	r2, [pc, #144]	@ (8000b98 <MX_GPIO_Init+0xac>)
 8000b08:	f043 0304 	orr.w	r3, r3, #4
 8000b0c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b0e:	4b22      	ldr	r3, [pc, #136]	@ (8000b98 <MX_GPIO_Init+0xac>)
 8000b10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b12:	f003 0304 	and.w	r3, r3, #4
 8000b16:	613b      	str	r3, [r7, #16]
 8000b18:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b1a:	4b1f      	ldr	r3, [pc, #124]	@ (8000b98 <MX_GPIO_Init+0xac>)
 8000b1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b1e:	4a1e      	ldr	r2, [pc, #120]	@ (8000b98 <MX_GPIO_Init+0xac>)
 8000b20:	f043 0320 	orr.w	r3, r3, #32
 8000b24:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b26:	4b1c      	ldr	r3, [pc, #112]	@ (8000b98 <MX_GPIO_Init+0xac>)
 8000b28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b2a:	f003 0320 	and.w	r3, r3, #32
 8000b2e:	60fb      	str	r3, [r7, #12]
 8000b30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b32:	4b19      	ldr	r3, [pc, #100]	@ (8000b98 <MX_GPIO_Init+0xac>)
 8000b34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b36:	4a18      	ldr	r2, [pc, #96]	@ (8000b98 <MX_GPIO_Init+0xac>)
 8000b38:	f043 0301 	orr.w	r3, r3, #1
 8000b3c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b3e:	4b16      	ldr	r3, [pc, #88]	@ (8000b98 <MX_GPIO_Init+0xac>)
 8000b40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b42:	f003 0301 	and.w	r3, r3, #1
 8000b46:	60bb      	str	r3, [r7, #8]
 8000b48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b4a:	4b13      	ldr	r3, [pc, #76]	@ (8000b98 <MX_GPIO_Init+0xac>)
 8000b4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b4e:	4a12      	ldr	r2, [pc, #72]	@ (8000b98 <MX_GPIO_Init+0xac>)
 8000b50:	f043 0302 	orr.w	r3, r3, #2
 8000b54:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b56:	4b10      	ldr	r3, [pc, #64]	@ (8000b98 <MX_GPIO_Init+0xac>)
 8000b58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b5a:	f003 0302 	and.w	r3, r3, #2
 8000b5e:	607b      	str	r3, [r7, #4]
 8000b60:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b62:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b68:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000b6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b72:	f107 0314 	add.w	r3, r7, #20
 8000b76:	4619      	mov	r1, r3
 8000b78:	4808      	ldr	r0, [pc, #32]	@ (8000b9c <MX_GPIO_Init+0xb0>)
 8000b7a:	f002 fed3 	bl	8003924 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000b7e:	2200      	movs	r2, #0
 8000b80:	2100      	movs	r1, #0
 8000b82:	2028      	movs	r0, #40	@ 0x28
 8000b84:	f002 fbcd 	bl	8003322 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b88:	2028      	movs	r0, #40	@ 0x28
 8000b8a:	f002 fbe4 	bl	8003356 <HAL_NVIC_EnableIRQ>

}
 8000b8e:	bf00      	nop
 8000b90:	3728      	adds	r7, #40	@ 0x28
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	40021000 	.word	0x40021000
 8000b9c:	48000800 	.word	0x48000800

08000ba0 <HAL_ADC_ConvCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
bool adcs_complete = false;
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8000ba0:	b480      	push	{r7}
 8000ba2:	b083      	sub	sp, #12
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
	adcs_complete = true;
 8000ba8:	4b04      	ldr	r3, [pc, #16]	@ (8000bbc <HAL_ADC_ConvCpltCallback+0x1c>)
 8000baa:	2201      	movs	r2, #1
 8000bac:	701a      	strb	r2, [r3, #0]
}
 8000bae:	bf00      	nop
 8000bb0:	370c      	adds	r7, #12
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	200001b4 	.word	0x200001b4

08000bc0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000bc4:	b090      	sub	sp, #64	@ 0x40
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bc8:	f000 fb21 	bl	800120e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bcc:	f000 f954 	bl	8000e78 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000bd0:	4b9e      	ldr	r3, [pc, #632]	@ (8000e4c <main+0x28c>)
 8000bd2:	68db      	ldr	r3, [r3, #12]
 8000bd4:	4a9d      	ldr	r2, [pc, #628]	@ (8000e4c <main+0x28c>)
 8000bd6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000bda:	60d3      	str	r3, [r2, #12]
  DWT->CYCCNT = 0;
 8000bdc:	4b9c      	ldr	r3, [pc, #624]	@ (8000e50 <main+0x290>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	605a      	str	r2, [r3, #4]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8000be2:	4b9b      	ldr	r3, [pc, #620]	@ (8000e50 <main+0x290>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	4a9a      	ldr	r2, [pc, #616]	@ (8000e50 <main+0x290>)
 8000be8:	f043 0301 	orr.w	r3, r3, #1
 8000bec:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bee:	f7ff ff7d 	bl	8000aec <MX_GPIO_Init>
  MX_DMA_Init();
 8000bf2:	f7ff ff51 	bl	8000a98 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8000bf6:	f000 fa3f 	bl	8001078 <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 8000bfa:	f7ff fd9d 	bl	8000738 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000bfe:	f7ff fe17 	bl	8000830 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Transmit(&hlpuart1, (uint8_t*)"#daq\n", 5, 1000);
 8000c02:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c06:	2205      	movs	r2, #5
 8000c08:	4992      	ldr	r1, [pc, #584]	@ (8000e54 <main+0x294>)
 8000c0a:	4893      	ldr	r0, [pc, #588]	@ (8000e58 <main+0x298>)
 8000c0c:	f004 f8b0 	bl	8004d70 <HAL_UART_Transmit>

  uint32_t adcs_raw[POINTS_N];
 8000c10:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c14:	3b01      	subs	r3, #1
 8000c16:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000c18:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	613a      	str	r2, [r7, #16]
 8000c20:	617b      	str	r3, [r7, #20]
 8000c22:	f04f 0200 	mov.w	r2, #0
 8000c26:	f04f 0300 	mov.w	r3, #0
 8000c2a:	6979      	ldr	r1, [r7, #20]
 8000c2c:	014b      	lsls	r3, r1, #5
 8000c2e:	6939      	ldr	r1, [r7, #16]
 8000c30:	ea43 63d1 	orr.w	r3, r3, r1, lsr #27
 8000c34:	6939      	ldr	r1, [r7, #16]
 8000c36:	014a      	lsls	r2, r1, #5
 8000c38:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	60ba      	str	r2, [r7, #8]
 8000c40:	60fb      	str	r3, [r7, #12]
 8000c42:	f04f 0200 	mov.w	r2, #0
 8000c46:	f04f 0300 	mov.w	r3, #0
 8000c4a:	68f9      	ldr	r1, [r7, #12]
 8000c4c:	014b      	lsls	r3, r1, #5
 8000c4e:	68b9      	ldr	r1, [r7, #8]
 8000c50:	ea43 63d1 	orr.w	r3, r3, r1, lsr #27
 8000c54:	68b9      	ldr	r1, [r7, #8]
 8000c56:	014a      	lsls	r2, r1, #5
 8000c58:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c5c:	009b      	lsls	r3, r3, #2
 8000c5e:	3307      	adds	r3, #7
 8000c60:	08db      	lsrs	r3, r3, #3
 8000c62:	00db      	lsls	r3, r3, #3
 8000c64:	ebad 0d03 	sub.w	sp, sp, r3
 8000c68:	466b      	mov	r3, sp
 8000c6a:	3303      	adds	r3, #3
 8000c6c:	089b      	lsrs	r3, r3, #2
 8000c6e:	009b      	lsls	r3, r3, #2
 8000c70:	637b      	str	r3, [r7, #52]	@ 0x34
  memset(adcs_raw, 0, POINTS_N);
 8000c72:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c76:	461a      	mov	r2, r3
 8000c78:	2100      	movs	r1, #0
 8000c7a:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8000c7c:	f004 ff58 	bl	8005b30 <memset>
  data_point_t adc1_points[POINTS_N];
 8000c80:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c84:	3b01      	subs	r3, #1
 8000c86:	633b      	str	r3, [r7, #48]	@ 0x30
 8000c88:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	603a      	str	r2, [r7, #0]
 8000c90:	607b      	str	r3, [r7, #4]
 8000c92:	f04f 0200 	mov.w	r2, #0
 8000c96:	f04f 0300 	mov.w	r3, #0
 8000c9a:	6879      	ldr	r1, [r7, #4]
 8000c9c:	018b      	lsls	r3, r1, #6
 8000c9e:	6839      	ldr	r1, [r7, #0]
 8000ca0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8000ca4:	6839      	ldr	r1, [r7, #0]
 8000ca6:	018a      	lsls	r2, r1, #6
 8000ca8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000cac:	2300      	movs	r3, #0
 8000cae:	4692      	mov	sl, r2
 8000cb0:	469b      	mov	fp, r3
 8000cb2:	f04f 0200 	mov.w	r2, #0
 8000cb6:	f04f 0300 	mov.w	r3, #0
 8000cba:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8000cbe:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8000cc2:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8000cc6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000cca:	00db      	lsls	r3, r3, #3
 8000ccc:	3307      	adds	r3, #7
 8000cce:	08db      	lsrs	r3, r3, #3
 8000cd0:	00db      	lsls	r3, r3, #3
 8000cd2:	ebad 0d03 	sub.w	sp, sp, r3
 8000cd6:	466b      	mov	r3, sp
 8000cd8:	3303      	adds	r3, #3
 8000cda:	089b      	lsrs	r3, r3, #2
 8000cdc:	009b      	lsls	r3, r3, #2
 8000cde:	62fb      	str	r3, [r7, #44]	@ 0x2c
  data_point_t adc2_points[POINTS_N];
 8000ce0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ce4:	3b01      	subs	r3, #1
 8000ce6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000ce8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000cec:	2300      	movs	r3, #0
 8000cee:	4690      	mov	r8, r2
 8000cf0:	4699      	mov	r9, r3
 8000cf2:	f04f 0200 	mov.w	r2, #0
 8000cf6:	f04f 0300 	mov.w	r3, #0
 8000cfa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8000cfe:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8000d02:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8000d06:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	4614      	mov	r4, r2
 8000d0e:	461d      	mov	r5, r3
 8000d10:	f04f 0200 	mov.w	r2, #0
 8000d14:	f04f 0300 	mov.w	r3, #0
 8000d18:	01ab      	lsls	r3, r5, #6
 8000d1a:	ea43 6394 	orr.w	r3, r3, r4, lsr #26
 8000d1e:	01a2      	lsls	r2, r4, #6
 8000d20:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d24:	00db      	lsls	r3, r3, #3
 8000d26:	3307      	adds	r3, #7
 8000d28:	08db      	lsrs	r3, r3, #3
 8000d2a:	00db      	lsls	r3, r3, #3
 8000d2c:	ebad 0d03 	sub.w	sp, sp, r3
 8000d30:	466b      	mov	r3, sp
 8000d32:	3303      	adds	r3, #3
 8000d34:	089b      	lsrs	r3, r3, #2
 8000d36:	009b      	lsls	r3, r3, #2
 8000d38:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000d3a:	217f      	movs	r1, #127	@ 0x7f
 8000d3c:	4847      	ldr	r0, [pc, #284]	@ (8000e5c <main+0x29c>)
 8000d3e:	f001 ff17 	bl	8002b70 <HAL_ADCEx_Calibration_Start>
  HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 8000d42:	217f      	movs	r1, #127	@ 0x7f
 8000d44:	4846      	ldr	r0, [pc, #280]	@ (8000e60 <main+0x2a0>)
 8000d46:	f001 ff13 	bl	8002b70 <HAL_ADCEx_Calibration_Start>

  if (HAL_ADC_Start(&hadc2) != HAL_OK) {
 8000d4a:	4845      	ldr	r0, [pc, #276]	@ (8000e60 <main+0x2a0>)
 8000d4c:	f000 fef8 	bl	8001b40 <HAL_ADC_Start>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d006      	beq.n	8000d64 <main+0x1a4>
	  HAL_UART_Transmit(&hlpuart1, (uint8_t*)"#adc2_err\n", 9, 1000);
 8000d56:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d5a:	2209      	movs	r2, #9
 8000d5c:	4941      	ldr	r1, [pc, #260]	@ (8000e64 <main+0x2a4>)
 8000d5e:	483e      	ldr	r0, [pc, #248]	@ (8000e58 <main+0x298>)
 8000d60:	f004 f806 	bl	8004d70 <HAL_UART_Transmit>
  }
  if (HAL_ADCEx_MultiModeStart_DMA(&hadc1, adcs_raw, POINTS_N) != HAL_OK) {
 8000d64:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d68:	461a      	mov	r2, r3
 8000d6a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8000d6c:	483b      	ldr	r0, [pc, #236]	@ (8000e5c <main+0x29c>)
 8000d6e:	f001 ff61 	bl	8002c34 <HAL_ADCEx_MultiModeStart_DMA>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d006      	beq.n	8000d86 <main+0x1c6>
	  HAL_UART_Transmit(&hlpuart1, (uint8_t*)"#adc1_err\n", 9, 1000);
 8000d78:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d7c:	2209      	movs	r2, #9
 8000d7e:	493a      	ldr	r1, [pc, #232]	@ (8000e68 <main+0x2a8>)
 8000d80:	4835      	ldr	r0, [pc, #212]	@ (8000e58 <main+0x298>)
 8000d82:	f003 fff5 	bl	8004d70 <HAL_UART_Transmit>
  }

  uint32_t start_time = plotter_get_time_us();
 8000d86:	f7ff fc1b 	bl	80005c0 <plotter_get_time_us>
 8000d8a:	6238      	str	r0, [r7, #32]

  while (!adcs_complete)
 8000d8c:	bf00      	nop
 8000d8e:	4b37      	ldr	r3, [pc, #220]	@ (8000e6c <main+0x2ac>)
 8000d90:	781b      	ldrb	r3, [r3, #0]
 8000d92:	f083 0301 	eor.w	r3, r3, #1
 8000d96:	b2db      	uxtb	r3, r3
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d1f8      	bne.n	8000d8e <main+0x1ce>
      ;

  uint32_t end_time = plotter_get_time_us();
 8000d9c:	f7ff fc10 	bl	80005c0 <plotter_get_time_us>
 8000da0:	61f8      	str	r0, [r7, #28]

  HAL_ADC_Stop(&hadc2);
 8000da2:	482f      	ldr	r0, [pc, #188]	@ (8000e60 <main+0x2a0>)
 8000da4:	f000 ffb0 	bl	8001d08 <HAL_ADC_Stop>
  HAL_ADCEx_MultiModeStop_DMA(&hadc1);
 8000da8:	482c      	ldr	r0, [pc, #176]	@ (8000e5c <main+0x29c>)
 8000daa:	f001 ffff 	bl	8002dac <HAL_ADCEx_MultiModeStop_DMA>

  for (size_t i = 0; i < POINTS_N; i++) {
 8000dae:	2300      	movs	r3, #0
 8000db0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000db2:	e022      	b.n	8000dfa <main+0x23a>
      adc1_points[i].time = ~0;
 8000db4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000db6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000db8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000dbc:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
      adc2_points[i].time = ~0;
 8000dc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dc2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000dc4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000dc8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
      adc1_points[i].value = adcs_raw[i] & 0xFFFF;
 8000dcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000dce:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000dd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dd4:	b29a      	uxth	r2, r3
 8000dd6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8000dd8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000dda:	00db      	lsls	r3, r3, #3
 8000ddc:	440b      	add	r3, r1
 8000dde:	605a      	str	r2, [r3, #4]
      adc2_points[i].value = (adcs_raw[i] >> 16) & 0xFFFF;
 8000de0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000de2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000de4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000de8:	0c1a      	lsrs	r2, r3, #16
 8000dea:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000dec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000dee:	00db      	lsls	r3, r3, #3
 8000df0:	440b      	add	r3, r1
 8000df2:	605a      	str	r2, [r3, #4]
  for (size_t i = 0; i < POINTS_N; i++) {
 8000df4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000df6:	3301      	adds	r3, #1
 8000df8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000dfa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000dfe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000e00:	4293      	cmp	r3, r2
 8000e02:	d3d7      	bcc.n	8000db4 <main+0x1f4>
  }

  adc1_points[0].time = start_time;
 8000e04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e06:	6a3a      	ldr	r2, [r7, #32]
 8000e08:	601a      	str	r2, [r3, #0]
  adc1_points[POINTS_N - 1].time = end_time;
 8000e0a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e0e:	1e5a      	subs	r2, r3, #1
 8000e10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e12:	69f9      	ldr	r1, [r7, #28]
 8000e14:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
  adc2_points[0].time = start_time;
 8000e18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e1a:	6a3a      	ldr	r2, [r7, #32]
 8000e1c:	601a      	str	r2, [r3, #0]
  adc2_points[POINTS_N - 1].time = end_time;
 8000e1e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e22:	1e5a      	subs	r2, r3, #1
 8000e24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e26:	69f9      	ldr	r1, [r7, #28]
 8000e28:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

  plotter_send_signal("ADC1", adc1_points, POINTS_N);
 8000e2c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e30:	461a      	mov	r2, r3
 8000e32:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8000e34:	480e      	ldr	r0, [pc, #56]	@ (8000e70 <main+0x2b0>)
 8000e36:	f7ff fc4f 	bl	80006d8 <plotter_send_signal>
  plotter_send_signal("ADC2", adc2_points, POINTS_N);
 8000e3a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e3e:	461a      	mov	r2, r3
 8000e40:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000e42:	480c      	ldr	r0, [pc, #48]	@ (8000e74 <main+0x2b4>)
 8000e44:	f7ff fc48 	bl	80006d8 <plotter_send_signal>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000e48:	bf00      	nop
 8000e4a:	e7fd      	b.n	8000e48 <main+0x288>
 8000e4c:	e000edf0 	.word	0xe000edf0
 8000e50:	e0001000 	.word	0xe0001000
 8000e54:	08006470 	.word	0x08006470
 8000e58:	200001bc 	.word	0x200001bc
 8000e5c:	20000078 	.word	0x20000078
 8000e60:	200000e4 	.word	0x200000e4
 8000e64:	08006478 	.word	0x08006478
 8000e68:	08006484 	.word	0x08006484
 8000e6c:	200001b4 	.word	0x200001b4
 8000e70:	08006490 	.word	0x08006490
 8000e74:	08006498 	.word	0x08006498

08000e78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b094      	sub	sp, #80	@ 0x50
 8000e7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e7e:	f107 0318 	add.w	r3, r7, #24
 8000e82:	2238      	movs	r2, #56	@ 0x38
 8000e84:	2100      	movs	r1, #0
 8000e86:	4618      	mov	r0, r3
 8000e88:	f004 fe52 	bl	8005b30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e8c:	1d3b      	adds	r3, r7, #4
 8000e8e:	2200      	movs	r2, #0
 8000e90:	601a      	str	r2, [r3, #0]
 8000e92:	605a      	str	r2, [r3, #4]
 8000e94:	609a      	str	r2, [r3, #8]
 8000e96:	60da      	str	r2, [r3, #12]
 8000e98:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000e9a:	2000      	movs	r0, #0
 8000e9c:	f002 fee8 	bl	8003c70 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ea0:	2302      	movs	r3, #2
 8000ea2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ea4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000ea8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000eaa:	2340      	movs	r3, #64	@ 0x40
 8000eac:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000eae:	2302      	movs	r3, #2
 8000eb0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000eb2:	2302      	movs	r3, #2
 8000eb4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000eb6:	2304      	movs	r3, #4
 8000eb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000eba:	2355      	movs	r3, #85	@ 0x55
 8000ebc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ebe:	2302      	movs	r3, #2
 8000ec0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000ec2:	2302      	movs	r3, #2
 8000ec4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000ec6:	2302      	movs	r3, #2
 8000ec8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000eca:	f107 0318 	add.w	r3, r7, #24
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f002 ff82 	bl	8003dd8 <HAL_RCC_OscConfig>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000eda:	f000 f818 	bl	8000f0e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ede:	230f      	movs	r3, #15
 8000ee0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ee2:	2303      	movs	r3, #3
 8000ee4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000eea:	2300      	movs	r3, #0
 8000eec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000ef2:	1d3b      	adds	r3, r7, #4
 8000ef4:	2104      	movs	r1, #4
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f003 fa80 	bl	80043fc <HAL_RCC_ClockConfig>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000f02:	f000 f804 	bl	8000f0e <Error_Handler>
  }
}
 8000f06:	bf00      	nop
 8000f08:	3750      	adds	r7, #80	@ 0x50
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}

08000f0e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f0e:	b480      	push	{r7}
 8000f10:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f12:	b672      	cpsid	i
}
 8000f14:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f16:	bf00      	nop
 8000f18:	e7fd      	b.n	8000f16 <Error_Handler+0x8>
	...

08000f1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f22:	4b0f      	ldr	r3, [pc, #60]	@ (8000f60 <HAL_MspInit+0x44>)
 8000f24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f26:	4a0e      	ldr	r2, [pc, #56]	@ (8000f60 <HAL_MspInit+0x44>)
 8000f28:	f043 0301 	orr.w	r3, r3, #1
 8000f2c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f2e:	4b0c      	ldr	r3, [pc, #48]	@ (8000f60 <HAL_MspInit+0x44>)
 8000f30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f32:	f003 0301 	and.w	r3, r3, #1
 8000f36:	607b      	str	r3, [r7, #4]
 8000f38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f3a:	4b09      	ldr	r3, [pc, #36]	@ (8000f60 <HAL_MspInit+0x44>)
 8000f3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f3e:	4a08      	ldr	r2, [pc, #32]	@ (8000f60 <HAL_MspInit+0x44>)
 8000f40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f44:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f46:	4b06      	ldr	r3, [pc, #24]	@ (8000f60 <HAL_MspInit+0x44>)
 8000f48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f4e:	603b      	str	r3, [r7, #0]
 8000f50:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000f52:	f002 ff31 	bl	8003db8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f56:	bf00      	nop
 8000f58:	3708      	adds	r7, #8
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	40021000 	.word	0x40021000

08000f64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f68:	bf00      	nop
 8000f6a:	e7fd      	b.n	8000f68 <NMI_Handler+0x4>

08000f6c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f70:	bf00      	nop
 8000f72:	e7fd      	b.n	8000f70 <HardFault_Handler+0x4>

08000f74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f78:	bf00      	nop
 8000f7a:	e7fd      	b.n	8000f78 <MemManage_Handler+0x4>

08000f7c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f80:	bf00      	nop
 8000f82:	e7fd      	b.n	8000f80 <BusFault_Handler+0x4>

08000f84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f88:	bf00      	nop
 8000f8a:	e7fd      	b.n	8000f88 <UsageFault_Handler+0x4>

08000f8c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f90:	bf00      	nop
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr

08000f9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f9a:	b480      	push	{r7}
 8000f9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f9e:	bf00      	nop
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr

08000fa8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fac:	bf00      	nop
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr

08000fb6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fb6:	b580      	push	{r7, lr}
 8000fb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fba:	f000 f97b 	bl	80012b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fbe:	bf00      	nop
 8000fc0:	bd80      	pop	{r7, pc}
	...

08000fc4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000fc8:	4802      	ldr	r0, [pc, #8]	@ (8000fd4 <DMA1_Channel1_IRQHandler+0x10>)
 8000fca:	f002 fb5b 	bl	8003684 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000fce:	bf00      	nop
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	20000150 	.word	0x20000150

08000fd8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000fdc:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000fe0:	f002 fe22 	bl	8003c28 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000fe4:	bf00      	nop
 8000fe6:	bd80      	pop	{r7, pc}

08000fe8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ff0:	4a14      	ldr	r2, [pc, #80]	@ (8001044 <_sbrk+0x5c>)
 8000ff2:	4b15      	ldr	r3, [pc, #84]	@ (8001048 <_sbrk+0x60>)
 8000ff4:	1ad3      	subs	r3, r2, r3
 8000ff6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ffc:	4b13      	ldr	r3, [pc, #76]	@ (800104c <_sbrk+0x64>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d102      	bne.n	800100a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001004:	4b11      	ldr	r3, [pc, #68]	@ (800104c <_sbrk+0x64>)
 8001006:	4a12      	ldr	r2, [pc, #72]	@ (8001050 <_sbrk+0x68>)
 8001008:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800100a:	4b10      	ldr	r3, [pc, #64]	@ (800104c <_sbrk+0x64>)
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4413      	add	r3, r2
 8001012:	693a      	ldr	r2, [r7, #16]
 8001014:	429a      	cmp	r2, r3
 8001016:	d207      	bcs.n	8001028 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001018:	f004 fd92 	bl	8005b40 <__errno>
 800101c:	4603      	mov	r3, r0
 800101e:	220c      	movs	r2, #12
 8001020:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001022:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001026:	e009      	b.n	800103c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001028:	4b08      	ldr	r3, [pc, #32]	@ (800104c <_sbrk+0x64>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800102e:	4b07      	ldr	r3, [pc, #28]	@ (800104c <_sbrk+0x64>)
 8001030:	681a      	ldr	r2, [r3, #0]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	4413      	add	r3, r2
 8001036:	4a05      	ldr	r2, [pc, #20]	@ (800104c <_sbrk+0x64>)
 8001038:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800103a:	68fb      	ldr	r3, [r7, #12]
}
 800103c:	4618      	mov	r0, r3
 800103e:	3718      	adds	r7, #24
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	20020000 	.word	0x20020000
 8001048:	00000400 	.word	0x00000400
 800104c:	200001b8 	.word	0x200001b8
 8001050:	200003a0 	.word	0x200003a0

08001054 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001058:	4b06      	ldr	r3, [pc, #24]	@ (8001074 <SystemInit+0x20>)
 800105a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800105e:	4a05      	ldr	r2, [pc, #20]	@ (8001074 <SystemInit+0x20>)
 8001060:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001064:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001068:	bf00      	nop
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	e000ed00 	.word	0xe000ed00

08001078 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef hlpuart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800107c:	4b21      	ldr	r3, [pc, #132]	@ (8001104 <MX_LPUART1_UART_Init+0x8c>)
 800107e:	4a22      	ldr	r2, [pc, #136]	@ (8001108 <MX_LPUART1_UART_Init+0x90>)
 8001080:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001082:	4b20      	ldr	r3, [pc, #128]	@ (8001104 <MX_LPUART1_UART_Init+0x8c>)
 8001084:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001088:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800108a:	4b1e      	ldr	r3, [pc, #120]	@ (8001104 <MX_LPUART1_UART_Init+0x8c>)
 800108c:	2200      	movs	r2, #0
 800108e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001090:	4b1c      	ldr	r3, [pc, #112]	@ (8001104 <MX_LPUART1_UART_Init+0x8c>)
 8001092:	2200      	movs	r2, #0
 8001094:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001096:	4b1b      	ldr	r3, [pc, #108]	@ (8001104 <MX_LPUART1_UART_Init+0x8c>)
 8001098:	2200      	movs	r2, #0
 800109a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800109c:	4b19      	ldr	r3, [pc, #100]	@ (8001104 <MX_LPUART1_UART_Init+0x8c>)
 800109e:	220c      	movs	r2, #12
 80010a0:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010a2:	4b18      	ldr	r3, [pc, #96]	@ (8001104 <MX_LPUART1_UART_Init+0x8c>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010a8:	4b16      	ldr	r3, [pc, #88]	@ (8001104 <MX_LPUART1_UART_Init+0x8c>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80010ae:	4b15      	ldr	r3, [pc, #84]	@ (8001104 <MX_LPUART1_UART_Init+0x8c>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010b4:	4b13      	ldr	r3, [pc, #76]	@ (8001104 <MX_LPUART1_UART_Init+0x8c>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80010ba:	4812      	ldr	r0, [pc, #72]	@ (8001104 <MX_LPUART1_UART_Init+0x8c>)
 80010bc:	f003 fe08 	bl	8004cd0 <HAL_UART_Init>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80010c6:	f7ff ff22 	bl	8000f0e <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010ca:	2100      	movs	r1, #0
 80010cc:	480d      	ldr	r0, [pc, #52]	@ (8001104 <MX_LPUART1_UART_Init+0x8c>)
 80010ce:	f004 fc31 	bl	8005934 <HAL_UARTEx_SetTxFifoThreshold>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80010d8:	f7ff ff19 	bl	8000f0e <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010dc:	2100      	movs	r1, #0
 80010de:	4809      	ldr	r0, [pc, #36]	@ (8001104 <MX_LPUART1_UART_Init+0x8c>)
 80010e0:	f004 fc66 	bl	80059b0 <HAL_UARTEx_SetRxFifoThreshold>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 80010ea:	f7ff ff10 	bl	8000f0e <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80010ee:	4805      	ldr	r0, [pc, #20]	@ (8001104 <MX_LPUART1_UART_Init+0x8c>)
 80010f0:	f004 fbe7 	bl	80058c2 <HAL_UARTEx_DisableFifoMode>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 80010fa:	f7ff ff08 	bl	8000f0e <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80010fe:	bf00      	nop
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	200001bc 	.word	0x200001bc
 8001108:	40008000 	.word	0x40008000

0800110c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b09e      	sub	sp, #120	@ 0x78
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001114:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001118:	2200      	movs	r2, #0
 800111a:	601a      	str	r2, [r3, #0]
 800111c:	605a      	str	r2, [r3, #4]
 800111e:	609a      	str	r2, [r3, #8]
 8001120:	60da      	str	r2, [r3, #12]
 8001122:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001124:	f107 0310 	add.w	r3, r7, #16
 8001128:	2254      	movs	r2, #84	@ 0x54
 800112a:	2100      	movs	r1, #0
 800112c:	4618      	mov	r0, r3
 800112e:	f004 fcff 	bl	8005b30 <memset>
  if(uartHandle->Instance==LPUART1)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4a1f      	ldr	r2, [pc, #124]	@ (80011b4 <HAL_UART_MspInit+0xa8>)
 8001138:	4293      	cmp	r3, r2
 800113a:	d136      	bne.n	80011aa <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800113c:	2320      	movs	r3, #32
 800113e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001140:	2300      	movs	r3, #0
 8001142:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001144:	f107 0310 	add.w	r3, r7, #16
 8001148:	4618      	mov	r0, r3
 800114a:	f003 fb73 	bl	8004834 <HAL_RCCEx_PeriphCLKConfig>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001154:	f7ff fedb 	bl	8000f0e <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001158:	4b17      	ldr	r3, [pc, #92]	@ (80011b8 <HAL_UART_MspInit+0xac>)
 800115a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800115c:	4a16      	ldr	r2, [pc, #88]	@ (80011b8 <HAL_UART_MspInit+0xac>)
 800115e:	f043 0301 	orr.w	r3, r3, #1
 8001162:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001164:	4b14      	ldr	r3, [pc, #80]	@ (80011b8 <HAL_UART_MspInit+0xac>)
 8001166:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001168:	f003 0301 	and.w	r3, r3, #1
 800116c:	60fb      	str	r3, [r7, #12]
 800116e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001170:	4b11      	ldr	r3, [pc, #68]	@ (80011b8 <HAL_UART_MspInit+0xac>)
 8001172:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001174:	4a10      	ldr	r2, [pc, #64]	@ (80011b8 <HAL_UART_MspInit+0xac>)
 8001176:	f043 0301 	orr.w	r3, r3, #1
 800117a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800117c:	4b0e      	ldr	r3, [pc, #56]	@ (80011b8 <HAL_UART_MspInit+0xac>)
 800117e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001180:	f003 0301 	and.w	r3, r3, #1
 8001184:	60bb      	str	r3, [r7, #8]
 8001186:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8001188:	230c      	movs	r3, #12
 800118a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800118c:	2302      	movs	r3, #2
 800118e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001190:	2300      	movs	r3, #0
 8001192:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001194:	2300      	movs	r3, #0
 8001196:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001198:	230c      	movs	r3, #12
 800119a:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800119c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80011a0:	4619      	mov	r1, r3
 80011a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011a6:	f002 fbbd 	bl	8003924 <HAL_GPIO_Init>

  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 80011aa:	bf00      	nop
 80011ac:	3778      	adds	r7, #120	@ 0x78
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	40008000 	.word	0x40008000
 80011b8:	40021000 	.word	0x40021000

080011bc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80011bc:	480d      	ldr	r0, [pc, #52]	@ (80011f4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80011be:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80011c0:	f7ff ff48 	bl	8001054 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011c4:	480c      	ldr	r0, [pc, #48]	@ (80011f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80011c6:	490d      	ldr	r1, [pc, #52]	@ (80011fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80011c8:	4a0d      	ldr	r2, [pc, #52]	@ (8001200 <LoopForever+0xe>)
  movs r3, #0
 80011ca:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80011cc:	e002      	b.n	80011d4 <LoopCopyDataInit>

080011ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011d2:	3304      	adds	r3, #4

080011d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011d8:	d3f9      	bcc.n	80011ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011da:	4a0a      	ldr	r2, [pc, #40]	@ (8001204 <LoopForever+0x12>)
  ldr r4, =_ebss
 80011dc:	4c0a      	ldr	r4, [pc, #40]	@ (8001208 <LoopForever+0x16>)
  movs r3, #0
 80011de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011e0:	e001      	b.n	80011e6 <LoopFillZerobss>

080011e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011e4:	3204      	adds	r2, #4

080011e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011e8:	d3fb      	bcc.n	80011e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011ea:	f004 fcaf 	bl	8005b4c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80011ee:	f7ff fce7 	bl	8000bc0 <main>

080011f2 <LoopForever>:

LoopForever:
    b LoopForever
 80011f2:	e7fe      	b.n	80011f2 <LoopForever>
  ldr   r0, =_estack
 80011f4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80011f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011fc:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001200:	08006524 	.word	0x08006524
  ldr r2, =_sbss
 8001204:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001208:	2000039c 	.word	0x2000039c

0800120c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800120c:	e7fe      	b.n	800120c <ADC1_2_IRQHandler>

0800120e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800120e:	b580      	push	{r7, lr}
 8001210:	b082      	sub	sp, #8
 8001212:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001214:	2300      	movs	r3, #0
 8001216:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001218:	2003      	movs	r0, #3
 800121a:	f002 f877 	bl	800330c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800121e:	2000      	movs	r0, #0
 8001220:	f000 f80e 	bl	8001240 <HAL_InitTick>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d002      	beq.n	8001230 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800122a:	2301      	movs	r3, #1
 800122c:	71fb      	strb	r3, [r7, #7]
 800122e:	e001      	b.n	8001234 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001230:	f7ff fe74 	bl	8000f1c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001234:	79fb      	ldrb	r3, [r7, #7]

}
 8001236:	4618      	mov	r0, r3
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
	...

08001240 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001248:	2300      	movs	r3, #0
 800124a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800124c:	4b16      	ldr	r3, [pc, #88]	@ (80012a8 <HAL_InitTick+0x68>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d022      	beq.n	800129a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001254:	4b15      	ldr	r3, [pc, #84]	@ (80012ac <HAL_InitTick+0x6c>)
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	4b13      	ldr	r3, [pc, #76]	@ (80012a8 <HAL_InitTick+0x68>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001260:	fbb1 f3f3 	udiv	r3, r1, r3
 8001264:	fbb2 f3f3 	udiv	r3, r2, r3
 8001268:	4618      	mov	r0, r3
 800126a:	f002 f882 	bl	8003372 <HAL_SYSTICK_Config>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d10f      	bne.n	8001294 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2b0f      	cmp	r3, #15
 8001278:	d809      	bhi.n	800128e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800127a:	2200      	movs	r2, #0
 800127c:	6879      	ldr	r1, [r7, #4]
 800127e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001282:	f002 f84e 	bl	8003322 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001286:	4a0a      	ldr	r2, [pc, #40]	@ (80012b0 <HAL_InitTick+0x70>)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6013      	str	r3, [r2, #0]
 800128c:	e007      	b.n	800129e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800128e:	2301      	movs	r3, #1
 8001290:	73fb      	strb	r3, [r7, #15]
 8001292:	e004      	b.n	800129e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001294:	2301      	movs	r3, #1
 8001296:	73fb      	strb	r3, [r7, #15]
 8001298:	e001      	b.n	800129e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800129a:	2301      	movs	r3, #1
 800129c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800129e:	7bfb      	ldrb	r3, [r7, #15]
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	3710      	adds	r7, #16
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	20000008 	.word	0x20000008
 80012ac:	20000000 	.word	0x20000000
 80012b0:	20000004 	.word	0x20000004

080012b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012b8:	4b05      	ldr	r3, [pc, #20]	@ (80012d0 <HAL_IncTick+0x1c>)
 80012ba:	681a      	ldr	r2, [r3, #0]
 80012bc:	4b05      	ldr	r3, [pc, #20]	@ (80012d4 <HAL_IncTick+0x20>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4413      	add	r3, r2
 80012c2:	4a03      	ldr	r2, [pc, #12]	@ (80012d0 <HAL_IncTick+0x1c>)
 80012c4:	6013      	str	r3, [r2, #0]
}
 80012c6:	bf00      	nop
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr
 80012d0:	20000250 	.word	0x20000250
 80012d4:	20000008 	.word	0x20000008

080012d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
  return uwTick;
 80012dc:	4b03      	ldr	r3, [pc, #12]	@ (80012ec <HAL_GetTick+0x14>)
 80012de:	681b      	ldr	r3, [r3, #0]
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	20000250 	.word	0x20000250

080012f0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
 80012f8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	689b      	ldr	r3, [r3, #8]
 80012fe:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	431a      	orrs	r2, r3
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	609a      	str	r2, [r3, #8]
}
 800130a:	bf00      	nop
 800130c:	370c      	adds	r7, #12
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr

08001316 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001316:	b480      	push	{r7}
 8001318:	b083      	sub	sp, #12
 800131a:	af00      	add	r7, sp, #0
 800131c:	6078      	str	r0, [r7, #4]
 800131e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	689b      	ldr	r3, [r3, #8]
 8001324:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	431a      	orrs	r2, r3
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	609a      	str	r2, [r3, #8]
}
 8001330:	bf00      	nop
 8001332:	370c      	adds	r7, #12
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr

0800133c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	689b      	ldr	r3, [r3, #8]
 8001348:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800134c:	4618      	mov	r0, r3
 800134e:	370c      	adds	r7, #12
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr

08001358 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001358:	b480      	push	{r7}
 800135a:	b087      	sub	sp, #28
 800135c:	af00      	add	r7, sp, #0
 800135e:	60f8      	str	r0, [r7, #12]
 8001360:	60b9      	str	r1, [r7, #8]
 8001362:	607a      	str	r2, [r7, #4]
 8001364:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	3360      	adds	r3, #96	@ 0x60
 800136a:	461a      	mov	r2, r3
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	009b      	lsls	r3, r3, #2
 8001370:	4413      	add	r3, r2
 8001372:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	4b08      	ldr	r3, [pc, #32]	@ (800139c <LL_ADC_SetOffset+0x44>)
 800137a:	4013      	ands	r3, r2
 800137c:	687a      	ldr	r2, [r7, #4]
 800137e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001382:	683a      	ldr	r2, [r7, #0]
 8001384:	430a      	orrs	r2, r1
 8001386:	4313      	orrs	r3, r2
 8001388:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001390:	bf00      	nop
 8001392:	371c      	adds	r7, #28
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr
 800139c:	03fff000 	.word	0x03fff000

080013a0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b085      	sub	sp, #20
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	3360      	adds	r3, #96	@ 0x60
 80013ae:	461a      	mov	r2, r3
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	009b      	lsls	r3, r3, #2
 80013b4:	4413      	add	r3, r2
 80013b6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	3714      	adds	r7, #20
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr

080013cc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b087      	sub	sp, #28
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	60f8      	str	r0, [r7, #12]
 80013d4:	60b9      	str	r1, [r7, #8]
 80013d6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	3360      	adds	r3, #96	@ 0x60
 80013dc:	461a      	mov	r2, r3
 80013de:	68bb      	ldr	r3, [r7, #8]
 80013e0:	009b      	lsls	r3, r3, #2
 80013e2:	4413      	add	r3, r2
 80013e4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	431a      	orrs	r2, r3
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80013f6:	bf00      	nop
 80013f8:	371c      	adds	r7, #28
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr

08001402 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001402:	b480      	push	{r7}
 8001404:	b087      	sub	sp, #28
 8001406:	af00      	add	r7, sp, #0
 8001408:	60f8      	str	r0, [r7, #12]
 800140a:	60b9      	str	r1, [r7, #8]
 800140c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	3360      	adds	r3, #96	@ 0x60
 8001412:	461a      	mov	r2, r3
 8001414:	68bb      	ldr	r3, [r7, #8]
 8001416:	009b      	lsls	r3, r3, #2
 8001418:	4413      	add	r3, r2
 800141a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	431a      	orrs	r2, r3
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800142c:	bf00      	nop
 800142e:	371c      	adds	r7, #28
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr

08001438 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001438:	b480      	push	{r7}
 800143a:	b087      	sub	sp, #28
 800143c:	af00      	add	r7, sp, #0
 800143e:	60f8      	str	r0, [r7, #12]
 8001440:	60b9      	str	r1, [r7, #8]
 8001442:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	3360      	adds	r3, #96	@ 0x60
 8001448:	461a      	mov	r2, r3
 800144a:	68bb      	ldr	r3, [r7, #8]
 800144c:	009b      	lsls	r3, r3, #2
 800144e:	4413      	add	r3, r2
 8001450:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	431a      	orrs	r2, r3
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001462:	bf00      	nop
 8001464:	371c      	adds	r7, #28
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr

0800146e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800146e:	b480      	push	{r7}
 8001470:	b083      	sub	sp, #12
 8001472:	af00      	add	r7, sp, #0
 8001474:	6078      	str	r0, [r7, #4]
 8001476:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	695b      	ldr	r3, [r3, #20]
 800147c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	431a      	orrs	r2, r3
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	615a      	str	r2, [r3, #20]
}
 8001488:	bf00      	nop
 800148a:	370c      	adds	r7, #12
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr

08001494 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	68db      	ldr	r3, [r3, #12]
 80014a0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d101      	bne.n	80014ac <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80014a8:	2301      	movs	r3, #1
 80014aa:	e000      	b.n	80014ae <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80014ac:	2300      	movs	r3, #0
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	370c      	adds	r7, #12
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr

080014ba <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80014ba:	b480      	push	{r7}
 80014bc:	b087      	sub	sp, #28
 80014be:	af00      	add	r7, sp, #0
 80014c0:	60f8      	str	r0, [r7, #12]
 80014c2:	60b9      	str	r1, [r7, #8]
 80014c4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	3330      	adds	r3, #48	@ 0x30
 80014ca:	461a      	mov	r2, r3
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	0a1b      	lsrs	r3, r3, #8
 80014d0:	009b      	lsls	r3, r3, #2
 80014d2:	f003 030c 	and.w	r3, r3, #12
 80014d6:	4413      	add	r3, r2
 80014d8:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	68bb      	ldr	r3, [r7, #8]
 80014e0:	f003 031f 	and.w	r3, r3, #31
 80014e4:	211f      	movs	r1, #31
 80014e6:	fa01 f303 	lsl.w	r3, r1, r3
 80014ea:	43db      	mvns	r3, r3
 80014ec:	401a      	ands	r2, r3
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	0e9b      	lsrs	r3, r3, #26
 80014f2:	f003 011f 	and.w	r1, r3, #31
 80014f6:	68bb      	ldr	r3, [r7, #8]
 80014f8:	f003 031f 	and.w	r3, r3, #31
 80014fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001500:	431a      	orrs	r2, r3
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001506:	bf00      	nop
 8001508:	371c      	adds	r7, #28
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr

08001512 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001512:	b480      	push	{r7}
 8001514:	b087      	sub	sp, #28
 8001516:	af00      	add	r7, sp, #0
 8001518:	60f8      	str	r0, [r7, #12]
 800151a:	60b9      	str	r1, [r7, #8]
 800151c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	3314      	adds	r3, #20
 8001522:	461a      	mov	r2, r3
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	0e5b      	lsrs	r3, r3, #25
 8001528:	009b      	lsls	r3, r3, #2
 800152a:	f003 0304 	and.w	r3, r3, #4
 800152e:	4413      	add	r3, r2
 8001530:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	68bb      	ldr	r3, [r7, #8]
 8001538:	0d1b      	lsrs	r3, r3, #20
 800153a:	f003 031f 	and.w	r3, r3, #31
 800153e:	2107      	movs	r1, #7
 8001540:	fa01 f303 	lsl.w	r3, r1, r3
 8001544:	43db      	mvns	r3, r3
 8001546:	401a      	ands	r2, r3
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	0d1b      	lsrs	r3, r3, #20
 800154c:	f003 031f 	and.w	r3, r3, #31
 8001550:	6879      	ldr	r1, [r7, #4]
 8001552:	fa01 f303 	lsl.w	r3, r1, r3
 8001556:	431a      	orrs	r2, r3
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800155c:	bf00      	nop
 800155e:	371c      	adds	r7, #28
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr

08001568 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001568:	b480      	push	{r7}
 800156a:	b085      	sub	sp, #20
 800156c:	af00      	add	r7, sp, #0
 800156e:	60f8      	str	r0, [r7, #12]
 8001570:	60b9      	str	r1, [r7, #8]
 8001572:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800157a:	68bb      	ldr	r3, [r7, #8]
 800157c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001580:	43db      	mvns	r3, r3
 8001582:	401a      	ands	r2, r3
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	f003 0318 	and.w	r3, r3, #24
 800158a:	4908      	ldr	r1, [pc, #32]	@ (80015ac <LL_ADC_SetChannelSingleDiff+0x44>)
 800158c:	40d9      	lsrs	r1, r3
 800158e:	68bb      	ldr	r3, [r7, #8]
 8001590:	400b      	ands	r3, r1
 8001592:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001596:	431a      	orrs	r2, r3
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800159e:	bf00      	nop
 80015a0:	3714      	adds	r7, #20
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr
 80015aa:	bf00      	nop
 80015ac:	0007ffff 	.word	0x0007ffff

080015b0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	689b      	ldr	r3, [r3, #8]
 80015bc:	f003 031f 	and.w	r3, r3, #31
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	370c      	adds	r7, #12
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr

080015cc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b083      	sub	sp, #12
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80015dc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80015e0:	687a      	ldr	r2, [r7, #4]
 80015e2:	6093      	str	r3, [r2, #8]
}
 80015e4:	bf00      	nop
 80015e6:	370c      	adds	r7, #12
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr

080015f0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	689b      	ldr	r3, [r3, #8]
 80015fc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001600:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001604:	d101      	bne.n	800160a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001606:	2301      	movs	r3, #1
 8001608:	e000      	b.n	800160c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800160a:	2300      	movs	r3, #0
}
 800160c:	4618      	mov	r0, r3
 800160e:	370c      	adds	r7, #12
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr

08001618 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	689b      	ldr	r3, [r3, #8]
 8001624:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001628:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800162c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001634:	bf00      	nop
 8001636:	370c      	adds	r7, #12
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr

08001640 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	689b      	ldr	r3, [r3, #8]
 800164c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001650:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001654:	d101      	bne.n	800165a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001656:	2301      	movs	r3, #1
 8001658:	e000      	b.n	800165c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800165a:	2300      	movs	r3, #0
}
 800165c:	4618      	mov	r0, r3
 800165e:	370c      	adds	r7, #12
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr

08001668 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	689b      	ldr	r3, [r3, #8]
 8001674:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001678:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800167c:	f043 0201 	orr.w	r2, r3, #1
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001684:	bf00      	nop
 8001686:	370c      	adds	r7, #12
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr

08001690 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80016a0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80016a4:	f043 0202 	orr.w	r2, r3, #2
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80016ac:	bf00      	nop
 80016ae:	370c      	adds	r7, #12
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr

080016b8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	f003 0301 	and.w	r3, r3, #1
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	d101      	bne.n	80016d0 <LL_ADC_IsEnabled+0x18>
 80016cc:	2301      	movs	r3, #1
 80016ce:	e000      	b.n	80016d2 <LL_ADC_IsEnabled+0x1a>
 80016d0:	2300      	movs	r3, #0
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	370c      	adds	r7, #12
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr

080016de <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80016de:	b480      	push	{r7}
 80016e0:	b083      	sub	sp, #12
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	689b      	ldr	r3, [r3, #8]
 80016ea:	f003 0302 	and.w	r3, r3, #2
 80016ee:	2b02      	cmp	r3, #2
 80016f0:	d101      	bne.n	80016f6 <LL_ADC_IsDisableOngoing+0x18>
 80016f2:	2301      	movs	r3, #1
 80016f4:	e000      	b.n	80016f8 <LL_ADC_IsDisableOngoing+0x1a>
 80016f6:	2300      	movs	r3, #0
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	370c      	adds	r7, #12
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr

08001704 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	689b      	ldr	r3, [r3, #8]
 8001710:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001714:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001718:	f043 0204 	orr.w	r2, r3, #4
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001720:	bf00      	nop
 8001722:	370c      	adds	r7, #12
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr

0800172c <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800173c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001740:	f043 0210 	orr.w	r2, r3, #16
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001748:	bf00      	nop
 800174a:	370c      	adds	r7, #12
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr

08001754 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	f003 0304 	and.w	r3, r3, #4
 8001764:	2b04      	cmp	r3, #4
 8001766:	d101      	bne.n	800176c <LL_ADC_REG_IsConversionOngoing+0x18>
 8001768:	2301      	movs	r3, #1
 800176a:	e000      	b.n	800176e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800176c:	2300      	movs	r3, #0
}
 800176e:	4618      	mov	r0, r3
 8001770:	370c      	adds	r7, #12
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr

0800177a <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800177a:	b480      	push	{r7}
 800177c:	b083      	sub	sp, #12
 800177e:	af00      	add	r7, sp, #0
 8001780:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800178a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800178e:	f043 0220 	orr.w	r2, r3, #32
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8001796:	bf00      	nop
 8001798:	370c      	adds	r7, #12
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr

080017a2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80017a2:	b480      	push	{r7}
 80017a4:	b083      	sub	sp, #12
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	689b      	ldr	r3, [r3, #8]
 80017ae:	f003 0308 	and.w	r3, r3, #8
 80017b2:	2b08      	cmp	r3, #8
 80017b4:	d101      	bne.n	80017ba <LL_ADC_INJ_IsConversionOngoing+0x18>
 80017b6:	2301      	movs	r3, #1
 80017b8:	e000      	b.n	80017bc <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80017ba:	2300      	movs	r3, #0
}
 80017bc:	4618      	mov	r0, r3
 80017be:	370c      	adds	r7, #12
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr

080017c8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80017c8:	b590      	push	{r4, r7, lr}
 80017ca:	b089      	sub	sp, #36	@ 0x24
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017d0:	2300      	movs	r3, #0
 80017d2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80017d4:	2300      	movs	r3, #0
 80017d6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d101      	bne.n	80017e2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	e1a9      	b.n	8001b36 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	695b      	ldr	r3, [r3, #20]
 80017e6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d109      	bne.n	8001804 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80017f0:	6878      	ldr	r0, [r7, #4]
 80017f2:	f7ff f87d 	bl	80008f0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2200      	movs	r2, #0
 80017fa:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2200      	movs	r2, #0
 8001800:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4618      	mov	r0, r3
 800180a:	f7ff fef1 	bl	80015f0 <LL_ADC_IsDeepPowerDownEnabled>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d004      	beq.n	800181e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4618      	mov	r0, r3
 800181a:	f7ff fed7 	bl	80015cc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4618      	mov	r0, r3
 8001824:	f7ff ff0c 	bl	8001640 <LL_ADC_IsInternalRegulatorEnabled>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d115      	bne.n	800185a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4618      	mov	r0, r3
 8001834:	f7ff fef0 	bl	8001618 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001838:	4b9c      	ldr	r3, [pc, #624]	@ (8001aac <HAL_ADC_Init+0x2e4>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	099b      	lsrs	r3, r3, #6
 800183e:	4a9c      	ldr	r2, [pc, #624]	@ (8001ab0 <HAL_ADC_Init+0x2e8>)
 8001840:	fba2 2303 	umull	r2, r3, r2, r3
 8001844:	099b      	lsrs	r3, r3, #6
 8001846:	3301      	adds	r3, #1
 8001848:	005b      	lsls	r3, r3, #1
 800184a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800184c:	e002      	b.n	8001854 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	3b01      	subs	r3, #1
 8001852:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d1f9      	bne.n	800184e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4618      	mov	r0, r3
 8001860:	f7ff feee 	bl	8001640 <LL_ADC_IsInternalRegulatorEnabled>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d10d      	bne.n	8001886 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800186e:	f043 0210 	orr.w	r2, r3, #16
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800187a:	f043 0201 	orr.w	r2, r3, #1
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4618      	mov	r0, r3
 800188c:	f7ff ff62 	bl	8001754 <LL_ADC_REG_IsConversionOngoing>
 8001890:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001896:	f003 0310 	and.w	r3, r3, #16
 800189a:	2b00      	cmp	r3, #0
 800189c:	f040 8142 	bne.w	8001b24 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	f040 813e 	bne.w	8001b24 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018ac:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80018b0:	f043 0202 	orr.w	r2, r3, #2
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4618      	mov	r0, r3
 80018be:	f7ff fefb 	bl	80016b8 <LL_ADC_IsEnabled>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d141      	bne.n	800194c <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80018d0:	d004      	beq.n	80018dc <HAL_ADC_Init+0x114>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a77      	ldr	r2, [pc, #476]	@ (8001ab4 <HAL_ADC_Init+0x2ec>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d10f      	bne.n	80018fc <HAL_ADC_Init+0x134>
 80018dc:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80018e0:	f7ff feea 	bl	80016b8 <LL_ADC_IsEnabled>
 80018e4:	4604      	mov	r4, r0
 80018e6:	4873      	ldr	r0, [pc, #460]	@ (8001ab4 <HAL_ADC_Init+0x2ec>)
 80018e8:	f7ff fee6 	bl	80016b8 <LL_ADC_IsEnabled>
 80018ec:	4603      	mov	r3, r0
 80018ee:	4323      	orrs	r3, r4
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	bf0c      	ite	eq
 80018f4:	2301      	moveq	r3, #1
 80018f6:	2300      	movne	r3, #0
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	e012      	b.n	8001922 <HAL_ADC_Init+0x15a>
 80018fc:	486e      	ldr	r0, [pc, #440]	@ (8001ab8 <HAL_ADC_Init+0x2f0>)
 80018fe:	f7ff fedb 	bl	80016b8 <LL_ADC_IsEnabled>
 8001902:	4604      	mov	r4, r0
 8001904:	486d      	ldr	r0, [pc, #436]	@ (8001abc <HAL_ADC_Init+0x2f4>)
 8001906:	f7ff fed7 	bl	80016b8 <LL_ADC_IsEnabled>
 800190a:	4603      	mov	r3, r0
 800190c:	431c      	orrs	r4, r3
 800190e:	486c      	ldr	r0, [pc, #432]	@ (8001ac0 <HAL_ADC_Init+0x2f8>)
 8001910:	f7ff fed2 	bl	80016b8 <LL_ADC_IsEnabled>
 8001914:	4603      	mov	r3, r0
 8001916:	4323      	orrs	r3, r4
 8001918:	2b00      	cmp	r3, #0
 800191a:	bf0c      	ite	eq
 800191c:	2301      	moveq	r3, #1
 800191e:	2300      	movne	r3, #0
 8001920:	b2db      	uxtb	r3, r3
 8001922:	2b00      	cmp	r3, #0
 8001924:	d012      	beq.n	800194c <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800192e:	d004      	beq.n	800193a <HAL_ADC_Init+0x172>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a5f      	ldr	r2, [pc, #380]	@ (8001ab4 <HAL_ADC_Init+0x2ec>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d101      	bne.n	800193e <HAL_ADC_Init+0x176>
 800193a:	4a62      	ldr	r2, [pc, #392]	@ (8001ac4 <HAL_ADC_Init+0x2fc>)
 800193c:	e000      	b.n	8001940 <HAL_ADC_Init+0x178>
 800193e:	4a62      	ldr	r2, [pc, #392]	@ (8001ac8 <HAL_ADC_Init+0x300>)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	4619      	mov	r1, r3
 8001946:	4610      	mov	r0, r2
 8001948:	f7ff fcd2 	bl	80012f0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	7f5b      	ldrb	r3, [r3, #29]
 8001950:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001956:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800195c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001962:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800196a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800196c:	4313      	orrs	r3, r2
 800196e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001976:	2b01      	cmp	r3, #1
 8001978:	d106      	bne.n	8001988 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800197e:	3b01      	subs	r3, #1
 8001980:	045b      	lsls	r3, r3, #17
 8001982:	69ba      	ldr	r2, [r7, #24]
 8001984:	4313      	orrs	r3, r2
 8001986:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800198c:	2b00      	cmp	r3, #0
 800198e:	d009      	beq.n	80019a4 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001994:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800199c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800199e:	69ba      	ldr	r2, [r7, #24]
 80019a0:	4313      	orrs	r3, r2
 80019a2:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	68da      	ldr	r2, [r3, #12]
 80019aa:	4b48      	ldr	r3, [pc, #288]	@ (8001acc <HAL_ADC_Init+0x304>)
 80019ac:	4013      	ands	r3, r2
 80019ae:	687a      	ldr	r2, [r7, #4]
 80019b0:	6812      	ldr	r2, [r2, #0]
 80019b2:	69b9      	ldr	r1, [r7, #24]
 80019b4:	430b      	orrs	r3, r1
 80019b6:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	691b      	ldr	r3, [r3, #16]
 80019be:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	430a      	orrs	r2, r1
 80019cc:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4618      	mov	r0, r3
 80019d4:	f7ff fee5 	bl	80017a2 <LL_ADC_INJ_IsConversionOngoing>
 80019d8:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d17f      	bne.n	8001ae0 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d17c      	bne.n	8001ae0 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80019ea:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80019f2:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80019f4:	4313      	orrs	r3, r2
 80019f6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	68db      	ldr	r3, [r3, #12]
 80019fe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001a02:	f023 0302 	bic.w	r3, r3, #2
 8001a06:	687a      	ldr	r2, [r7, #4]
 8001a08:	6812      	ldr	r2, [r2, #0]
 8001a0a:	69b9      	ldr	r1, [r7, #24]
 8001a0c:	430b      	orrs	r3, r1
 8001a0e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	691b      	ldr	r3, [r3, #16]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d017      	beq.n	8001a48 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	691a      	ldr	r2, [r3, #16]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001a26:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001a30:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001a34:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001a38:	687a      	ldr	r2, [r7, #4]
 8001a3a:	6911      	ldr	r1, [r2, #16]
 8001a3c:	687a      	ldr	r2, [r7, #4]
 8001a3e:	6812      	ldr	r2, [r2, #0]
 8001a40:	430b      	orrs	r3, r1
 8001a42:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8001a46:	e013      	b.n	8001a70 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	691a      	ldr	r2, [r3, #16]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001a56:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001a60:	687a      	ldr	r2, [r7, #4]
 8001a62:	6812      	ldr	r2, [r2, #0]
 8001a64:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001a68:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001a6c:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d12a      	bne.n	8001ad0 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	691b      	ldr	r3, [r3, #16]
 8001a80:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001a84:	f023 0304 	bic.w	r3, r3, #4
 8001a88:	687a      	ldr	r2, [r7, #4]
 8001a8a:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8001a8c:	687a      	ldr	r2, [r7, #4]
 8001a8e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001a90:	4311      	orrs	r1, r2
 8001a92:	687a      	ldr	r2, [r7, #4]
 8001a94:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001a96:	4311      	orrs	r1, r2
 8001a98:	687a      	ldr	r2, [r7, #4]
 8001a9a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001a9c:	430a      	orrs	r2, r1
 8001a9e:	431a      	orrs	r2, r3
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f042 0201 	orr.w	r2, r2, #1
 8001aa8:	611a      	str	r2, [r3, #16]
 8001aaa:	e019      	b.n	8001ae0 <HAL_ADC_Init+0x318>
 8001aac:	20000000 	.word	0x20000000
 8001ab0:	053e2d63 	.word	0x053e2d63
 8001ab4:	50000100 	.word	0x50000100
 8001ab8:	50000400 	.word	0x50000400
 8001abc:	50000500 	.word	0x50000500
 8001ac0:	50000600 	.word	0x50000600
 8001ac4:	50000300 	.word	0x50000300
 8001ac8:	50000700 	.word	0x50000700
 8001acc:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	691a      	ldr	r2, [r3, #16]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f022 0201 	bic.w	r2, r2, #1
 8001ade:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	695b      	ldr	r3, [r3, #20]
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	d10c      	bne.n	8001b02 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aee:	f023 010f 	bic.w	r1, r3, #15
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6a1b      	ldr	r3, [r3, #32]
 8001af6:	1e5a      	subs	r2, r3, #1
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	430a      	orrs	r2, r1
 8001afe:	631a      	str	r2, [r3, #48]	@ 0x30
 8001b00:	e007      	b.n	8001b12 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f022 020f 	bic.w	r2, r2, #15
 8001b10:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b16:	f023 0303 	bic.w	r3, r3, #3
 8001b1a:	f043 0201 	orr.w	r2, r3, #1
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001b22:	e007      	b.n	8001b34 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b28:	f043 0210 	orr.w	r2, r3, #16
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001b34:	7ffb      	ldrb	r3, [r7, #31]
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3724      	adds	r7, #36	@ 0x24
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd90      	pop	{r4, r7, pc}
 8001b3e:	bf00      	nop

08001b40 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b086      	sub	sp, #24
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001b50:	d004      	beq.n	8001b5c <HAL_ADC_Start+0x1c>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a67      	ldr	r2, [pc, #412]	@ (8001cf4 <HAL_ADC_Start+0x1b4>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d101      	bne.n	8001b60 <HAL_ADC_Start+0x20>
 8001b5c:	4b66      	ldr	r3, [pc, #408]	@ (8001cf8 <HAL_ADC_Start+0x1b8>)
 8001b5e:	e000      	b.n	8001b62 <HAL_ADC_Start+0x22>
 8001b60:	4b66      	ldr	r3, [pc, #408]	@ (8001cfc <HAL_ADC_Start+0x1bc>)
 8001b62:	4618      	mov	r0, r3
 8001b64:	f7ff fd24 	bl	80015b0 <LL_ADC_GetMultimode>
 8001b68:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f7ff fdf0 	bl	8001754 <LL_ADC_REG_IsConversionOngoing>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	f040 80b4 	bne.w	8001ce4 <HAL_ADC_Start+0x1a4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d101      	bne.n	8001b8a <HAL_ADC_Start+0x4a>
 8001b86:	2302      	movs	r3, #2
 8001b88:	e0af      	b.n	8001cea <HAL_ADC_Start+0x1aa>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	f000 fdfc 	bl	8002790 <ADC_Enable>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001b9c:	7dfb      	ldrb	r3, [r7, #23]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	f040 809b 	bne.w	8001cda <HAL_ADC_Start+0x19a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ba8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001bac:	f023 0301 	bic.w	r3, r3, #1
 8001bb0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a4d      	ldr	r2, [pc, #308]	@ (8001cf4 <HAL_ADC_Start+0x1b4>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d009      	beq.n	8001bd6 <HAL_ADC_Start+0x96>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a4e      	ldr	r2, [pc, #312]	@ (8001d00 <HAL_ADC_Start+0x1c0>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d002      	beq.n	8001bd2 <HAL_ADC_Start+0x92>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	e003      	b.n	8001bda <HAL_ADC_Start+0x9a>
 8001bd2:	4b4c      	ldr	r3, [pc, #304]	@ (8001d04 <HAL_ADC_Start+0x1c4>)
 8001bd4:	e001      	b.n	8001bda <HAL_ADC_Start+0x9a>
 8001bd6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001bda:	687a      	ldr	r2, [r7, #4]
 8001bdc:	6812      	ldr	r2, [r2, #0]
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d002      	beq.n	8001be8 <HAL_ADC_Start+0xa8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d105      	bne.n	8001bf4 <HAL_ADC_Start+0xb4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bec:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bf8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001bfc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001c00:	d106      	bne.n	8001c10 <HAL_ADC_Start+0xd0>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c06:	f023 0206 	bic.w	r2, r3, #6
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	661a      	str	r2, [r3, #96]	@ 0x60
 8001c0e:	e002      	b.n	8001c16 <HAL_ADC_Start+0xd6>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2200      	movs	r2, #0
 8001c14:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	221c      	movs	r2, #28
 8001c1c:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2200      	movs	r2, #0
 8001c22:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a32      	ldr	r2, [pc, #200]	@ (8001cf4 <HAL_ADC_Start+0x1b4>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d009      	beq.n	8001c44 <HAL_ADC_Start+0x104>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a32      	ldr	r2, [pc, #200]	@ (8001d00 <HAL_ADC_Start+0x1c0>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d002      	beq.n	8001c40 <HAL_ADC_Start+0x100>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	e003      	b.n	8001c48 <HAL_ADC_Start+0x108>
 8001c40:	4b30      	ldr	r3, [pc, #192]	@ (8001d04 <HAL_ADC_Start+0x1c4>)
 8001c42:	e001      	b.n	8001c48 <HAL_ADC_Start+0x108>
 8001c44:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001c48:	687a      	ldr	r2, [r7, #4]
 8001c4a:	6812      	ldr	r2, [r2, #0]
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d008      	beq.n	8001c62 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d005      	beq.n	8001c62 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	2b05      	cmp	r3, #5
 8001c5a:	d002      	beq.n	8001c62 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	2b09      	cmp	r3, #9
 8001c60:	d114      	bne.n	8001c8c <HAL_ADC_Start+0x14c>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	68db      	ldr	r3, [r3, #12]
 8001c68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d007      	beq.n	8001c80 <HAL_ADC_Start+0x140>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c74:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001c78:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4618      	mov	r0, r3
 8001c86:	f7ff fd3d 	bl	8001704 <LL_ADC_REG_StartConversion>
 8001c8a:	e02d      	b.n	8001ce8 <HAL_ADC_Start+0x1a8>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c90:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a15      	ldr	r2, [pc, #84]	@ (8001cf4 <HAL_ADC_Start+0x1b4>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d009      	beq.n	8001cb6 <HAL_ADC_Start+0x176>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a16      	ldr	r2, [pc, #88]	@ (8001d00 <HAL_ADC_Start+0x1c0>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d002      	beq.n	8001cb2 <HAL_ADC_Start+0x172>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	e003      	b.n	8001cba <HAL_ADC_Start+0x17a>
 8001cb2:	4b14      	ldr	r3, [pc, #80]	@ (8001d04 <HAL_ADC_Start+0x1c4>)
 8001cb4:	e001      	b.n	8001cba <HAL_ADC_Start+0x17a>
 8001cb6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001cba:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d00f      	beq.n	8001ce8 <HAL_ADC_Start+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ccc:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001cd0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001cd8:	e006      	b.n	8001ce8 <HAL_ADC_Start+0x1a8>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8001ce2:	e001      	b.n	8001ce8 <HAL_ADC_Start+0x1a8>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001ce4:	2302      	movs	r3, #2
 8001ce6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001ce8:	7dfb      	ldrb	r3, [r7, #23]
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3718      	adds	r7, #24
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	50000100 	.word	0x50000100
 8001cf8:	50000300 	.word	0x50000300
 8001cfc:	50000700 	.word	0x50000700
 8001d00:	50000500 	.word	0x50000500
 8001d04:	50000400 	.word	0x50000400

08001d08 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b084      	sub	sp, #16
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d101      	bne.n	8001d1e <HAL_ADC_Stop+0x16>
 8001d1a:	2302      	movs	r3, #2
 8001d1c:	e023      	b.n	8001d66 <HAL_ADC_Stop+0x5e>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2201      	movs	r2, #1
 8001d22:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001d26:	2103      	movs	r1, #3
 8001d28:	6878      	ldr	r0, [r7, #4]
 8001d2a:	f000 fc75 	bl	8002618 <ADC_ConversionStop>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001d32:	7bfb      	ldrb	r3, [r7, #15]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d111      	bne.n	8001d5c <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001d38:	6878      	ldr	r0, [r7, #4]
 8001d3a:	f000 fdbf 	bl	80028bc <ADC_Disable>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001d42:	7bfb      	ldrb	r3, [r7, #15]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d109      	bne.n	8001d5c <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d4c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001d50:	f023 0301 	bic.w	r3, r3, #1
 8001d54:	f043 0201 	orr.w	r2, r3, #1
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	65da      	str	r2, [r3, #92]	@ 0x5c
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2200      	movs	r2, #0
 8001d60:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8001d64:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3710      	adds	r7, #16
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}

08001d6e <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001d6e:	b480      	push	{r7}
 8001d70:	b083      	sub	sp, #12
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001d76:	bf00      	nop
 8001d78:	370c      	adds	r7, #12
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr

08001d82 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001d82:	b480      	push	{r7}
 8001d84:	b083      	sub	sp, #12
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001d8a:	bf00      	nop
 8001d8c:	370c      	adds	r7, #12
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
	...

08001d98 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b0b6      	sub	sp, #216	@ 0xd8
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
 8001da0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001da2:	2300      	movs	r3, #0
 8001da4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001da8:	2300      	movs	r3, #0
 8001daa:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d102      	bne.n	8001dbc <HAL_ADC_ConfigChannel+0x24>
 8001db6:	2302      	movs	r3, #2
 8001db8:	f000 bc13 	b.w	80025e2 <HAL_ADC_ConfigChannel+0x84a>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f7ff fcc3 	bl	8001754 <LL_ADC_REG_IsConversionOngoing>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	f040 83f3 	bne.w	80025bc <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6818      	ldr	r0, [r3, #0]
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	6859      	ldr	r1, [r3, #4]
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	461a      	mov	r2, r3
 8001de4:	f7ff fb69 	bl	80014ba <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4618      	mov	r0, r3
 8001dee:	f7ff fcb1 	bl	8001754 <LL_ADC_REG_IsConversionOngoing>
 8001df2:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f7ff fcd1 	bl	80017a2 <LL_ADC_INJ_IsConversionOngoing>
 8001e00:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e04:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	f040 81d9 	bne.w	80021c0 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001e0e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	f040 81d4 	bne.w	80021c0 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001e20:	d10f      	bne.n	8001e42 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6818      	ldr	r0, [r3, #0]
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	f7ff fb70 	bl	8001512 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f7ff fb17 	bl	800146e <LL_ADC_SetSamplingTimeCommonConfig>
 8001e40:	e00e      	b.n	8001e60 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6818      	ldr	r0, [r3, #0]
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	6819      	ldr	r1, [r3, #0]
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	461a      	mov	r2, r3
 8001e50:	f7ff fb5f 	bl	8001512 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	2100      	movs	r1, #0
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f7ff fb07 	bl	800146e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	695a      	ldr	r2, [r3, #20]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	68db      	ldr	r3, [r3, #12]
 8001e6a:	08db      	lsrs	r3, r3, #3
 8001e6c:	f003 0303 	and.w	r3, r3, #3
 8001e70:	005b      	lsls	r3, r3, #1
 8001e72:	fa02 f303 	lsl.w	r3, r2, r3
 8001e76:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	691b      	ldr	r3, [r3, #16]
 8001e7e:	2b04      	cmp	r3, #4
 8001e80:	d022      	beq.n	8001ec8 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6818      	ldr	r0, [r3, #0]
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	6919      	ldr	r1, [r3, #16]
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001e92:	f7ff fa61 	bl	8001358 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6818      	ldr	r0, [r3, #0]
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	6919      	ldr	r1, [r3, #16]
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	699b      	ldr	r3, [r3, #24]
 8001ea2:	461a      	mov	r2, r3
 8001ea4:	f7ff faad 	bl	8001402 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6818      	ldr	r0, [r3, #0]
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001eb4:	2b01      	cmp	r3, #1
 8001eb6:	d102      	bne.n	8001ebe <HAL_ADC_ConfigChannel+0x126>
 8001eb8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001ebc:	e000      	b.n	8001ec0 <HAL_ADC_ConfigChannel+0x128>
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	f7ff fab9 	bl	8001438 <LL_ADC_SetOffsetSaturation>
 8001ec6:	e17b      	b.n	80021c0 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	2100      	movs	r1, #0
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f7ff fa66 	bl	80013a0 <LL_ADC_GetOffsetChannel>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d10a      	bne.n	8001ef4 <HAL_ADC_ConfigChannel+0x15c>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	2100      	movs	r1, #0
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f7ff fa5b 	bl	80013a0 <LL_ADC_GetOffsetChannel>
 8001eea:	4603      	mov	r3, r0
 8001eec:	0e9b      	lsrs	r3, r3, #26
 8001eee:	f003 021f 	and.w	r2, r3, #31
 8001ef2:	e01e      	b.n	8001f32 <HAL_ADC_ConfigChannel+0x19a>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	2100      	movs	r1, #0
 8001efa:	4618      	mov	r0, r3
 8001efc:	f7ff fa50 	bl	80013a0 <LL_ADC_GetOffsetChannel>
 8001f00:	4603      	mov	r3, r0
 8001f02:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f06:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001f0a:	fa93 f3a3 	rbit	r3, r3
 8001f0e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001f12:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001f16:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001f1a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d101      	bne.n	8001f26 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8001f22:	2320      	movs	r3, #32
 8001f24:	e004      	b.n	8001f30 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8001f26:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001f2a:	fab3 f383 	clz	r3, r3
 8001f2e:	b2db      	uxtb	r3, r3
 8001f30:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d105      	bne.n	8001f4a <HAL_ADC_ConfigChannel+0x1b2>
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	0e9b      	lsrs	r3, r3, #26
 8001f44:	f003 031f 	and.w	r3, r3, #31
 8001f48:	e018      	b.n	8001f7c <HAL_ADC_ConfigChannel+0x1e4>
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f52:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001f56:	fa93 f3a3 	rbit	r3, r3
 8001f5a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8001f5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001f62:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8001f66:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d101      	bne.n	8001f72 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8001f6e:	2320      	movs	r3, #32
 8001f70:	e004      	b.n	8001f7c <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8001f72:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001f76:	fab3 f383 	clz	r3, r3
 8001f7a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	d106      	bne.n	8001f8e <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	2200      	movs	r2, #0
 8001f86:	2100      	movs	r1, #0
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f7ff fa1f 	bl	80013cc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	2101      	movs	r1, #1
 8001f94:	4618      	mov	r0, r3
 8001f96:	f7ff fa03 	bl	80013a0 <LL_ADC_GetOffsetChannel>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d10a      	bne.n	8001fba <HAL_ADC_ConfigChannel+0x222>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	2101      	movs	r1, #1
 8001faa:	4618      	mov	r0, r3
 8001fac:	f7ff f9f8 	bl	80013a0 <LL_ADC_GetOffsetChannel>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	0e9b      	lsrs	r3, r3, #26
 8001fb4:	f003 021f 	and.w	r2, r3, #31
 8001fb8:	e01e      	b.n	8001ff8 <HAL_ADC_ConfigChannel+0x260>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	2101      	movs	r1, #1
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f7ff f9ed 	bl	80013a0 <LL_ADC_GetOffsetChannel>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fcc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001fd0:	fa93 f3a3 	rbit	r3, r3
 8001fd4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8001fd8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001fdc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8001fe0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d101      	bne.n	8001fec <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8001fe8:	2320      	movs	r3, #32
 8001fea:	e004      	b.n	8001ff6 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8001fec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001ff0:	fab3 f383 	clz	r3, r3
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002000:	2b00      	cmp	r3, #0
 8002002:	d105      	bne.n	8002010 <HAL_ADC_ConfigChannel+0x278>
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	0e9b      	lsrs	r3, r3, #26
 800200a:	f003 031f 	and.w	r3, r3, #31
 800200e:	e018      	b.n	8002042 <HAL_ADC_ConfigChannel+0x2aa>
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002018:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800201c:	fa93 f3a3 	rbit	r3, r3
 8002020:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8002024:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002028:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 800202c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002030:	2b00      	cmp	r3, #0
 8002032:	d101      	bne.n	8002038 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002034:	2320      	movs	r3, #32
 8002036:	e004      	b.n	8002042 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002038:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800203c:	fab3 f383 	clz	r3, r3
 8002040:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002042:	429a      	cmp	r2, r3
 8002044:	d106      	bne.n	8002054 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	2200      	movs	r2, #0
 800204c:	2101      	movs	r1, #1
 800204e:	4618      	mov	r0, r3
 8002050:	f7ff f9bc 	bl	80013cc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	2102      	movs	r1, #2
 800205a:	4618      	mov	r0, r3
 800205c:	f7ff f9a0 	bl	80013a0 <LL_ADC_GetOffsetChannel>
 8002060:	4603      	mov	r3, r0
 8002062:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002066:	2b00      	cmp	r3, #0
 8002068:	d10a      	bne.n	8002080 <HAL_ADC_ConfigChannel+0x2e8>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	2102      	movs	r1, #2
 8002070:	4618      	mov	r0, r3
 8002072:	f7ff f995 	bl	80013a0 <LL_ADC_GetOffsetChannel>
 8002076:	4603      	mov	r3, r0
 8002078:	0e9b      	lsrs	r3, r3, #26
 800207a:	f003 021f 	and.w	r2, r3, #31
 800207e:	e01e      	b.n	80020be <HAL_ADC_ConfigChannel+0x326>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	2102      	movs	r1, #2
 8002086:	4618      	mov	r0, r3
 8002088:	f7ff f98a 	bl	80013a0 <LL_ADC_GetOffsetChannel>
 800208c:	4603      	mov	r3, r0
 800208e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002092:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002096:	fa93 f3a3 	rbit	r3, r3
 800209a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800209e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80020a2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80020a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d101      	bne.n	80020b2 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80020ae:	2320      	movs	r3, #32
 80020b0:	e004      	b.n	80020bc <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80020b2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80020b6:	fab3 f383 	clz	r3, r3
 80020ba:	b2db      	uxtb	r3, r3
 80020bc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d105      	bne.n	80020d6 <HAL_ADC_ConfigChannel+0x33e>
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	0e9b      	lsrs	r3, r3, #26
 80020d0:	f003 031f 	and.w	r3, r3, #31
 80020d4:	e016      	b.n	8002104 <HAL_ADC_ConfigChannel+0x36c>
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020de:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80020e2:	fa93 f3a3 	rbit	r3, r3
 80020e6:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80020e8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80020ea:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80020ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d101      	bne.n	80020fa <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80020f6:	2320      	movs	r3, #32
 80020f8:	e004      	b.n	8002104 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80020fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80020fe:	fab3 f383 	clz	r3, r3
 8002102:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002104:	429a      	cmp	r2, r3
 8002106:	d106      	bne.n	8002116 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	2200      	movs	r2, #0
 800210e:	2102      	movs	r1, #2
 8002110:	4618      	mov	r0, r3
 8002112:	f7ff f95b 	bl	80013cc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	2103      	movs	r1, #3
 800211c:	4618      	mov	r0, r3
 800211e:	f7ff f93f 	bl	80013a0 <LL_ADC_GetOffsetChannel>
 8002122:	4603      	mov	r3, r0
 8002124:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002128:	2b00      	cmp	r3, #0
 800212a:	d10a      	bne.n	8002142 <HAL_ADC_ConfigChannel+0x3aa>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	2103      	movs	r1, #3
 8002132:	4618      	mov	r0, r3
 8002134:	f7ff f934 	bl	80013a0 <LL_ADC_GetOffsetChannel>
 8002138:	4603      	mov	r3, r0
 800213a:	0e9b      	lsrs	r3, r3, #26
 800213c:	f003 021f 	and.w	r2, r3, #31
 8002140:	e017      	b.n	8002172 <HAL_ADC_ConfigChannel+0x3da>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	2103      	movs	r1, #3
 8002148:	4618      	mov	r0, r3
 800214a:	f7ff f929 	bl	80013a0 <LL_ADC_GetOffsetChannel>
 800214e:	4603      	mov	r3, r0
 8002150:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002152:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002154:	fa93 f3a3 	rbit	r3, r3
 8002158:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800215a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800215c:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 800215e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002160:	2b00      	cmp	r3, #0
 8002162:	d101      	bne.n	8002168 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002164:	2320      	movs	r3, #32
 8002166:	e003      	b.n	8002170 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002168:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800216a:	fab3 f383 	clz	r3, r3
 800216e:	b2db      	uxtb	r3, r3
 8002170:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800217a:	2b00      	cmp	r3, #0
 800217c:	d105      	bne.n	800218a <HAL_ADC_ConfigChannel+0x3f2>
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	0e9b      	lsrs	r3, r3, #26
 8002184:	f003 031f 	and.w	r3, r3, #31
 8002188:	e011      	b.n	80021ae <HAL_ADC_ConfigChannel+0x416>
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002190:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002192:	fa93 f3a3 	rbit	r3, r3
 8002196:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8002198:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800219a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 800219c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d101      	bne.n	80021a6 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80021a2:	2320      	movs	r3, #32
 80021a4:	e003      	b.n	80021ae <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80021a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80021a8:	fab3 f383 	clz	r3, r3
 80021ac:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80021ae:	429a      	cmp	r2, r3
 80021b0:	d106      	bne.n	80021c0 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	2200      	movs	r2, #0
 80021b8:	2103      	movs	r1, #3
 80021ba:	4618      	mov	r0, r3
 80021bc:	f7ff f906 	bl	80013cc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4618      	mov	r0, r3
 80021c6:	f7ff fa77 	bl	80016b8 <LL_ADC_IsEnabled>
 80021ca:	4603      	mov	r3, r0
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	f040 813d 	bne.w	800244c <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6818      	ldr	r0, [r3, #0]
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	6819      	ldr	r1, [r3, #0]
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	68db      	ldr	r3, [r3, #12]
 80021de:	461a      	mov	r2, r3
 80021e0:	f7ff f9c2 	bl	8001568 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	68db      	ldr	r3, [r3, #12]
 80021e8:	4aa2      	ldr	r2, [pc, #648]	@ (8002474 <HAL_ADC_ConfigChannel+0x6dc>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	f040 812e 	bne.w	800244c <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d10b      	bne.n	8002218 <HAL_ADC_ConfigChannel+0x480>
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	0e9b      	lsrs	r3, r3, #26
 8002206:	3301      	adds	r3, #1
 8002208:	f003 031f 	and.w	r3, r3, #31
 800220c:	2b09      	cmp	r3, #9
 800220e:	bf94      	ite	ls
 8002210:	2301      	movls	r3, #1
 8002212:	2300      	movhi	r3, #0
 8002214:	b2db      	uxtb	r3, r3
 8002216:	e019      	b.n	800224c <HAL_ADC_ConfigChannel+0x4b4>
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800221e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002220:	fa93 f3a3 	rbit	r3, r3
 8002224:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8002226:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002228:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800222a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800222c:	2b00      	cmp	r3, #0
 800222e:	d101      	bne.n	8002234 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002230:	2320      	movs	r3, #32
 8002232:	e003      	b.n	800223c <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002234:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002236:	fab3 f383 	clz	r3, r3
 800223a:	b2db      	uxtb	r3, r3
 800223c:	3301      	adds	r3, #1
 800223e:	f003 031f 	and.w	r3, r3, #31
 8002242:	2b09      	cmp	r3, #9
 8002244:	bf94      	ite	ls
 8002246:	2301      	movls	r3, #1
 8002248:	2300      	movhi	r3, #0
 800224a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800224c:	2b00      	cmp	r3, #0
 800224e:	d079      	beq.n	8002344 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002258:	2b00      	cmp	r3, #0
 800225a:	d107      	bne.n	800226c <HAL_ADC_ConfigChannel+0x4d4>
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	0e9b      	lsrs	r3, r3, #26
 8002262:	3301      	adds	r3, #1
 8002264:	069b      	lsls	r3, r3, #26
 8002266:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800226a:	e015      	b.n	8002298 <HAL_ADC_ConfigChannel+0x500>
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002272:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002274:	fa93 f3a3 	rbit	r3, r3
 8002278:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800227a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800227c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800227e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002280:	2b00      	cmp	r3, #0
 8002282:	d101      	bne.n	8002288 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002284:	2320      	movs	r3, #32
 8002286:	e003      	b.n	8002290 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002288:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800228a:	fab3 f383 	clz	r3, r3
 800228e:	b2db      	uxtb	r3, r3
 8002290:	3301      	adds	r3, #1
 8002292:	069b      	lsls	r3, r3, #26
 8002294:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d109      	bne.n	80022b8 <HAL_ADC_ConfigChannel+0x520>
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	0e9b      	lsrs	r3, r3, #26
 80022aa:	3301      	adds	r3, #1
 80022ac:	f003 031f 	and.w	r3, r3, #31
 80022b0:	2101      	movs	r1, #1
 80022b2:	fa01 f303 	lsl.w	r3, r1, r3
 80022b6:	e017      	b.n	80022e8 <HAL_ADC_ConfigChannel+0x550>
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80022c0:	fa93 f3a3 	rbit	r3, r3
 80022c4:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80022c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80022c8:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80022ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d101      	bne.n	80022d4 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80022d0:	2320      	movs	r3, #32
 80022d2:	e003      	b.n	80022dc <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80022d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80022d6:	fab3 f383 	clz	r3, r3
 80022da:	b2db      	uxtb	r3, r3
 80022dc:	3301      	adds	r3, #1
 80022de:	f003 031f 	and.w	r3, r3, #31
 80022e2:	2101      	movs	r1, #1
 80022e4:	fa01 f303 	lsl.w	r3, r1, r3
 80022e8:	ea42 0103 	orr.w	r1, r2, r3
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d10a      	bne.n	800230e <HAL_ADC_ConfigChannel+0x576>
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	0e9b      	lsrs	r3, r3, #26
 80022fe:	3301      	adds	r3, #1
 8002300:	f003 021f 	and.w	r2, r3, #31
 8002304:	4613      	mov	r3, r2
 8002306:	005b      	lsls	r3, r3, #1
 8002308:	4413      	add	r3, r2
 800230a:	051b      	lsls	r3, r3, #20
 800230c:	e018      	b.n	8002340 <HAL_ADC_ConfigChannel+0x5a8>
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002314:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002316:	fa93 f3a3 	rbit	r3, r3
 800231a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800231c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800231e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002320:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002322:	2b00      	cmp	r3, #0
 8002324:	d101      	bne.n	800232a <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8002326:	2320      	movs	r3, #32
 8002328:	e003      	b.n	8002332 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800232a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800232c:	fab3 f383 	clz	r3, r3
 8002330:	b2db      	uxtb	r3, r3
 8002332:	3301      	adds	r3, #1
 8002334:	f003 021f 	and.w	r2, r3, #31
 8002338:	4613      	mov	r3, r2
 800233a:	005b      	lsls	r3, r3, #1
 800233c:	4413      	add	r3, r2
 800233e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002340:	430b      	orrs	r3, r1
 8002342:	e07e      	b.n	8002442 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800234c:	2b00      	cmp	r3, #0
 800234e:	d107      	bne.n	8002360 <HAL_ADC_ConfigChannel+0x5c8>
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	0e9b      	lsrs	r3, r3, #26
 8002356:	3301      	adds	r3, #1
 8002358:	069b      	lsls	r3, r3, #26
 800235a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800235e:	e015      	b.n	800238c <HAL_ADC_ConfigChannel+0x5f4>
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002366:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002368:	fa93 f3a3 	rbit	r3, r3
 800236c:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800236e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002370:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8002372:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002374:	2b00      	cmp	r3, #0
 8002376:	d101      	bne.n	800237c <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002378:	2320      	movs	r3, #32
 800237a:	e003      	b.n	8002384 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 800237c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800237e:	fab3 f383 	clz	r3, r3
 8002382:	b2db      	uxtb	r3, r3
 8002384:	3301      	adds	r3, #1
 8002386:	069b      	lsls	r3, r3, #26
 8002388:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002394:	2b00      	cmp	r3, #0
 8002396:	d109      	bne.n	80023ac <HAL_ADC_ConfigChannel+0x614>
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	0e9b      	lsrs	r3, r3, #26
 800239e:	3301      	adds	r3, #1
 80023a0:	f003 031f 	and.w	r3, r3, #31
 80023a4:	2101      	movs	r1, #1
 80023a6:	fa01 f303 	lsl.w	r3, r1, r3
 80023aa:	e017      	b.n	80023dc <HAL_ADC_ConfigChannel+0x644>
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023b2:	6a3b      	ldr	r3, [r7, #32]
 80023b4:	fa93 f3a3 	rbit	r3, r3
 80023b8:	61fb      	str	r3, [r7, #28]
  return result;
 80023ba:	69fb      	ldr	r3, [r7, #28]
 80023bc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80023be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d101      	bne.n	80023c8 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80023c4:	2320      	movs	r3, #32
 80023c6:	e003      	b.n	80023d0 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80023c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023ca:	fab3 f383 	clz	r3, r3
 80023ce:	b2db      	uxtb	r3, r3
 80023d0:	3301      	adds	r3, #1
 80023d2:	f003 031f 	and.w	r3, r3, #31
 80023d6:	2101      	movs	r1, #1
 80023d8:	fa01 f303 	lsl.w	r3, r1, r3
 80023dc:	ea42 0103 	orr.w	r1, r2, r3
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d10d      	bne.n	8002408 <HAL_ADC_ConfigChannel+0x670>
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	0e9b      	lsrs	r3, r3, #26
 80023f2:	3301      	adds	r3, #1
 80023f4:	f003 021f 	and.w	r2, r3, #31
 80023f8:	4613      	mov	r3, r2
 80023fa:	005b      	lsls	r3, r3, #1
 80023fc:	4413      	add	r3, r2
 80023fe:	3b1e      	subs	r3, #30
 8002400:	051b      	lsls	r3, r3, #20
 8002402:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002406:	e01b      	b.n	8002440 <HAL_ADC_ConfigChannel+0x6a8>
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	fa93 f3a3 	rbit	r3, r3
 8002414:	613b      	str	r3, [r7, #16]
  return result;
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800241a:	69bb      	ldr	r3, [r7, #24]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d101      	bne.n	8002424 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8002420:	2320      	movs	r3, #32
 8002422:	e003      	b.n	800242c <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002424:	69bb      	ldr	r3, [r7, #24]
 8002426:	fab3 f383 	clz	r3, r3
 800242a:	b2db      	uxtb	r3, r3
 800242c:	3301      	adds	r3, #1
 800242e:	f003 021f 	and.w	r2, r3, #31
 8002432:	4613      	mov	r3, r2
 8002434:	005b      	lsls	r3, r3, #1
 8002436:	4413      	add	r3, r2
 8002438:	3b1e      	subs	r3, #30
 800243a:	051b      	lsls	r3, r3, #20
 800243c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002440:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002442:	683a      	ldr	r2, [r7, #0]
 8002444:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002446:	4619      	mov	r1, r3
 8002448:	f7ff f863 	bl	8001512 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	4b09      	ldr	r3, [pc, #36]	@ (8002478 <HAL_ADC_ConfigChannel+0x6e0>)
 8002452:	4013      	ands	r3, r2
 8002454:	2b00      	cmp	r3, #0
 8002456:	f000 80be 	beq.w	80025d6 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002462:	d004      	beq.n	800246e <HAL_ADC_ConfigChannel+0x6d6>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a04      	ldr	r2, [pc, #16]	@ (800247c <HAL_ADC_ConfigChannel+0x6e4>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d10a      	bne.n	8002484 <HAL_ADC_ConfigChannel+0x6ec>
 800246e:	4b04      	ldr	r3, [pc, #16]	@ (8002480 <HAL_ADC_ConfigChannel+0x6e8>)
 8002470:	e009      	b.n	8002486 <HAL_ADC_ConfigChannel+0x6ee>
 8002472:	bf00      	nop
 8002474:	407f0000 	.word	0x407f0000
 8002478:	80080000 	.word	0x80080000
 800247c:	50000100 	.word	0x50000100
 8002480:	50000300 	.word	0x50000300
 8002484:	4b59      	ldr	r3, [pc, #356]	@ (80025ec <HAL_ADC_ConfigChannel+0x854>)
 8002486:	4618      	mov	r0, r3
 8002488:	f7fe ff58 	bl	800133c <LL_ADC_GetCommonPathInternalCh>
 800248c:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a56      	ldr	r2, [pc, #344]	@ (80025f0 <HAL_ADC_ConfigChannel+0x858>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d004      	beq.n	80024a4 <HAL_ADC_ConfigChannel+0x70c>
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a55      	ldr	r2, [pc, #340]	@ (80025f4 <HAL_ADC_ConfigChannel+0x85c>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d13a      	bne.n	800251a <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80024a4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80024a8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d134      	bne.n	800251a <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80024b8:	d005      	beq.n	80024c6 <HAL_ADC_ConfigChannel+0x72e>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a4e      	ldr	r2, [pc, #312]	@ (80025f8 <HAL_ADC_ConfigChannel+0x860>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	f040 8085 	bne.w	80025d0 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80024ce:	d004      	beq.n	80024da <HAL_ADC_ConfigChannel+0x742>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a49      	ldr	r2, [pc, #292]	@ (80025fc <HAL_ADC_ConfigChannel+0x864>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d101      	bne.n	80024de <HAL_ADC_ConfigChannel+0x746>
 80024da:	4a49      	ldr	r2, [pc, #292]	@ (8002600 <HAL_ADC_ConfigChannel+0x868>)
 80024dc:	e000      	b.n	80024e0 <HAL_ADC_ConfigChannel+0x748>
 80024de:	4a43      	ldr	r2, [pc, #268]	@ (80025ec <HAL_ADC_ConfigChannel+0x854>)
 80024e0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80024e4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80024e8:	4619      	mov	r1, r3
 80024ea:	4610      	mov	r0, r2
 80024ec:	f7fe ff13 	bl	8001316 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80024f0:	4b44      	ldr	r3, [pc, #272]	@ (8002604 <HAL_ADC_ConfigChannel+0x86c>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	099b      	lsrs	r3, r3, #6
 80024f6:	4a44      	ldr	r2, [pc, #272]	@ (8002608 <HAL_ADC_ConfigChannel+0x870>)
 80024f8:	fba2 2303 	umull	r2, r3, r2, r3
 80024fc:	099b      	lsrs	r3, r3, #6
 80024fe:	1c5a      	adds	r2, r3, #1
 8002500:	4613      	mov	r3, r2
 8002502:	005b      	lsls	r3, r3, #1
 8002504:	4413      	add	r3, r2
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800250a:	e002      	b.n	8002512 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	3b01      	subs	r3, #1
 8002510:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d1f9      	bne.n	800250c <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002518:	e05a      	b.n	80025d0 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a3b      	ldr	r2, [pc, #236]	@ (800260c <HAL_ADC_ConfigChannel+0x874>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d125      	bne.n	8002570 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002524:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002528:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800252c:	2b00      	cmp	r3, #0
 800252e:	d11f      	bne.n	8002570 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a31      	ldr	r2, [pc, #196]	@ (80025fc <HAL_ADC_ConfigChannel+0x864>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d104      	bne.n	8002544 <HAL_ADC_ConfigChannel+0x7ac>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a34      	ldr	r2, [pc, #208]	@ (8002610 <HAL_ADC_ConfigChannel+0x878>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d047      	beq.n	80025d4 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800254c:	d004      	beq.n	8002558 <HAL_ADC_ConfigChannel+0x7c0>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a2a      	ldr	r2, [pc, #168]	@ (80025fc <HAL_ADC_ConfigChannel+0x864>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d101      	bne.n	800255c <HAL_ADC_ConfigChannel+0x7c4>
 8002558:	4a29      	ldr	r2, [pc, #164]	@ (8002600 <HAL_ADC_ConfigChannel+0x868>)
 800255a:	e000      	b.n	800255e <HAL_ADC_ConfigChannel+0x7c6>
 800255c:	4a23      	ldr	r2, [pc, #140]	@ (80025ec <HAL_ADC_ConfigChannel+0x854>)
 800255e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002562:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002566:	4619      	mov	r1, r3
 8002568:	4610      	mov	r0, r2
 800256a:	f7fe fed4 	bl	8001316 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800256e:	e031      	b.n	80025d4 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a27      	ldr	r2, [pc, #156]	@ (8002614 <HAL_ADC_ConfigChannel+0x87c>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d12d      	bne.n	80025d6 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800257a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800257e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002582:	2b00      	cmp	r3, #0
 8002584:	d127      	bne.n	80025d6 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a1c      	ldr	r2, [pc, #112]	@ (80025fc <HAL_ADC_ConfigChannel+0x864>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d022      	beq.n	80025d6 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002598:	d004      	beq.n	80025a4 <HAL_ADC_ConfigChannel+0x80c>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a17      	ldr	r2, [pc, #92]	@ (80025fc <HAL_ADC_ConfigChannel+0x864>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d101      	bne.n	80025a8 <HAL_ADC_ConfigChannel+0x810>
 80025a4:	4a16      	ldr	r2, [pc, #88]	@ (8002600 <HAL_ADC_ConfigChannel+0x868>)
 80025a6:	e000      	b.n	80025aa <HAL_ADC_ConfigChannel+0x812>
 80025a8:	4a10      	ldr	r2, [pc, #64]	@ (80025ec <HAL_ADC_ConfigChannel+0x854>)
 80025aa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80025ae:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80025b2:	4619      	mov	r1, r3
 80025b4:	4610      	mov	r0, r2
 80025b6:	f7fe feae 	bl	8001316 <LL_ADC_SetCommonPathInternalCh>
 80025ba:	e00c      	b.n	80025d6 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025c0:	f043 0220 	orr.w	r2, r3, #32
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80025ce:	e002      	b.n	80025d6 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80025d0:	bf00      	nop
 80025d2:	e000      	b.n	80025d6 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80025d4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2200      	movs	r2, #0
 80025da:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80025de:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	37d8      	adds	r7, #216	@ 0xd8
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	50000700 	.word	0x50000700
 80025f0:	c3210000 	.word	0xc3210000
 80025f4:	90c00010 	.word	0x90c00010
 80025f8:	50000600 	.word	0x50000600
 80025fc:	50000100 	.word	0x50000100
 8002600:	50000300 	.word	0x50000300
 8002604:	20000000 	.word	0x20000000
 8002608:	053e2d63 	.word	0x053e2d63
 800260c:	c7520000 	.word	0xc7520000
 8002610:	50000500 	.word	0x50000500
 8002614:	cb840000 	.word	0xcb840000

08002618 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b088      	sub	sp, #32
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
 8002620:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8002622:	2300      	movs	r3, #0
 8002624:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4618      	mov	r0, r3
 8002630:	f7ff f890 	bl	8001754 <LL_ADC_REG_IsConversionOngoing>
 8002634:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4618      	mov	r0, r3
 800263c:	f7ff f8b1 	bl	80017a2 <LL_ADC_INJ_IsConversionOngoing>
 8002640:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d103      	bne.n	8002650 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	2b00      	cmp	r3, #0
 800264c:	f000 8098 	beq.w	8002780 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	68db      	ldr	r3, [r3, #12]
 8002656:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800265a:	2b00      	cmp	r3, #0
 800265c:	d02a      	beq.n	80026b4 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	7f5b      	ldrb	r3, [r3, #29]
 8002662:	2b01      	cmp	r3, #1
 8002664:	d126      	bne.n	80026b4 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	7f1b      	ldrb	r3, [r3, #28]
 800266a:	2b01      	cmp	r3, #1
 800266c:	d122      	bne.n	80026b4 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800266e:	2301      	movs	r3, #1
 8002670:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002672:	e014      	b.n	800269e <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	4a45      	ldr	r2, [pc, #276]	@ (800278c <ADC_ConversionStop+0x174>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d90d      	bls.n	8002698 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002680:	f043 0210 	orr.w	r2, r3, #16
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800268c:	f043 0201 	orr.w	r2, r3, #1
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	e074      	b.n	8002782 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	3301      	adds	r3, #1
 800269c:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026a8:	2b40      	cmp	r3, #64	@ 0x40
 80026aa:	d1e3      	bne.n	8002674 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	2240      	movs	r2, #64	@ 0x40
 80026b2:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80026b4:	69bb      	ldr	r3, [r7, #24]
 80026b6:	2b02      	cmp	r3, #2
 80026b8:	d014      	beq.n	80026e4 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4618      	mov	r0, r3
 80026c0:	f7ff f848 	bl	8001754 <LL_ADC_REG_IsConversionOngoing>
 80026c4:	4603      	mov	r3, r0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d00c      	beq.n	80026e4 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4618      	mov	r0, r3
 80026d0:	f7ff f805 	bl	80016de <LL_ADC_IsDisableOngoing>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d104      	bne.n	80026e4 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4618      	mov	r0, r3
 80026e0:	f7ff f824 	bl	800172c <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80026e4:	69bb      	ldr	r3, [r7, #24]
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	d014      	beq.n	8002714 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4618      	mov	r0, r3
 80026f0:	f7ff f857 	bl	80017a2 <LL_ADC_INJ_IsConversionOngoing>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d00c      	beq.n	8002714 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4618      	mov	r0, r3
 8002700:	f7fe ffed 	bl	80016de <LL_ADC_IsDisableOngoing>
 8002704:	4603      	mov	r3, r0
 8002706:	2b00      	cmp	r3, #0
 8002708:	d104      	bne.n	8002714 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4618      	mov	r0, r3
 8002710:	f7ff f833 	bl	800177a <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8002714:	69bb      	ldr	r3, [r7, #24]
 8002716:	2b02      	cmp	r3, #2
 8002718:	d005      	beq.n	8002726 <ADC_ConversionStop+0x10e>
 800271a:	69bb      	ldr	r3, [r7, #24]
 800271c:	2b03      	cmp	r3, #3
 800271e:	d105      	bne.n	800272c <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002720:	230c      	movs	r3, #12
 8002722:	617b      	str	r3, [r7, #20]
        break;
 8002724:	e005      	b.n	8002732 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002726:	2308      	movs	r3, #8
 8002728:	617b      	str	r3, [r7, #20]
        break;
 800272a:	e002      	b.n	8002732 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800272c:	2304      	movs	r3, #4
 800272e:	617b      	str	r3, [r7, #20]
        break;
 8002730:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8002732:	f7fe fdd1 	bl	80012d8 <HAL_GetTick>
 8002736:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002738:	e01b      	b.n	8002772 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800273a:	f7fe fdcd 	bl	80012d8 <HAL_GetTick>
 800273e:	4602      	mov	r2, r0
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	1ad3      	subs	r3, r2, r3
 8002744:	2b05      	cmp	r3, #5
 8002746:	d914      	bls.n	8002772 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	689a      	ldr	r2, [r3, #8]
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	4013      	ands	r3, r2
 8002752:	2b00      	cmp	r3, #0
 8002754:	d00d      	beq.n	8002772 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800275a:	f043 0210 	orr.w	r2, r3, #16
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002766:	f043 0201 	orr.w	r2, r3, #1
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e007      	b.n	8002782 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	689a      	ldr	r2, [r3, #8]
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	4013      	ands	r3, r2
 800277c:	2b00      	cmp	r3, #0
 800277e:	d1dc      	bne.n	800273a <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8002780:	2300      	movs	r3, #0
}
 8002782:	4618      	mov	r0, r3
 8002784:	3720      	adds	r7, #32
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	a33fffff 	.word	0xa33fffff

08002790 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b084      	sub	sp, #16
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002798:	2300      	movs	r3, #0
 800279a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4618      	mov	r0, r3
 80027a2:	f7fe ff89 	bl	80016b8 <LL_ADC_IsEnabled>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d176      	bne.n	800289a <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	689a      	ldr	r2, [r3, #8]
 80027b2:	4b3c      	ldr	r3, [pc, #240]	@ (80028a4 <ADC_Enable+0x114>)
 80027b4:	4013      	ands	r3, r2
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d00d      	beq.n	80027d6 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027be:	f043 0210 	orr.w	r2, r3, #16
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027ca:	f043 0201 	orr.w	r2, r3, #1
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e062      	b.n	800289c <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4618      	mov	r0, r3
 80027dc:	f7fe ff44 	bl	8001668 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80027e8:	d004      	beq.n	80027f4 <ADC_Enable+0x64>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a2e      	ldr	r2, [pc, #184]	@ (80028a8 <ADC_Enable+0x118>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d101      	bne.n	80027f8 <ADC_Enable+0x68>
 80027f4:	4b2d      	ldr	r3, [pc, #180]	@ (80028ac <ADC_Enable+0x11c>)
 80027f6:	e000      	b.n	80027fa <ADC_Enable+0x6a>
 80027f8:	4b2d      	ldr	r3, [pc, #180]	@ (80028b0 <ADC_Enable+0x120>)
 80027fa:	4618      	mov	r0, r3
 80027fc:	f7fe fd9e 	bl	800133c <LL_ADC_GetCommonPathInternalCh>
 8002800:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002802:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002806:	2b00      	cmp	r3, #0
 8002808:	d013      	beq.n	8002832 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800280a:	4b2a      	ldr	r3, [pc, #168]	@ (80028b4 <ADC_Enable+0x124>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	099b      	lsrs	r3, r3, #6
 8002810:	4a29      	ldr	r2, [pc, #164]	@ (80028b8 <ADC_Enable+0x128>)
 8002812:	fba2 2303 	umull	r2, r3, r2, r3
 8002816:	099b      	lsrs	r3, r3, #6
 8002818:	1c5a      	adds	r2, r3, #1
 800281a:	4613      	mov	r3, r2
 800281c:	005b      	lsls	r3, r3, #1
 800281e:	4413      	add	r3, r2
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002824:	e002      	b.n	800282c <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	3b01      	subs	r3, #1
 800282a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d1f9      	bne.n	8002826 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002832:	f7fe fd51 	bl	80012d8 <HAL_GetTick>
 8002836:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002838:	e028      	b.n	800288c <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4618      	mov	r0, r3
 8002840:	f7fe ff3a 	bl	80016b8 <LL_ADC_IsEnabled>
 8002844:	4603      	mov	r3, r0
 8002846:	2b00      	cmp	r3, #0
 8002848:	d104      	bne.n	8002854 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4618      	mov	r0, r3
 8002850:	f7fe ff0a 	bl	8001668 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002854:	f7fe fd40 	bl	80012d8 <HAL_GetTick>
 8002858:	4602      	mov	r2, r0
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	2b02      	cmp	r3, #2
 8002860:	d914      	bls.n	800288c <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0301 	and.w	r3, r3, #1
 800286c:	2b01      	cmp	r3, #1
 800286e:	d00d      	beq.n	800288c <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002874:	f043 0210 	orr.w	r2, r3, #16
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002880:	f043 0201 	orr.w	r2, r3, #1
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	e007      	b.n	800289c <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 0301 	and.w	r3, r3, #1
 8002896:	2b01      	cmp	r3, #1
 8002898:	d1cf      	bne.n	800283a <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800289a:	2300      	movs	r3, #0
}
 800289c:	4618      	mov	r0, r3
 800289e:	3710      	adds	r7, #16
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}
 80028a4:	8000003f 	.word	0x8000003f
 80028a8:	50000100 	.word	0x50000100
 80028ac:	50000300 	.word	0x50000300
 80028b0:	50000700 	.word	0x50000700
 80028b4:	20000000 	.word	0x20000000
 80028b8:	053e2d63 	.word	0x053e2d63

080028bc <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b084      	sub	sp, #16
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4618      	mov	r0, r3
 80028ca:	f7fe ff08 	bl	80016de <LL_ADC_IsDisableOngoing>
 80028ce:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4618      	mov	r0, r3
 80028d6:	f7fe feef 	bl	80016b8 <LL_ADC_IsEnabled>
 80028da:	4603      	mov	r3, r0
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d047      	beq.n	8002970 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d144      	bne.n	8002970 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	f003 030d 	and.w	r3, r3, #13
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	d10c      	bne.n	800290e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4618      	mov	r0, r3
 80028fa:	f7fe fec9 	bl	8001690 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	2203      	movs	r2, #3
 8002904:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002906:	f7fe fce7 	bl	80012d8 <HAL_GetTick>
 800290a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800290c:	e029      	b.n	8002962 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002912:	f043 0210 	orr.w	r2, r3, #16
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800291e:	f043 0201 	orr.w	r2, r3, #1
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e023      	b.n	8002972 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800292a:	f7fe fcd5 	bl	80012d8 <HAL_GetTick>
 800292e:	4602      	mov	r2, r0
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	1ad3      	subs	r3, r2, r3
 8002934:	2b02      	cmp	r3, #2
 8002936:	d914      	bls.n	8002962 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	f003 0301 	and.w	r3, r3, #1
 8002942:	2b00      	cmp	r3, #0
 8002944:	d00d      	beq.n	8002962 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800294a:	f043 0210 	orr.w	r2, r3, #16
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002956:	f043 0201 	orr.w	r2, r3, #1
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e007      	b.n	8002972 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	f003 0301 	and.w	r3, r3, #1
 800296c:	2b00      	cmp	r3, #0
 800296e:	d1dc      	bne.n	800292a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002970:	2300      	movs	r3, #0
}
 8002972:	4618      	mov	r0, r3
 8002974:	3710      	adds	r7, #16
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}

0800297a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800297a:	b580      	push	{r7, lr}
 800297c:	b084      	sub	sp, #16
 800297e:	af00      	add	r7, sp, #0
 8002980:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002986:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800298c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002990:	2b00      	cmp	r3, #0
 8002992:	d14b      	bne.n	8002a2c <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002998:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 0308 	and.w	r3, r3, #8
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d021      	beq.n	80029f2 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4618      	mov	r0, r3
 80029b4:	f7fe fd6e 	bl	8001494 <LL_ADC_REG_IsTriggerSourceSWStart>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d032      	beq.n	8002a24 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d12b      	bne.n	8002a24 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029d0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029dc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d11f      	bne.n	8002a24 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029e8:	f043 0201 	orr.w	r2, r3, #1
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	65da      	str	r2, [r3, #92]	@ 0x5c
 80029f0:	e018      	b.n	8002a24 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	f003 0302 	and.w	r3, r3, #2
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d111      	bne.n	8002a24 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a04:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a10:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d105      	bne.n	8002a24 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a1c:	f043 0201 	orr.w	r2, r3, #1
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002a24:	68f8      	ldr	r0, [r7, #12]
 8002a26:	f7fe f8bb 	bl	8000ba0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002a2a:	e00e      	b.n	8002a4a <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a30:	f003 0310 	and.w	r3, r3, #16
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d003      	beq.n	8002a40 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002a38:	68f8      	ldr	r0, [r7, #12]
 8002a3a:	f7ff f9a2 	bl	8001d82 <HAL_ADC_ErrorCallback>
}
 8002a3e:	e004      	b.n	8002a4a <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	4798      	blx	r3
}
 8002a4a:	bf00      	nop
 8002a4c:	3710      	adds	r7, #16
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}

08002a52 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002a52:	b580      	push	{r7, lr}
 8002a54:	b084      	sub	sp, #16
 8002a56:	af00      	add	r7, sp, #0
 8002a58:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a5e:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002a60:	68f8      	ldr	r0, [r7, #12]
 8002a62:	f7ff f984 	bl	8001d6e <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002a66:	bf00      	nop
 8002a68:	3710      	adds	r7, #16
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}

08002a6e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002a6e:	b580      	push	{r7, lr}
 8002a70:	b084      	sub	sp, #16
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a7a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a80:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a8c:	f043 0204 	orr.w	r2, r3, #4
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002a94:	68f8      	ldr	r0, [r7, #12]
 8002a96:	f7ff f974 	bl	8001d82 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002a9a:	bf00      	nop
 8002a9c:	3710      	adds	r7, #16
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}

08002aa2 <LL_ADC_IsEnabled>:
{
 8002aa2:	b480      	push	{r7}
 8002aa4:	b083      	sub	sp, #12
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	f003 0301 	and.w	r3, r3, #1
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	d101      	bne.n	8002aba <LL_ADC_IsEnabled+0x18>
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e000      	b.n	8002abc <LL_ADC_IsEnabled+0x1a>
 8002aba:	2300      	movs	r3, #0
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	370c      	adds	r7, #12
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac6:	4770      	bx	lr

08002ac8 <LL_ADC_StartCalibration>:
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b083      	sub	sp, #12
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
 8002ad0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8002ada:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002ade:	683a      	ldr	r2, [r7, #0]
 8002ae0:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	609a      	str	r2, [r3, #8]
}
 8002aee:	bf00      	nop
 8002af0:	370c      	adds	r7, #12
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr

08002afa <LL_ADC_IsCalibrationOnGoing>:
{
 8002afa:	b480      	push	{r7}
 8002afc:	b083      	sub	sp, #12
 8002afe:	af00      	add	r7, sp, #0
 8002b00:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002b0a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002b0e:	d101      	bne.n	8002b14 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002b10:	2301      	movs	r3, #1
 8002b12:	e000      	b.n	8002b16 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002b14:	2300      	movs	r3, #0
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	370c      	adds	r7, #12
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr

08002b22 <LL_ADC_REG_StartConversion>:
{
 8002b22:	b480      	push	{r7}
 8002b24:	b083      	sub	sp, #12
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002b32:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002b36:	f043 0204 	orr.w	r2, r3, #4
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	609a      	str	r2, [r3, #8]
}
 8002b3e:	bf00      	nop
 8002b40:	370c      	adds	r7, #12
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr

08002b4a <LL_ADC_REG_IsConversionOngoing>:
{
 8002b4a:	b480      	push	{r7}
 8002b4c:	b083      	sub	sp, #12
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	f003 0304 	and.w	r3, r3, #4
 8002b5a:	2b04      	cmp	r3, #4
 8002b5c:	d101      	bne.n	8002b62 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e000      	b.n	8002b64 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002b62:	2300      	movs	r3, #0
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	370c      	adds	r7, #12
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr

08002b70 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b084      	sub	sp, #16
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
 8002b78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d101      	bne.n	8002b8c <HAL_ADCEx_Calibration_Start+0x1c>
 8002b88:	2302      	movs	r3, #2
 8002b8a:	e04d      	b.n	8002c28 <HAL_ADCEx_Calibration_Start+0xb8>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2201      	movs	r2, #1
 8002b90:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	f7ff fe91 	bl	80028bc <ADC_Disable>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002b9e:	7bfb      	ldrb	r3, [r7, #15]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d136      	bne.n	8002c12 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ba8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002bac:	f023 0302 	bic.w	r3, r3, #2
 8002bb0:	f043 0202 	orr.w	r2, r3, #2
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	6839      	ldr	r1, [r7, #0]
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f7ff ff82 	bl	8002ac8 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002bc4:	e014      	b.n	8002bf0 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	3301      	adds	r3, #1
 8002bca:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	4a18      	ldr	r2, [pc, #96]	@ (8002c30 <HAL_ADCEx_Calibration_Start+0xc0>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d90d      	bls.n	8002bf0 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bd8:	f023 0312 	bic.w	r3, r3, #18
 8002bdc:	f043 0210 	orr.w	r2, r3, #16
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2200      	movs	r2, #0
 8002be8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	e01b      	b.n	8002c28 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f7ff ff80 	bl	8002afa <LL_ADC_IsCalibrationOnGoing>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d1e2      	bne.n	8002bc6 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c04:	f023 0303 	bic.w	r3, r3, #3
 8002c08:	f043 0201 	orr.w	r2, r3, #1
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002c10:	e005      	b.n	8002c1e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c16:	f043 0210 	orr.w	r2, r3, #16
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2200      	movs	r2, #0
 8002c22:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002c26:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	3710      	adds	r7, #16
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	0004de01 	.word	0x0004de01

08002c34 <HAL_ADCEx_MultiModeStart_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Length of data to be transferred from ADC peripheral to memory (in bytes).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeStart_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b0a2      	sub	sp, #136	@ 0x88
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	60f8      	str	r0, [r7, #12]
 8002c3c:	60b9      	str	r1, [r7, #8]
 8002c3e:	607a      	str	r2, [r7, #4]
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));

  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4618      	mov	r0, r3
 8002c46:	f7ff ff80 	bl	8002b4a <LL_ADC_REG_IsConversionOngoing>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d001      	beq.n	8002c54 <HAL_ADCEx_MultiModeStart_DMA+0x20>
  {
    return HAL_BUSY;
 8002c50:	2302      	movs	r3, #2
 8002c52:	e096      	b.n	8002d82 <HAL_ADCEx_MultiModeStart_DMA+0x14e>
  }
  else
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d101      	bne.n	8002c62 <HAL_ADCEx_MultiModeStart_DMA+0x2e>
 8002c5e:	2302      	movs	r3, #2
 8002c60:	e08f      	b.n	8002d82 <HAL_ADCEx_MultiModeStart_DMA+0x14e>
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2201      	movs	r2, #1
 8002c66:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Temporary handle minimum initialization */
    __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	673b      	str	r3, [r7, #112]	@ 0x70
    ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002c6e:	2300      	movs	r3, #0
 8002c70:	677b      	str	r3, [r7, #116]	@ 0x74

    /* Set a temporary handle of the ADC slave associated to the ADC master   */
    ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002c7a:	d102      	bne.n	8002c82 <HAL_ADCEx_MultiModeStart_DMA+0x4e>
 8002c7c:	4b43      	ldr	r3, [pc, #268]	@ (8002d8c <HAL_ADCEx_MultiModeStart_DMA+0x158>)
 8002c7e:	617b      	str	r3, [r7, #20]
 8002c80:	e009      	b.n	8002c96 <HAL_ADCEx_MultiModeStart_DMA+0x62>
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a42      	ldr	r2, [pc, #264]	@ (8002d90 <HAL_ADCEx_MultiModeStart_DMA+0x15c>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d102      	bne.n	8002c92 <HAL_ADCEx_MultiModeStart_DMA+0x5e>
 8002c8c:	4b41      	ldr	r3, [pc, #260]	@ (8002d94 <HAL_ADCEx_MultiModeStart_DMA+0x160>)
 8002c8e:	617b      	str	r3, [r7, #20]
 8002c90:	e001      	b.n	8002c96 <HAL_ADCEx_MultiModeStart_DMA+0x62>
 8002c92:	2300      	movs	r3, #0
 8002c94:	617b      	str	r3, [r7, #20]

    if (tmp_hadc_slave.Instance == NULL)
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d10b      	bne.n	8002cb4 <HAL_ADCEx_MultiModeStart_DMA+0x80>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ca0:	f043 0220 	orr.w	r2, r3, #32
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2200      	movs	r2, #0
 8002cac:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e066      	b.n	8002d82 <HAL_ADCEx_MultiModeStart_DMA+0x14e>
    }

    /* Enable the ADC peripherals: master and slave (in case if not already   */
    /* enabled previously)                                                    */
    tmp_hal_status = ADC_Enable(hadc);
 8002cb4:	68f8      	ldr	r0, [r7, #12]
 8002cb6:	f7ff fd6b 	bl	8002790 <ADC_Enable>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    if (tmp_hal_status == HAL_OK)
 8002cc0:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d107      	bne.n	8002cd8 <HAL_ADCEx_MultiModeStart_DMA+0xa4>
    {
      tmp_hal_status = ADC_Enable(&tmp_hadc_slave);
 8002cc8:	f107 0314 	add.w	r3, r7, #20
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f7ff fd5f 	bl	8002790 <ADC_Enable>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    }

    /* Start multimode conversion of ADCs pair */
    if (tmp_hal_status == HAL_OK)
 8002cd8:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d14a      	bne.n	8002d76 <HAL_ADCEx_MultiModeStart_DMA+0x142>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ce4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002ce8:	f023 0301 	bic.w	r3, r3, #1
 8002cec:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	65da      	str	r2, [r3, #92]	@ 0x5c
                        (HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP),
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cfe:	4a26      	ldr	r2, [pc, #152]	@ (8002d98 <HAL_ADCEx_MultiModeStart_DMA+0x164>)
 8002d00:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d06:	4a25      	ldr	r2, [pc, #148]	@ (8002d9c <HAL_ADCEx_MultiModeStart_DMA+0x168>)
 8002d08:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError ;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d0e:	4a24      	ldr	r2, [pc, #144]	@ (8002da0 <HAL_ADCEx_MultiModeStart_DMA+0x16c>)
 8002d10:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Pointer to the common control register  */
      tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002d1a:	d004      	beq.n	8002d26 <HAL_ADCEx_MultiModeStart_DMA+0xf2>
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a1a      	ldr	r2, [pc, #104]	@ (8002d8c <HAL_ADCEx_MultiModeStart_DMA+0x158>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d101      	bne.n	8002d2a <HAL_ADCEx_MultiModeStart_DMA+0xf6>
 8002d26:	4b1f      	ldr	r3, [pc, #124]	@ (8002da4 <HAL_ADCEx_MultiModeStart_DMA+0x170>)
 8002d28:	e000      	b.n	8002d2c <HAL_ADCEx_MultiModeStart_DMA+0xf8>
 8002d2a:	4b1f      	ldr	r3, [pc, #124]	@ (8002da8 <HAL_ADCEx_MultiModeStart_DMA+0x174>)
 8002d2c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
      /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
      /* start (in case of SW start):                                           */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	221c      	movs	r2, #28
 8002d36:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	685a      	ldr	r2, [r3, #4]
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f042 0210 	orr.w	r2, r2, #16
 8002d4e:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&tmpADC_Common->CDR, (uint32_t)pData, Length);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8002d54:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002d58:	330c      	adds	r3, #12
 8002d5a:	4619      	mov	r1, r3
 8002d5c:	68ba      	ldr	r2, [r7, #8]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	f000 fbbc 	bl	80034dc <HAL_DMA_Start_IT>
 8002d64:	4603      	mov	r3, r0
 8002d66:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
      /* Enable conversion of regular group.                                    */
      /* If software start has been selected, conversion starts immediately.    */
      /* If external trigger has been selected, conversion will start at next   */
      /* trigger event.                                                         */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f7ff fed7 	bl	8002b22 <LL_ADC_REG_StartConversion>
 8002d74:	e003      	b.n	8002d7e <HAL_ADCEx_MultiModeStart_DMA+0x14a>
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return tmp_hal_status;
 8002d7e:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
  }
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3788      	adds	r7, #136	@ 0x88
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	bf00      	nop
 8002d8c:	50000100 	.word	0x50000100
 8002d90:	50000400 	.word	0x50000400
 8002d94:	50000500 	.word	0x50000500
 8002d98:	0800297b 	.word	0x0800297b
 8002d9c:	08002a53 	.word	0x08002a53
 8002da0:	08002a6f 	.word	0x08002a6f
 8002da4:	50000300 	.word	0x50000300
 8002da8:	50000700 	.word	0x50000700

08002dac <HAL_ADCEx_MultiModeStop_DMA>:
  *         ADC slave, to properly disable the DMA channel.
  * @param hadc ADC handle of ADC master (handle of ADC slave must not be used)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeStop_DMA(ADC_HandleTypeDef *hadc)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b0a2      	sub	sp, #136	@ 0x88
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d101      	bne.n	8002dc2 <HAL_ADCEx_MultiModeStop_DMA+0x16>
 8002dbe:	2302      	movs	r3, #2
 8002dc0:	e0c1      	b.n	8002f46 <HAL_ADCEx_MultiModeStop_DMA+0x19a>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* 1. Stop potential multimode conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002dca:	2103      	movs	r1, #3
 8002dcc:	6878      	ldr	r0, [r7, #4]
 8002dce:	f7ff fc23 	bl	8002618 <ADC_ConversionStop>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002dd8:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	f040 80ac 	bne.w	8002f3a <HAL_ADCEx_MultiModeStop_DMA+0x18e>
  {
    /* Temporary handle minimum initialization */
    __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002de2:	2300      	movs	r3, #0
 8002de4:	66bb      	str	r3, [r7, #104]	@ 0x68
    ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002de6:	2300      	movs	r3, #0
 8002de8:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* Set a temporary handle of the ADC slave associated to the ADC master   */
    ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002df2:	d102      	bne.n	8002dfa <HAL_ADCEx_MultiModeStop_DMA+0x4e>
 8002df4:	4b56      	ldr	r3, [pc, #344]	@ (8002f50 <HAL_ADCEx_MultiModeStop_DMA+0x1a4>)
 8002df6:	60fb      	str	r3, [r7, #12]
 8002df8:	e009      	b.n	8002e0e <HAL_ADCEx_MultiModeStop_DMA+0x62>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a55      	ldr	r2, [pc, #340]	@ (8002f54 <HAL_ADCEx_MultiModeStop_DMA+0x1a8>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d102      	bne.n	8002e0a <HAL_ADCEx_MultiModeStop_DMA+0x5e>
 8002e04:	4b54      	ldr	r3, [pc, #336]	@ (8002f58 <HAL_ADCEx_MultiModeStop_DMA+0x1ac>)
 8002e06:	60fb      	str	r3, [r7, #12]
 8002e08:	e001      	b.n	8002e0e <HAL_ADCEx_MultiModeStop_DMA+0x62>
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	60fb      	str	r3, [r7, #12]

    if (tmp_hadc_slave.Instance == NULL)
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d10b      	bne.n	8002e2c <HAL_ADCEx_MultiModeStop_DMA+0x80>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e18:	f043 0220 	orr.w	r2, r3, #32
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2200      	movs	r2, #0
 8002e24:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e08c      	b.n	8002f46 <HAL_ADCEx_MultiModeStop_DMA+0x19a>

    /* Procedure to disable the ADC peripheral: wait for conversions          */
    /* effectively stopped (ADC master and ADC slave), then disable ADC       */

    /* 1. Wait for ADC conversion completion for ADC master and ADC slave */
    tickstart = HAL_GetTick();
 8002e2c:	f7fe fa54 	bl	80012d8 <HAL_GetTick>
 8002e30:	67f8      	str	r0, [r7, #124]	@ 0x7c

    tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	4618      	mov	r0, r3
 8002e36:	f7ff fe88 	bl	8002b4a <LL_ADC_REG_IsConversionOngoing>
 8002e3a:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
    while ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 1UL)
 8002e3e:	e02a      	b.n	8002e96 <HAL_ADCEx_MultiModeStop_DMA+0xea>
           || (tmp_hadc_slave_conversion_on_going == 1UL)
          )
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002e40:	f7fe fa4a 	bl	80012d8 <HAL_GetTick>
 8002e44:	4602      	mov	r2, r0
 8002e46:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002e48:	1ad3      	subs	r3, r2, r3
 8002e4a:	2b05      	cmp	r3, #5
 8002e4c:	d91d      	bls.n	8002e8a <HAL_ADCEx_MultiModeStop_DMA+0xde>
      {
        /* New check to avoid false timeout detection in case of preemption */
        tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	4618      	mov	r0, r3
 8002e52:	f7ff fe7a 	bl	8002b4a <LL_ADC_REG_IsConversionOngoing>
 8002e56:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
        if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 1UL)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f7ff fe73 	bl	8002b4a <LL_ADC_REG_IsConversionOngoing>
 8002e64:	4603      	mov	r3, r0
 8002e66:	2b01      	cmp	r3, #1
 8002e68:	d003      	beq.n	8002e72 <HAL_ADCEx_MultiModeStop_DMA+0xc6>
            || (tmp_hadc_slave_conversion_on_going == 1UL)
 8002e6a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d10b      	bne.n	8002e8a <HAL_ADCEx_MultiModeStop_DMA+0xde>
           )
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e76:	f043 0210 	orr.w	r2, r3, #16
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2200      	movs	r2, #0
 8002e82:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e05d      	b.n	8002f46 <HAL_ADCEx_MultiModeStop_DMA+0x19a>
        }
      }

      tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f7ff fe5c 	bl	8002b4a <LL_ADC_REG_IsConversionOngoing>
 8002e92:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
    while ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 1UL)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f7ff fe55 	bl	8002b4a <LL_ADC_REG_IsConversionOngoing>
 8002ea0:	4603      	mov	r3, r0
           || (tmp_hadc_slave_conversion_on_going == 1UL)
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d0cc      	beq.n	8002e40 <HAL_ADCEx_MultiModeStop_DMA+0x94>
 8002ea6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	d0c8      	beq.n	8002e40 <HAL_ADCEx_MultiModeStop_DMA+0x94>

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    /* Note: DMA channel of ADC slave should be stopped after this function   */
    /*       with HAL_ADC_Stop_DMA() API.                                     */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f000 fb8d 	bl	80035d2 <HAL_DMA_Abort>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87

    /* Check if DMA channel effectively disabled */
    if (tmp_hal_status == HAL_ERROR)
 8002ebe:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d105      	bne.n	8002ed2 <HAL_ADCEx_MultiModeStop_DMA+0x126>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002eca:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	685a      	ldr	r2, [r3, #4]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f022 0210 	bic.w	r2, r2, #16
 8002ee0:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripherals: master and slave */
    /* Update "tmp_hal_status" only if DMA channel disabling passed, to keep in */
    /* memory a potential failing status.                                     */
    if (tmp_hal_status == HAL_OK)
 8002ee2:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d115      	bne.n	8002f16 <HAL_ADCEx_MultiModeStop_DMA+0x16a>
    {
      tmp_hadc_slave_disable_status = ADC_Disable(&tmp_hadc_slave);
 8002eea:	f107 030c 	add.w	r3, r7, #12
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f7ff fce4 	bl	80028bc <ADC_Disable>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
      if ((ADC_Disable(hadc) == HAL_OK)           &&
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	f7ff fcde 	bl	80028bc <ADC_Disable>
 8002f00:	4603      	mov	r3, r0
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d10f      	bne.n	8002f26 <HAL_ADCEx_MultiModeStop_DMA+0x17a>
 8002f06:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d10b      	bne.n	8002f26 <HAL_ADCEx_MultiModeStop_DMA+0x17a>
          (tmp_hadc_slave_disable_status == HAL_OK))
      {
        tmp_hal_status = HAL_OK;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8002f14:	e007      	b.n	8002f26 <HAL_ADCEx_MultiModeStop_DMA+0x17a>
      }
    }
    else
    {
      /* In case of error, attempt to disable ADC master and slave without status assert */
      (void) ADC_Disable(hadc);
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	f7ff fcd0 	bl	80028bc <ADC_Disable>
      (void) ADC_Disable(&tmp_hadc_slave);
 8002f1c:	f107 030c 	add.w	r3, r7, #12
 8002f20:	4618      	mov	r0, r3
 8002f22:	f7ff fccb 	bl	80028bc <ADC_Disable>
    }

    /* Set ADC state (ADC master) */
    ADC_STATE_CLR_SET(hadc->State,
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f2a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002f2e:	f023 0301 	bic.w	r3, r3, #1
 8002f32:	f043 0201 	orr.w	r2, r3, #1
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002f42:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	3788      	adds	r7, #136	@ 0x88
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}
 8002f4e:	bf00      	nop
 8002f50:	50000100 	.word	0x50000100
 8002f54:	50000400 	.word	0x50000400
 8002f58:	50000500 	.word	0x50000500

08002f5c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002f5c:	b590      	push	{r4, r7, lr}
 8002f5e:	b0a1      	sub	sp, #132	@ 0x84
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
 8002f64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f66:	2300      	movs	r3, #0
 8002f68:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d101      	bne.n	8002f7a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002f76:	2302      	movs	r3, #2
 8002f78:	e0e7      	b.n	800314a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002f82:	2300      	movs	r3, #0
 8002f84:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002f86:	2300      	movs	r3, #0
 8002f88:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002f92:	d102      	bne.n	8002f9a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002f94:	4b6f      	ldr	r3, [pc, #444]	@ (8003154 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002f96:	60bb      	str	r3, [r7, #8]
 8002f98:	e009      	b.n	8002fae <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a6e      	ldr	r2, [pc, #440]	@ (8003158 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d102      	bne.n	8002faa <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8002fa4:	4b6d      	ldr	r3, [pc, #436]	@ (800315c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002fa6:	60bb      	str	r3, [r7, #8]
 8002fa8:	e001      	b.n	8002fae <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002faa:	2300      	movs	r3, #0
 8002fac:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d10b      	bne.n	8002fcc <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fb8:	f043 0220 	orr.w	r2, r3, #32
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e0be      	b.n	800314a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f7ff fdbb 	bl	8002b4a <LL_ADC_REG_IsConversionOngoing>
 8002fd4:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f7ff fdb5 	bl	8002b4a <LL_ADC_REG_IsConversionOngoing>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	f040 80a0 	bne.w	8003128 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002fe8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	f040 809c 	bne.w	8003128 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002ff8:	d004      	beq.n	8003004 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a55      	ldr	r2, [pc, #340]	@ (8003154 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d101      	bne.n	8003008 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003004:	4b56      	ldr	r3, [pc, #344]	@ (8003160 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8003006:	e000      	b.n	800300a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003008:	4b56      	ldr	r3, [pc, #344]	@ (8003164 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 800300a:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d04b      	beq.n	80030ac <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003014:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	6859      	ldr	r1, [r3, #4]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003026:	035b      	lsls	r3, r3, #13
 8003028:	430b      	orrs	r3, r1
 800302a:	431a      	orrs	r2, r3
 800302c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800302e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003038:	d004      	beq.n	8003044 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a45      	ldr	r2, [pc, #276]	@ (8003154 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d10f      	bne.n	8003064 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8003044:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003048:	f7ff fd2b 	bl	8002aa2 <LL_ADC_IsEnabled>
 800304c:	4604      	mov	r4, r0
 800304e:	4841      	ldr	r0, [pc, #260]	@ (8003154 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003050:	f7ff fd27 	bl	8002aa2 <LL_ADC_IsEnabled>
 8003054:	4603      	mov	r3, r0
 8003056:	4323      	orrs	r3, r4
 8003058:	2b00      	cmp	r3, #0
 800305a:	bf0c      	ite	eq
 800305c:	2301      	moveq	r3, #1
 800305e:	2300      	movne	r3, #0
 8003060:	b2db      	uxtb	r3, r3
 8003062:	e012      	b.n	800308a <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8003064:	483c      	ldr	r0, [pc, #240]	@ (8003158 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003066:	f7ff fd1c 	bl	8002aa2 <LL_ADC_IsEnabled>
 800306a:	4604      	mov	r4, r0
 800306c:	483b      	ldr	r0, [pc, #236]	@ (800315c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800306e:	f7ff fd18 	bl	8002aa2 <LL_ADC_IsEnabled>
 8003072:	4603      	mov	r3, r0
 8003074:	431c      	orrs	r4, r3
 8003076:	483c      	ldr	r0, [pc, #240]	@ (8003168 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003078:	f7ff fd13 	bl	8002aa2 <LL_ADC_IsEnabled>
 800307c:	4603      	mov	r3, r0
 800307e:	4323      	orrs	r3, r4
 8003080:	2b00      	cmp	r3, #0
 8003082:	bf0c      	ite	eq
 8003084:	2301      	moveq	r3, #1
 8003086:	2300      	movne	r3, #0
 8003088:	b2db      	uxtb	r3, r3
 800308a:	2b00      	cmp	r3, #0
 800308c:	d056      	beq.n	800313c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800308e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003096:	f023 030f 	bic.w	r3, r3, #15
 800309a:	683a      	ldr	r2, [r7, #0]
 800309c:	6811      	ldr	r1, [r2, #0]
 800309e:	683a      	ldr	r2, [r7, #0]
 80030a0:	6892      	ldr	r2, [r2, #8]
 80030a2:	430a      	orrs	r2, r1
 80030a4:	431a      	orrs	r2, r3
 80030a6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80030a8:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80030aa:	e047      	b.n	800313c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80030ac:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80030b4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80030b6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80030c0:	d004      	beq.n	80030cc <HAL_ADCEx_MultiModeConfigChannel+0x170>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a23      	ldr	r2, [pc, #140]	@ (8003154 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d10f      	bne.n	80030ec <HAL_ADCEx_MultiModeConfigChannel+0x190>
 80030cc:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80030d0:	f7ff fce7 	bl	8002aa2 <LL_ADC_IsEnabled>
 80030d4:	4604      	mov	r4, r0
 80030d6:	481f      	ldr	r0, [pc, #124]	@ (8003154 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80030d8:	f7ff fce3 	bl	8002aa2 <LL_ADC_IsEnabled>
 80030dc:	4603      	mov	r3, r0
 80030de:	4323      	orrs	r3, r4
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	bf0c      	ite	eq
 80030e4:	2301      	moveq	r3, #1
 80030e6:	2300      	movne	r3, #0
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	e012      	b.n	8003112 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80030ec:	481a      	ldr	r0, [pc, #104]	@ (8003158 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80030ee:	f7ff fcd8 	bl	8002aa2 <LL_ADC_IsEnabled>
 80030f2:	4604      	mov	r4, r0
 80030f4:	4819      	ldr	r0, [pc, #100]	@ (800315c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80030f6:	f7ff fcd4 	bl	8002aa2 <LL_ADC_IsEnabled>
 80030fa:	4603      	mov	r3, r0
 80030fc:	431c      	orrs	r4, r3
 80030fe:	481a      	ldr	r0, [pc, #104]	@ (8003168 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003100:	f7ff fccf 	bl	8002aa2 <LL_ADC_IsEnabled>
 8003104:	4603      	mov	r3, r0
 8003106:	4323      	orrs	r3, r4
 8003108:	2b00      	cmp	r3, #0
 800310a:	bf0c      	ite	eq
 800310c:	2301      	moveq	r3, #1
 800310e:	2300      	movne	r3, #0
 8003110:	b2db      	uxtb	r3, r3
 8003112:	2b00      	cmp	r3, #0
 8003114:	d012      	beq.n	800313c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003116:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800311e:	f023 030f 	bic.w	r3, r3, #15
 8003122:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003124:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003126:	e009      	b.n	800313c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800312c:	f043 0220 	orr.w	r2, r3, #32
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800313a:	e000      	b.n	800313e <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800313c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2200      	movs	r2, #0
 8003142:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003146:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800314a:	4618      	mov	r0, r3
 800314c:	3784      	adds	r7, #132	@ 0x84
 800314e:	46bd      	mov	sp, r7
 8003150:	bd90      	pop	{r4, r7, pc}
 8003152:	bf00      	nop
 8003154:	50000100 	.word	0x50000100
 8003158:	50000400 	.word	0x50000400
 800315c:	50000500 	.word	0x50000500
 8003160:	50000300 	.word	0x50000300
 8003164:	50000700 	.word	0x50000700
 8003168:	50000600 	.word	0x50000600

0800316c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800316c:	b480      	push	{r7}
 800316e:	b085      	sub	sp, #20
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	f003 0307 	and.w	r3, r3, #7
 800317a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800317c:	4b0c      	ldr	r3, [pc, #48]	@ (80031b0 <__NVIC_SetPriorityGrouping+0x44>)
 800317e:	68db      	ldr	r3, [r3, #12]
 8003180:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003182:	68ba      	ldr	r2, [r7, #8]
 8003184:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003188:	4013      	ands	r3, r2
 800318a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003194:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003198:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800319c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800319e:	4a04      	ldr	r2, [pc, #16]	@ (80031b0 <__NVIC_SetPriorityGrouping+0x44>)
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	60d3      	str	r3, [r2, #12]
}
 80031a4:	bf00      	nop
 80031a6:	3714      	adds	r7, #20
 80031a8:	46bd      	mov	sp, r7
 80031aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ae:	4770      	bx	lr
 80031b0:	e000ed00 	.word	0xe000ed00

080031b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80031b4:	b480      	push	{r7}
 80031b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031b8:	4b04      	ldr	r3, [pc, #16]	@ (80031cc <__NVIC_GetPriorityGrouping+0x18>)
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	0a1b      	lsrs	r3, r3, #8
 80031be:	f003 0307 	and.w	r3, r3, #7
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	46bd      	mov	sp, r7
 80031c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ca:	4770      	bx	lr
 80031cc:	e000ed00 	.word	0xe000ed00

080031d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b083      	sub	sp, #12
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	4603      	mov	r3, r0
 80031d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	db0b      	blt.n	80031fa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031e2:	79fb      	ldrb	r3, [r7, #7]
 80031e4:	f003 021f 	and.w	r2, r3, #31
 80031e8:	4907      	ldr	r1, [pc, #28]	@ (8003208 <__NVIC_EnableIRQ+0x38>)
 80031ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ee:	095b      	lsrs	r3, r3, #5
 80031f0:	2001      	movs	r0, #1
 80031f2:	fa00 f202 	lsl.w	r2, r0, r2
 80031f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80031fa:	bf00      	nop
 80031fc:	370c      	adds	r7, #12
 80031fe:	46bd      	mov	sp, r7
 8003200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003204:	4770      	bx	lr
 8003206:	bf00      	nop
 8003208:	e000e100 	.word	0xe000e100

0800320c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800320c:	b480      	push	{r7}
 800320e:	b083      	sub	sp, #12
 8003210:	af00      	add	r7, sp, #0
 8003212:	4603      	mov	r3, r0
 8003214:	6039      	str	r1, [r7, #0]
 8003216:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003218:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800321c:	2b00      	cmp	r3, #0
 800321e:	db0a      	blt.n	8003236 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	b2da      	uxtb	r2, r3
 8003224:	490c      	ldr	r1, [pc, #48]	@ (8003258 <__NVIC_SetPriority+0x4c>)
 8003226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800322a:	0112      	lsls	r2, r2, #4
 800322c:	b2d2      	uxtb	r2, r2
 800322e:	440b      	add	r3, r1
 8003230:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003234:	e00a      	b.n	800324c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	b2da      	uxtb	r2, r3
 800323a:	4908      	ldr	r1, [pc, #32]	@ (800325c <__NVIC_SetPriority+0x50>)
 800323c:	79fb      	ldrb	r3, [r7, #7]
 800323e:	f003 030f 	and.w	r3, r3, #15
 8003242:	3b04      	subs	r3, #4
 8003244:	0112      	lsls	r2, r2, #4
 8003246:	b2d2      	uxtb	r2, r2
 8003248:	440b      	add	r3, r1
 800324a:	761a      	strb	r2, [r3, #24]
}
 800324c:	bf00      	nop
 800324e:	370c      	adds	r7, #12
 8003250:	46bd      	mov	sp, r7
 8003252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003256:	4770      	bx	lr
 8003258:	e000e100 	.word	0xe000e100
 800325c:	e000ed00 	.word	0xe000ed00

08003260 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003260:	b480      	push	{r7}
 8003262:	b089      	sub	sp, #36	@ 0x24
 8003264:	af00      	add	r7, sp, #0
 8003266:	60f8      	str	r0, [r7, #12]
 8003268:	60b9      	str	r1, [r7, #8]
 800326a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	f003 0307 	and.w	r3, r3, #7
 8003272:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003274:	69fb      	ldr	r3, [r7, #28]
 8003276:	f1c3 0307 	rsb	r3, r3, #7
 800327a:	2b04      	cmp	r3, #4
 800327c:	bf28      	it	cs
 800327e:	2304      	movcs	r3, #4
 8003280:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003282:	69fb      	ldr	r3, [r7, #28]
 8003284:	3304      	adds	r3, #4
 8003286:	2b06      	cmp	r3, #6
 8003288:	d902      	bls.n	8003290 <NVIC_EncodePriority+0x30>
 800328a:	69fb      	ldr	r3, [r7, #28]
 800328c:	3b03      	subs	r3, #3
 800328e:	e000      	b.n	8003292 <NVIC_EncodePriority+0x32>
 8003290:	2300      	movs	r3, #0
 8003292:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003294:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003298:	69bb      	ldr	r3, [r7, #24]
 800329a:	fa02 f303 	lsl.w	r3, r2, r3
 800329e:	43da      	mvns	r2, r3
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	401a      	ands	r2, r3
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032a8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	fa01 f303 	lsl.w	r3, r1, r3
 80032b2:	43d9      	mvns	r1, r3
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032b8:	4313      	orrs	r3, r2
         );
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	3724      	adds	r7, #36	@ 0x24
 80032be:	46bd      	mov	sp, r7
 80032c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c4:	4770      	bx	lr
	...

080032c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b082      	sub	sp, #8
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	3b01      	subs	r3, #1
 80032d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80032d8:	d301      	bcc.n	80032de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80032da:	2301      	movs	r3, #1
 80032dc:	e00f      	b.n	80032fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80032de:	4a0a      	ldr	r2, [pc, #40]	@ (8003308 <SysTick_Config+0x40>)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	3b01      	subs	r3, #1
 80032e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80032e6:	210f      	movs	r1, #15
 80032e8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80032ec:	f7ff ff8e 	bl	800320c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80032f0:	4b05      	ldr	r3, [pc, #20]	@ (8003308 <SysTick_Config+0x40>)
 80032f2:	2200      	movs	r2, #0
 80032f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80032f6:	4b04      	ldr	r3, [pc, #16]	@ (8003308 <SysTick_Config+0x40>)
 80032f8:	2207      	movs	r2, #7
 80032fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80032fc:	2300      	movs	r3, #0
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3708      	adds	r7, #8
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}
 8003306:	bf00      	nop
 8003308:	e000e010 	.word	0xe000e010

0800330c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b082      	sub	sp, #8
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003314:	6878      	ldr	r0, [r7, #4]
 8003316:	f7ff ff29 	bl	800316c <__NVIC_SetPriorityGrouping>
}
 800331a:	bf00      	nop
 800331c:	3708      	adds	r7, #8
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}

08003322 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003322:	b580      	push	{r7, lr}
 8003324:	b086      	sub	sp, #24
 8003326:	af00      	add	r7, sp, #0
 8003328:	4603      	mov	r3, r0
 800332a:	60b9      	str	r1, [r7, #8]
 800332c:	607a      	str	r2, [r7, #4]
 800332e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003330:	f7ff ff40 	bl	80031b4 <__NVIC_GetPriorityGrouping>
 8003334:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003336:	687a      	ldr	r2, [r7, #4]
 8003338:	68b9      	ldr	r1, [r7, #8]
 800333a:	6978      	ldr	r0, [r7, #20]
 800333c:	f7ff ff90 	bl	8003260 <NVIC_EncodePriority>
 8003340:	4602      	mov	r2, r0
 8003342:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003346:	4611      	mov	r1, r2
 8003348:	4618      	mov	r0, r3
 800334a:	f7ff ff5f 	bl	800320c <__NVIC_SetPriority>
}
 800334e:	bf00      	nop
 8003350:	3718      	adds	r7, #24
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}

08003356 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003356:	b580      	push	{r7, lr}
 8003358:	b082      	sub	sp, #8
 800335a:	af00      	add	r7, sp, #0
 800335c:	4603      	mov	r3, r0
 800335e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003360:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003364:	4618      	mov	r0, r3
 8003366:	f7ff ff33 	bl	80031d0 <__NVIC_EnableIRQ>
}
 800336a:	bf00      	nop
 800336c:	3708      	adds	r7, #8
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}

08003372 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003372:	b580      	push	{r7, lr}
 8003374:	b082      	sub	sp, #8
 8003376:	af00      	add	r7, sp, #0
 8003378:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f7ff ffa4 	bl	80032c8 <SysTick_Config>
 8003380:	4603      	mov	r3, r0
}
 8003382:	4618      	mov	r0, r3
 8003384:	3708      	adds	r7, #8
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}
	...

0800338c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b084      	sub	sp, #16
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d101      	bne.n	800339e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	e08d      	b.n	80034ba <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	461a      	mov	r2, r3
 80033a4:	4b47      	ldr	r3, [pc, #284]	@ (80034c4 <HAL_DMA_Init+0x138>)
 80033a6:	429a      	cmp	r2, r3
 80033a8:	d80f      	bhi.n	80033ca <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	461a      	mov	r2, r3
 80033b0:	4b45      	ldr	r3, [pc, #276]	@ (80034c8 <HAL_DMA_Init+0x13c>)
 80033b2:	4413      	add	r3, r2
 80033b4:	4a45      	ldr	r2, [pc, #276]	@ (80034cc <HAL_DMA_Init+0x140>)
 80033b6:	fba2 2303 	umull	r2, r3, r2, r3
 80033ba:	091b      	lsrs	r3, r3, #4
 80033bc:	009a      	lsls	r2, r3, #2
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	4a42      	ldr	r2, [pc, #264]	@ (80034d0 <HAL_DMA_Init+0x144>)
 80033c6:	641a      	str	r2, [r3, #64]	@ 0x40
 80033c8:	e00e      	b.n	80033e8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	461a      	mov	r2, r3
 80033d0:	4b40      	ldr	r3, [pc, #256]	@ (80034d4 <HAL_DMA_Init+0x148>)
 80033d2:	4413      	add	r3, r2
 80033d4:	4a3d      	ldr	r2, [pc, #244]	@ (80034cc <HAL_DMA_Init+0x140>)
 80033d6:	fba2 2303 	umull	r2, r3, r2, r3
 80033da:	091b      	lsrs	r3, r3, #4
 80033dc:	009a      	lsls	r2, r3, #2
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	4a3c      	ldr	r2, [pc, #240]	@ (80034d8 <HAL_DMA_Init+0x14c>)
 80033e6:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2202      	movs	r2, #2
 80033ec:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80033fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003402:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800340c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	691b      	ldr	r3, [r3, #16]
 8003412:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003418:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	699b      	ldr	r3, [r3, #24]
 800341e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003424:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6a1b      	ldr	r3, [r3, #32]
 800342a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800342c:	68fa      	ldr	r2, [r7, #12]
 800342e:	4313      	orrs	r3, r2
 8003430:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	68fa      	ldr	r2, [r7, #12]
 8003438:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f000 fa10 	bl	8003860 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003448:	d102      	bne.n	8003450 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2200      	movs	r2, #0
 800344e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	685a      	ldr	r2, [r3, #4]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003458:	b2d2      	uxtb	r2, r2
 800345a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003460:	687a      	ldr	r2, [r7, #4]
 8003462:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003464:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d010      	beq.n	8003490 <HAL_DMA_Init+0x104>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	2b04      	cmp	r3, #4
 8003474:	d80c      	bhi.n	8003490 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f000 fa30 	bl	80038dc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003480:	2200      	movs	r2, #0
 8003482:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003488:	687a      	ldr	r2, [r7, #4]
 800348a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800348c:	605a      	str	r2, [r3, #4]
 800348e:	e008      	b.n	80034a2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2200      	movs	r2, #0
 8003494:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2200      	movs	r2, #0
 800349a:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2200      	movs	r2, #0
 80034a0:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2200      	movs	r2, #0
 80034a6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2201      	movs	r2, #1
 80034ac:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2200      	movs	r2, #0
 80034b4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80034b8:	2300      	movs	r3, #0
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	3710      	adds	r7, #16
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}
 80034c2:	bf00      	nop
 80034c4:	40020407 	.word	0x40020407
 80034c8:	bffdfff8 	.word	0xbffdfff8
 80034cc:	cccccccd 	.word	0xcccccccd
 80034d0:	40020000 	.word	0x40020000
 80034d4:	bffdfbf8 	.word	0xbffdfbf8
 80034d8:	40020400 	.word	0x40020400

080034dc <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b086      	sub	sp, #24
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	60f8      	str	r0, [r7, #12]
 80034e4:	60b9      	str	r1, [r7, #8]
 80034e6:	607a      	str	r2, [r7, #4]
 80034e8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80034ea:	2300      	movs	r3, #0
 80034ec:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d101      	bne.n	80034fc <HAL_DMA_Start_IT+0x20>
 80034f8:	2302      	movs	r3, #2
 80034fa:	e066      	b.n	80035ca <HAL_DMA_Start_IT+0xee>
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2201      	movs	r2, #1
 8003500:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800350a:	b2db      	uxtb	r3, r3
 800350c:	2b01      	cmp	r3, #1
 800350e:	d155      	bne.n	80035bc <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2202      	movs	r2, #2
 8003514:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2200      	movs	r2, #0
 800351c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f022 0201 	bic.w	r2, r2, #1
 800352c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	687a      	ldr	r2, [r7, #4]
 8003532:	68b9      	ldr	r1, [r7, #8]
 8003534:	68f8      	ldr	r0, [r7, #12]
 8003536:	f000 f954 	bl	80037e2 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800353e:	2b00      	cmp	r3, #0
 8003540:	d008      	beq.n	8003554 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f042 020e 	orr.w	r2, r2, #14
 8003550:	601a      	str	r2, [r3, #0]
 8003552:	e00f      	b.n	8003574 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f022 0204 	bic.w	r2, r2, #4
 8003562:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f042 020a 	orr.w	r2, r2, #10
 8003572:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800357e:	2b00      	cmp	r3, #0
 8003580:	d007      	beq.n	8003592 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800358c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003590:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003596:	2b00      	cmp	r3, #0
 8003598:	d007      	beq.n	80035aa <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035a4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80035a8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f042 0201 	orr.w	r2, r2, #1
 80035b8:	601a      	str	r2, [r3, #0]
 80035ba:	e005      	b.n	80035c8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2200      	movs	r2, #0
 80035c0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80035c4:	2302      	movs	r3, #2
 80035c6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80035c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3718      	adds	r7, #24
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}

080035d2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80035d2:	b480      	push	{r7}
 80035d4:	b085      	sub	sp, #20
 80035d6:	af00      	add	r7, sp, #0
 80035d8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035da:	2300      	movs	r3, #0
 80035dc:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	2b02      	cmp	r3, #2
 80035e8:	d005      	beq.n	80035f6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2204      	movs	r2, #4
 80035ee:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	73fb      	strb	r3, [r7, #15]
 80035f4:	e037      	b.n	8003666 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f022 020e 	bic.w	r2, r2, #14
 8003604:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003610:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003614:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f022 0201 	bic.w	r2, r2, #1
 8003624:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800362a:	f003 021f 	and.w	r2, r3, #31
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003632:	2101      	movs	r1, #1
 8003634:	fa01 f202 	lsl.w	r2, r1, r2
 8003638:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800363e:	687a      	ldr	r2, [r7, #4]
 8003640:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003642:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003648:	2b00      	cmp	r3, #0
 800364a:	d00c      	beq.n	8003666 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003656:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800365a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003660:	687a      	ldr	r2, [r7, #4]
 8003662:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003664:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2201      	movs	r2, #1
 800366a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2200      	movs	r2, #0
 8003672:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8003676:	7bfb      	ldrb	r3, [r7, #15]
}
 8003678:	4618      	mov	r0, r3
 800367a:	3714      	adds	r7, #20
 800367c:	46bd      	mov	sp, r7
 800367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003682:	4770      	bx	lr

08003684 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b084      	sub	sp, #16
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036a0:	f003 031f 	and.w	r3, r3, #31
 80036a4:	2204      	movs	r2, #4
 80036a6:	409a      	lsls	r2, r3
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	4013      	ands	r3, r2
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d026      	beq.n	80036fe <HAL_DMA_IRQHandler+0x7a>
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	f003 0304 	and.w	r3, r3, #4
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d021      	beq.n	80036fe <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f003 0320 	and.w	r3, r3, #32
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d107      	bne.n	80036d8 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f022 0204 	bic.w	r2, r2, #4
 80036d6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036dc:	f003 021f 	and.w	r2, r3, #31
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036e4:	2104      	movs	r1, #4
 80036e6:	fa01 f202 	lsl.w	r2, r1, r2
 80036ea:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d071      	beq.n	80037d8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036f8:	6878      	ldr	r0, [r7, #4]
 80036fa:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80036fc:	e06c      	b.n	80037d8 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003702:	f003 031f 	and.w	r3, r3, #31
 8003706:	2202      	movs	r2, #2
 8003708:	409a      	lsls	r2, r3
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	4013      	ands	r3, r2
 800370e:	2b00      	cmp	r3, #0
 8003710:	d02e      	beq.n	8003770 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	f003 0302 	and.w	r3, r3, #2
 8003718:	2b00      	cmp	r3, #0
 800371a:	d029      	beq.n	8003770 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f003 0320 	and.w	r3, r3, #32
 8003726:	2b00      	cmp	r3, #0
 8003728:	d10b      	bne.n	8003742 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	681a      	ldr	r2, [r3, #0]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f022 020a 	bic.w	r2, r2, #10
 8003738:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2201      	movs	r2, #1
 800373e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003746:	f003 021f 	and.w	r2, r3, #31
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800374e:	2102      	movs	r1, #2
 8003750:	fa01 f202 	lsl.w	r2, r1, r2
 8003754:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2200      	movs	r2, #0
 800375a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003762:	2b00      	cmp	r3, #0
 8003764:	d038      	beq.n	80037d8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800376e:	e033      	b.n	80037d8 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003774:	f003 031f 	and.w	r3, r3, #31
 8003778:	2208      	movs	r2, #8
 800377a:	409a      	lsls	r2, r3
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	4013      	ands	r3, r2
 8003780:	2b00      	cmp	r3, #0
 8003782:	d02a      	beq.n	80037da <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	f003 0308 	and.w	r3, r3, #8
 800378a:	2b00      	cmp	r3, #0
 800378c:	d025      	beq.n	80037da <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f022 020e 	bic.w	r2, r2, #14
 800379c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037a2:	f003 021f 	and.w	r2, r3, #31
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037aa:	2101      	movs	r1, #1
 80037ac:	fa01 f202 	lsl.w	r2, r1, r2
 80037b0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2201      	movs	r2, #1
 80037b6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2201      	movs	r2, #1
 80037bc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2200      	movs	r2, #0
 80037c4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d004      	beq.n	80037da <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037d4:	6878      	ldr	r0, [r7, #4]
 80037d6:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80037d8:	bf00      	nop
 80037da:	bf00      	nop
}
 80037dc:	3710      	adds	r7, #16
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}

080037e2 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80037e2:	b480      	push	{r7}
 80037e4:	b085      	sub	sp, #20
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	60f8      	str	r0, [r7, #12]
 80037ea:	60b9      	str	r1, [r7, #8]
 80037ec:	607a      	str	r2, [r7, #4]
 80037ee:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037f4:	68fa      	ldr	r2, [r7, #12]
 80037f6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80037f8:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d004      	beq.n	800380c <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003806:	68fa      	ldr	r2, [r7, #12]
 8003808:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800380a:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003810:	f003 021f 	and.w	r2, r3, #31
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003818:	2101      	movs	r1, #1
 800381a:	fa01 f202 	lsl.w	r2, r1, r2
 800381e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	683a      	ldr	r2, [r7, #0]
 8003826:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	2b10      	cmp	r3, #16
 800382e:	d108      	bne.n	8003842 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	687a      	ldr	r2, [r7, #4]
 8003836:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	68ba      	ldr	r2, [r7, #8]
 800383e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003840:	e007      	b.n	8003852 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	68ba      	ldr	r2, [r7, #8]
 8003848:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	687a      	ldr	r2, [r7, #4]
 8003850:	60da      	str	r2, [r3, #12]
}
 8003852:	bf00      	nop
 8003854:	3714      	adds	r7, #20
 8003856:	46bd      	mov	sp, r7
 8003858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385c:	4770      	bx	lr
	...

08003860 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003860:	b480      	push	{r7}
 8003862:	b087      	sub	sp, #28
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	461a      	mov	r2, r3
 800386e:	4b16      	ldr	r3, [pc, #88]	@ (80038c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003870:	429a      	cmp	r2, r3
 8003872:	d802      	bhi.n	800387a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003874:	4b15      	ldr	r3, [pc, #84]	@ (80038cc <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003876:	617b      	str	r3, [r7, #20]
 8003878:	e001      	b.n	800387e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800387a:	4b15      	ldr	r3, [pc, #84]	@ (80038d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800387c:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	b2db      	uxtb	r3, r3
 8003888:	3b08      	subs	r3, #8
 800388a:	4a12      	ldr	r2, [pc, #72]	@ (80038d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800388c:	fba2 2303 	umull	r2, r3, r2, r3
 8003890:	091b      	lsrs	r3, r3, #4
 8003892:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003898:	089b      	lsrs	r3, r3, #2
 800389a:	009a      	lsls	r2, r3, #2
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	4413      	add	r3, r2
 80038a0:	461a      	mov	r2, r3
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	4a0b      	ldr	r2, [pc, #44]	@ (80038d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80038aa:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	f003 031f 	and.w	r3, r3, #31
 80038b2:	2201      	movs	r2, #1
 80038b4:	409a      	lsls	r2, r3
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80038ba:	bf00      	nop
 80038bc:	371c      	adds	r7, #28
 80038be:	46bd      	mov	sp, r7
 80038c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c4:	4770      	bx	lr
 80038c6:	bf00      	nop
 80038c8:	40020407 	.word	0x40020407
 80038cc:	40020800 	.word	0x40020800
 80038d0:	40020820 	.word	0x40020820
 80038d4:	cccccccd 	.word	0xcccccccd
 80038d8:	40020880 	.word	0x40020880

080038dc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80038dc:	b480      	push	{r7}
 80038de:	b085      	sub	sp, #20
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80038ec:	68fa      	ldr	r2, [r7, #12]
 80038ee:	4b0b      	ldr	r3, [pc, #44]	@ (800391c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80038f0:	4413      	add	r3, r2
 80038f2:	009b      	lsls	r3, r3, #2
 80038f4:	461a      	mov	r2, r3
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4a08      	ldr	r2, [pc, #32]	@ (8003920 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80038fe:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	3b01      	subs	r3, #1
 8003904:	f003 031f 	and.w	r3, r3, #31
 8003908:	2201      	movs	r2, #1
 800390a:	409a      	lsls	r2, r3
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8003910:	bf00      	nop
 8003912:	3714      	adds	r7, #20
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr
 800391c:	1000823f 	.word	0x1000823f
 8003920:	40020940 	.word	0x40020940

08003924 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003924:	b480      	push	{r7}
 8003926:	b087      	sub	sp, #28
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
 800392c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800392e:	2300      	movs	r3, #0
 8003930:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003932:	e15a      	b.n	8003bea <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	2101      	movs	r1, #1
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	fa01 f303 	lsl.w	r3, r1, r3
 8003940:	4013      	ands	r3, r2
 8003942:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	2b00      	cmp	r3, #0
 8003948:	f000 814c 	beq.w	8003be4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	f003 0303 	and.w	r3, r3, #3
 8003954:	2b01      	cmp	r3, #1
 8003956:	d005      	beq.n	8003964 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003960:	2b02      	cmp	r3, #2
 8003962:	d130      	bne.n	80039c6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	005b      	lsls	r3, r3, #1
 800396e:	2203      	movs	r2, #3
 8003970:	fa02 f303 	lsl.w	r3, r2, r3
 8003974:	43db      	mvns	r3, r3
 8003976:	693a      	ldr	r2, [r7, #16]
 8003978:	4013      	ands	r3, r2
 800397a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	68da      	ldr	r2, [r3, #12]
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	005b      	lsls	r3, r3, #1
 8003984:	fa02 f303 	lsl.w	r3, r2, r3
 8003988:	693a      	ldr	r2, [r7, #16]
 800398a:	4313      	orrs	r3, r2
 800398c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	693a      	ldr	r2, [r7, #16]
 8003992:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800399a:	2201      	movs	r2, #1
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	fa02 f303 	lsl.w	r3, r2, r3
 80039a2:	43db      	mvns	r3, r3
 80039a4:	693a      	ldr	r2, [r7, #16]
 80039a6:	4013      	ands	r3, r2
 80039a8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	091b      	lsrs	r3, r3, #4
 80039b0:	f003 0201 	and.w	r2, r3, #1
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	fa02 f303 	lsl.w	r3, r2, r3
 80039ba:	693a      	ldr	r2, [r7, #16]
 80039bc:	4313      	orrs	r3, r2
 80039be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	693a      	ldr	r2, [r7, #16]
 80039c4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	f003 0303 	and.w	r3, r3, #3
 80039ce:	2b03      	cmp	r3, #3
 80039d0:	d017      	beq.n	8003a02 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	68db      	ldr	r3, [r3, #12]
 80039d6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	005b      	lsls	r3, r3, #1
 80039dc:	2203      	movs	r2, #3
 80039de:	fa02 f303 	lsl.w	r3, r2, r3
 80039e2:	43db      	mvns	r3, r3
 80039e4:	693a      	ldr	r2, [r7, #16]
 80039e6:	4013      	ands	r3, r2
 80039e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	689a      	ldr	r2, [r3, #8]
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	005b      	lsls	r3, r3, #1
 80039f2:	fa02 f303 	lsl.w	r3, r2, r3
 80039f6:	693a      	ldr	r2, [r7, #16]
 80039f8:	4313      	orrs	r3, r2
 80039fa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	693a      	ldr	r2, [r7, #16]
 8003a00:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	f003 0303 	and.w	r3, r3, #3
 8003a0a:	2b02      	cmp	r3, #2
 8003a0c:	d123      	bne.n	8003a56 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	08da      	lsrs	r2, r3, #3
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	3208      	adds	r2, #8
 8003a16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a1a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	f003 0307 	and.w	r3, r3, #7
 8003a22:	009b      	lsls	r3, r3, #2
 8003a24:	220f      	movs	r2, #15
 8003a26:	fa02 f303 	lsl.w	r3, r2, r3
 8003a2a:	43db      	mvns	r3, r3
 8003a2c:	693a      	ldr	r2, [r7, #16]
 8003a2e:	4013      	ands	r3, r2
 8003a30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	691a      	ldr	r2, [r3, #16]
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	f003 0307 	and.w	r3, r3, #7
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a42:	693a      	ldr	r2, [r7, #16]
 8003a44:	4313      	orrs	r3, r2
 8003a46:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	08da      	lsrs	r2, r3, #3
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	3208      	adds	r2, #8
 8003a50:	6939      	ldr	r1, [r7, #16]
 8003a52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	005b      	lsls	r3, r3, #1
 8003a60:	2203      	movs	r2, #3
 8003a62:	fa02 f303 	lsl.w	r3, r2, r3
 8003a66:	43db      	mvns	r3, r3
 8003a68:	693a      	ldr	r2, [r7, #16]
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	f003 0203 	and.w	r2, r3, #3
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	005b      	lsls	r3, r3, #1
 8003a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a7e:	693a      	ldr	r2, [r7, #16]
 8003a80:	4313      	orrs	r3, r2
 8003a82:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	693a      	ldr	r2, [r7, #16]
 8003a88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	f000 80a6 	beq.w	8003be4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a98:	4b5b      	ldr	r3, [pc, #364]	@ (8003c08 <HAL_GPIO_Init+0x2e4>)
 8003a9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a9c:	4a5a      	ldr	r2, [pc, #360]	@ (8003c08 <HAL_GPIO_Init+0x2e4>)
 8003a9e:	f043 0301 	orr.w	r3, r3, #1
 8003aa2:	6613      	str	r3, [r2, #96]	@ 0x60
 8003aa4:	4b58      	ldr	r3, [pc, #352]	@ (8003c08 <HAL_GPIO_Init+0x2e4>)
 8003aa6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003aa8:	f003 0301 	and.w	r3, r3, #1
 8003aac:	60bb      	str	r3, [r7, #8]
 8003aae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003ab0:	4a56      	ldr	r2, [pc, #344]	@ (8003c0c <HAL_GPIO_Init+0x2e8>)
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	089b      	lsrs	r3, r3, #2
 8003ab6:	3302      	adds	r3, #2
 8003ab8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003abc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	f003 0303 	and.w	r3, r3, #3
 8003ac4:	009b      	lsls	r3, r3, #2
 8003ac6:	220f      	movs	r2, #15
 8003ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8003acc:	43db      	mvns	r3, r3
 8003ace:	693a      	ldr	r2, [r7, #16]
 8003ad0:	4013      	ands	r3, r2
 8003ad2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003ada:	d01f      	beq.n	8003b1c <HAL_GPIO_Init+0x1f8>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	4a4c      	ldr	r2, [pc, #304]	@ (8003c10 <HAL_GPIO_Init+0x2ec>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d019      	beq.n	8003b18 <HAL_GPIO_Init+0x1f4>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	4a4b      	ldr	r2, [pc, #300]	@ (8003c14 <HAL_GPIO_Init+0x2f0>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d013      	beq.n	8003b14 <HAL_GPIO_Init+0x1f0>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	4a4a      	ldr	r2, [pc, #296]	@ (8003c18 <HAL_GPIO_Init+0x2f4>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d00d      	beq.n	8003b10 <HAL_GPIO_Init+0x1ec>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	4a49      	ldr	r2, [pc, #292]	@ (8003c1c <HAL_GPIO_Init+0x2f8>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d007      	beq.n	8003b0c <HAL_GPIO_Init+0x1e8>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	4a48      	ldr	r2, [pc, #288]	@ (8003c20 <HAL_GPIO_Init+0x2fc>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d101      	bne.n	8003b08 <HAL_GPIO_Init+0x1e4>
 8003b04:	2305      	movs	r3, #5
 8003b06:	e00a      	b.n	8003b1e <HAL_GPIO_Init+0x1fa>
 8003b08:	2306      	movs	r3, #6
 8003b0a:	e008      	b.n	8003b1e <HAL_GPIO_Init+0x1fa>
 8003b0c:	2304      	movs	r3, #4
 8003b0e:	e006      	b.n	8003b1e <HAL_GPIO_Init+0x1fa>
 8003b10:	2303      	movs	r3, #3
 8003b12:	e004      	b.n	8003b1e <HAL_GPIO_Init+0x1fa>
 8003b14:	2302      	movs	r3, #2
 8003b16:	e002      	b.n	8003b1e <HAL_GPIO_Init+0x1fa>
 8003b18:	2301      	movs	r3, #1
 8003b1a:	e000      	b.n	8003b1e <HAL_GPIO_Init+0x1fa>
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	697a      	ldr	r2, [r7, #20]
 8003b20:	f002 0203 	and.w	r2, r2, #3
 8003b24:	0092      	lsls	r2, r2, #2
 8003b26:	4093      	lsls	r3, r2
 8003b28:	693a      	ldr	r2, [r7, #16]
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003b2e:	4937      	ldr	r1, [pc, #220]	@ (8003c0c <HAL_GPIO_Init+0x2e8>)
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	089b      	lsrs	r3, r3, #2
 8003b34:	3302      	adds	r3, #2
 8003b36:	693a      	ldr	r2, [r7, #16]
 8003b38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003b3c:	4b39      	ldr	r3, [pc, #228]	@ (8003c24 <HAL_GPIO_Init+0x300>)
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	43db      	mvns	r3, r3
 8003b46:	693a      	ldr	r2, [r7, #16]
 8003b48:	4013      	ands	r3, r2
 8003b4a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d003      	beq.n	8003b60 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003b58:	693a      	ldr	r2, [r7, #16]
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003b60:	4a30      	ldr	r2, [pc, #192]	@ (8003c24 <HAL_GPIO_Init+0x300>)
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003b66:	4b2f      	ldr	r3, [pc, #188]	@ (8003c24 <HAL_GPIO_Init+0x300>)
 8003b68:	68db      	ldr	r3, [r3, #12]
 8003b6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	43db      	mvns	r3, r3
 8003b70:	693a      	ldr	r2, [r7, #16]
 8003b72:	4013      	ands	r3, r2
 8003b74:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d003      	beq.n	8003b8a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003b82:	693a      	ldr	r2, [r7, #16]
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	4313      	orrs	r3, r2
 8003b88:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003b8a:	4a26      	ldr	r2, [pc, #152]	@ (8003c24 <HAL_GPIO_Init+0x300>)
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003b90:	4b24      	ldr	r3, [pc, #144]	@ (8003c24 <HAL_GPIO_Init+0x300>)
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	43db      	mvns	r3, r3
 8003b9a:	693a      	ldr	r2, [r7, #16]
 8003b9c:	4013      	ands	r3, r2
 8003b9e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d003      	beq.n	8003bb4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003bac:	693a      	ldr	r2, [r7, #16]
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003bb4:	4a1b      	ldr	r2, [pc, #108]	@ (8003c24 <HAL_GPIO_Init+0x300>)
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003bba:	4b1a      	ldr	r3, [pc, #104]	@ (8003c24 <HAL_GPIO_Init+0x300>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	43db      	mvns	r3, r3
 8003bc4:	693a      	ldr	r2, [r7, #16]
 8003bc6:	4013      	ands	r3, r2
 8003bc8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d003      	beq.n	8003bde <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003bd6:	693a      	ldr	r2, [r7, #16]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003bde:	4a11      	ldr	r2, [pc, #68]	@ (8003c24 <HAL_GPIO_Init+0x300>)
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	3301      	adds	r3, #1
 8003be8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	fa22 f303 	lsr.w	r3, r2, r3
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	f47f ae9d 	bne.w	8003934 <HAL_GPIO_Init+0x10>
  }
}
 8003bfa:	bf00      	nop
 8003bfc:	bf00      	nop
 8003bfe:	371c      	adds	r7, #28
 8003c00:	46bd      	mov	sp, r7
 8003c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c06:	4770      	bx	lr
 8003c08:	40021000 	.word	0x40021000
 8003c0c:	40010000 	.word	0x40010000
 8003c10:	48000400 	.word	0x48000400
 8003c14:	48000800 	.word	0x48000800
 8003c18:	48000c00 	.word	0x48000c00
 8003c1c:	48001000 	.word	0x48001000
 8003c20:	48001400 	.word	0x48001400
 8003c24:	40010400 	.word	0x40010400

08003c28 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b082      	sub	sp, #8
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	4603      	mov	r3, r0
 8003c30:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003c32:	4b08      	ldr	r3, [pc, #32]	@ (8003c54 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003c34:	695a      	ldr	r2, [r3, #20]
 8003c36:	88fb      	ldrh	r3, [r7, #6]
 8003c38:	4013      	ands	r3, r2
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d006      	beq.n	8003c4c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003c3e:	4a05      	ldr	r2, [pc, #20]	@ (8003c54 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003c40:	88fb      	ldrh	r3, [r7, #6]
 8003c42:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003c44:	88fb      	ldrh	r3, [r7, #6]
 8003c46:	4618      	mov	r0, r3
 8003c48:	f000 f806 	bl	8003c58 <HAL_GPIO_EXTI_Callback>
  }
}
 8003c4c:	bf00      	nop
 8003c4e:	3708      	adds	r7, #8
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}
 8003c54:	40010400 	.word	0x40010400

08003c58 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b083      	sub	sp, #12
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	4603      	mov	r3, r0
 8003c60:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003c62:	bf00      	nop
 8003c64:	370c      	adds	r7, #12
 8003c66:	46bd      	mov	sp, r7
 8003c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6c:	4770      	bx	lr
	...

08003c70 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b085      	sub	sp, #20
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d141      	bne.n	8003d02 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003c7e:	4b4b      	ldr	r3, [pc, #300]	@ (8003dac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003c86:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c8a:	d131      	bne.n	8003cf0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003c8c:	4b47      	ldr	r3, [pc, #284]	@ (8003dac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003c92:	4a46      	ldr	r2, [pc, #280]	@ (8003dac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c94:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003c98:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003c9c:	4b43      	ldr	r3, [pc, #268]	@ (8003dac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003ca4:	4a41      	ldr	r2, [pc, #260]	@ (8003dac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ca6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003caa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003cac:	4b40      	ldr	r3, [pc, #256]	@ (8003db0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	2232      	movs	r2, #50	@ 0x32
 8003cb2:	fb02 f303 	mul.w	r3, r2, r3
 8003cb6:	4a3f      	ldr	r2, [pc, #252]	@ (8003db4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003cb8:	fba2 2303 	umull	r2, r3, r2, r3
 8003cbc:	0c9b      	lsrs	r3, r3, #18
 8003cbe:	3301      	adds	r3, #1
 8003cc0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003cc2:	e002      	b.n	8003cca <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	3b01      	subs	r3, #1
 8003cc8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003cca:	4b38      	ldr	r3, [pc, #224]	@ (8003dac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ccc:	695b      	ldr	r3, [r3, #20]
 8003cce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cd2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003cd6:	d102      	bne.n	8003cde <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d1f2      	bne.n	8003cc4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003cde:	4b33      	ldr	r3, [pc, #204]	@ (8003dac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ce0:	695b      	ldr	r3, [r3, #20]
 8003ce2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ce6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003cea:	d158      	bne.n	8003d9e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003cec:	2303      	movs	r3, #3
 8003cee:	e057      	b.n	8003da0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003cf0:	4b2e      	ldr	r3, [pc, #184]	@ (8003dac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cf2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003cf6:	4a2d      	ldr	r2, [pc, #180]	@ (8003dac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cf8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003cfc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003d00:	e04d      	b.n	8003d9e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d08:	d141      	bne.n	8003d8e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003d0a:	4b28      	ldr	r3, [pc, #160]	@ (8003dac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003d12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d16:	d131      	bne.n	8003d7c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003d18:	4b24      	ldr	r3, [pc, #144]	@ (8003dac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003d1e:	4a23      	ldr	r2, [pc, #140]	@ (8003dac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d24:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003d28:	4b20      	ldr	r3, [pc, #128]	@ (8003dac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003d30:	4a1e      	ldr	r2, [pc, #120]	@ (8003dac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d32:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003d36:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003d38:	4b1d      	ldr	r3, [pc, #116]	@ (8003db0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	2232      	movs	r2, #50	@ 0x32
 8003d3e:	fb02 f303 	mul.w	r3, r2, r3
 8003d42:	4a1c      	ldr	r2, [pc, #112]	@ (8003db4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003d44:	fba2 2303 	umull	r2, r3, r2, r3
 8003d48:	0c9b      	lsrs	r3, r3, #18
 8003d4a:	3301      	adds	r3, #1
 8003d4c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d4e:	e002      	b.n	8003d56 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	3b01      	subs	r3, #1
 8003d54:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d56:	4b15      	ldr	r3, [pc, #84]	@ (8003dac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d58:	695b      	ldr	r3, [r3, #20]
 8003d5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d5e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d62:	d102      	bne.n	8003d6a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d1f2      	bne.n	8003d50 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003d6a:	4b10      	ldr	r3, [pc, #64]	@ (8003dac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d6c:	695b      	ldr	r3, [r3, #20]
 8003d6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d72:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d76:	d112      	bne.n	8003d9e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003d78:	2303      	movs	r3, #3
 8003d7a:	e011      	b.n	8003da0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003d7c:	4b0b      	ldr	r3, [pc, #44]	@ (8003dac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003d82:	4a0a      	ldr	r2, [pc, #40]	@ (8003dac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d88:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003d8c:	e007      	b.n	8003d9e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003d8e:	4b07      	ldr	r3, [pc, #28]	@ (8003dac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003d96:	4a05      	ldr	r2, [pc, #20]	@ (8003dac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d98:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003d9c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003d9e:	2300      	movs	r3, #0
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	3714      	adds	r7, #20
 8003da4:	46bd      	mov	sp, r7
 8003da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003daa:	4770      	bx	lr
 8003dac:	40007000 	.word	0x40007000
 8003db0:	20000000 	.word	0x20000000
 8003db4:	431bde83 	.word	0x431bde83

08003db8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003db8:	b480      	push	{r7}
 8003dba:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003dbc:	4b05      	ldr	r3, [pc, #20]	@ (8003dd4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	4a04      	ldr	r2, [pc, #16]	@ (8003dd4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003dc2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003dc6:	6093      	str	r3, [r2, #8]
}
 8003dc8:	bf00      	nop
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd0:	4770      	bx	lr
 8003dd2:	bf00      	nop
 8003dd4:	40007000 	.word	0x40007000

08003dd8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b088      	sub	sp, #32
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d101      	bne.n	8003dea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	e2fe      	b.n	80043e8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f003 0301 	and.w	r3, r3, #1
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d075      	beq.n	8003ee2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003df6:	4b97      	ldr	r3, [pc, #604]	@ (8004054 <HAL_RCC_OscConfig+0x27c>)
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	f003 030c 	and.w	r3, r3, #12
 8003dfe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e00:	4b94      	ldr	r3, [pc, #592]	@ (8004054 <HAL_RCC_OscConfig+0x27c>)
 8003e02:	68db      	ldr	r3, [r3, #12]
 8003e04:	f003 0303 	and.w	r3, r3, #3
 8003e08:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003e0a:	69bb      	ldr	r3, [r7, #24]
 8003e0c:	2b0c      	cmp	r3, #12
 8003e0e:	d102      	bne.n	8003e16 <HAL_RCC_OscConfig+0x3e>
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	2b03      	cmp	r3, #3
 8003e14:	d002      	beq.n	8003e1c <HAL_RCC_OscConfig+0x44>
 8003e16:	69bb      	ldr	r3, [r7, #24]
 8003e18:	2b08      	cmp	r3, #8
 8003e1a:	d10b      	bne.n	8003e34 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e1c:	4b8d      	ldr	r3, [pc, #564]	@ (8004054 <HAL_RCC_OscConfig+0x27c>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d05b      	beq.n	8003ee0 <HAL_RCC_OscConfig+0x108>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d157      	bne.n	8003ee0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003e30:	2301      	movs	r3, #1
 8003e32:	e2d9      	b.n	80043e8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e3c:	d106      	bne.n	8003e4c <HAL_RCC_OscConfig+0x74>
 8003e3e:	4b85      	ldr	r3, [pc, #532]	@ (8004054 <HAL_RCC_OscConfig+0x27c>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a84      	ldr	r2, [pc, #528]	@ (8004054 <HAL_RCC_OscConfig+0x27c>)
 8003e44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e48:	6013      	str	r3, [r2, #0]
 8003e4a:	e01d      	b.n	8003e88 <HAL_RCC_OscConfig+0xb0>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003e54:	d10c      	bne.n	8003e70 <HAL_RCC_OscConfig+0x98>
 8003e56:	4b7f      	ldr	r3, [pc, #508]	@ (8004054 <HAL_RCC_OscConfig+0x27c>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a7e      	ldr	r2, [pc, #504]	@ (8004054 <HAL_RCC_OscConfig+0x27c>)
 8003e5c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003e60:	6013      	str	r3, [r2, #0]
 8003e62:	4b7c      	ldr	r3, [pc, #496]	@ (8004054 <HAL_RCC_OscConfig+0x27c>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a7b      	ldr	r2, [pc, #492]	@ (8004054 <HAL_RCC_OscConfig+0x27c>)
 8003e68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e6c:	6013      	str	r3, [r2, #0]
 8003e6e:	e00b      	b.n	8003e88 <HAL_RCC_OscConfig+0xb0>
 8003e70:	4b78      	ldr	r3, [pc, #480]	@ (8004054 <HAL_RCC_OscConfig+0x27c>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a77      	ldr	r2, [pc, #476]	@ (8004054 <HAL_RCC_OscConfig+0x27c>)
 8003e76:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e7a:	6013      	str	r3, [r2, #0]
 8003e7c:	4b75      	ldr	r3, [pc, #468]	@ (8004054 <HAL_RCC_OscConfig+0x27c>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a74      	ldr	r2, [pc, #464]	@ (8004054 <HAL_RCC_OscConfig+0x27c>)
 8003e82:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003e86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d013      	beq.n	8003eb8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e90:	f7fd fa22 	bl	80012d8 <HAL_GetTick>
 8003e94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e96:	e008      	b.n	8003eaa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e98:	f7fd fa1e 	bl	80012d8 <HAL_GetTick>
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	1ad3      	subs	r3, r2, r3
 8003ea2:	2b64      	cmp	r3, #100	@ 0x64
 8003ea4:	d901      	bls.n	8003eaa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003ea6:	2303      	movs	r3, #3
 8003ea8:	e29e      	b.n	80043e8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003eaa:	4b6a      	ldr	r3, [pc, #424]	@ (8004054 <HAL_RCC_OscConfig+0x27c>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d0f0      	beq.n	8003e98 <HAL_RCC_OscConfig+0xc0>
 8003eb6:	e014      	b.n	8003ee2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eb8:	f7fd fa0e 	bl	80012d8 <HAL_GetTick>
 8003ebc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003ebe:	e008      	b.n	8003ed2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ec0:	f7fd fa0a 	bl	80012d8 <HAL_GetTick>
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	1ad3      	subs	r3, r2, r3
 8003eca:	2b64      	cmp	r3, #100	@ 0x64
 8003ecc:	d901      	bls.n	8003ed2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003ece:	2303      	movs	r3, #3
 8003ed0:	e28a      	b.n	80043e8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003ed2:	4b60      	ldr	r3, [pc, #384]	@ (8004054 <HAL_RCC_OscConfig+0x27c>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d1f0      	bne.n	8003ec0 <HAL_RCC_OscConfig+0xe8>
 8003ede:	e000      	b.n	8003ee2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ee0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f003 0302 	and.w	r3, r3, #2
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d075      	beq.n	8003fda <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003eee:	4b59      	ldr	r3, [pc, #356]	@ (8004054 <HAL_RCC_OscConfig+0x27c>)
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	f003 030c 	and.w	r3, r3, #12
 8003ef6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ef8:	4b56      	ldr	r3, [pc, #344]	@ (8004054 <HAL_RCC_OscConfig+0x27c>)
 8003efa:	68db      	ldr	r3, [r3, #12]
 8003efc:	f003 0303 	and.w	r3, r3, #3
 8003f00:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003f02:	69bb      	ldr	r3, [r7, #24]
 8003f04:	2b0c      	cmp	r3, #12
 8003f06:	d102      	bne.n	8003f0e <HAL_RCC_OscConfig+0x136>
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	2b02      	cmp	r3, #2
 8003f0c:	d002      	beq.n	8003f14 <HAL_RCC_OscConfig+0x13c>
 8003f0e:	69bb      	ldr	r3, [r7, #24]
 8003f10:	2b04      	cmp	r3, #4
 8003f12:	d11f      	bne.n	8003f54 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f14:	4b4f      	ldr	r3, [pc, #316]	@ (8004054 <HAL_RCC_OscConfig+0x27c>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d005      	beq.n	8003f2c <HAL_RCC_OscConfig+0x154>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	68db      	ldr	r3, [r3, #12]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d101      	bne.n	8003f2c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	e25d      	b.n	80043e8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f2c:	4b49      	ldr	r3, [pc, #292]	@ (8004054 <HAL_RCC_OscConfig+0x27c>)
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	691b      	ldr	r3, [r3, #16]
 8003f38:	061b      	lsls	r3, r3, #24
 8003f3a:	4946      	ldr	r1, [pc, #280]	@ (8004054 <HAL_RCC_OscConfig+0x27c>)
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003f40:	4b45      	ldr	r3, [pc, #276]	@ (8004058 <HAL_RCC_OscConfig+0x280>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4618      	mov	r0, r3
 8003f46:	f7fd f97b 	bl	8001240 <HAL_InitTick>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d043      	beq.n	8003fd8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	e249      	b.n	80043e8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	68db      	ldr	r3, [r3, #12]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d023      	beq.n	8003fa4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f5c:	4b3d      	ldr	r3, [pc, #244]	@ (8004054 <HAL_RCC_OscConfig+0x27c>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a3c      	ldr	r2, [pc, #240]	@ (8004054 <HAL_RCC_OscConfig+0x27c>)
 8003f62:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f68:	f7fd f9b6 	bl	80012d8 <HAL_GetTick>
 8003f6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f6e:	e008      	b.n	8003f82 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f70:	f7fd f9b2 	bl	80012d8 <HAL_GetTick>
 8003f74:	4602      	mov	r2, r0
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	1ad3      	subs	r3, r2, r3
 8003f7a:	2b02      	cmp	r3, #2
 8003f7c:	d901      	bls.n	8003f82 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003f7e:	2303      	movs	r3, #3
 8003f80:	e232      	b.n	80043e8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f82:	4b34      	ldr	r3, [pc, #208]	@ (8004054 <HAL_RCC_OscConfig+0x27c>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d0f0      	beq.n	8003f70 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f8e:	4b31      	ldr	r3, [pc, #196]	@ (8004054 <HAL_RCC_OscConfig+0x27c>)
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	691b      	ldr	r3, [r3, #16]
 8003f9a:	061b      	lsls	r3, r3, #24
 8003f9c:	492d      	ldr	r1, [pc, #180]	@ (8004054 <HAL_RCC_OscConfig+0x27c>)
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	604b      	str	r3, [r1, #4]
 8003fa2:	e01a      	b.n	8003fda <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003fa4:	4b2b      	ldr	r3, [pc, #172]	@ (8004054 <HAL_RCC_OscConfig+0x27c>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a2a      	ldr	r2, [pc, #168]	@ (8004054 <HAL_RCC_OscConfig+0x27c>)
 8003faa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003fae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fb0:	f7fd f992 	bl	80012d8 <HAL_GetTick>
 8003fb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003fb6:	e008      	b.n	8003fca <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fb8:	f7fd f98e 	bl	80012d8 <HAL_GetTick>
 8003fbc:	4602      	mov	r2, r0
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	1ad3      	subs	r3, r2, r3
 8003fc2:	2b02      	cmp	r3, #2
 8003fc4:	d901      	bls.n	8003fca <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003fc6:	2303      	movs	r3, #3
 8003fc8:	e20e      	b.n	80043e8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003fca:	4b22      	ldr	r3, [pc, #136]	@ (8004054 <HAL_RCC_OscConfig+0x27c>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d1f0      	bne.n	8003fb8 <HAL_RCC_OscConfig+0x1e0>
 8003fd6:	e000      	b.n	8003fda <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003fd8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f003 0308 	and.w	r3, r3, #8
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d041      	beq.n	800406a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	695b      	ldr	r3, [r3, #20]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d01c      	beq.n	8004028 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003fee:	4b19      	ldr	r3, [pc, #100]	@ (8004054 <HAL_RCC_OscConfig+0x27c>)
 8003ff0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ff4:	4a17      	ldr	r2, [pc, #92]	@ (8004054 <HAL_RCC_OscConfig+0x27c>)
 8003ff6:	f043 0301 	orr.w	r3, r3, #1
 8003ffa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ffe:	f7fd f96b 	bl	80012d8 <HAL_GetTick>
 8004002:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004004:	e008      	b.n	8004018 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004006:	f7fd f967 	bl	80012d8 <HAL_GetTick>
 800400a:	4602      	mov	r2, r0
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	1ad3      	subs	r3, r2, r3
 8004010:	2b02      	cmp	r3, #2
 8004012:	d901      	bls.n	8004018 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004014:	2303      	movs	r3, #3
 8004016:	e1e7      	b.n	80043e8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004018:	4b0e      	ldr	r3, [pc, #56]	@ (8004054 <HAL_RCC_OscConfig+0x27c>)
 800401a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800401e:	f003 0302 	and.w	r3, r3, #2
 8004022:	2b00      	cmp	r3, #0
 8004024:	d0ef      	beq.n	8004006 <HAL_RCC_OscConfig+0x22e>
 8004026:	e020      	b.n	800406a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004028:	4b0a      	ldr	r3, [pc, #40]	@ (8004054 <HAL_RCC_OscConfig+0x27c>)
 800402a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800402e:	4a09      	ldr	r2, [pc, #36]	@ (8004054 <HAL_RCC_OscConfig+0x27c>)
 8004030:	f023 0301 	bic.w	r3, r3, #1
 8004034:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004038:	f7fd f94e 	bl	80012d8 <HAL_GetTick>
 800403c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800403e:	e00d      	b.n	800405c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004040:	f7fd f94a 	bl	80012d8 <HAL_GetTick>
 8004044:	4602      	mov	r2, r0
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	1ad3      	subs	r3, r2, r3
 800404a:	2b02      	cmp	r3, #2
 800404c:	d906      	bls.n	800405c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800404e:	2303      	movs	r3, #3
 8004050:	e1ca      	b.n	80043e8 <HAL_RCC_OscConfig+0x610>
 8004052:	bf00      	nop
 8004054:	40021000 	.word	0x40021000
 8004058:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800405c:	4b8c      	ldr	r3, [pc, #560]	@ (8004290 <HAL_RCC_OscConfig+0x4b8>)
 800405e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004062:	f003 0302 	and.w	r3, r3, #2
 8004066:	2b00      	cmp	r3, #0
 8004068:	d1ea      	bne.n	8004040 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f003 0304 	and.w	r3, r3, #4
 8004072:	2b00      	cmp	r3, #0
 8004074:	f000 80a6 	beq.w	80041c4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004078:	2300      	movs	r3, #0
 800407a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800407c:	4b84      	ldr	r3, [pc, #528]	@ (8004290 <HAL_RCC_OscConfig+0x4b8>)
 800407e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004080:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004084:	2b00      	cmp	r3, #0
 8004086:	d101      	bne.n	800408c <HAL_RCC_OscConfig+0x2b4>
 8004088:	2301      	movs	r3, #1
 800408a:	e000      	b.n	800408e <HAL_RCC_OscConfig+0x2b6>
 800408c:	2300      	movs	r3, #0
 800408e:	2b00      	cmp	r3, #0
 8004090:	d00d      	beq.n	80040ae <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004092:	4b7f      	ldr	r3, [pc, #508]	@ (8004290 <HAL_RCC_OscConfig+0x4b8>)
 8004094:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004096:	4a7e      	ldr	r2, [pc, #504]	@ (8004290 <HAL_RCC_OscConfig+0x4b8>)
 8004098:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800409c:	6593      	str	r3, [r2, #88]	@ 0x58
 800409e:	4b7c      	ldr	r3, [pc, #496]	@ (8004290 <HAL_RCC_OscConfig+0x4b8>)
 80040a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040a6:	60fb      	str	r3, [r7, #12]
 80040a8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80040aa:	2301      	movs	r3, #1
 80040ac:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040ae:	4b79      	ldr	r3, [pc, #484]	@ (8004294 <HAL_RCC_OscConfig+0x4bc>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d118      	bne.n	80040ec <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80040ba:	4b76      	ldr	r3, [pc, #472]	@ (8004294 <HAL_RCC_OscConfig+0x4bc>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a75      	ldr	r2, [pc, #468]	@ (8004294 <HAL_RCC_OscConfig+0x4bc>)
 80040c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80040c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040c6:	f7fd f907 	bl	80012d8 <HAL_GetTick>
 80040ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040cc:	e008      	b.n	80040e0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040ce:	f7fd f903 	bl	80012d8 <HAL_GetTick>
 80040d2:	4602      	mov	r2, r0
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	1ad3      	subs	r3, r2, r3
 80040d8:	2b02      	cmp	r3, #2
 80040da:	d901      	bls.n	80040e0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80040dc:	2303      	movs	r3, #3
 80040de:	e183      	b.n	80043e8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040e0:	4b6c      	ldr	r3, [pc, #432]	@ (8004294 <HAL_RCC_OscConfig+0x4bc>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d0f0      	beq.n	80040ce <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	2b01      	cmp	r3, #1
 80040f2:	d108      	bne.n	8004106 <HAL_RCC_OscConfig+0x32e>
 80040f4:	4b66      	ldr	r3, [pc, #408]	@ (8004290 <HAL_RCC_OscConfig+0x4b8>)
 80040f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040fa:	4a65      	ldr	r2, [pc, #404]	@ (8004290 <HAL_RCC_OscConfig+0x4b8>)
 80040fc:	f043 0301 	orr.w	r3, r3, #1
 8004100:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004104:	e024      	b.n	8004150 <HAL_RCC_OscConfig+0x378>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	2b05      	cmp	r3, #5
 800410c:	d110      	bne.n	8004130 <HAL_RCC_OscConfig+0x358>
 800410e:	4b60      	ldr	r3, [pc, #384]	@ (8004290 <HAL_RCC_OscConfig+0x4b8>)
 8004110:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004114:	4a5e      	ldr	r2, [pc, #376]	@ (8004290 <HAL_RCC_OscConfig+0x4b8>)
 8004116:	f043 0304 	orr.w	r3, r3, #4
 800411a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800411e:	4b5c      	ldr	r3, [pc, #368]	@ (8004290 <HAL_RCC_OscConfig+0x4b8>)
 8004120:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004124:	4a5a      	ldr	r2, [pc, #360]	@ (8004290 <HAL_RCC_OscConfig+0x4b8>)
 8004126:	f043 0301 	orr.w	r3, r3, #1
 800412a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800412e:	e00f      	b.n	8004150 <HAL_RCC_OscConfig+0x378>
 8004130:	4b57      	ldr	r3, [pc, #348]	@ (8004290 <HAL_RCC_OscConfig+0x4b8>)
 8004132:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004136:	4a56      	ldr	r2, [pc, #344]	@ (8004290 <HAL_RCC_OscConfig+0x4b8>)
 8004138:	f023 0301 	bic.w	r3, r3, #1
 800413c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004140:	4b53      	ldr	r3, [pc, #332]	@ (8004290 <HAL_RCC_OscConfig+0x4b8>)
 8004142:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004146:	4a52      	ldr	r2, [pc, #328]	@ (8004290 <HAL_RCC_OscConfig+0x4b8>)
 8004148:	f023 0304 	bic.w	r3, r3, #4
 800414c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d016      	beq.n	8004186 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004158:	f7fd f8be 	bl	80012d8 <HAL_GetTick>
 800415c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800415e:	e00a      	b.n	8004176 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004160:	f7fd f8ba 	bl	80012d8 <HAL_GetTick>
 8004164:	4602      	mov	r2, r0
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	1ad3      	subs	r3, r2, r3
 800416a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800416e:	4293      	cmp	r3, r2
 8004170:	d901      	bls.n	8004176 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004172:	2303      	movs	r3, #3
 8004174:	e138      	b.n	80043e8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004176:	4b46      	ldr	r3, [pc, #280]	@ (8004290 <HAL_RCC_OscConfig+0x4b8>)
 8004178:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800417c:	f003 0302 	and.w	r3, r3, #2
 8004180:	2b00      	cmp	r3, #0
 8004182:	d0ed      	beq.n	8004160 <HAL_RCC_OscConfig+0x388>
 8004184:	e015      	b.n	80041b2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004186:	f7fd f8a7 	bl	80012d8 <HAL_GetTick>
 800418a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800418c:	e00a      	b.n	80041a4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800418e:	f7fd f8a3 	bl	80012d8 <HAL_GetTick>
 8004192:	4602      	mov	r2, r0
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	1ad3      	subs	r3, r2, r3
 8004198:	f241 3288 	movw	r2, #5000	@ 0x1388
 800419c:	4293      	cmp	r3, r2
 800419e:	d901      	bls.n	80041a4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80041a0:	2303      	movs	r3, #3
 80041a2:	e121      	b.n	80043e8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80041a4:	4b3a      	ldr	r3, [pc, #232]	@ (8004290 <HAL_RCC_OscConfig+0x4b8>)
 80041a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041aa:	f003 0302 	and.w	r3, r3, #2
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d1ed      	bne.n	800418e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80041b2:	7ffb      	ldrb	r3, [r7, #31]
 80041b4:	2b01      	cmp	r3, #1
 80041b6:	d105      	bne.n	80041c4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041b8:	4b35      	ldr	r3, [pc, #212]	@ (8004290 <HAL_RCC_OscConfig+0x4b8>)
 80041ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041bc:	4a34      	ldr	r2, [pc, #208]	@ (8004290 <HAL_RCC_OscConfig+0x4b8>)
 80041be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80041c2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f003 0320 	and.w	r3, r3, #32
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d03c      	beq.n	800424a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	699b      	ldr	r3, [r3, #24]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d01c      	beq.n	8004212 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80041d8:	4b2d      	ldr	r3, [pc, #180]	@ (8004290 <HAL_RCC_OscConfig+0x4b8>)
 80041da:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80041de:	4a2c      	ldr	r2, [pc, #176]	@ (8004290 <HAL_RCC_OscConfig+0x4b8>)
 80041e0:	f043 0301 	orr.w	r3, r3, #1
 80041e4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041e8:	f7fd f876 	bl	80012d8 <HAL_GetTick>
 80041ec:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80041ee:	e008      	b.n	8004202 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80041f0:	f7fd f872 	bl	80012d8 <HAL_GetTick>
 80041f4:	4602      	mov	r2, r0
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	1ad3      	subs	r3, r2, r3
 80041fa:	2b02      	cmp	r3, #2
 80041fc:	d901      	bls.n	8004202 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80041fe:	2303      	movs	r3, #3
 8004200:	e0f2      	b.n	80043e8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004202:	4b23      	ldr	r3, [pc, #140]	@ (8004290 <HAL_RCC_OscConfig+0x4b8>)
 8004204:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004208:	f003 0302 	and.w	r3, r3, #2
 800420c:	2b00      	cmp	r3, #0
 800420e:	d0ef      	beq.n	80041f0 <HAL_RCC_OscConfig+0x418>
 8004210:	e01b      	b.n	800424a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004212:	4b1f      	ldr	r3, [pc, #124]	@ (8004290 <HAL_RCC_OscConfig+0x4b8>)
 8004214:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004218:	4a1d      	ldr	r2, [pc, #116]	@ (8004290 <HAL_RCC_OscConfig+0x4b8>)
 800421a:	f023 0301 	bic.w	r3, r3, #1
 800421e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004222:	f7fd f859 	bl	80012d8 <HAL_GetTick>
 8004226:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004228:	e008      	b.n	800423c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800422a:	f7fd f855 	bl	80012d8 <HAL_GetTick>
 800422e:	4602      	mov	r2, r0
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	1ad3      	subs	r3, r2, r3
 8004234:	2b02      	cmp	r3, #2
 8004236:	d901      	bls.n	800423c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004238:	2303      	movs	r3, #3
 800423a:	e0d5      	b.n	80043e8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800423c:	4b14      	ldr	r3, [pc, #80]	@ (8004290 <HAL_RCC_OscConfig+0x4b8>)
 800423e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004242:	f003 0302 	and.w	r3, r3, #2
 8004246:	2b00      	cmp	r3, #0
 8004248:	d1ef      	bne.n	800422a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	69db      	ldr	r3, [r3, #28]
 800424e:	2b00      	cmp	r3, #0
 8004250:	f000 80c9 	beq.w	80043e6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004254:	4b0e      	ldr	r3, [pc, #56]	@ (8004290 <HAL_RCC_OscConfig+0x4b8>)
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	f003 030c 	and.w	r3, r3, #12
 800425c:	2b0c      	cmp	r3, #12
 800425e:	f000 8083 	beq.w	8004368 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	69db      	ldr	r3, [r3, #28]
 8004266:	2b02      	cmp	r3, #2
 8004268:	d15e      	bne.n	8004328 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800426a:	4b09      	ldr	r3, [pc, #36]	@ (8004290 <HAL_RCC_OscConfig+0x4b8>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a08      	ldr	r2, [pc, #32]	@ (8004290 <HAL_RCC_OscConfig+0x4b8>)
 8004270:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004274:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004276:	f7fd f82f 	bl	80012d8 <HAL_GetTick>
 800427a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800427c:	e00c      	b.n	8004298 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800427e:	f7fd f82b 	bl	80012d8 <HAL_GetTick>
 8004282:	4602      	mov	r2, r0
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	1ad3      	subs	r3, r2, r3
 8004288:	2b02      	cmp	r3, #2
 800428a:	d905      	bls.n	8004298 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800428c:	2303      	movs	r3, #3
 800428e:	e0ab      	b.n	80043e8 <HAL_RCC_OscConfig+0x610>
 8004290:	40021000 	.word	0x40021000
 8004294:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004298:	4b55      	ldr	r3, [pc, #340]	@ (80043f0 <HAL_RCC_OscConfig+0x618>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d1ec      	bne.n	800427e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80042a4:	4b52      	ldr	r3, [pc, #328]	@ (80043f0 <HAL_RCC_OscConfig+0x618>)
 80042a6:	68da      	ldr	r2, [r3, #12]
 80042a8:	4b52      	ldr	r3, [pc, #328]	@ (80043f4 <HAL_RCC_OscConfig+0x61c>)
 80042aa:	4013      	ands	r3, r2
 80042ac:	687a      	ldr	r2, [r7, #4]
 80042ae:	6a11      	ldr	r1, [r2, #32]
 80042b0:	687a      	ldr	r2, [r7, #4]
 80042b2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80042b4:	3a01      	subs	r2, #1
 80042b6:	0112      	lsls	r2, r2, #4
 80042b8:	4311      	orrs	r1, r2
 80042ba:	687a      	ldr	r2, [r7, #4]
 80042bc:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80042be:	0212      	lsls	r2, r2, #8
 80042c0:	4311      	orrs	r1, r2
 80042c2:	687a      	ldr	r2, [r7, #4]
 80042c4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80042c6:	0852      	lsrs	r2, r2, #1
 80042c8:	3a01      	subs	r2, #1
 80042ca:	0552      	lsls	r2, r2, #21
 80042cc:	4311      	orrs	r1, r2
 80042ce:	687a      	ldr	r2, [r7, #4]
 80042d0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80042d2:	0852      	lsrs	r2, r2, #1
 80042d4:	3a01      	subs	r2, #1
 80042d6:	0652      	lsls	r2, r2, #25
 80042d8:	4311      	orrs	r1, r2
 80042da:	687a      	ldr	r2, [r7, #4]
 80042dc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80042de:	06d2      	lsls	r2, r2, #27
 80042e0:	430a      	orrs	r2, r1
 80042e2:	4943      	ldr	r1, [pc, #268]	@ (80043f0 <HAL_RCC_OscConfig+0x618>)
 80042e4:	4313      	orrs	r3, r2
 80042e6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80042e8:	4b41      	ldr	r3, [pc, #260]	@ (80043f0 <HAL_RCC_OscConfig+0x618>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a40      	ldr	r2, [pc, #256]	@ (80043f0 <HAL_RCC_OscConfig+0x618>)
 80042ee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80042f2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80042f4:	4b3e      	ldr	r3, [pc, #248]	@ (80043f0 <HAL_RCC_OscConfig+0x618>)
 80042f6:	68db      	ldr	r3, [r3, #12]
 80042f8:	4a3d      	ldr	r2, [pc, #244]	@ (80043f0 <HAL_RCC_OscConfig+0x618>)
 80042fa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80042fe:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004300:	f7fc ffea 	bl	80012d8 <HAL_GetTick>
 8004304:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004306:	e008      	b.n	800431a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004308:	f7fc ffe6 	bl	80012d8 <HAL_GetTick>
 800430c:	4602      	mov	r2, r0
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	1ad3      	subs	r3, r2, r3
 8004312:	2b02      	cmp	r3, #2
 8004314:	d901      	bls.n	800431a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004316:	2303      	movs	r3, #3
 8004318:	e066      	b.n	80043e8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800431a:	4b35      	ldr	r3, [pc, #212]	@ (80043f0 <HAL_RCC_OscConfig+0x618>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004322:	2b00      	cmp	r3, #0
 8004324:	d0f0      	beq.n	8004308 <HAL_RCC_OscConfig+0x530>
 8004326:	e05e      	b.n	80043e6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004328:	4b31      	ldr	r3, [pc, #196]	@ (80043f0 <HAL_RCC_OscConfig+0x618>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a30      	ldr	r2, [pc, #192]	@ (80043f0 <HAL_RCC_OscConfig+0x618>)
 800432e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004332:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004334:	f7fc ffd0 	bl	80012d8 <HAL_GetTick>
 8004338:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800433a:	e008      	b.n	800434e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800433c:	f7fc ffcc 	bl	80012d8 <HAL_GetTick>
 8004340:	4602      	mov	r2, r0
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	1ad3      	subs	r3, r2, r3
 8004346:	2b02      	cmp	r3, #2
 8004348:	d901      	bls.n	800434e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800434a:	2303      	movs	r3, #3
 800434c:	e04c      	b.n	80043e8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800434e:	4b28      	ldr	r3, [pc, #160]	@ (80043f0 <HAL_RCC_OscConfig+0x618>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004356:	2b00      	cmp	r3, #0
 8004358:	d1f0      	bne.n	800433c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800435a:	4b25      	ldr	r3, [pc, #148]	@ (80043f0 <HAL_RCC_OscConfig+0x618>)
 800435c:	68da      	ldr	r2, [r3, #12]
 800435e:	4924      	ldr	r1, [pc, #144]	@ (80043f0 <HAL_RCC_OscConfig+0x618>)
 8004360:	4b25      	ldr	r3, [pc, #148]	@ (80043f8 <HAL_RCC_OscConfig+0x620>)
 8004362:	4013      	ands	r3, r2
 8004364:	60cb      	str	r3, [r1, #12]
 8004366:	e03e      	b.n	80043e6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	69db      	ldr	r3, [r3, #28]
 800436c:	2b01      	cmp	r3, #1
 800436e:	d101      	bne.n	8004374 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	e039      	b.n	80043e8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004374:	4b1e      	ldr	r3, [pc, #120]	@ (80043f0 <HAL_RCC_OscConfig+0x618>)
 8004376:	68db      	ldr	r3, [r3, #12]
 8004378:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	f003 0203 	and.w	r2, r3, #3
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6a1b      	ldr	r3, [r3, #32]
 8004384:	429a      	cmp	r2, r3
 8004386:	d12c      	bne.n	80043e2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004392:	3b01      	subs	r3, #1
 8004394:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004396:	429a      	cmp	r2, r3
 8004398:	d123      	bne.n	80043e2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043a4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80043a6:	429a      	cmp	r2, r3
 80043a8:	d11b      	bne.n	80043e2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043b4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80043b6:	429a      	cmp	r2, r3
 80043b8:	d113      	bne.n	80043e2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043c4:	085b      	lsrs	r3, r3, #1
 80043c6:	3b01      	subs	r3, #1
 80043c8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80043ca:	429a      	cmp	r2, r3
 80043cc:	d109      	bne.n	80043e2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043d8:	085b      	lsrs	r3, r3, #1
 80043da:	3b01      	subs	r3, #1
 80043dc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80043de:	429a      	cmp	r2, r3
 80043e0:	d001      	beq.n	80043e6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80043e2:	2301      	movs	r3, #1
 80043e4:	e000      	b.n	80043e8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80043e6:	2300      	movs	r3, #0
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	3720      	adds	r7, #32
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd80      	pop	{r7, pc}
 80043f0:	40021000 	.word	0x40021000
 80043f4:	019f800c 	.word	0x019f800c
 80043f8:	feeefffc 	.word	0xfeeefffc

080043fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b086      	sub	sp, #24
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
 8004404:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004406:	2300      	movs	r3, #0
 8004408:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d101      	bne.n	8004414 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004410:	2301      	movs	r3, #1
 8004412:	e11e      	b.n	8004652 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004414:	4b91      	ldr	r3, [pc, #580]	@ (800465c <HAL_RCC_ClockConfig+0x260>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f003 030f 	and.w	r3, r3, #15
 800441c:	683a      	ldr	r2, [r7, #0]
 800441e:	429a      	cmp	r2, r3
 8004420:	d910      	bls.n	8004444 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004422:	4b8e      	ldr	r3, [pc, #568]	@ (800465c <HAL_RCC_ClockConfig+0x260>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f023 020f 	bic.w	r2, r3, #15
 800442a:	498c      	ldr	r1, [pc, #560]	@ (800465c <HAL_RCC_ClockConfig+0x260>)
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	4313      	orrs	r3, r2
 8004430:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004432:	4b8a      	ldr	r3, [pc, #552]	@ (800465c <HAL_RCC_ClockConfig+0x260>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f003 030f 	and.w	r3, r3, #15
 800443a:	683a      	ldr	r2, [r7, #0]
 800443c:	429a      	cmp	r2, r3
 800443e:	d001      	beq.n	8004444 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	e106      	b.n	8004652 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f003 0301 	and.w	r3, r3, #1
 800444c:	2b00      	cmp	r3, #0
 800444e:	d073      	beq.n	8004538 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	2b03      	cmp	r3, #3
 8004456:	d129      	bne.n	80044ac <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004458:	4b81      	ldr	r3, [pc, #516]	@ (8004660 <HAL_RCC_ClockConfig+0x264>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004460:	2b00      	cmp	r3, #0
 8004462:	d101      	bne.n	8004468 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	e0f4      	b.n	8004652 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004468:	f000 f99e 	bl	80047a8 <RCC_GetSysClockFreqFromPLLSource>
 800446c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	4a7c      	ldr	r2, [pc, #496]	@ (8004664 <HAL_RCC_ClockConfig+0x268>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d93f      	bls.n	80044f6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004476:	4b7a      	ldr	r3, [pc, #488]	@ (8004660 <HAL_RCC_ClockConfig+0x264>)
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800447e:	2b00      	cmp	r3, #0
 8004480:	d009      	beq.n	8004496 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800448a:	2b00      	cmp	r3, #0
 800448c:	d033      	beq.n	80044f6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004492:	2b00      	cmp	r3, #0
 8004494:	d12f      	bne.n	80044f6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004496:	4b72      	ldr	r3, [pc, #456]	@ (8004660 <HAL_RCC_ClockConfig+0x264>)
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800449e:	4a70      	ldr	r2, [pc, #448]	@ (8004660 <HAL_RCC_ClockConfig+0x264>)
 80044a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80044a4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80044a6:	2380      	movs	r3, #128	@ 0x80
 80044a8:	617b      	str	r3, [r7, #20]
 80044aa:	e024      	b.n	80044f6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	2b02      	cmp	r3, #2
 80044b2:	d107      	bne.n	80044c4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80044b4:	4b6a      	ldr	r3, [pc, #424]	@ (8004660 <HAL_RCC_ClockConfig+0x264>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d109      	bne.n	80044d4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80044c0:	2301      	movs	r3, #1
 80044c2:	e0c6      	b.n	8004652 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80044c4:	4b66      	ldr	r3, [pc, #408]	@ (8004660 <HAL_RCC_ClockConfig+0x264>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d101      	bne.n	80044d4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80044d0:	2301      	movs	r3, #1
 80044d2:	e0be      	b.n	8004652 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80044d4:	f000 f8ce 	bl	8004674 <HAL_RCC_GetSysClockFreq>
 80044d8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	4a61      	ldr	r2, [pc, #388]	@ (8004664 <HAL_RCC_ClockConfig+0x268>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d909      	bls.n	80044f6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80044e2:	4b5f      	ldr	r3, [pc, #380]	@ (8004660 <HAL_RCC_ClockConfig+0x264>)
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80044ea:	4a5d      	ldr	r2, [pc, #372]	@ (8004660 <HAL_RCC_ClockConfig+0x264>)
 80044ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80044f0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80044f2:	2380      	movs	r3, #128	@ 0x80
 80044f4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80044f6:	4b5a      	ldr	r3, [pc, #360]	@ (8004660 <HAL_RCC_ClockConfig+0x264>)
 80044f8:	689b      	ldr	r3, [r3, #8]
 80044fa:	f023 0203 	bic.w	r2, r3, #3
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	4957      	ldr	r1, [pc, #348]	@ (8004660 <HAL_RCC_ClockConfig+0x264>)
 8004504:	4313      	orrs	r3, r2
 8004506:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004508:	f7fc fee6 	bl	80012d8 <HAL_GetTick>
 800450c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800450e:	e00a      	b.n	8004526 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004510:	f7fc fee2 	bl	80012d8 <HAL_GetTick>
 8004514:	4602      	mov	r2, r0
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	1ad3      	subs	r3, r2, r3
 800451a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800451e:	4293      	cmp	r3, r2
 8004520:	d901      	bls.n	8004526 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004522:	2303      	movs	r3, #3
 8004524:	e095      	b.n	8004652 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004526:	4b4e      	ldr	r3, [pc, #312]	@ (8004660 <HAL_RCC_ClockConfig+0x264>)
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	f003 020c 	and.w	r2, r3, #12
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	009b      	lsls	r3, r3, #2
 8004534:	429a      	cmp	r2, r3
 8004536:	d1eb      	bne.n	8004510 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f003 0302 	and.w	r3, r3, #2
 8004540:	2b00      	cmp	r3, #0
 8004542:	d023      	beq.n	800458c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f003 0304 	and.w	r3, r3, #4
 800454c:	2b00      	cmp	r3, #0
 800454e:	d005      	beq.n	800455c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004550:	4b43      	ldr	r3, [pc, #268]	@ (8004660 <HAL_RCC_ClockConfig+0x264>)
 8004552:	689b      	ldr	r3, [r3, #8]
 8004554:	4a42      	ldr	r2, [pc, #264]	@ (8004660 <HAL_RCC_ClockConfig+0x264>)
 8004556:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800455a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f003 0308 	and.w	r3, r3, #8
 8004564:	2b00      	cmp	r3, #0
 8004566:	d007      	beq.n	8004578 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004568:	4b3d      	ldr	r3, [pc, #244]	@ (8004660 <HAL_RCC_ClockConfig+0x264>)
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004570:	4a3b      	ldr	r2, [pc, #236]	@ (8004660 <HAL_RCC_ClockConfig+0x264>)
 8004572:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004576:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004578:	4b39      	ldr	r3, [pc, #228]	@ (8004660 <HAL_RCC_ClockConfig+0x264>)
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	4936      	ldr	r1, [pc, #216]	@ (8004660 <HAL_RCC_ClockConfig+0x264>)
 8004586:	4313      	orrs	r3, r2
 8004588:	608b      	str	r3, [r1, #8]
 800458a:	e008      	b.n	800459e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	2b80      	cmp	r3, #128	@ 0x80
 8004590:	d105      	bne.n	800459e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004592:	4b33      	ldr	r3, [pc, #204]	@ (8004660 <HAL_RCC_ClockConfig+0x264>)
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	4a32      	ldr	r2, [pc, #200]	@ (8004660 <HAL_RCC_ClockConfig+0x264>)
 8004598:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800459c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800459e:	4b2f      	ldr	r3, [pc, #188]	@ (800465c <HAL_RCC_ClockConfig+0x260>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f003 030f 	and.w	r3, r3, #15
 80045a6:	683a      	ldr	r2, [r7, #0]
 80045a8:	429a      	cmp	r2, r3
 80045aa:	d21d      	bcs.n	80045e8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045ac:	4b2b      	ldr	r3, [pc, #172]	@ (800465c <HAL_RCC_ClockConfig+0x260>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f023 020f 	bic.w	r2, r3, #15
 80045b4:	4929      	ldr	r1, [pc, #164]	@ (800465c <HAL_RCC_ClockConfig+0x260>)
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	4313      	orrs	r3, r2
 80045ba:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80045bc:	f7fc fe8c 	bl	80012d8 <HAL_GetTick>
 80045c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045c2:	e00a      	b.n	80045da <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045c4:	f7fc fe88 	bl	80012d8 <HAL_GetTick>
 80045c8:	4602      	mov	r2, r0
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	1ad3      	subs	r3, r2, r3
 80045ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d901      	bls.n	80045da <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80045d6:	2303      	movs	r3, #3
 80045d8:	e03b      	b.n	8004652 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045da:	4b20      	ldr	r3, [pc, #128]	@ (800465c <HAL_RCC_ClockConfig+0x260>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f003 030f 	and.w	r3, r3, #15
 80045e2:	683a      	ldr	r2, [r7, #0]
 80045e4:	429a      	cmp	r2, r3
 80045e6:	d1ed      	bne.n	80045c4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f003 0304 	and.w	r3, r3, #4
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d008      	beq.n	8004606 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80045f4:	4b1a      	ldr	r3, [pc, #104]	@ (8004660 <HAL_RCC_ClockConfig+0x264>)
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	68db      	ldr	r3, [r3, #12]
 8004600:	4917      	ldr	r1, [pc, #92]	@ (8004660 <HAL_RCC_ClockConfig+0x264>)
 8004602:	4313      	orrs	r3, r2
 8004604:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f003 0308 	and.w	r3, r3, #8
 800460e:	2b00      	cmp	r3, #0
 8004610:	d009      	beq.n	8004626 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004612:	4b13      	ldr	r3, [pc, #76]	@ (8004660 <HAL_RCC_ClockConfig+0x264>)
 8004614:	689b      	ldr	r3, [r3, #8]
 8004616:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	691b      	ldr	r3, [r3, #16]
 800461e:	00db      	lsls	r3, r3, #3
 8004620:	490f      	ldr	r1, [pc, #60]	@ (8004660 <HAL_RCC_ClockConfig+0x264>)
 8004622:	4313      	orrs	r3, r2
 8004624:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004626:	f000 f825 	bl	8004674 <HAL_RCC_GetSysClockFreq>
 800462a:	4602      	mov	r2, r0
 800462c:	4b0c      	ldr	r3, [pc, #48]	@ (8004660 <HAL_RCC_ClockConfig+0x264>)
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	091b      	lsrs	r3, r3, #4
 8004632:	f003 030f 	and.w	r3, r3, #15
 8004636:	490c      	ldr	r1, [pc, #48]	@ (8004668 <HAL_RCC_ClockConfig+0x26c>)
 8004638:	5ccb      	ldrb	r3, [r1, r3]
 800463a:	f003 031f 	and.w	r3, r3, #31
 800463e:	fa22 f303 	lsr.w	r3, r2, r3
 8004642:	4a0a      	ldr	r2, [pc, #40]	@ (800466c <HAL_RCC_ClockConfig+0x270>)
 8004644:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004646:	4b0a      	ldr	r3, [pc, #40]	@ (8004670 <HAL_RCC_ClockConfig+0x274>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4618      	mov	r0, r3
 800464c:	f7fc fdf8 	bl	8001240 <HAL_InitTick>
 8004650:	4603      	mov	r3, r0
}
 8004652:	4618      	mov	r0, r3
 8004654:	3718      	adds	r7, #24
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}
 800465a:	bf00      	nop
 800465c:	40022000 	.word	0x40022000
 8004660:	40021000 	.word	0x40021000
 8004664:	04c4b400 	.word	0x04c4b400
 8004668:	080064a0 	.word	0x080064a0
 800466c:	20000000 	.word	0x20000000
 8004670:	20000004 	.word	0x20000004

08004674 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004674:	b480      	push	{r7}
 8004676:	b087      	sub	sp, #28
 8004678:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800467a:	4b2c      	ldr	r3, [pc, #176]	@ (800472c <HAL_RCC_GetSysClockFreq+0xb8>)
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	f003 030c 	and.w	r3, r3, #12
 8004682:	2b04      	cmp	r3, #4
 8004684:	d102      	bne.n	800468c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004686:	4b2a      	ldr	r3, [pc, #168]	@ (8004730 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004688:	613b      	str	r3, [r7, #16]
 800468a:	e047      	b.n	800471c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800468c:	4b27      	ldr	r3, [pc, #156]	@ (800472c <HAL_RCC_GetSysClockFreq+0xb8>)
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	f003 030c 	and.w	r3, r3, #12
 8004694:	2b08      	cmp	r3, #8
 8004696:	d102      	bne.n	800469e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004698:	4b26      	ldr	r3, [pc, #152]	@ (8004734 <HAL_RCC_GetSysClockFreq+0xc0>)
 800469a:	613b      	str	r3, [r7, #16]
 800469c:	e03e      	b.n	800471c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800469e:	4b23      	ldr	r3, [pc, #140]	@ (800472c <HAL_RCC_GetSysClockFreq+0xb8>)
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	f003 030c 	and.w	r3, r3, #12
 80046a6:	2b0c      	cmp	r3, #12
 80046a8:	d136      	bne.n	8004718 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80046aa:	4b20      	ldr	r3, [pc, #128]	@ (800472c <HAL_RCC_GetSysClockFreq+0xb8>)
 80046ac:	68db      	ldr	r3, [r3, #12]
 80046ae:	f003 0303 	and.w	r3, r3, #3
 80046b2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80046b4:	4b1d      	ldr	r3, [pc, #116]	@ (800472c <HAL_RCC_GetSysClockFreq+0xb8>)
 80046b6:	68db      	ldr	r3, [r3, #12]
 80046b8:	091b      	lsrs	r3, r3, #4
 80046ba:	f003 030f 	and.w	r3, r3, #15
 80046be:	3301      	adds	r3, #1
 80046c0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2b03      	cmp	r3, #3
 80046c6:	d10c      	bne.n	80046e2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80046c8:	4a1a      	ldr	r2, [pc, #104]	@ (8004734 <HAL_RCC_GetSysClockFreq+0xc0>)
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80046d0:	4a16      	ldr	r2, [pc, #88]	@ (800472c <HAL_RCC_GetSysClockFreq+0xb8>)
 80046d2:	68d2      	ldr	r2, [r2, #12]
 80046d4:	0a12      	lsrs	r2, r2, #8
 80046d6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80046da:	fb02 f303 	mul.w	r3, r2, r3
 80046de:	617b      	str	r3, [r7, #20]
      break;
 80046e0:	e00c      	b.n	80046fc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80046e2:	4a13      	ldr	r2, [pc, #76]	@ (8004730 <HAL_RCC_GetSysClockFreq+0xbc>)
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80046ea:	4a10      	ldr	r2, [pc, #64]	@ (800472c <HAL_RCC_GetSysClockFreq+0xb8>)
 80046ec:	68d2      	ldr	r2, [r2, #12]
 80046ee:	0a12      	lsrs	r2, r2, #8
 80046f0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80046f4:	fb02 f303 	mul.w	r3, r2, r3
 80046f8:	617b      	str	r3, [r7, #20]
      break;
 80046fa:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80046fc:	4b0b      	ldr	r3, [pc, #44]	@ (800472c <HAL_RCC_GetSysClockFreq+0xb8>)
 80046fe:	68db      	ldr	r3, [r3, #12]
 8004700:	0e5b      	lsrs	r3, r3, #25
 8004702:	f003 0303 	and.w	r3, r3, #3
 8004706:	3301      	adds	r3, #1
 8004708:	005b      	lsls	r3, r3, #1
 800470a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800470c:	697a      	ldr	r2, [r7, #20]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	fbb2 f3f3 	udiv	r3, r2, r3
 8004714:	613b      	str	r3, [r7, #16]
 8004716:	e001      	b.n	800471c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004718:	2300      	movs	r3, #0
 800471a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800471c:	693b      	ldr	r3, [r7, #16]
}
 800471e:	4618      	mov	r0, r3
 8004720:	371c      	adds	r7, #28
 8004722:	46bd      	mov	sp, r7
 8004724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004728:	4770      	bx	lr
 800472a:	bf00      	nop
 800472c:	40021000 	.word	0x40021000
 8004730:	00f42400 	.word	0x00f42400
 8004734:	016e3600 	.word	0x016e3600

08004738 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004738:	b480      	push	{r7}
 800473a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800473c:	4b03      	ldr	r3, [pc, #12]	@ (800474c <HAL_RCC_GetHCLKFreq+0x14>)
 800473e:	681b      	ldr	r3, [r3, #0]
}
 8004740:	4618      	mov	r0, r3
 8004742:	46bd      	mov	sp, r7
 8004744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004748:	4770      	bx	lr
 800474a:	bf00      	nop
 800474c:	20000000 	.word	0x20000000

08004750 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004754:	f7ff fff0 	bl	8004738 <HAL_RCC_GetHCLKFreq>
 8004758:	4602      	mov	r2, r0
 800475a:	4b06      	ldr	r3, [pc, #24]	@ (8004774 <HAL_RCC_GetPCLK1Freq+0x24>)
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	0a1b      	lsrs	r3, r3, #8
 8004760:	f003 0307 	and.w	r3, r3, #7
 8004764:	4904      	ldr	r1, [pc, #16]	@ (8004778 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004766:	5ccb      	ldrb	r3, [r1, r3]
 8004768:	f003 031f 	and.w	r3, r3, #31
 800476c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004770:	4618      	mov	r0, r3
 8004772:	bd80      	pop	{r7, pc}
 8004774:	40021000 	.word	0x40021000
 8004778:	080064b0 	.word	0x080064b0

0800477c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004780:	f7ff ffda 	bl	8004738 <HAL_RCC_GetHCLKFreq>
 8004784:	4602      	mov	r2, r0
 8004786:	4b06      	ldr	r3, [pc, #24]	@ (80047a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004788:	689b      	ldr	r3, [r3, #8]
 800478a:	0adb      	lsrs	r3, r3, #11
 800478c:	f003 0307 	and.w	r3, r3, #7
 8004790:	4904      	ldr	r1, [pc, #16]	@ (80047a4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004792:	5ccb      	ldrb	r3, [r1, r3]
 8004794:	f003 031f 	and.w	r3, r3, #31
 8004798:	fa22 f303 	lsr.w	r3, r2, r3
}
 800479c:	4618      	mov	r0, r3
 800479e:	bd80      	pop	{r7, pc}
 80047a0:	40021000 	.word	0x40021000
 80047a4:	080064b0 	.word	0x080064b0

080047a8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b087      	sub	sp, #28
 80047ac:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80047ae:	4b1e      	ldr	r3, [pc, #120]	@ (8004828 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80047b0:	68db      	ldr	r3, [r3, #12]
 80047b2:	f003 0303 	and.w	r3, r3, #3
 80047b6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80047b8:	4b1b      	ldr	r3, [pc, #108]	@ (8004828 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80047ba:	68db      	ldr	r3, [r3, #12]
 80047bc:	091b      	lsrs	r3, r3, #4
 80047be:	f003 030f 	and.w	r3, r3, #15
 80047c2:	3301      	adds	r3, #1
 80047c4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	2b03      	cmp	r3, #3
 80047ca:	d10c      	bne.n	80047e6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80047cc:	4a17      	ldr	r2, [pc, #92]	@ (800482c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80047d4:	4a14      	ldr	r2, [pc, #80]	@ (8004828 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80047d6:	68d2      	ldr	r2, [r2, #12]
 80047d8:	0a12      	lsrs	r2, r2, #8
 80047da:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80047de:	fb02 f303 	mul.w	r3, r2, r3
 80047e2:	617b      	str	r3, [r7, #20]
    break;
 80047e4:	e00c      	b.n	8004800 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80047e6:	4a12      	ldr	r2, [pc, #72]	@ (8004830 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80047ee:	4a0e      	ldr	r2, [pc, #56]	@ (8004828 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80047f0:	68d2      	ldr	r2, [r2, #12]
 80047f2:	0a12      	lsrs	r2, r2, #8
 80047f4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80047f8:	fb02 f303 	mul.w	r3, r2, r3
 80047fc:	617b      	str	r3, [r7, #20]
    break;
 80047fe:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004800:	4b09      	ldr	r3, [pc, #36]	@ (8004828 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004802:	68db      	ldr	r3, [r3, #12]
 8004804:	0e5b      	lsrs	r3, r3, #25
 8004806:	f003 0303 	and.w	r3, r3, #3
 800480a:	3301      	adds	r3, #1
 800480c:	005b      	lsls	r3, r3, #1
 800480e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004810:	697a      	ldr	r2, [r7, #20]
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	fbb2 f3f3 	udiv	r3, r2, r3
 8004818:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800481a:	687b      	ldr	r3, [r7, #4]
}
 800481c:	4618      	mov	r0, r3
 800481e:	371c      	adds	r7, #28
 8004820:	46bd      	mov	sp, r7
 8004822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004826:	4770      	bx	lr
 8004828:	40021000 	.word	0x40021000
 800482c:	016e3600 	.word	0x016e3600
 8004830:	00f42400 	.word	0x00f42400

08004834 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b086      	sub	sp, #24
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800483c:	2300      	movs	r3, #0
 800483e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004840:	2300      	movs	r3, #0
 8004842:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800484c:	2b00      	cmp	r3, #0
 800484e:	f000 8098 	beq.w	8004982 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004852:	2300      	movs	r3, #0
 8004854:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004856:	4b43      	ldr	r3, [pc, #268]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004858:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800485a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800485e:	2b00      	cmp	r3, #0
 8004860:	d10d      	bne.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004862:	4b40      	ldr	r3, [pc, #256]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004864:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004866:	4a3f      	ldr	r2, [pc, #252]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004868:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800486c:	6593      	str	r3, [r2, #88]	@ 0x58
 800486e:	4b3d      	ldr	r3, [pc, #244]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004870:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004872:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004876:	60bb      	str	r3, [r7, #8]
 8004878:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800487a:	2301      	movs	r3, #1
 800487c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800487e:	4b3a      	ldr	r3, [pc, #232]	@ (8004968 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a39      	ldr	r2, [pc, #228]	@ (8004968 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004884:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004888:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800488a:	f7fc fd25 	bl	80012d8 <HAL_GetTick>
 800488e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004890:	e009      	b.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004892:	f7fc fd21 	bl	80012d8 <HAL_GetTick>
 8004896:	4602      	mov	r2, r0
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	1ad3      	subs	r3, r2, r3
 800489c:	2b02      	cmp	r3, #2
 800489e:	d902      	bls.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80048a0:	2303      	movs	r3, #3
 80048a2:	74fb      	strb	r3, [r7, #19]
        break;
 80048a4:	e005      	b.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80048a6:	4b30      	ldr	r3, [pc, #192]	@ (8004968 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d0ef      	beq.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80048b2:	7cfb      	ldrb	r3, [r7, #19]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d159      	bne.n	800496c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80048b8:	4b2a      	ldr	r3, [pc, #168]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80048ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80048c2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d01e      	beq.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048ce:	697a      	ldr	r2, [r7, #20]
 80048d0:	429a      	cmp	r2, r3
 80048d2:	d019      	beq.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80048d4:	4b23      	ldr	r3, [pc, #140]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80048d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80048de:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80048e0:	4b20      	ldr	r3, [pc, #128]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80048e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048e6:	4a1f      	ldr	r2, [pc, #124]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80048e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80048ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80048f0:	4b1c      	ldr	r3, [pc, #112]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80048f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048f6:	4a1b      	ldr	r2, [pc, #108]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80048f8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80048fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004900:	4a18      	ldr	r2, [pc, #96]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	f003 0301 	and.w	r3, r3, #1
 800490e:	2b00      	cmp	r3, #0
 8004910:	d016      	beq.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004912:	f7fc fce1 	bl	80012d8 <HAL_GetTick>
 8004916:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004918:	e00b      	b.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800491a:	f7fc fcdd 	bl	80012d8 <HAL_GetTick>
 800491e:	4602      	mov	r2, r0
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	1ad3      	subs	r3, r2, r3
 8004924:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004928:	4293      	cmp	r3, r2
 800492a:	d902      	bls.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800492c:	2303      	movs	r3, #3
 800492e:	74fb      	strb	r3, [r7, #19]
            break;
 8004930:	e006      	b.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004932:	4b0c      	ldr	r3, [pc, #48]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004934:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004938:	f003 0302 	and.w	r3, r3, #2
 800493c:	2b00      	cmp	r3, #0
 800493e:	d0ec      	beq.n	800491a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004940:	7cfb      	ldrb	r3, [r7, #19]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d10b      	bne.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004946:	4b07      	ldr	r3, [pc, #28]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004948:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800494c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004954:	4903      	ldr	r1, [pc, #12]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004956:	4313      	orrs	r3, r2
 8004958:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800495c:	e008      	b.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800495e:	7cfb      	ldrb	r3, [r7, #19]
 8004960:	74bb      	strb	r3, [r7, #18]
 8004962:	e005      	b.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004964:	40021000 	.word	0x40021000
 8004968:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800496c:	7cfb      	ldrb	r3, [r7, #19]
 800496e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004970:	7c7b      	ldrb	r3, [r7, #17]
 8004972:	2b01      	cmp	r3, #1
 8004974:	d105      	bne.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004976:	4ba7      	ldr	r3, [pc, #668]	@ (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004978:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800497a:	4aa6      	ldr	r2, [pc, #664]	@ (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800497c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004980:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f003 0301 	and.w	r3, r3, #1
 800498a:	2b00      	cmp	r3, #0
 800498c:	d00a      	beq.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800498e:	4ba1      	ldr	r3, [pc, #644]	@ (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004990:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004994:	f023 0203 	bic.w	r2, r3, #3
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	499d      	ldr	r1, [pc, #628]	@ (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800499e:	4313      	orrs	r3, r2
 80049a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f003 0302 	and.w	r3, r3, #2
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d00a      	beq.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80049b0:	4b98      	ldr	r3, [pc, #608]	@ (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049b6:	f023 020c 	bic.w	r2, r3, #12
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	689b      	ldr	r3, [r3, #8]
 80049be:	4995      	ldr	r1, [pc, #596]	@ (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049c0:	4313      	orrs	r3, r2
 80049c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f003 0304 	and.w	r3, r3, #4
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d00a      	beq.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80049d2:	4b90      	ldr	r3, [pc, #576]	@ (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049d8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	68db      	ldr	r3, [r3, #12]
 80049e0:	498c      	ldr	r1, [pc, #560]	@ (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049e2:	4313      	orrs	r3, r2
 80049e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f003 0308 	and.w	r3, r3, #8
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d00a      	beq.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80049f4:	4b87      	ldr	r3, [pc, #540]	@ (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049fa:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	691b      	ldr	r3, [r3, #16]
 8004a02:	4984      	ldr	r1, [pc, #528]	@ (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a04:	4313      	orrs	r3, r2
 8004a06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f003 0310 	and.w	r3, r3, #16
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d00a      	beq.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004a16:	4b7f      	ldr	r3, [pc, #508]	@ (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a1c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	695b      	ldr	r3, [r3, #20]
 8004a24:	497b      	ldr	r1, [pc, #492]	@ (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a26:	4313      	orrs	r3, r2
 8004a28:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f003 0320 	and.w	r3, r3, #32
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d00a      	beq.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004a38:	4b76      	ldr	r3, [pc, #472]	@ (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a3e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	699b      	ldr	r3, [r3, #24]
 8004a46:	4973      	ldr	r1, [pc, #460]	@ (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d00a      	beq.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004a5a:	4b6e      	ldr	r3, [pc, #440]	@ (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a60:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	69db      	ldr	r3, [r3, #28]
 8004a68:	496a      	ldr	r1, [pc, #424]	@ (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d00a      	beq.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004a7c:	4b65      	ldr	r3, [pc, #404]	@ (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a82:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6a1b      	ldr	r3, [r3, #32]
 8004a8a:	4962      	ldr	r1, [pc, #392]	@ (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d00a      	beq.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004a9e:	4b5d      	ldr	r3, [pc, #372]	@ (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004aa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004aa4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aac:	4959      	ldr	r1, [pc, #356]	@ (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d00a      	beq.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004ac0:	4b54      	ldr	r3, [pc, #336]	@ (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ac2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004ac6:	f023 0203 	bic.w	r2, r3, #3
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ace:	4951      	ldr	r1, [pc, #324]	@ (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d00a      	beq.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004ae2:	4b4c      	ldr	r3, [pc, #304]	@ (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ae4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ae8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004af0:	4948      	ldr	r1, [pc, #288]	@ (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004af2:	4313      	orrs	r3, r2
 8004af4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d015      	beq.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004b04:	4b43      	ldr	r3, [pc, #268]	@ (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b0a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b12:	4940      	ldr	r1, [pc, #256]	@ (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b14:	4313      	orrs	r3, r2
 8004b16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b1e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004b22:	d105      	bne.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b24:	4b3b      	ldr	r3, [pc, #236]	@ (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b26:	68db      	ldr	r3, [r3, #12]
 8004b28:	4a3a      	ldr	r2, [pc, #232]	@ (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b2a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004b2e:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d015      	beq.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004b3c:	4b35      	ldr	r3, [pc, #212]	@ (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b42:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b4a:	4932      	ldr	r1, [pc, #200]	@ (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b56:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004b5a:	d105      	bne.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b5c:	4b2d      	ldr	r3, [pc, #180]	@ (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b5e:	68db      	ldr	r3, [r3, #12]
 8004b60:	4a2c      	ldr	r2, [pc, #176]	@ (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b62:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004b66:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d015      	beq.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004b74:	4b27      	ldr	r3, [pc, #156]	@ (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b7a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b82:	4924      	ldr	r1, [pc, #144]	@ (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b84:	4313      	orrs	r3, r2
 8004b86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b8e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004b92:	d105      	bne.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b94:	4b1f      	ldr	r3, [pc, #124]	@ (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b96:	68db      	ldr	r3, [r3, #12]
 8004b98:	4a1e      	ldr	r2, [pc, #120]	@ (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b9a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004b9e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d015      	beq.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004bac:	4b19      	ldr	r3, [pc, #100]	@ (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bb2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bba:	4916      	ldr	r1, [pc, #88]	@ (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bc6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004bca:	d105      	bne.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004bcc:	4b11      	ldr	r3, [pc, #68]	@ (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bce:	68db      	ldr	r3, [r3, #12]
 8004bd0:	4a10      	ldr	r2, [pc, #64]	@ (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bd2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004bd6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d019      	beq.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004be4:	4b0b      	ldr	r3, [pc, #44]	@ (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bea:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bf2:	4908      	ldr	r1, [pc, #32]	@ (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bfe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004c02:	d109      	bne.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c04:	4b03      	ldr	r3, [pc, #12]	@ (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c06:	68db      	ldr	r3, [r3, #12]
 8004c08:	4a02      	ldr	r2, [pc, #8]	@ (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c0a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004c0e:	60d3      	str	r3, [r2, #12]
 8004c10:	e002      	b.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004c12:	bf00      	nop
 8004c14:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d015      	beq.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004c24:	4b29      	ldr	r3, [pc, #164]	@ (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c2a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c32:	4926      	ldr	r1, [pc, #152]	@ (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004c34:	4313      	orrs	r3, r2
 8004c36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c3e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004c42:	d105      	bne.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004c44:	4b21      	ldr	r3, [pc, #132]	@ (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004c46:	68db      	ldr	r3, [r3, #12]
 8004c48:	4a20      	ldr	r2, [pc, #128]	@ (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004c4a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c4e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d015      	beq.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004c5c:	4b1b      	ldr	r3, [pc, #108]	@ (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c62:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c6a:	4918      	ldr	r1, [pc, #96]	@ (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c7a:	d105      	bne.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004c7c:	4b13      	ldr	r3, [pc, #76]	@ (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004c7e:	68db      	ldr	r3, [r3, #12]
 8004c80:	4a12      	ldr	r2, [pc, #72]	@ (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004c82:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c86:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d015      	beq.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004c94:	4b0d      	ldr	r3, [pc, #52]	@ (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004c96:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004c9a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ca2:	490a      	ldr	r1, [pc, #40]	@ (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004cae:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004cb2:	d105      	bne.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004cb4:	4b05      	ldr	r3, [pc, #20]	@ (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004cb6:	68db      	ldr	r3, [r3, #12]
 8004cb8:	4a04      	ldr	r2, [pc, #16]	@ (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004cba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004cbe:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004cc0:	7cbb      	ldrb	r3, [r7, #18]
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3718      	adds	r7, #24
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}
 8004cca:	bf00      	nop
 8004ccc:	40021000 	.word	0x40021000

08004cd0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b082      	sub	sp, #8
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d101      	bne.n	8004ce2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	e042      	b.n	8004d68 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d106      	bne.n	8004cfa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004cf4:	6878      	ldr	r0, [r7, #4]
 8004cf6:	f7fc fa09 	bl	800110c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2224      	movs	r2, #36	@ 0x24
 8004cfe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	681a      	ldr	r2, [r3, #0]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f022 0201 	bic.w	r2, r2, #1
 8004d10:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d002      	beq.n	8004d20 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	f000 fbb2 	bl	8005484 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004d20:	6878      	ldr	r0, [r7, #4]
 8004d22:	f000 f8b3 	bl	8004e8c <UART_SetConfig>
 8004d26:	4603      	mov	r3, r0
 8004d28:	2b01      	cmp	r3, #1
 8004d2a:	d101      	bne.n	8004d30 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	e01b      	b.n	8004d68 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	685a      	ldr	r2, [r3, #4]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004d3e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	689a      	ldr	r2, [r3, #8]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004d4e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	681a      	ldr	r2, [r3, #0]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f042 0201 	orr.w	r2, r2, #1
 8004d5e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004d60:	6878      	ldr	r0, [r7, #4]
 8004d62:	f000 fc31 	bl	80055c8 <UART_CheckIdleState>
 8004d66:	4603      	mov	r3, r0
}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	3708      	adds	r7, #8
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bd80      	pop	{r7, pc}

08004d70 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b08a      	sub	sp, #40	@ 0x28
 8004d74:	af02      	add	r7, sp, #8
 8004d76:	60f8      	str	r0, [r7, #12]
 8004d78:	60b9      	str	r1, [r7, #8]
 8004d7a:	603b      	str	r3, [r7, #0]
 8004d7c:	4613      	mov	r3, r2
 8004d7e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d86:	2b20      	cmp	r3, #32
 8004d88:	d17b      	bne.n	8004e82 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d002      	beq.n	8004d96 <HAL_UART_Transmit+0x26>
 8004d90:	88fb      	ldrh	r3, [r7, #6]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d101      	bne.n	8004d9a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004d96:	2301      	movs	r3, #1
 8004d98:	e074      	b.n	8004e84 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2221      	movs	r2, #33	@ 0x21
 8004da6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004daa:	f7fc fa95 	bl	80012d8 <HAL_GetTick>
 8004dae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	88fa      	ldrh	r2, [r7, #6]
 8004db4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	88fa      	ldrh	r2, [r7, #6]
 8004dbc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	689b      	ldr	r3, [r3, #8]
 8004dc4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004dc8:	d108      	bne.n	8004ddc <HAL_UART_Transmit+0x6c>
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	691b      	ldr	r3, [r3, #16]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d104      	bne.n	8004ddc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	61bb      	str	r3, [r7, #24]
 8004dda:	e003      	b.n	8004de4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004de0:	2300      	movs	r3, #0
 8004de2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004de4:	e030      	b.n	8004e48 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	9300      	str	r3, [sp, #0]
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	2200      	movs	r2, #0
 8004dee:	2180      	movs	r1, #128	@ 0x80
 8004df0:	68f8      	ldr	r0, [r7, #12]
 8004df2:	f000 fc93 	bl	800571c <UART_WaitOnFlagUntilTimeout>
 8004df6:	4603      	mov	r3, r0
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d005      	beq.n	8004e08 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	2220      	movs	r2, #32
 8004e00:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8004e04:	2303      	movs	r3, #3
 8004e06:	e03d      	b.n	8004e84 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8004e08:	69fb      	ldr	r3, [r7, #28]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d10b      	bne.n	8004e26 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004e0e:	69bb      	ldr	r3, [r7, #24]
 8004e10:	881b      	ldrh	r3, [r3, #0]
 8004e12:	461a      	mov	r2, r3
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e1c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004e1e:	69bb      	ldr	r3, [r7, #24]
 8004e20:	3302      	adds	r3, #2
 8004e22:	61bb      	str	r3, [r7, #24]
 8004e24:	e007      	b.n	8004e36 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004e26:	69fb      	ldr	r3, [r7, #28]
 8004e28:	781a      	ldrb	r2, [r3, #0]
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004e30:	69fb      	ldr	r3, [r7, #28]
 8004e32:	3301      	adds	r3, #1
 8004e34:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004e3c:	b29b      	uxth	r3, r3
 8004e3e:	3b01      	subs	r3, #1
 8004e40:	b29a      	uxth	r2, r3
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004e4e:	b29b      	uxth	r3, r3
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d1c8      	bne.n	8004de6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	9300      	str	r3, [sp, #0]
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	2140      	movs	r1, #64	@ 0x40
 8004e5e:	68f8      	ldr	r0, [r7, #12]
 8004e60:	f000 fc5c 	bl	800571c <UART_WaitOnFlagUntilTimeout>
 8004e64:	4603      	mov	r3, r0
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d005      	beq.n	8004e76 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	2220      	movs	r2, #32
 8004e6e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8004e72:	2303      	movs	r3, #3
 8004e74:	e006      	b.n	8004e84 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	2220      	movs	r2, #32
 8004e7a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8004e7e:	2300      	movs	r3, #0
 8004e80:	e000      	b.n	8004e84 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8004e82:	2302      	movs	r3, #2
  }
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	3720      	adds	r7, #32
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bd80      	pop	{r7, pc}

08004e8c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e90:	b08c      	sub	sp, #48	@ 0x30
 8004e92:	af00      	add	r7, sp, #0
 8004e94:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004e96:	2300      	movs	r3, #0
 8004e98:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	689a      	ldr	r2, [r3, #8]
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	691b      	ldr	r3, [r3, #16]
 8004ea4:	431a      	orrs	r2, r3
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	695b      	ldr	r3, [r3, #20]
 8004eaa:	431a      	orrs	r2, r3
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	69db      	ldr	r3, [r3, #28]
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	681a      	ldr	r2, [r3, #0]
 8004eba:	4baa      	ldr	r3, [pc, #680]	@ (8005164 <UART_SetConfig+0x2d8>)
 8004ebc:	4013      	ands	r3, r2
 8004ebe:	697a      	ldr	r2, [r7, #20]
 8004ec0:	6812      	ldr	r2, [r2, #0]
 8004ec2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004ec4:	430b      	orrs	r3, r1
 8004ec6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	68da      	ldr	r2, [r3, #12]
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	430a      	orrs	r2, r1
 8004edc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	699b      	ldr	r3, [r3, #24]
 8004ee2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a9f      	ldr	r2, [pc, #636]	@ (8005168 <UART_SetConfig+0x2dc>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d004      	beq.n	8004ef8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	6a1b      	ldr	r3, [r3, #32]
 8004ef2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	689b      	ldr	r3, [r3, #8]
 8004efe:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8004f02:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8004f06:	697a      	ldr	r2, [r7, #20]
 8004f08:	6812      	ldr	r2, [r2, #0]
 8004f0a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004f0c:	430b      	orrs	r3, r1
 8004f0e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f16:	f023 010f 	bic.w	r1, r3, #15
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	430a      	orrs	r2, r1
 8004f24:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a90      	ldr	r2, [pc, #576]	@ (800516c <UART_SetConfig+0x2e0>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d125      	bne.n	8004f7c <UART_SetConfig+0xf0>
 8004f30:	4b8f      	ldr	r3, [pc, #572]	@ (8005170 <UART_SetConfig+0x2e4>)
 8004f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f36:	f003 0303 	and.w	r3, r3, #3
 8004f3a:	2b03      	cmp	r3, #3
 8004f3c:	d81a      	bhi.n	8004f74 <UART_SetConfig+0xe8>
 8004f3e:	a201      	add	r2, pc, #4	@ (adr r2, 8004f44 <UART_SetConfig+0xb8>)
 8004f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f44:	08004f55 	.word	0x08004f55
 8004f48:	08004f65 	.word	0x08004f65
 8004f4c:	08004f5d 	.word	0x08004f5d
 8004f50:	08004f6d 	.word	0x08004f6d
 8004f54:	2301      	movs	r3, #1
 8004f56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f5a:	e116      	b.n	800518a <UART_SetConfig+0x2fe>
 8004f5c:	2302      	movs	r3, #2
 8004f5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f62:	e112      	b.n	800518a <UART_SetConfig+0x2fe>
 8004f64:	2304      	movs	r3, #4
 8004f66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f6a:	e10e      	b.n	800518a <UART_SetConfig+0x2fe>
 8004f6c:	2308      	movs	r3, #8
 8004f6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f72:	e10a      	b.n	800518a <UART_SetConfig+0x2fe>
 8004f74:	2310      	movs	r3, #16
 8004f76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f7a:	e106      	b.n	800518a <UART_SetConfig+0x2fe>
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a7c      	ldr	r2, [pc, #496]	@ (8005174 <UART_SetConfig+0x2e8>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d138      	bne.n	8004ff8 <UART_SetConfig+0x16c>
 8004f86:	4b7a      	ldr	r3, [pc, #488]	@ (8005170 <UART_SetConfig+0x2e4>)
 8004f88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f8c:	f003 030c 	and.w	r3, r3, #12
 8004f90:	2b0c      	cmp	r3, #12
 8004f92:	d82d      	bhi.n	8004ff0 <UART_SetConfig+0x164>
 8004f94:	a201      	add	r2, pc, #4	@ (adr r2, 8004f9c <UART_SetConfig+0x110>)
 8004f96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f9a:	bf00      	nop
 8004f9c:	08004fd1 	.word	0x08004fd1
 8004fa0:	08004ff1 	.word	0x08004ff1
 8004fa4:	08004ff1 	.word	0x08004ff1
 8004fa8:	08004ff1 	.word	0x08004ff1
 8004fac:	08004fe1 	.word	0x08004fe1
 8004fb0:	08004ff1 	.word	0x08004ff1
 8004fb4:	08004ff1 	.word	0x08004ff1
 8004fb8:	08004ff1 	.word	0x08004ff1
 8004fbc:	08004fd9 	.word	0x08004fd9
 8004fc0:	08004ff1 	.word	0x08004ff1
 8004fc4:	08004ff1 	.word	0x08004ff1
 8004fc8:	08004ff1 	.word	0x08004ff1
 8004fcc:	08004fe9 	.word	0x08004fe9
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004fd6:	e0d8      	b.n	800518a <UART_SetConfig+0x2fe>
 8004fd8:	2302      	movs	r3, #2
 8004fda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004fde:	e0d4      	b.n	800518a <UART_SetConfig+0x2fe>
 8004fe0:	2304      	movs	r3, #4
 8004fe2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004fe6:	e0d0      	b.n	800518a <UART_SetConfig+0x2fe>
 8004fe8:	2308      	movs	r3, #8
 8004fea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004fee:	e0cc      	b.n	800518a <UART_SetConfig+0x2fe>
 8004ff0:	2310      	movs	r3, #16
 8004ff2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ff6:	e0c8      	b.n	800518a <UART_SetConfig+0x2fe>
 8004ff8:	697b      	ldr	r3, [r7, #20]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a5e      	ldr	r2, [pc, #376]	@ (8005178 <UART_SetConfig+0x2ec>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d125      	bne.n	800504e <UART_SetConfig+0x1c2>
 8005002:	4b5b      	ldr	r3, [pc, #364]	@ (8005170 <UART_SetConfig+0x2e4>)
 8005004:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005008:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800500c:	2b30      	cmp	r3, #48	@ 0x30
 800500e:	d016      	beq.n	800503e <UART_SetConfig+0x1b2>
 8005010:	2b30      	cmp	r3, #48	@ 0x30
 8005012:	d818      	bhi.n	8005046 <UART_SetConfig+0x1ba>
 8005014:	2b20      	cmp	r3, #32
 8005016:	d00a      	beq.n	800502e <UART_SetConfig+0x1a2>
 8005018:	2b20      	cmp	r3, #32
 800501a:	d814      	bhi.n	8005046 <UART_SetConfig+0x1ba>
 800501c:	2b00      	cmp	r3, #0
 800501e:	d002      	beq.n	8005026 <UART_SetConfig+0x19a>
 8005020:	2b10      	cmp	r3, #16
 8005022:	d008      	beq.n	8005036 <UART_SetConfig+0x1aa>
 8005024:	e00f      	b.n	8005046 <UART_SetConfig+0x1ba>
 8005026:	2300      	movs	r3, #0
 8005028:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800502c:	e0ad      	b.n	800518a <UART_SetConfig+0x2fe>
 800502e:	2302      	movs	r3, #2
 8005030:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005034:	e0a9      	b.n	800518a <UART_SetConfig+0x2fe>
 8005036:	2304      	movs	r3, #4
 8005038:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800503c:	e0a5      	b.n	800518a <UART_SetConfig+0x2fe>
 800503e:	2308      	movs	r3, #8
 8005040:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005044:	e0a1      	b.n	800518a <UART_SetConfig+0x2fe>
 8005046:	2310      	movs	r3, #16
 8005048:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800504c:	e09d      	b.n	800518a <UART_SetConfig+0x2fe>
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a4a      	ldr	r2, [pc, #296]	@ (800517c <UART_SetConfig+0x2f0>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d125      	bne.n	80050a4 <UART_SetConfig+0x218>
 8005058:	4b45      	ldr	r3, [pc, #276]	@ (8005170 <UART_SetConfig+0x2e4>)
 800505a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800505e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005062:	2bc0      	cmp	r3, #192	@ 0xc0
 8005064:	d016      	beq.n	8005094 <UART_SetConfig+0x208>
 8005066:	2bc0      	cmp	r3, #192	@ 0xc0
 8005068:	d818      	bhi.n	800509c <UART_SetConfig+0x210>
 800506a:	2b80      	cmp	r3, #128	@ 0x80
 800506c:	d00a      	beq.n	8005084 <UART_SetConfig+0x1f8>
 800506e:	2b80      	cmp	r3, #128	@ 0x80
 8005070:	d814      	bhi.n	800509c <UART_SetConfig+0x210>
 8005072:	2b00      	cmp	r3, #0
 8005074:	d002      	beq.n	800507c <UART_SetConfig+0x1f0>
 8005076:	2b40      	cmp	r3, #64	@ 0x40
 8005078:	d008      	beq.n	800508c <UART_SetConfig+0x200>
 800507a:	e00f      	b.n	800509c <UART_SetConfig+0x210>
 800507c:	2300      	movs	r3, #0
 800507e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005082:	e082      	b.n	800518a <UART_SetConfig+0x2fe>
 8005084:	2302      	movs	r3, #2
 8005086:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800508a:	e07e      	b.n	800518a <UART_SetConfig+0x2fe>
 800508c:	2304      	movs	r3, #4
 800508e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005092:	e07a      	b.n	800518a <UART_SetConfig+0x2fe>
 8005094:	2308      	movs	r3, #8
 8005096:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800509a:	e076      	b.n	800518a <UART_SetConfig+0x2fe>
 800509c:	2310      	movs	r3, #16
 800509e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80050a2:	e072      	b.n	800518a <UART_SetConfig+0x2fe>
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a35      	ldr	r2, [pc, #212]	@ (8005180 <UART_SetConfig+0x2f4>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d12a      	bne.n	8005104 <UART_SetConfig+0x278>
 80050ae:	4b30      	ldr	r3, [pc, #192]	@ (8005170 <UART_SetConfig+0x2e4>)
 80050b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050b4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80050b8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80050bc:	d01a      	beq.n	80050f4 <UART_SetConfig+0x268>
 80050be:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80050c2:	d81b      	bhi.n	80050fc <UART_SetConfig+0x270>
 80050c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80050c8:	d00c      	beq.n	80050e4 <UART_SetConfig+0x258>
 80050ca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80050ce:	d815      	bhi.n	80050fc <UART_SetConfig+0x270>
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d003      	beq.n	80050dc <UART_SetConfig+0x250>
 80050d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80050d8:	d008      	beq.n	80050ec <UART_SetConfig+0x260>
 80050da:	e00f      	b.n	80050fc <UART_SetConfig+0x270>
 80050dc:	2300      	movs	r3, #0
 80050de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80050e2:	e052      	b.n	800518a <UART_SetConfig+0x2fe>
 80050e4:	2302      	movs	r3, #2
 80050e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80050ea:	e04e      	b.n	800518a <UART_SetConfig+0x2fe>
 80050ec:	2304      	movs	r3, #4
 80050ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80050f2:	e04a      	b.n	800518a <UART_SetConfig+0x2fe>
 80050f4:	2308      	movs	r3, #8
 80050f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80050fa:	e046      	b.n	800518a <UART_SetConfig+0x2fe>
 80050fc:	2310      	movs	r3, #16
 80050fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005102:	e042      	b.n	800518a <UART_SetConfig+0x2fe>
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a17      	ldr	r2, [pc, #92]	@ (8005168 <UART_SetConfig+0x2dc>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d13a      	bne.n	8005184 <UART_SetConfig+0x2f8>
 800510e:	4b18      	ldr	r3, [pc, #96]	@ (8005170 <UART_SetConfig+0x2e4>)
 8005110:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005114:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005118:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800511c:	d01a      	beq.n	8005154 <UART_SetConfig+0x2c8>
 800511e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005122:	d81b      	bhi.n	800515c <UART_SetConfig+0x2d0>
 8005124:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005128:	d00c      	beq.n	8005144 <UART_SetConfig+0x2b8>
 800512a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800512e:	d815      	bhi.n	800515c <UART_SetConfig+0x2d0>
 8005130:	2b00      	cmp	r3, #0
 8005132:	d003      	beq.n	800513c <UART_SetConfig+0x2b0>
 8005134:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005138:	d008      	beq.n	800514c <UART_SetConfig+0x2c0>
 800513a:	e00f      	b.n	800515c <UART_SetConfig+0x2d0>
 800513c:	2300      	movs	r3, #0
 800513e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005142:	e022      	b.n	800518a <UART_SetConfig+0x2fe>
 8005144:	2302      	movs	r3, #2
 8005146:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800514a:	e01e      	b.n	800518a <UART_SetConfig+0x2fe>
 800514c:	2304      	movs	r3, #4
 800514e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005152:	e01a      	b.n	800518a <UART_SetConfig+0x2fe>
 8005154:	2308      	movs	r3, #8
 8005156:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800515a:	e016      	b.n	800518a <UART_SetConfig+0x2fe>
 800515c:	2310      	movs	r3, #16
 800515e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005162:	e012      	b.n	800518a <UART_SetConfig+0x2fe>
 8005164:	cfff69f3 	.word	0xcfff69f3
 8005168:	40008000 	.word	0x40008000
 800516c:	40013800 	.word	0x40013800
 8005170:	40021000 	.word	0x40021000
 8005174:	40004400 	.word	0x40004400
 8005178:	40004800 	.word	0x40004800
 800517c:	40004c00 	.word	0x40004c00
 8005180:	40005000 	.word	0x40005000
 8005184:	2310      	movs	r3, #16
 8005186:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4aae      	ldr	r2, [pc, #696]	@ (8005448 <UART_SetConfig+0x5bc>)
 8005190:	4293      	cmp	r3, r2
 8005192:	f040 8097 	bne.w	80052c4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005196:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800519a:	2b08      	cmp	r3, #8
 800519c:	d823      	bhi.n	80051e6 <UART_SetConfig+0x35a>
 800519e:	a201      	add	r2, pc, #4	@ (adr r2, 80051a4 <UART_SetConfig+0x318>)
 80051a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051a4:	080051c9 	.word	0x080051c9
 80051a8:	080051e7 	.word	0x080051e7
 80051ac:	080051d1 	.word	0x080051d1
 80051b0:	080051e7 	.word	0x080051e7
 80051b4:	080051d7 	.word	0x080051d7
 80051b8:	080051e7 	.word	0x080051e7
 80051bc:	080051e7 	.word	0x080051e7
 80051c0:	080051e7 	.word	0x080051e7
 80051c4:	080051df 	.word	0x080051df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051c8:	f7ff fac2 	bl	8004750 <HAL_RCC_GetPCLK1Freq>
 80051cc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80051ce:	e010      	b.n	80051f2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80051d0:	4b9e      	ldr	r3, [pc, #632]	@ (800544c <UART_SetConfig+0x5c0>)
 80051d2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80051d4:	e00d      	b.n	80051f2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80051d6:	f7ff fa4d 	bl	8004674 <HAL_RCC_GetSysClockFreq>
 80051da:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80051dc:	e009      	b.n	80051f2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80051e2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80051e4:	e005      	b.n	80051f2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80051e6:	2300      	movs	r3, #0
 80051e8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80051ea:	2301      	movs	r3, #1
 80051ec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80051f0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80051f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	f000 8130 	beq.w	800545a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051fe:	4a94      	ldr	r2, [pc, #592]	@ (8005450 <UART_SetConfig+0x5c4>)
 8005200:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005204:	461a      	mov	r2, r3
 8005206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005208:	fbb3 f3f2 	udiv	r3, r3, r2
 800520c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	685a      	ldr	r2, [r3, #4]
 8005212:	4613      	mov	r3, r2
 8005214:	005b      	lsls	r3, r3, #1
 8005216:	4413      	add	r3, r2
 8005218:	69ba      	ldr	r2, [r7, #24]
 800521a:	429a      	cmp	r2, r3
 800521c:	d305      	bcc.n	800522a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005224:	69ba      	ldr	r2, [r7, #24]
 8005226:	429a      	cmp	r2, r3
 8005228:	d903      	bls.n	8005232 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800522a:	2301      	movs	r3, #1
 800522c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005230:	e113      	b.n	800545a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005234:	2200      	movs	r2, #0
 8005236:	60bb      	str	r3, [r7, #8]
 8005238:	60fa      	str	r2, [r7, #12]
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800523e:	4a84      	ldr	r2, [pc, #528]	@ (8005450 <UART_SetConfig+0x5c4>)
 8005240:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005244:	b29b      	uxth	r3, r3
 8005246:	2200      	movs	r2, #0
 8005248:	603b      	str	r3, [r7, #0]
 800524a:	607a      	str	r2, [r7, #4]
 800524c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005250:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005254:	f7fb f83c 	bl	80002d0 <__aeabi_uldivmod>
 8005258:	4602      	mov	r2, r0
 800525a:	460b      	mov	r3, r1
 800525c:	4610      	mov	r0, r2
 800525e:	4619      	mov	r1, r3
 8005260:	f04f 0200 	mov.w	r2, #0
 8005264:	f04f 0300 	mov.w	r3, #0
 8005268:	020b      	lsls	r3, r1, #8
 800526a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800526e:	0202      	lsls	r2, r0, #8
 8005270:	6979      	ldr	r1, [r7, #20]
 8005272:	6849      	ldr	r1, [r1, #4]
 8005274:	0849      	lsrs	r1, r1, #1
 8005276:	2000      	movs	r0, #0
 8005278:	460c      	mov	r4, r1
 800527a:	4605      	mov	r5, r0
 800527c:	eb12 0804 	adds.w	r8, r2, r4
 8005280:	eb43 0905 	adc.w	r9, r3, r5
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	685b      	ldr	r3, [r3, #4]
 8005288:	2200      	movs	r2, #0
 800528a:	469a      	mov	sl, r3
 800528c:	4693      	mov	fp, r2
 800528e:	4652      	mov	r2, sl
 8005290:	465b      	mov	r3, fp
 8005292:	4640      	mov	r0, r8
 8005294:	4649      	mov	r1, r9
 8005296:	f7fb f81b 	bl	80002d0 <__aeabi_uldivmod>
 800529a:	4602      	mov	r2, r0
 800529c:	460b      	mov	r3, r1
 800529e:	4613      	mov	r3, r2
 80052a0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80052a2:	6a3b      	ldr	r3, [r7, #32]
 80052a4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80052a8:	d308      	bcc.n	80052bc <UART_SetConfig+0x430>
 80052aa:	6a3b      	ldr	r3, [r7, #32]
 80052ac:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80052b0:	d204      	bcs.n	80052bc <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	6a3a      	ldr	r2, [r7, #32]
 80052b8:	60da      	str	r2, [r3, #12]
 80052ba:	e0ce      	b.n	800545a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80052bc:	2301      	movs	r3, #1
 80052be:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80052c2:	e0ca      	b.n	800545a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80052c4:	697b      	ldr	r3, [r7, #20]
 80052c6:	69db      	ldr	r3, [r3, #28]
 80052c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80052cc:	d166      	bne.n	800539c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80052ce:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80052d2:	2b08      	cmp	r3, #8
 80052d4:	d827      	bhi.n	8005326 <UART_SetConfig+0x49a>
 80052d6:	a201      	add	r2, pc, #4	@ (adr r2, 80052dc <UART_SetConfig+0x450>)
 80052d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052dc:	08005301 	.word	0x08005301
 80052e0:	08005309 	.word	0x08005309
 80052e4:	08005311 	.word	0x08005311
 80052e8:	08005327 	.word	0x08005327
 80052ec:	08005317 	.word	0x08005317
 80052f0:	08005327 	.word	0x08005327
 80052f4:	08005327 	.word	0x08005327
 80052f8:	08005327 	.word	0x08005327
 80052fc:	0800531f 	.word	0x0800531f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005300:	f7ff fa26 	bl	8004750 <HAL_RCC_GetPCLK1Freq>
 8005304:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005306:	e014      	b.n	8005332 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005308:	f7ff fa38 	bl	800477c <HAL_RCC_GetPCLK2Freq>
 800530c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800530e:	e010      	b.n	8005332 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005310:	4b4e      	ldr	r3, [pc, #312]	@ (800544c <UART_SetConfig+0x5c0>)
 8005312:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005314:	e00d      	b.n	8005332 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005316:	f7ff f9ad 	bl	8004674 <HAL_RCC_GetSysClockFreq>
 800531a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800531c:	e009      	b.n	8005332 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800531e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005322:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005324:	e005      	b.n	8005332 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8005326:	2300      	movs	r3, #0
 8005328:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800532a:	2301      	movs	r3, #1
 800532c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005330:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005334:	2b00      	cmp	r3, #0
 8005336:	f000 8090 	beq.w	800545a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800533e:	4a44      	ldr	r2, [pc, #272]	@ (8005450 <UART_SetConfig+0x5c4>)
 8005340:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005344:	461a      	mov	r2, r3
 8005346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005348:	fbb3 f3f2 	udiv	r3, r3, r2
 800534c:	005a      	lsls	r2, r3, #1
 800534e:	697b      	ldr	r3, [r7, #20]
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	085b      	lsrs	r3, r3, #1
 8005354:	441a      	add	r2, r3
 8005356:	697b      	ldr	r3, [r7, #20]
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	fbb2 f3f3 	udiv	r3, r2, r3
 800535e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005360:	6a3b      	ldr	r3, [r7, #32]
 8005362:	2b0f      	cmp	r3, #15
 8005364:	d916      	bls.n	8005394 <UART_SetConfig+0x508>
 8005366:	6a3b      	ldr	r3, [r7, #32]
 8005368:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800536c:	d212      	bcs.n	8005394 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800536e:	6a3b      	ldr	r3, [r7, #32]
 8005370:	b29b      	uxth	r3, r3
 8005372:	f023 030f 	bic.w	r3, r3, #15
 8005376:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005378:	6a3b      	ldr	r3, [r7, #32]
 800537a:	085b      	lsrs	r3, r3, #1
 800537c:	b29b      	uxth	r3, r3
 800537e:	f003 0307 	and.w	r3, r3, #7
 8005382:	b29a      	uxth	r2, r3
 8005384:	8bfb      	ldrh	r3, [r7, #30]
 8005386:	4313      	orrs	r3, r2
 8005388:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	8bfa      	ldrh	r2, [r7, #30]
 8005390:	60da      	str	r2, [r3, #12]
 8005392:	e062      	b.n	800545a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005394:	2301      	movs	r3, #1
 8005396:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800539a:	e05e      	b.n	800545a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800539c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80053a0:	2b08      	cmp	r3, #8
 80053a2:	d828      	bhi.n	80053f6 <UART_SetConfig+0x56a>
 80053a4:	a201      	add	r2, pc, #4	@ (adr r2, 80053ac <UART_SetConfig+0x520>)
 80053a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053aa:	bf00      	nop
 80053ac:	080053d1 	.word	0x080053d1
 80053b0:	080053d9 	.word	0x080053d9
 80053b4:	080053e1 	.word	0x080053e1
 80053b8:	080053f7 	.word	0x080053f7
 80053bc:	080053e7 	.word	0x080053e7
 80053c0:	080053f7 	.word	0x080053f7
 80053c4:	080053f7 	.word	0x080053f7
 80053c8:	080053f7 	.word	0x080053f7
 80053cc:	080053ef 	.word	0x080053ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80053d0:	f7ff f9be 	bl	8004750 <HAL_RCC_GetPCLK1Freq>
 80053d4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80053d6:	e014      	b.n	8005402 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80053d8:	f7ff f9d0 	bl	800477c <HAL_RCC_GetPCLK2Freq>
 80053dc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80053de:	e010      	b.n	8005402 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80053e0:	4b1a      	ldr	r3, [pc, #104]	@ (800544c <UART_SetConfig+0x5c0>)
 80053e2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80053e4:	e00d      	b.n	8005402 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80053e6:	f7ff f945 	bl	8004674 <HAL_RCC_GetSysClockFreq>
 80053ea:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80053ec:	e009      	b.n	8005402 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80053ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80053f2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80053f4:	e005      	b.n	8005402 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80053f6:	2300      	movs	r3, #0
 80053f8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80053fa:	2301      	movs	r3, #1
 80053fc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005400:	bf00      	nop
    }

    if (pclk != 0U)
 8005402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005404:	2b00      	cmp	r3, #0
 8005406:	d028      	beq.n	800545a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800540c:	4a10      	ldr	r2, [pc, #64]	@ (8005450 <UART_SetConfig+0x5c4>)
 800540e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005412:	461a      	mov	r2, r3
 8005414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005416:	fbb3 f2f2 	udiv	r2, r3, r2
 800541a:	697b      	ldr	r3, [r7, #20]
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	085b      	lsrs	r3, r3, #1
 8005420:	441a      	add	r2, r3
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	fbb2 f3f3 	udiv	r3, r2, r3
 800542a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800542c:	6a3b      	ldr	r3, [r7, #32]
 800542e:	2b0f      	cmp	r3, #15
 8005430:	d910      	bls.n	8005454 <UART_SetConfig+0x5c8>
 8005432:	6a3b      	ldr	r3, [r7, #32]
 8005434:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005438:	d20c      	bcs.n	8005454 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800543a:	6a3b      	ldr	r3, [r7, #32]
 800543c:	b29a      	uxth	r2, r3
 800543e:	697b      	ldr	r3, [r7, #20]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	60da      	str	r2, [r3, #12]
 8005444:	e009      	b.n	800545a <UART_SetConfig+0x5ce>
 8005446:	bf00      	nop
 8005448:	40008000 	.word	0x40008000
 800544c:	00f42400 	.word	0x00f42400
 8005450:	080064b8 	.word	0x080064b8
      }
      else
      {
        ret = HAL_ERROR;
 8005454:	2301      	movs	r3, #1
 8005456:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800545a:	697b      	ldr	r3, [r7, #20]
 800545c:	2201      	movs	r2, #1
 800545e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	2201      	movs	r2, #1
 8005466:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	2200      	movs	r2, #0
 800546e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	2200      	movs	r2, #0
 8005474:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005476:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800547a:	4618      	mov	r0, r3
 800547c:	3730      	adds	r7, #48	@ 0x30
 800547e:	46bd      	mov	sp, r7
 8005480:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005484 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005484:	b480      	push	{r7}
 8005486:	b083      	sub	sp, #12
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005490:	f003 0308 	and.w	r3, r3, #8
 8005494:	2b00      	cmp	r3, #0
 8005496:	d00a      	beq.n	80054ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	430a      	orrs	r2, r1
 80054ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054b2:	f003 0301 	and.w	r3, r3, #1
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d00a      	beq.n	80054d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	430a      	orrs	r2, r1
 80054ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054d4:	f003 0302 	and.w	r3, r3, #2
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d00a      	beq.n	80054f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	430a      	orrs	r2, r1
 80054f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054f6:	f003 0304 	and.w	r3, r3, #4
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d00a      	beq.n	8005514 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	430a      	orrs	r2, r1
 8005512:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005518:	f003 0310 	and.w	r3, r3, #16
 800551c:	2b00      	cmp	r3, #0
 800551e:	d00a      	beq.n	8005536 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	689b      	ldr	r3, [r3, #8]
 8005526:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	430a      	orrs	r2, r1
 8005534:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800553a:	f003 0320 	and.w	r3, r3, #32
 800553e:	2b00      	cmp	r3, #0
 8005540:	d00a      	beq.n	8005558 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	689b      	ldr	r3, [r3, #8]
 8005548:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	430a      	orrs	r2, r1
 8005556:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800555c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005560:	2b00      	cmp	r3, #0
 8005562:	d01a      	beq.n	800559a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	685b      	ldr	r3, [r3, #4]
 800556a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	430a      	orrs	r2, r1
 8005578:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800557e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005582:	d10a      	bne.n	800559a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	430a      	orrs	r2, r1
 8005598:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800559e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d00a      	beq.n	80055bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	430a      	orrs	r2, r1
 80055ba:	605a      	str	r2, [r3, #4]
  }
}
 80055bc:	bf00      	nop
 80055be:	370c      	adds	r7, #12
 80055c0:	46bd      	mov	sp, r7
 80055c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c6:	4770      	bx	lr

080055c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b098      	sub	sp, #96	@ 0x60
 80055cc:	af02      	add	r7, sp, #8
 80055ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2200      	movs	r2, #0
 80055d4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80055d8:	f7fb fe7e 	bl	80012d8 <HAL_GetTick>
 80055dc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f003 0308 	and.w	r3, r3, #8
 80055e8:	2b08      	cmp	r3, #8
 80055ea:	d12f      	bne.n	800564c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80055ec:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80055f0:	9300      	str	r3, [sp, #0]
 80055f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80055f4:	2200      	movs	r2, #0
 80055f6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80055fa:	6878      	ldr	r0, [r7, #4]
 80055fc:	f000 f88e 	bl	800571c <UART_WaitOnFlagUntilTimeout>
 8005600:	4603      	mov	r3, r0
 8005602:	2b00      	cmp	r3, #0
 8005604:	d022      	beq.n	800564c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800560c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800560e:	e853 3f00 	ldrex	r3, [r3]
 8005612:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005614:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005616:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800561a:	653b      	str	r3, [r7, #80]	@ 0x50
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	461a      	mov	r2, r3
 8005622:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005624:	647b      	str	r3, [r7, #68]	@ 0x44
 8005626:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005628:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800562a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800562c:	e841 2300 	strex	r3, r2, [r1]
 8005630:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005632:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005634:	2b00      	cmp	r3, #0
 8005636:	d1e6      	bne.n	8005606 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2220      	movs	r2, #32
 800563c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2200      	movs	r2, #0
 8005644:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005648:	2303      	movs	r3, #3
 800564a:	e063      	b.n	8005714 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f003 0304 	and.w	r3, r3, #4
 8005656:	2b04      	cmp	r3, #4
 8005658:	d149      	bne.n	80056ee <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800565a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800565e:	9300      	str	r3, [sp, #0]
 8005660:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005662:	2200      	movs	r2, #0
 8005664:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005668:	6878      	ldr	r0, [r7, #4]
 800566a:	f000 f857 	bl	800571c <UART_WaitOnFlagUntilTimeout>
 800566e:	4603      	mov	r3, r0
 8005670:	2b00      	cmp	r3, #0
 8005672:	d03c      	beq.n	80056ee <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800567a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800567c:	e853 3f00 	ldrex	r3, [r3]
 8005680:	623b      	str	r3, [r7, #32]
   return(result);
 8005682:	6a3b      	ldr	r3, [r7, #32]
 8005684:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005688:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	461a      	mov	r2, r3
 8005690:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005692:	633b      	str	r3, [r7, #48]	@ 0x30
 8005694:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005696:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005698:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800569a:	e841 2300 	strex	r3, r2, [r1]
 800569e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80056a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d1e6      	bne.n	8005674 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	3308      	adds	r3, #8
 80056ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	e853 3f00 	ldrex	r3, [r3]
 80056b4:	60fb      	str	r3, [r7, #12]
   return(result);
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	f023 0301 	bic.w	r3, r3, #1
 80056bc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	3308      	adds	r3, #8
 80056c4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80056c6:	61fa      	str	r2, [r7, #28]
 80056c8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ca:	69b9      	ldr	r1, [r7, #24]
 80056cc:	69fa      	ldr	r2, [r7, #28]
 80056ce:	e841 2300 	strex	r3, r2, [r1]
 80056d2:	617b      	str	r3, [r7, #20]
   return(result);
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d1e5      	bne.n	80056a6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2220      	movs	r2, #32
 80056de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2200      	movs	r2, #0
 80056e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80056ea:	2303      	movs	r3, #3
 80056ec:	e012      	b.n	8005714 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2220      	movs	r2, #32
 80056f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2220      	movs	r2, #32
 80056fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2200      	movs	r2, #0
 8005702:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2200      	movs	r2, #0
 8005708:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2200      	movs	r2, #0
 800570e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005712:	2300      	movs	r3, #0
}
 8005714:	4618      	mov	r0, r3
 8005716:	3758      	adds	r7, #88	@ 0x58
 8005718:	46bd      	mov	sp, r7
 800571a:	bd80      	pop	{r7, pc}

0800571c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b084      	sub	sp, #16
 8005720:	af00      	add	r7, sp, #0
 8005722:	60f8      	str	r0, [r7, #12]
 8005724:	60b9      	str	r1, [r7, #8]
 8005726:	603b      	str	r3, [r7, #0]
 8005728:	4613      	mov	r3, r2
 800572a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800572c:	e04f      	b.n	80057ce <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800572e:	69bb      	ldr	r3, [r7, #24]
 8005730:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005734:	d04b      	beq.n	80057ce <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005736:	f7fb fdcf 	bl	80012d8 <HAL_GetTick>
 800573a:	4602      	mov	r2, r0
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	1ad3      	subs	r3, r2, r3
 8005740:	69ba      	ldr	r2, [r7, #24]
 8005742:	429a      	cmp	r2, r3
 8005744:	d302      	bcc.n	800574c <UART_WaitOnFlagUntilTimeout+0x30>
 8005746:	69bb      	ldr	r3, [r7, #24]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d101      	bne.n	8005750 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800574c:	2303      	movs	r3, #3
 800574e:	e04e      	b.n	80057ee <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f003 0304 	and.w	r3, r3, #4
 800575a:	2b00      	cmp	r3, #0
 800575c:	d037      	beq.n	80057ce <UART_WaitOnFlagUntilTimeout+0xb2>
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	2b80      	cmp	r3, #128	@ 0x80
 8005762:	d034      	beq.n	80057ce <UART_WaitOnFlagUntilTimeout+0xb2>
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	2b40      	cmp	r3, #64	@ 0x40
 8005768:	d031      	beq.n	80057ce <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	69db      	ldr	r3, [r3, #28]
 8005770:	f003 0308 	and.w	r3, r3, #8
 8005774:	2b08      	cmp	r3, #8
 8005776:	d110      	bne.n	800579a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	2208      	movs	r2, #8
 800577e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005780:	68f8      	ldr	r0, [r7, #12]
 8005782:	f000 f838 	bl	80057f6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	2208      	movs	r2, #8
 800578a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	2200      	movs	r2, #0
 8005792:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005796:	2301      	movs	r3, #1
 8005798:	e029      	b.n	80057ee <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	69db      	ldr	r3, [r3, #28]
 80057a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80057a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80057a8:	d111      	bne.n	80057ce <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80057b2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80057b4:	68f8      	ldr	r0, [r7, #12]
 80057b6:	f000 f81e 	bl	80057f6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	2220      	movs	r2, #32
 80057be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	2200      	movs	r2, #0
 80057c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80057ca:	2303      	movs	r3, #3
 80057cc:	e00f      	b.n	80057ee <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	69da      	ldr	r2, [r3, #28]
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	4013      	ands	r3, r2
 80057d8:	68ba      	ldr	r2, [r7, #8]
 80057da:	429a      	cmp	r2, r3
 80057dc:	bf0c      	ite	eq
 80057de:	2301      	moveq	r3, #1
 80057e0:	2300      	movne	r3, #0
 80057e2:	b2db      	uxtb	r3, r3
 80057e4:	461a      	mov	r2, r3
 80057e6:	79fb      	ldrb	r3, [r7, #7]
 80057e8:	429a      	cmp	r2, r3
 80057ea:	d0a0      	beq.n	800572e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80057ec:	2300      	movs	r3, #0
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	3710      	adds	r7, #16
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}

080057f6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80057f6:	b480      	push	{r7}
 80057f8:	b095      	sub	sp, #84	@ 0x54
 80057fa:	af00      	add	r7, sp, #0
 80057fc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005804:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005806:	e853 3f00 	ldrex	r3, [r3]
 800580a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800580c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800580e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005812:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	461a      	mov	r2, r3
 800581a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800581c:	643b      	str	r3, [r7, #64]	@ 0x40
 800581e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005820:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005822:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005824:	e841 2300 	strex	r3, r2, [r1]
 8005828:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800582a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800582c:	2b00      	cmp	r3, #0
 800582e:	d1e6      	bne.n	80057fe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	3308      	adds	r3, #8
 8005836:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005838:	6a3b      	ldr	r3, [r7, #32]
 800583a:	e853 3f00 	ldrex	r3, [r3]
 800583e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005840:	69fb      	ldr	r3, [r7, #28]
 8005842:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005846:	f023 0301 	bic.w	r3, r3, #1
 800584a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	3308      	adds	r3, #8
 8005852:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005854:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005856:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005858:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800585a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800585c:	e841 2300 	strex	r3, r2, [r1]
 8005860:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005864:	2b00      	cmp	r3, #0
 8005866:	d1e3      	bne.n	8005830 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800586c:	2b01      	cmp	r3, #1
 800586e:	d118      	bne.n	80058a2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	e853 3f00 	ldrex	r3, [r3]
 800587c:	60bb      	str	r3, [r7, #8]
   return(result);
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	f023 0310 	bic.w	r3, r3, #16
 8005884:	647b      	str	r3, [r7, #68]	@ 0x44
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	461a      	mov	r2, r3
 800588c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800588e:	61bb      	str	r3, [r7, #24]
 8005890:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005892:	6979      	ldr	r1, [r7, #20]
 8005894:	69ba      	ldr	r2, [r7, #24]
 8005896:	e841 2300 	strex	r3, r2, [r1]
 800589a:	613b      	str	r3, [r7, #16]
   return(result);
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d1e6      	bne.n	8005870 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2220      	movs	r2, #32
 80058a6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2200      	movs	r2, #0
 80058ae:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2200      	movs	r2, #0
 80058b4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80058b6:	bf00      	nop
 80058b8:	3754      	adds	r7, #84	@ 0x54
 80058ba:	46bd      	mov	sp, r7
 80058bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c0:	4770      	bx	lr

080058c2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80058c2:	b480      	push	{r7}
 80058c4:	b085      	sub	sp, #20
 80058c6:	af00      	add	r7, sp, #0
 80058c8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80058d0:	2b01      	cmp	r3, #1
 80058d2:	d101      	bne.n	80058d8 <HAL_UARTEx_DisableFifoMode+0x16>
 80058d4:	2302      	movs	r3, #2
 80058d6:	e027      	b.n	8005928 <HAL_UARTEx_DisableFifoMode+0x66>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2201      	movs	r2, #1
 80058dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2224      	movs	r2, #36	@ 0x24
 80058e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	681a      	ldr	r2, [r3, #0]
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f022 0201 	bic.w	r2, r2, #1
 80058fe:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005906:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2200      	movs	r2, #0
 800590c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	68fa      	ldr	r2, [r7, #12]
 8005914:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2220      	movs	r2, #32
 800591a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2200      	movs	r2, #0
 8005922:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005926:	2300      	movs	r3, #0
}
 8005928:	4618      	mov	r0, r3
 800592a:	3714      	adds	r7, #20
 800592c:	46bd      	mov	sp, r7
 800592e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005932:	4770      	bx	lr

08005934 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b084      	sub	sp, #16
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
 800593c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005944:	2b01      	cmp	r3, #1
 8005946:	d101      	bne.n	800594c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005948:	2302      	movs	r3, #2
 800594a:	e02d      	b.n	80059a8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2201      	movs	r2, #1
 8005950:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2224      	movs	r2, #36	@ 0x24
 8005958:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	681a      	ldr	r2, [r3, #0]
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f022 0201 	bic.w	r2, r2, #1
 8005972:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	689b      	ldr	r3, [r3, #8]
 800597a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	683a      	ldr	r2, [r7, #0]
 8005984:	430a      	orrs	r2, r1
 8005986:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005988:	6878      	ldr	r0, [r7, #4]
 800598a:	f000 f84f 	bl	8005a2c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	68fa      	ldr	r2, [r7, #12]
 8005994:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2220      	movs	r2, #32
 800599a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2200      	movs	r2, #0
 80059a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80059a6:	2300      	movs	r3, #0
}
 80059a8:	4618      	mov	r0, r3
 80059aa:	3710      	adds	r7, #16
 80059ac:	46bd      	mov	sp, r7
 80059ae:	bd80      	pop	{r7, pc}

080059b0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b084      	sub	sp, #16
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
 80059b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80059c0:	2b01      	cmp	r3, #1
 80059c2:	d101      	bne.n	80059c8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80059c4:	2302      	movs	r3, #2
 80059c6:	e02d      	b.n	8005a24 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2201      	movs	r2, #1
 80059cc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2224      	movs	r2, #36	@ 0x24
 80059d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	681a      	ldr	r2, [r3, #0]
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f022 0201 	bic.w	r2, r2, #1
 80059ee:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	689b      	ldr	r3, [r3, #8]
 80059f6:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	683a      	ldr	r2, [r7, #0]
 8005a00:	430a      	orrs	r2, r1
 8005a02:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005a04:	6878      	ldr	r0, [r7, #4]
 8005a06:	f000 f811 	bl	8005a2c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	68fa      	ldr	r2, [r7, #12]
 8005a10:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2220      	movs	r2, #32
 8005a16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005a22:	2300      	movs	r3, #0
}
 8005a24:	4618      	mov	r0, r3
 8005a26:	3710      	adds	r7, #16
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd80      	pop	{r7, pc}

08005a2c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b085      	sub	sp, #20
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d108      	bne.n	8005a4e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2201      	movs	r2, #1
 8005a40:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2201      	movs	r2, #1
 8005a48:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005a4c:	e031      	b.n	8005ab2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005a4e:	2308      	movs	r3, #8
 8005a50:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005a52:	2308      	movs	r3, #8
 8005a54:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	689b      	ldr	r3, [r3, #8]
 8005a5c:	0e5b      	lsrs	r3, r3, #25
 8005a5e:	b2db      	uxtb	r3, r3
 8005a60:	f003 0307 	and.w	r3, r3, #7
 8005a64:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	689b      	ldr	r3, [r3, #8]
 8005a6c:	0f5b      	lsrs	r3, r3, #29
 8005a6e:	b2db      	uxtb	r3, r3
 8005a70:	f003 0307 	and.w	r3, r3, #7
 8005a74:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005a76:	7bbb      	ldrb	r3, [r7, #14]
 8005a78:	7b3a      	ldrb	r2, [r7, #12]
 8005a7a:	4911      	ldr	r1, [pc, #68]	@ (8005ac0 <UARTEx_SetNbDataToProcess+0x94>)
 8005a7c:	5c8a      	ldrb	r2, [r1, r2]
 8005a7e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005a82:	7b3a      	ldrb	r2, [r7, #12]
 8005a84:	490f      	ldr	r1, [pc, #60]	@ (8005ac4 <UARTEx_SetNbDataToProcess+0x98>)
 8005a86:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005a88:	fb93 f3f2 	sdiv	r3, r3, r2
 8005a8c:	b29a      	uxth	r2, r3
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005a94:	7bfb      	ldrb	r3, [r7, #15]
 8005a96:	7b7a      	ldrb	r2, [r7, #13]
 8005a98:	4909      	ldr	r1, [pc, #36]	@ (8005ac0 <UARTEx_SetNbDataToProcess+0x94>)
 8005a9a:	5c8a      	ldrb	r2, [r1, r2]
 8005a9c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005aa0:	7b7a      	ldrb	r2, [r7, #13]
 8005aa2:	4908      	ldr	r1, [pc, #32]	@ (8005ac4 <UARTEx_SetNbDataToProcess+0x98>)
 8005aa4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005aa6:	fb93 f3f2 	sdiv	r3, r3, r2
 8005aaa:	b29a      	uxth	r2, r3
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005ab2:	bf00      	nop
 8005ab4:	3714      	adds	r7, #20
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abc:	4770      	bx	lr
 8005abe:	bf00      	nop
 8005ac0:	080064d0 	.word	0x080064d0
 8005ac4:	080064d8 	.word	0x080064d8

08005ac8 <sniprintf>:
 8005ac8:	b40c      	push	{r2, r3}
 8005aca:	b530      	push	{r4, r5, lr}
 8005acc:	4b17      	ldr	r3, [pc, #92]	@ (8005b2c <sniprintf+0x64>)
 8005ace:	1e0c      	subs	r4, r1, #0
 8005ad0:	681d      	ldr	r5, [r3, #0]
 8005ad2:	b09d      	sub	sp, #116	@ 0x74
 8005ad4:	da08      	bge.n	8005ae8 <sniprintf+0x20>
 8005ad6:	238b      	movs	r3, #139	@ 0x8b
 8005ad8:	602b      	str	r3, [r5, #0]
 8005ada:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005ade:	b01d      	add	sp, #116	@ 0x74
 8005ae0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005ae4:	b002      	add	sp, #8
 8005ae6:	4770      	bx	lr
 8005ae8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8005aec:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005af0:	bf14      	ite	ne
 8005af2:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8005af6:	4623      	moveq	r3, r4
 8005af8:	9304      	str	r3, [sp, #16]
 8005afa:	9307      	str	r3, [sp, #28]
 8005afc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005b00:	9002      	str	r0, [sp, #8]
 8005b02:	9006      	str	r0, [sp, #24]
 8005b04:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005b08:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005b0a:	ab21      	add	r3, sp, #132	@ 0x84
 8005b0c:	a902      	add	r1, sp, #8
 8005b0e:	4628      	mov	r0, r5
 8005b10:	9301      	str	r3, [sp, #4]
 8005b12:	f000 f995 	bl	8005e40 <_svfiprintf_r>
 8005b16:	1c43      	adds	r3, r0, #1
 8005b18:	bfbc      	itt	lt
 8005b1a:	238b      	movlt	r3, #139	@ 0x8b
 8005b1c:	602b      	strlt	r3, [r5, #0]
 8005b1e:	2c00      	cmp	r4, #0
 8005b20:	d0dd      	beq.n	8005ade <sniprintf+0x16>
 8005b22:	9b02      	ldr	r3, [sp, #8]
 8005b24:	2200      	movs	r2, #0
 8005b26:	701a      	strb	r2, [r3, #0]
 8005b28:	e7d9      	b.n	8005ade <sniprintf+0x16>
 8005b2a:	bf00      	nop
 8005b2c:	2000000c 	.word	0x2000000c

08005b30 <memset>:
 8005b30:	4402      	add	r2, r0
 8005b32:	4603      	mov	r3, r0
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d100      	bne.n	8005b3a <memset+0xa>
 8005b38:	4770      	bx	lr
 8005b3a:	f803 1b01 	strb.w	r1, [r3], #1
 8005b3e:	e7f9      	b.n	8005b34 <memset+0x4>

08005b40 <__errno>:
 8005b40:	4b01      	ldr	r3, [pc, #4]	@ (8005b48 <__errno+0x8>)
 8005b42:	6818      	ldr	r0, [r3, #0]
 8005b44:	4770      	bx	lr
 8005b46:	bf00      	nop
 8005b48:	2000000c 	.word	0x2000000c

08005b4c <__libc_init_array>:
 8005b4c:	b570      	push	{r4, r5, r6, lr}
 8005b4e:	4d0d      	ldr	r5, [pc, #52]	@ (8005b84 <__libc_init_array+0x38>)
 8005b50:	4c0d      	ldr	r4, [pc, #52]	@ (8005b88 <__libc_init_array+0x3c>)
 8005b52:	1b64      	subs	r4, r4, r5
 8005b54:	10a4      	asrs	r4, r4, #2
 8005b56:	2600      	movs	r6, #0
 8005b58:	42a6      	cmp	r6, r4
 8005b5a:	d109      	bne.n	8005b70 <__libc_init_array+0x24>
 8005b5c:	4d0b      	ldr	r5, [pc, #44]	@ (8005b8c <__libc_init_array+0x40>)
 8005b5e:	4c0c      	ldr	r4, [pc, #48]	@ (8005b90 <__libc_init_array+0x44>)
 8005b60:	f000 fc66 	bl	8006430 <_init>
 8005b64:	1b64      	subs	r4, r4, r5
 8005b66:	10a4      	asrs	r4, r4, #2
 8005b68:	2600      	movs	r6, #0
 8005b6a:	42a6      	cmp	r6, r4
 8005b6c:	d105      	bne.n	8005b7a <__libc_init_array+0x2e>
 8005b6e:	bd70      	pop	{r4, r5, r6, pc}
 8005b70:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b74:	4798      	blx	r3
 8005b76:	3601      	adds	r6, #1
 8005b78:	e7ee      	b.n	8005b58 <__libc_init_array+0xc>
 8005b7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b7e:	4798      	blx	r3
 8005b80:	3601      	adds	r6, #1
 8005b82:	e7f2      	b.n	8005b6a <__libc_init_array+0x1e>
 8005b84:	0800651c 	.word	0x0800651c
 8005b88:	0800651c 	.word	0x0800651c
 8005b8c:	0800651c 	.word	0x0800651c
 8005b90:	08006520 	.word	0x08006520

08005b94 <__retarget_lock_acquire_recursive>:
 8005b94:	4770      	bx	lr

08005b96 <__retarget_lock_release_recursive>:
 8005b96:	4770      	bx	lr

08005b98 <_free_r>:
 8005b98:	b538      	push	{r3, r4, r5, lr}
 8005b9a:	4605      	mov	r5, r0
 8005b9c:	2900      	cmp	r1, #0
 8005b9e:	d041      	beq.n	8005c24 <_free_r+0x8c>
 8005ba0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ba4:	1f0c      	subs	r4, r1, #4
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	bfb8      	it	lt
 8005baa:	18e4      	addlt	r4, r4, r3
 8005bac:	f000 f8e0 	bl	8005d70 <__malloc_lock>
 8005bb0:	4a1d      	ldr	r2, [pc, #116]	@ (8005c28 <_free_r+0x90>)
 8005bb2:	6813      	ldr	r3, [r2, #0]
 8005bb4:	b933      	cbnz	r3, 8005bc4 <_free_r+0x2c>
 8005bb6:	6063      	str	r3, [r4, #4]
 8005bb8:	6014      	str	r4, [r2, #0]
 8005bba:	4628      	mov	r0, r5
 8005bbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005bc0:	f000 b8dc 	b.w	8005d7c <__malloc_unlock>
 8005bc4:	42a3      	cmp	r3, r4
 8005bc6:	d908      	bls.n	8005bda <_free_r+0x42>
 8005bc8:	6820      	ldr	r0, [r4, #0]
 8005bca:	1821      	adds	r1, r4, r0
 8005bcc:	428b      	cmp	r3, r1
 8005bce:	bf01      	itttt	eq
 8005bd0:	6819      	ldreq	r1, [r3, #0]
 8005bd2:	685b      	ldreq	r3, [r3, #4]
 8005bd4:	1809      	addeq	r1, r1, r0
 8005bd6:	6021      	streq	r1, [r4, #0]
 8005bd8:	e7ed      	b.n	8005bb6 <_free_r+0x1e>
 8005bda:	461a      	mov	r2, r3
 8005bdc:	685b      	ldr	r3, [r3, #4]
 8005bde:	b10b      	cbz	r3, 8005be4 <_free_r+0x4c>
 8005be0:	42a3      	cmp	r3, r4
 8005be2:	d9fa      	bls.n	8005bda <_free_r+0x42>
 8005be4:	6811      	ldr	r1, [r2, #0]
 8005be6:	1850      	adds	r0, r2, r1
 8005be8:	42a0      	cmp	r0, r4
 8005bea:	d10b      	bne.n	8005c04 <_free_r+0x6c>
 8005bec:	6820      	ldr	r0, [r4, #0]
 8005bee:	4401      	add	r1, r0
 8005bf0:	1850      	adds	r0, r2, r1
 8005bf2:	4283      	cmp	r3, r0
 8005bf4:	6011      	str	r1, [r2, #0]
 8005bf6:	d1e0      	bne.n	8005bba <_free_r+0x22>
 8005bf8:	6818      	ldr	r0, [r3, #0]
 8005bfa:	685b      	ldr	r3, [r3, #4]
 8005bfc:	6053      	str	r3, [r2, #4]
 8005bfe:	4408      	add	r0, r1
 8005c00:	6010      	str	r0, [r2, #0]
 8005c02:	e7da      	b.n	8005bba <_free_r+0x22>
 8005c04:	d902      	bls.n	8005c0c <_free_r+0x74>
 8005c06:	230c      	movs	r3, #12
 8005c08:	602b      	str	r3, [r5, #0]
 8005c0a:	e7d6      	b.n	8005bba <_free_r+0x22>
 8005c0c:	6820      	ldr	r0, [r4, #0]
 8005c0e:	1821      	adds	r1, r4, r0
 8005c10:	428b      	cmp	r3, r1
 8005c12:	bf04      	itt	eq
 8005c14:	6819      	ldreq	r1, [r3, #0]
 8005c16:	685b      	ldreq	r3, [r3, #4]
 8005c18:	6063      	str	r3, [r4, #4]
 8005c1a:	bf04      	itt	eq
 8005c1c:	1809      	addeq	r1, r1, r0
 8005c1e:	6021      	streq	r1, [r4, #0]
 8005c20:	6054      	str	r4, [r2, #4]
 8005c22:	e7ca      	b.n	8005bba <_free_r+0x22>
 8005c24:	bd38      	pop	{r3, r4, r5, pc}
 8005c26:	bf00      	nop
 8005c28:	20000398 	.word	0x20000398

08005c2c <sbrk_aligned>:
 8005c2c:	b570      	push	{r4, r5, r6, lr}
 8005c2e:	4e0f      	ldr	r6, [pc, #60]	@ (8005c6c <sbrk_aligned+0x40>)
 8005c30:	460c      	mov	r4, r1
 8005c32:	6831      	ldr	r1, [r6, #0]
 8005c34:	4605      	mov	r5, r0
 8005c36:	b911      	cbnz	r1, 8005c3e <sbrk_aligned+0x12>
 8005c38:	f000 fba6 	bl	8006388 <_sbrk_r>
 8005c3c:	6030      	str	r0, [r6, #0]
 8005c3e:	4621      	mov	r1, r4
 8005c40:	4628      	mov	r0, r5
 8005c42:	f000 fba1 	bl	8006388 <_sbrk_r>
 8005c46:	1c43      	adds	r3, r0, #1
 8005c48:	d103      	bne.n	8005c52 <sbrk_aligned+0x26>
 8005c4a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8005c4e:	4620      	mov	r0, r4
 8005c50:	bd70      	pop	{r4, r5, r6, pc}
 8005c52:	1cc4      	adds	r4, r0, #3
 8005c54:	f024 0403 	bic.w	r4, r4, #3
 8005c58:	42a0      	cmp	r0, r4
 8005c5a:	d0f8      	beq.n	8005c4e <sbrk_aligned+0x22>
 8005c5c:	1a21      	subs	r1, r4, r0
 8005c5e:	4628      	mov	r0, r5
 8005c60:	f000 fb92 	bl	8006388 <_sbrk_r>
 8005c64:	3001      	adds	r0, #1
 8005c66:	d1f2      	bne.n	8005c4e <sbrk_aligned+0x22>
 8005c68:	e7ef      	b.n	8005c4a <sbrk_aligned+0x1e>
 8005c6a:	bf00      	nop
 8005c6c:	20000394 	.word	0x20000394

08005c70 <_malloc_r>:
 8005c70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c74:	1ccd      	adds	r5, r1, #3
 8005c76:	f025 0503 	bic.w	r5, r5, #3
 8005c7a:	3508      	adds	r5, #8
 8005c7c:	2d0c      	cmp	r5, #12
 8005c7e:	bf38      	it	cc
 8005c80:	250c      	movcc	r5, #12
 8005c82:	2d00      	cmp	r5, #0
 8005c84:	4606      	mov	r6, r0
 8005c86:	db01      	blt.n	8005c8c <_malloc_r+0x1c>
 8005c88:	42a9      	cmp	r1, r5
 8005c8a:	d904      	bls.n	8005c96 <_malloc_r+0x26>
 8005c8c:	230c      	movs	r3, #12
 8005c8e:	6033      	str	r3, [r6, #0]
 8005c90:	2000      	movs	r0, #0
 8005c92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c96:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005d6c <_malloc_r+0xfc>
 8005c9a:	f000 f869 	bl	8005d70 <__malloc_lock>
 8005c9e:	f8d8 3000 	ldr.w	r3, [r8]
 8005ca2:	461c      	mov	r4, r3
 8005ca4:	bb44      	cbnz	r4, 8005cf8 <_malloc_r+0x88>
 8005ca6:	4629      	mov	r1, r5
 8005ca8:	4630      	mov	r0, r6
 8005caa:	f7ff ffbf 	bl	8005c2c <sbrk_aligned>
 8005cae:	1c43      	adds	r3, r0, #1
 8005cb0:	4604      	mov	r4, r0
 8005cb2:	d158      	bne.n	8005d66 <_malloc_r+0xf6>
 8005cb4:	f8d8 4000 	ldr.w	r4, [r8]
 8005cb8:	4627      	mov	r7, r4
 8005cba:	2f00      	cmp	r7, #0
 8005cbc:	d143      	bne.n	8005d46 <_malloc_r+0xd6>
 8005cbe:	2c00      	cmp	r4, #0
 8005cc0:	d04b      	beq.n	8005d5a <_malloc_r+0xea>
 8005cc2:	6823      	ldr	r3, [r4, #0]
 8005cc4:	4639      	mov	r1, r7
 8005cc6:	4630      	mov	r0, r6
 8005cc8:	eb04 0903 	add.w	r9, r4, r3
 8005ccc:	f000 fb5c 	bl	8006388 <_sbrk_r>
 8005cd0:	4581      	cmp	r9, r0
 8005cd2:	d142      	bne.n	8005d5a <_malloc_r+0xea>
 8005cd4:	6821      	ldr	r1, [r4, #0]
 8005cd6:	1a6d      	subs	r5, r5, r1
 8005cd8:	4629      	mov	r1, r5
 8005cda:	4630      	mov	r0, r6
 8005cdc:	f7ff ffa6 	bl	8005c2c <sbrk_aligned>
 8005ce0:	3001      	adds	r0, #1
 8005ce2:	d03a      	beq.n	8005d5a <_malloc_r+0xea>
 8005ce4:	6823      	ldr	r3, [r4, #0]
 8005ce6:	442b      	add	r3, r5
 8005ce8:	6023      	str	r3, [r4, #0]
 8005cea:	f8d8 3000 	ldr.w	r3, [r8]
 8005cee:	685a      	ldr	r2, [r3, #4]
 8005cf0:	bb62      	cbnz	r2, 8005d4c <_malloc_r+0xdc>
 8005cf2:	f8c8 7000 	str.w	r7, [r8]
 8005cf6:	e00f      	b.n	8005d18 <_malloc_r+0xa8>
 8005cf8:	6822      	ldr	r2, [r4, #0]
 8005cfa:	1b52      	subs	r2, r2, r5
 8005cfc:	d420      	bmi.n	8005d40 <_malloc_r+0xd0>
 8005cfe:	2a0b      	cmp	r2, #11
 8005d00:	d917      	bls.n	8005d32 <_malloc_r+0xc2>
 8005d02:	1961      	adds	r1, r4, r5
 8005d04:	42a3      	cmp	r3, r4
 8005d06:	6025      	str	r5, [r4, #0]
 8005d08:	bf18      	it	ne
 8005d0a:	6059      	strne	r1, [r3, #4]
 8005d0c:	6863      	ldr	r3, [r4, #4]
 8005d0e:	bf08      	it	eq
 8005d10:	f8c8 1000 	streq.w	r1, [r8]
 8005d14:	5162      	str	r2, [r4, r5]
 8005d16:	604b      	str	r3, [r1, #4]
 8005d18:	4630      	mov	r0, r6
 8005d1a:	f000 f82f 	bl	8005d7c <__malloc_unlock>
 8005d1e:	f104 000b 	add.w	r0, r4, #11
 8005d22:	1d23      	adds	r3, r4, #4
 8005d24:	f020 0007 	bic.w	r0, r0, #7
 8005d28:	1ac2      	subs	r2, r0, r3
 8005d2a:	bf1c      	itt	ne
 8005d2c:	1a1b      	subne	r3, r3, r0
 8005d2e:	50a3      	strne	r3, [r4, r2]
 8005d30:	e7af      	b.n	8005c92 <_malloc_r+0x22>
 8005d32:	6862      	ldr	r2, [r4, #4]
 8005d34:	42a3      	cmp	r3, r4
 8005d36:	bf0c      	ite	eq
 8005d38:	f8c8 2000 	streq.w	r2, [r8]
 8005d3c:	605a      	strne	r2, [r3, #4]
 8005d3e:	e7eb      	b.n	8005d18 <_malloc_r+0xa8>
 8005d40:	4623      	mov	r3, r4
 8005d42:	6864      	ldr	r4, [r4, #4]
 8005d44:	e7ae      	b.n	8005ca4 <_malloc_r+0x34>
 8005d46:	463c      	mov	r4, r7
 8005d48:	687f      	ldr	r7, [r7, #4]
 8005d4a:	e7b6      	b.n	8005cba <_malloc_r+0x4a>
 8005d4c:	461a      	mov	r2, r3
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	42a3      	cmp	r3, r4
 8005d52:	d1fb      	bne.n	8005d4c <_malloc_r+0xdc>
 8005d54:	2300      	movs	r3, #0
 8005d56:	6053      	str	r3, [r2, #4]
 8005d58:	e7de      	b.n	8005d18 <_malloc_r+0xa8>
 8005d5a:	230c      	movs	r3, #12
 8005d5c:	6033      	str	r3, [r6, #0]
 8005d5e:	4630      	mov	r0, r6
 8005d60:	f000 f80c 	bl	8005d7c <__malloc_unlock>
 8005d64:	e794      	b.n	8005c90 <_malloc_r+0x20>
 8005d66:	6005      	str	r5, [r0, #0]
 8005d68:	e7d6      	b.n	8005d18 <_malloc_r+0xa8>
 8005d6a:	bf00      	nop
 8005d6c:	20000398 	.word	0x20000398

08005d70 <__malloc_lock>:
 8005d70:	4801      	ldr	r0, [pc, #4]	@ (8005d78 <__malloc_lock+0x8>)
 8005d72:	f7ff bf0f 	b.w	8005b94 <__retarget_lock_acquire_recursive>
 8005d76:	bf00      	nop
 8005d78:	20000390 	.word	0x20000390

08005d7c <__malloc_unlock>:
 8005d7c:	4801      	ldr	r0, [pc, #4]	@ (8005d84 <__malloc_unlock+0x8>)
 8005d7e:	f7ff bf0a 	b.w	8005b96 <__retarget_lock_release_recursive>
 8005d82:	bf00      	nop
 8005d84:	20000390 	.word	0x20000390

08005d88 <__ssputs_r>:
 8005d88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d8c:	688e      	ldr	r6, [r1, #8]
 8005d8e:	461f      	mov	r7, r3
 8005d90:	42be      	cmp	r6, r7
 8005d92:	680b      	ldr	r3, [r1, #0]
 8005d94:	4682      	mov	sl, r0
 8005d96:	460c      	mov	r4, r1
 8005d98:	4690      	mov	r8, r2
 8005d9a:	d82d      	bhi.n	8005df8 <__ssputs_r+0x70>
 8005d9c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005da0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005da4:	d026      	beq.n	8005df4 <__ssputs_r+0x6c>
 8005da6:	6965      	ldr	r5, [r4, #20]
 8005da8:	6909      	ldr	r1, [r1, #16]
 8005daa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005dae:	eba3 0901 	sub.w	r9, r3, r1
 8005db2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005db6:	1c7b      	adds	r3, r7, #1
 8005db8:	444b      	add	r3, r9
 8005dba:	106d      	asrs	r5, r5, #1
 8005dbc:	429d      	cmp	r5, r3
 8005dbe:	bf38      	it	cc
 8005dc0:	461d      	movcc	r5, r3
 8005dc2:	0553      	lsls	r3, r2, #21
 8005dc4:	d527      	bpl.n	8005e16 <__ssputs_r+0x8e>
 8005dc6:	4629      	mov	r1, r5
 8005dc8:	f7ff ff52 	bl	8005c70 <_malloc_r>
 8005dcc:	4606      	mov	r6, r0
 8005dce:	b360      	cbz	r0, 8005e2a <__ssputs_r+0xa2>
 8005dd0:	6921      	ldr	r1, [r4, #16]
 8005dd2:	464a      	mov	r2, r9
 8005dd4:	f000 fae8 	bl	80063a8 <memcpy>
 8005dd8:	89a3      	ldrh	r3, [r4, #12]
 8005dda:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005dde:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005de2:	81a3      	strh	r3, [r4, #12]
 8005de4:	6126      	str	r6, [r4, #16]
 8005de6:	6165      	str	r5, [r4, #20]
 8005de8:	444e      	add	r6, r9
 8005dea:	eba5 0509 	sub.w	r5, r5, r9
 8005dee:	6026      	str	r6, [r4, #0]
 8005df0:	60a5      	str	r5, [r4, #8]
 8005df2:	463e      	mov	r6, r7
 8005df4:	42be      	cmp	r6, r7
 8005df6:	d900      	bls.n	8005dfa <__ssputs_r+0x72>
 8005df8:	463e      	mov	r6, r7
 8005dfa:	6820      	ldr	r0, [r4, #0]
 8005dfc:	4632      	mov	r2, r6
 8005dfe:	4641      	mov	r1, r8
 8005e00:	f000 faa8 	bl	8006354 <memmove>
 8005e04:	68a3      	ldr	r3, [r4, #8]
 8005e06:	1b9b      	subs	r3, r3, r6
 8005e08:	60a3      	str	r3, [r4, #8]
 8005e0a:	6823      	ldr	r3, [r4, #0]
 8005e0c:	4433      	add	r3, r6
 8005e0e:	6023      	str	r3, [r4, #0]
 8005e10:	2000      	movs	r0, #0
 8005e12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e16:	462a      	mov	r2, r5
 8005e18:	f000 fad4 	bl	80063c4 <_realloc_r>
 8005e1c:	4606      	mov	r6, r0
 8005e1e:	2800      	cmp	r0, #0
 8005e20:	d1e0      	bne.n	8005de4 <__ssputs_r+0x5c>
 8005e22:	6921      	ldr	r1, [r4, #16]
 8005e24:	4650      	mov	r0, sl
 8005e26:	f7ff feb7 	bl	8005b98 <_free_r>
 8005e2a:	230c      	movs	r3, #12
 8005e2c:	f8ca 3000 	str.w	r3, [sl]
 8005e30:	89a3      	ldrh	r3, [r4, #12]
 8005e32:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005e36:	81a3      	strh	r3, [r4, #12]
 8005e38:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005e3c:	e7e9      	b.n	8005e12 <__ssputs_r+0x8a>
	...

08005e40 <_svfiprintf_r>:
 8005e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e44:	4698      	mov	r8, r3
 8005e46:	898b      	ldrh	r3, [r1, #12]
 8005e48:	061b      	lsls	r3, r3, #24
 8005e4a:	b09d      	sub	sp, #116	@ 0x74
 8005e4c:	4607      	mov	r7, r0
 8005e4e:	460d      	mov	r5, r1
 8005e50:	4614      	mov	r4, r2
 8005e52:	d510      	bpl.n	8005e76 <_svfiprintf_r+0x36>
 8005e54:	690b      	ldr	r3, [r1, #16]
 8005e56:	b973      	cbnz	r3, 8005e76 <_svfiprintf_r+0x36>
 8005e58:	2140      	movs	r1, #64	@ 0x40
 8005e5a:	f7ff ff09 	bl	8005c70 <_malloc_r>
 8005e5e:	6028      	str	r0, [r5, #0]
 8005e60:	6128      	str	r0, [r5, #16]
 8005e62:	b930      	cbnz	r0, 8005e72 <_svfiprintf_r+0x32>
 8005e64:	230c      	movs	r3, #12
 8005e66:	603b      	str	r3, [r7, #0]
 8005e68:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005e6c:	b01d      	add	sp, #116	@ 0x74
 8005e6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e72:	2340      	movs	r3, #64	@ 0x40
 8005e74:	616b      	str	r3, [r5, #20]
 8005e76:	2300      	movs	r3, #0
 8005e78:	9309      	str	r3, [sp, #36]	@ 0x24
 8005e7a:	2320      	movs	r3, #32
 8005e7c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005e80:	f8cd 800c 	str.w	r8, [sp, #12]
 8005e84:	2330      	movs	r3, #48	@ 0x30
 8005e86:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006024 <_svfiprintf_r+0x1e4>
 8005e8a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005e8e:	f04f 0901 	mov.w	r9, #1
 8005e92:	4623      	mov	r3, r4
 8005e94:	469a      	mov	sl, r3
 8005e96:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005e9a:	b10a      	cbz	r2, 8005ea0 <_svfiprintf_r+0x60>
 8005e9c:	2a25      	cmp	r2, #37	@ 0x25
 8005e9e:	d1f9      	bne.n	8005e94 <_svfiprintf_r+0x54>
 8005ea0:	ebba 0b04 	subs.w	fp, sl, r4
 8005ea4:	d00b      	beq.n	8005ebe <_svfiprintf_r+0x7e>
 8005ea6:	465b      	mov	r3, fp
 8005ea8:	4622      	mov	r2, r4
 8005eaa:	4629      	mov	r1, r5
 8005eac:	4638      	mov	r0, r7
 8005eae:	f7ff ff6b 	bl	8005d88 <__ssputs_r>
 8005eb2:	3001      	adds	r0, #1
 8005eb4:	f000 80a7 	beq.w	8006006 <_svfiprintf_r+0x1c6>
 8005eb8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005eba:	445a      	add	r2, fp
 8005ebc:	9209      	str	r2, [sp, #36]	@ 0x24
 8005ebe:	f89a 3000 	ldrb.w	r3, [sl]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	f000 809f 	beq.w	8006006 <_svfiprintf_r+0x1c6>
 8005ec8:	2300      	movs	r3, #0
 8005eca:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005ece:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005ed2:	f10a 0a01 	add.w	sl, sl, #1
 8005ed6:	9304      	str	r3, [sp, #16]
 8005ed8:	9307      	str	r3, [sp, #28]
 8005eda:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005ede:	931a      	str	r3, [sp, #104]	@ 0x68
 8005ee0:	4654      	mov	r4, sl
 8005ee2:	2205      	movs	r2, #5
 8005ee4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ee8:	484e      	ldr	r0, [pc, #312]	@ (8006024 <_svfiprintf_r+0x1e4>)
 8005eea:	f7fa f9a1 	bl	8000230 <memchr>
 8005eee:	9a04      	ldr	r2, [sp, #16]
 8005ef0:	b9d8      	cbnz	r0, 8005f2a <_svfiprintf_r+0xea>
 8005ef2:	06d0      	lsls	r0, r2, #27
 8005ef4:	bf44      	itt	mi
 8005ef6:	2320      	movmi	r3, #32
 8005ef8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005efc:	0711      	lsls	r1, r2, #28
 8005efe:	bf44      	itt	mi
 8005f00:	232b      	movmi	r3, #43	@ 0x2b
 8005f02:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005f06:	f89a 3000 	ldrb.w	r3, [sl]
 8005f0a:	2b2a      	cmp	r3, #42	@ 0x2a
 8005f0c:	d015      	beq.n	8005f3a <_svfiprintf_r+0xfa>
 8005f0e:	9a07      	ldr	r2, [sp, #28]
 8005f10:	4654      	mov	r4, sl
 8005f12:	2000      	movs	r0, #0
 8005f14:	f04f 0c0a 	mov.w	ip, #10
 8005f18:	4621      	mov	r1, r4
 8005f1a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005f1e:	3b30      	subs	r3, #48	@ 0x30
 8005f20:	2b09      	cmp	r3, #9
 8005f22:	d94b      	bls.n	8005fbc <_svfiprintf_r+0x17c>
 8005f24:	b1b0      	cbz	r0, 8005f54 <_svfiprintf_r+0x114>
 8005f26:	9207      	str	r2, [sp, #28]
 8005f28:	e014      	b.n	8005f54 <_svfiprintf_r+0x114>
 8005f2a:	eba0 0308 	sub.w	r3, r0, r8
 8005f2e:	fa09 f303 	lsl.w	r3, r9, r3
 8005f32:	4313      	orrs	r3, r2
 8005f34:	9304      	str	r3, [sp, #16]
 8005f36:	46a2      	mov	sl, r4
 8005f38:	e7d2      	b.n	8005ee0 <_svfiprintf_r+0xa0>
 8005f3a:	9b03      	ldr	r3, [sp, #12]
 8005f3c:	1d19      	adds	r1, r3, #4
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	9103      	str	r1, [sp, #12]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	bfbb      	ittet	lt
 8005f46:	425b      	neglt	r3, r3
 8005f48:	f042 0202 	orrlt.w	r2, r2, #2
 8005f4c:	9307      	strge	r3, [sp, #28]
 8005f4e:	9307      	strlt	r3, [sp, #28]
 8005f50:	bfb8      	it	lt
 8005f52:	9204      	strlt	r2, [sp, #16]
 8005f54:	7823      	ldrb	r3, [r4, #0]
 8005f56:	2b2e      	cmp	r3, #46	@ 0x2e
 8005f58:	d10a      	bne.n	8005f70 <_svfiprintf_r+0x130>
 8005f5a:	7863      	ldrb	r3, [r4, #1]
 8005f5c:	2b2a      	cmp	r3, #42	@ 0x2a
 8005f5e:	d132      	bne.n	8005fc6 <_svfiprintf_r+0x186>
 8005f60:	9b03      	ldr	r3, [sp, #12]
 8005f62:	1d1a      	adds	r2, r3, #4
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	9203      	str	r2, [sp, #12]
 8005f68:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005f6c:	3402      	adds	r4, #2
 8005f6e:	9305      	str	r3, [sp, #20]
 8005f70:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006034 <_svfiprintf_r+0x1f4>
 8005f74:	7821      	ldrb	r1, [r4, #0]
 8005f76:	2203      	movs	r2, #3
 8005f78:	4650      	mov	r0, sl
 8005f7a:	f7fa f959 	bl	8000230 <memchr>
 8005f7e:	b138      	cbz	r0, 8005f90 <_svfiprintf_r+0x150>
 8005f80:	9b04      	ldr	r3, [sp, #16]
 8005f82:	eba0 000a 	sub.w	r0, r0, sl
 8005f86:	2240      	movs	r2, #64	@ 0x40
 8005f88:	4082      	lsls	r2, r0
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	3401      	adds	r4, #1
 8005f8e:	9304      	str	r3, [sp, #16]
 8005f90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f94:	4824      	ldr	r0, [pc, #144]	@ (8006028 <_svfiprintf_r+0x1e8>)
 8005f96:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005f9a:	2206      	movs	r2, #6
 8005f9c:	f7fa f948 	bl	8000230 <memchr>
 8005fa0:	2800      	cmp	r0, #0
 8005fa2:	d036      	beq.n	8006012 <_svfiprintf_r+0x1d2>
 8005fa4:	4b21      	ldr	r3, [pc, #132]	@ (800602c <_svfiprintf_r+0x1ec>)
 8005fa6:	bb1b      	cbnz	r3, 8005ff0 <_svfiprintf_r+0x1b0>
 8005fa8:	9b03      	ldr	r3, [sp, #12]
 8005faa:	3307      	adds	r3, #7
 8005fac:	f023 0307 	bic.w	r3, r3, #7
 8005fb0:	3308      	adds	r3, #8
 8005fb2:	9303      	str	r3, [sp, #12]
 8005fb4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005fb6:	4433      	add	r3, r6
 8005fb8:	9309      	str	r3, [sp, #36]	@ 0x24
 8005fba:	e76a      	b.n	8005e92 <_svfiprintf_r+0x52>
 8005fbc:	fb0c 3202 	mla	r2, ip, r2, r3
 8005fc0:	460c      	mov	r4, r1
 8005fc2:	2001      	movs	r0, #1
 8005fc4:	e7a8      	b.n	8005f18 <_svfiprintf_r+0xd8>
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	3401      	adds	r4, #1
 8005fca:	9305      	str	r3, [sp, #20]
 8005fcc:	4619      	mov	r1, r3
 8005fce:	f04f 0c0a 	mov.w	ip, #10
 8005fd2:	4620      	mov	r0, r4
 8005fd4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005fd8:	3a30      	subs	r2, #48	@ 0x30
 8005fda:	2a09      	cmp	r2, #9
 8005fdc:	d903      	bls.n	8005fe6 <_svfiprintf_r+0x1a6>
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d0c6      	beq.n	8005f70 <_svfiprintf_r+0x130>
 8005fe2:	9105      	str	r1, [sp, #20]
 8005fe4:	e7c4      	b.n	8005f70 <_svfiprintf_r+0x130>
 8005fe6:	fb0c 2101 	mla	r1, ip, r1, r2
 8005fea:	4604      	mov	r4, r0
 8005fec:	2301      	movs	r3, #1
 8005fee:	e7f0      	b.n	8005fd2 <_svfiprintf_r+0x192>
 8005ff0:	ab03      	add	r3, sp, #12
 8005ff2:	9300      	str	r3, [sp, #0]
 8005ff4:	462a      	mov	r2, r5
 8005ff6:	4b0e      	ldr	r3, [pc, #56]	@ (8006030 <_svfiprintf_r+0x1f0>)
 8005ff8:	a904      	add	r1, sp, #16
 8005ffa:	4638      	mov	r0, r7
 8005ffc:	f3af 8000 	nop.w
 8006000:	1c42      	adds	r2, r0, #1
 8006002:	4606      	mov	r6, r0
 8006004:	d1d6      	bne.n	8005fb4 <_svfiprintf_r+0x174>
 8006006:	89ab      	ldrh	r3, [r5, #12]
 8006008:	065b      	lsls	r3, r3, #25
 800600a:	f53f af2d 	bmi.w	8005e68 <_svfiprintf_r+0x28>
 800600e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006010:	e72c      	b.n	8005e6c <_svfiprintf_r+0x2c>
 8006012:	ab03      	add	r3, sp, #12
 8006014:	9300      	str	r3, [sp, #0]
 8006016:	462a      	mov	r2, r5
 8006018:	4b05      	ldr	r3, [pc, #20]	@ (8006030 <_svfiprintf_r+0x1f0>)
 800601a:	a904      	add	r1, sp, #16
 800601c:	4638      	mov	r0, r7
 800601e:	f000 f879 	bl	8006114 <_printf_i>
 8006022:	e7ed      	b.n	8006000 <_svfiprintf_r+0x1c0>
 8006024:	080064e0 	.word	0x080064e0
 8006028:	080064ea 	.word	0x080064ea
 800602c:	00000000 	.word	0x00000000
 8006030:	08005d89 	.word	0x08005d89
 8006034:	080064e6 	.word	0x080064e6

08006038 <_printf_common>:
 8006038:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800603c:	4616      	mov	r6, r2
 800603e:	4698      	mov	r8, r3
 8006040:	688a      	ldr	r2, [r1, #8]
 8006042:	690b      	ldr	r3, [r1, #16]
 8006044:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006048:	4293      	cmp	r3, r2
 800604a:	bfb8      	it	lt
 800604c:	4613      	movlt	r3, r2
 800604e:	6033      	str	r3, [r6, #0]
 8006050:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006054:	4607      	mov	r7, r0
 8006056:	460c      	mov	r4, r1
 8006058:	b10a      	cbz	r2, 800605e <_printf_common+0x26>
 800605a:	3301      	adds	r3, #1
 800605c:	6033      	str	r3, [r6, #0]
 800605e:	6823      	ldr	r3, [r4, #0]
 8006060:	0699      	lsls	r1, r3, #26
 8006062:	bf42      	ittt	mi
 8006064:	6833      	ldrmi	r3, [r6, #0]
 8006066:	3302      	addmi	r3, #2
 8006068:	6033      	strmi	r3, [r6, #0]
 800606a:	6825      	ldr	r5, [r4, #0]
 800606c:	f015 0506 	ands.w	r5, r5, #6
 8006070:	d106      	bne.n	8006080 <_printf_common+0x48>
 8006072:	f104 0a19 	add.w	sl, r4, #25
 8006076:	68e3      	ldr	r3, [r4, #12]
 8006078:	6832      	ldr	r2, [r6, #0]
 800607a:	1a9b      	subs	r3, r3, r2
 800607c:	42ab      	cmp	r3, r5
 800607e:	dc26      	bgt.n	80060ce <_printf_common+0x96>
 8006080:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006084:	6822      	ldr	r2, [r4, #0]
 8006086:	3b00      	subs	r3, #0
 8006088:	bf18      	it	ne
 800608a:	2301      	movne	r3, #1
 800608c:	0692      	lsls	r2, r2, #26
 800608e:	d42b      	bmi.n	80060e8 <_printf_common+0xb0>
 8006090:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006094:	4641      	mov	r1, r8
 8006096:	4638      	mov	r0, r7
 8006098:	47c8      	blx	r9
 800609a:	3001      	adds	r0, #1
 800609c:	d01e      	beq.n	80060dc <_printf_common+0xa4>
 800609e:	6823      	ldr	r3, [r4, #0]
 80060a0:	6922      	ldr	r2, [r4, #16]
 80060a2:	f003 0306 	and.w	r3, r3, #6
 80060a6:	2b04      	cmp	r3, #4
 80060a8:	bf02      	ittt	eq
 80060aa:	68e5      	ldreq	r5, [r4, #12]
 80060ac:	6833      	ldreq	r3, [r6, #0]
 80060ae:	1aed      	subeq	r5, r5, r3
 80060b0:	68a3      	ldr	r3, [r4, #8]
 80060b2:	bf0c      	ite	eq
 80060b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80060b8:	2500      	movne	r5, #0
 80060ba:	4293      	cmp	r3, r2
 80060bc:	bfc4      	itt	gt
 80060be:	1a9b      	subgt	r3, r3, r2
 80060c0:	18ed      	addgt	r5, r5, r3
 80060c2:	2600      	movs	r6, #0
 80060c4:	341a      	adds	r4, #26
 80060c6:	42b5      	cmp	r5, r6
 80060c8:	d11a      	bne.n	8006100 <_printf_common+0xc8>
 80060ca:	2000      	movs	r0, #0
 80060cc:	e008      	b.n	80060e0 <_printf_common+0xa8>
 80060ce:	2301      	movs	r3, #1
 80060d0:	4652      	mov	r2, sl
 80060d2:	4641      	mov	r1, r8
 80060d4:	4638      	mov	r0, r7
 80060d6:	47c8      	blx	r9
 80060d8:	3001      	adds	r0, #1
 80060da:	d103      	bne.n	80060e4 <_printf_common+0xac>
 80060dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80060e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060e4:	3501      	adds	r5, #1
 80060e6:	e7c6      	b.n	8006076 <_printf_common+0x3e>
 80060e8:	18e1      	adds	r1, r4, r3
 80060ea:	1c5a      	adds	r2, r3, #1
 80060ec:	2030      	movs	r0, #48	@ 0x30
 80060ee:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80060f2:	4422      	add	r2, r4
 80060f4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80060f8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80060fc:	3302      	adds	r3, #2
 80060fe:	e7c7      	b.n	8006090 <_printf_common+0x58>
 8006100:	2301      	movs	r3, #1
 8006102:	4622      	mov	r2, r4
 8006104:	4641      	mov	r1, r8
 8006106:	4638      	mov	r0, r7
 8006108:	47c8      	blx	r9
 800610a:	3001      	adds	r0, #1
 800610c:	d0e6      	beq.n	80060dc <_printf_common+0xa4>
 800610e:	3601      	adds	r6, #1
 8006110:	e7d9      	b.n	80060c6 <_printf_common+0x8e>
	...

08006114 <_printf_i>:
 8006114:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006118:	7e0f      	ldrb	r7, [r1, #24]
 800611a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800611c:	2f78      	cmp	r7, #120	@ 0x78
 800611e:	4691      	mov	r9, r2
 8006120:	4680      	mov	r8, r0
 8006122:	460c      	mov	r4, r1
 8006124:	469a      	mov	sl, r3
 8006126:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800612a:	d807      	bhi.n	800613c <_printf_i+0x28>
 800612c:	2f62      	cmp	r7, #98	@ 0x62
 800612e:	d80a      	bhi.n	8006146 <_printf_i+0x32>
 8006130:	2f00      	cmp	r7, #0
 8006132:	f000 80d2 	beq.w	80062da <_printf_i+0x1c6>
 8006136:	2f58      	cmp	r7, #88	@ 0x58
 8006138:	f000 80b9 	beq.w	80062ae <_printf_i+0x19a>
 800613c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006140:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006144:	e03a      	b.n	80061bc <_printf_i+0xa8>
 8006146:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800614a:	2b15      	cmp	r3, #21
 800614c:	d8f6      	bhi.n	800613c <_printf_i+0x28>
 800614e:	a101      	add	r1, pc, #4	@ (adr r1, 8006154 <_printf_i+0x40>)
 8006150:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006154:	080061ad 	.word	0x080061ad
 8006158:	080061c1 	.word	0x080061c1
 800615c:	0800613d 	.word	0x0800613d
 8006160:	0800613d 	.word	0x0800613d
 8006164:	0800613d 	.word	0x0800613d
 8006168:	0800613d 	.word	0x0800613d
 800616c:	080061c1 	.word	0x080061c1
 8006170:	0800613d 	.word	0x0800613d
 8006174:	0800613d 	.word	0x0800613d
 8006178:	0800613d 	.word	0x0800613d
 800617c:	0800613d 	.word	0x0800613d
 8006180:	080062c1 	.word	0x080062c1
 8006184:	080061eb 	.word	0x080061eb
 8006188:	0800627b 	.word	0x0800627b
 800618c:	0800613d 	.word	0x0800613d
 8006190:	0800613d 	.word	0x0800613d
 8006194:	080062e3 	.word	0x080062e3
 8006198:	0800613d 	.word	0x0800613d
 800619c:	080061eb 	.word	0x080061eb
 80061a0:	0800613d 	.word	0x0800613d
 80061a4:	0800613d 	.word	0x0800613d
 80061a8:	08006283 	.word	0x08006283
 80061ac:	6833      	ldr	r3, [r6, #0]
 80061ae:	1d1a      	adds	r2, r3, #4
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	6032      	str	r2, [r6, #0]
 80061b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80061b8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80061bc:	2301      	movs	r3, #1
 80061be:	e09d      	b.n	80062fc <_printf_i+0x1e8>
 80061c0:	6833      	ldr	r3, [r6, #0]
 80061c2:	6820      	ldr	r0, [r4, #0]
 80061c4:	1d19      	adds	r1, r3, #4
 80061c6:	6031      	str	r1, [r6, #0]
 80061c8:	0606      	lsls	r6, r0, #24
 80061ca:	d501      	bpl.n	80061d0 <_printf_i+0xbc>
 80061cc:	681d      	ldr	r5, [r3, #0]
 80061ce:	e003      	b.n	80061d8 <_printf_i+0xc4>
 80061d0:	0645      	lsls	r5, r0, #25
 80061d2:	d5fb      	bpl.n	80061cc <_printf_i+0xb8>
 80061d4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80061d8:	2d00      	cmp	r5, #0
 80061da:	da03      	bge.n	80061e4 <_printf_i+0xd0>
 80061dc:	232d      	movs	r3, #45	@ 0x2d
 80061de:	426d      	negs	r5, r5
 80061e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80061e4:	4859      	ldr	r0, [pc, #356]	@ (800634c <_printf_i+0x238>)
 80061e6:	230a      	movs	r3, #10
 80061e8:	e011      	b.n	800620e <_printf_i+0xfa>
 80061ea:	6821      	ldr	r1, [r4, #0]
 80061ec:	6833      	ldr	r3, [r6, #0]
 80061ee:	0608      	lsls	r0, r1, #24
 80061f0:	f853 5b04 	ldr.w	r5, [r3], #4
 80061f4:	d402      	bmi.n	80061fc <_printf_i+0xe8>
 80061f6:	0649      	lsls	r1, r1, #25
 80061f8:	bf48      	it	mi
 80061fa:	b2ad      	uxthmi	r5, r5
 80061fc:	2f6f      	cmp	r7, #111	@ 0x6f
 80061fe:	4853      	ldr	r0, [pc, #332]	@ (800634c <_printf_i+0x238>)
 8006200:	6033      	str	r3, [r6, #0]
 8006202:	bf14      	ite	ne
 8006204:	230a      	movne	r3, #10
 8006206:	2308      	moveq	r3, #8
 8006208:	2100      	movs	r1, #0
 800620a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800620e:	6866      	ldr	r6, [r4, #4]
 8006210:	60a6      	str	r6, [r4, #8]
 8006212:	2e00      	cmp	r6, #0
 8006214:	bfa2      	ittt	ge
 8006216:	6821      	ldrge	r1, [r4, #0]
 8006218:	f021 0104 	bicge.w	r1, r1, #4
 800621c:	6021      	strge	r1, [r4, #0]
 800621e:	b90d      	cbnz	r5, 8006224 <_printf_i+0x110>
 8006220:	2e00      	cmp	r6, #0
 8006222:	d04b      	beq.n	80062bc <_printf_i+0x1a8>
 8006224:	4616      	mov	r6, r2
 8006226:	fbb5 f1f3 	udiv	r1, r5, r3
 800622a:	fb03 5711 	mls	r7, r3, r1, r5
 800622e:	5dc7      	ldrb	r7, [r0, r7]
 8006230:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006234:	462f      	mov	r7, r5
 8006236:	42bb      	cmp	r3, r7
 8006238:	460d      	mov	r5, r1
 800623a:	d9f4      	bls.n	8006226 <_printf_i+0x112>
 800623c:	2b08      	cmp	r3, #8
 800623e:	d10b      	bne.n	8006258 <_printf_i+0x144>
 8006240:	6823      	ldr	r3, [r4, #0]
 8006242:	07df      	lsls	r7, r3, #31
 8006244:	d508      	bpl.n	8006258 <_printf_i+0x144>
 8006246:	6923      	ldr	r3, [r4, #16]
 8006248:	6861      	ldr	r1, [r4, #4]
 800624a:	4299      	cmp	r1, r3
 800624c:	bfde      	ittt	le
 800624e:	2330      	movle	r3, #48	@ 0x30
 8006250:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006254:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8006258:	1b92      	subs	r2, r2, r6
 800625a:	6122      	str	r2, [r4, #16]
 800625c:	f8cd a000 	str.w	sl, [sp]
 8006260:	464b      	mov	r3, r9
 8006262:	aa03      	add	r2, sp, #12
 8006264:	4621      	mov	r1, r4
 8006266:	4640      	mov	r0, r8
 8006268:	f7ff fee6 	bl	8006038 <_printf_common>
 800626c:	3001      	adds	r0, #1
 800626e:	d14a      	bne.n	8006306 <_printf_i+0x1f2>
 8006270:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006274:	b004      	add	sp, #16
 8006276:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800627a:	6823      	ldr	r3, [r4, #0]
 800627c:	f043 0320 	orr.w	r3, r3, #32
 8006280:	6023      	str	r3, [r4, #0]
 8006282:	4833      	ldr	r0, [pc, #204]	@ (8006350 <_printf_i+0x23c>)
 8006284:	2778      	movs	r7, #120	@ 0x78
 8006286:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800628a:	6823      	ldr	r3, [r4, #0]
 800628c:	6831      	ldr	r1, [r6, #0]
 800628e:	061f      	lsls	r7, r3, #24
 8006290:	f851 5b04 	ldr.w	r5, [r1], #4
 8006294:	d402      	bmi.n	800629c <_printf_i+0x188>
 8006296:	065f      	lsls	r7, r3, #25
 8006298:	bf48      	it	mi
 800629a:	b2ad      	uxthmi	r5, r5
 800629c:	6031      	str	r1, [r6, #0]
 800629e:	07d9      	lsls	r1, r3, #31
 80062a0:	bf44      	itt	mi
 80062a2:	f043 0320 	orrmi.w	r3, r3, #32
 80062a6:	6023      	strmi	r3, [r4, #0]
 80062a8:	b11d      	cbz	r5, 80062b2 <_printf_i+0x19e>
 80062aa:	2310      	movs	r3, #16
 80062ac:	e7ac      	b.n	8006208 <_printf_i+0xf4>
 80062ae:	4827      	ldr	r0, [pc, #156]	@ (800634c <_printf_i+0x238>)
 80062b0:	e7e9      	b.n	8006286 <_printf_i+0x172>
 80062b2:	6823      	ldr	r3, [r4, #0]
 80062b4:	f023 0320 	bic.w	r3, r3, #32
 80062b8:	6023      	str	r3, [r4, #0]
 80062ba:	e7f6      	b.n	80062aa <_printf_i+0x196>
 80062bc:	4616      	mov	r6, r2
 80062be:	e7bd      	b.n	800623c <_printf_i+0x128>
 80062c0:	6833      	ldr	r3, [r6, #0]
 80062c2:	6825      	ldr	r5, [r4, #0]
 80062c4:	6961      	ldr	r1, [r4, #20]
 80062c6:	1d18      	adds	r0, r3, #4
 80062c8:	6030      	str	r0, [r6, #0]
 80062ca:	062e      	lsls	r6, r5, #24
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	d501      	bpl.n	80062d4 <_printf_i+0x1c0>
 80062d0:	6019      	str	r1, [r3, #0]
 80062d2:	e002      	b.n	80062da <_printf_i+0x1c6>
 80062d4:	0668      	lsls	r0, r5, #25
 80062d6:	d5fb      	bpl.n	80062d0 <_printf_i+0x1bc>
 80062d8:	8019      	strh	r1, [r3, #0]
 80062da:	2300      	movs	r3, #0
 80062dc:	6123      	str	r3, [r4, #16]
 80062de:	4616      	mov	r6, r2
 80062e0:	e7bc      	b.n	800625c <_printf_i+0x148>
 80062e2:	6833      	ldr	r3, [r6, #0]
 80062e4:	1d1a      	adds	r2, r3, #4
 80062e6:	6032      	str	r2, [r6, #0]
 80062e8:	681e      	ldr	r6, [r3, #0]
 80062ea:	6862      	ldr	r2, [r4, #4]
 80062ec:	2100      	movs	r1, #0
 80062ee:	4630      	mov	r0, r6
 80062f0:	f7f9 ff9e 	bl	8000230 <memchr>
 80062f4:	b108      	cbz	r0, 80062fa <_printf_i+0x1e6>
 80062f6:	1b80      	subs	r0, r0, r6
 80062f8:	6060      	str	r0, [r4, #4]
 80062fa:	6863      	ldr	r3, [r4, #4]
 80062fc:	6123      	str	r3, [r4, #16]
 80062fe:	2300      	movs	r3, #0
 8006300:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006304:	e7aa      	b.n	800625c <_printf_i+0x148>
 8006306:	6923      	ldr	r3, [r4, #16]
 8006308:	4632      	mov	r2, r6
 800630a:	4649      	mov	r1, r9
 800630c:	4640      	mov	r0, r8
 800630e:	47d0      	blx	sl
 8006310:	3001      	adds	r0, #1
 8006312:	d0ad      	beq.n	8006270 <_printf_i+0x15c>
 8006314:	6823      	ldr	r3, [r4, #0]
 8006316:	079b      	lsls	r3, r3, #30
 8006318:	d413      	bmi.n	8006342 <_printf_i+0x22e>
 800631a:	68e0      	ldr	r0, [r4, #12]
 800631c:	9b03      	ldr	r3, [sp, #12]
 800631e:	4298      	cmp	r0, r3
 8006320:	bfb8      	it	lt
 8006322:	4618      	movlt	r0, r3
 8006324:	e7a6      	b.n	8006274 <_printf_i+0x160>
 8006326:	2301      	movs	r3, #1
 8006328:	4632      	mov	r2, r6
 800632a:	4649      	mov	r1, r9
 800632c:	4640      	mov	r0, r8
 800632e:	47d0      	blx	sl
 8006330:	3001      	adds	r0, #1
 8006332:	d09d      	beq.n	8006270 <_printf_i+0x15c>
 8006334:	3501      	adds	r5, #1
 8006336:	68e3      	ldr	r3, [r4, #12]
 8006338:	9903      	ldr	r1, [sp, #12]
 800633a:	1a5b      	subs	r3, r3, r1
 800633c:	42ab      	cmp	r3, r5
 800633e:	dcf2      	bgt.n	8006326 <_printf_i+0x212>
 8006340:	e7eb      	b.n	800631a <_printf_i+0x206>
 8006342:	2500      	movs	r5, #0
 8006344:	f104 0619 	add.w	r6, r4, #25
 8006348:	e7f5      	b.n	8006336 <_printf_i+0x222>
 800634a:	bf00      	nop
 800634c:	080064f1 	.word	0x080064f1
 8006350:	08006502 	.word	0x08006502

08006354 <memmove>:
 8006354:	4288      	cmp	r0, r1
 8006356:	b510      	push	{r4, lr}
 8006358:	eb01 0402 	add.w	r4, r1, r2
 800635c:	d902      	bls.n	8006364 <memmove+0x10>
 800635e:	4284      	cmp	r4, r0
 8006360:	4623      	mov	r3, r4
 8006362:	d807      	bhi.n	8006374 <memmove+0x20>
 8006364:	1e43      	subs	r3, r0, #1
 8006366:	42a1      	cmp	r1, r4
 8006368:	d008      	beq.n	800637c <memmove+0x28>
 800636a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800636e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006372:	e7f8      	b.n	8006366 <memmove+0x12>
 8006374:	4402      	add	r2, r0
 8006376:	4601      	mov	r1, r0
 8006378:	428a      	cmp	r2, r1
 800637a:	d100      	bne.n	800637e <memmove+0x2a>
 800637c:	bd10      	pop	{r4, pc}
 800637e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006382:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006386:	e7f7      	b.n	8006378 <memmove+0x24>

08006388 <_sbrk_r>:
 8006388:	b538      	push	{r3, r4, r5, lr}
 800638a:	4d06      	ldr	r5, [pc, #24]	@ (80063a4 <_sbrk_r+0x1c>)
 800638c:	2300      	movs	r3, #0
 800638e:	4604      	mov	r4, r0
 8006390:	4608      	mov	r0, r1
 8006392:	602b      	str	r3, [r5, #0]
 8006394:	f7fa fe28 	bl	8000fe8 <_sbrk>
 8006398:	1c43      	adds	r3, r0, #1
 800639a:	d102      	bne.n	80063a2 <_sbrk_r+0x1a>
 800639c:	682b      	ldr	r3, [r5, #0]
 800639e:	b103      	cbz	r3, 80063a2 <_sbrk_r+0x1a>
 80063a0:	6023      	str	r3, [r4, #0]
 80063a2:	bd38      	pop	{r3, r4, r5, pc}
 80063a4:	2000038c 	.word	0x2000038c

080063a8 <memcpy>:
 80063a8:	440a      	add	r2, r1
 80063aa:	4291      	cmp	r1, r2
 80063ac:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80063b0:	d100      	bne.n	80063b4 <memcpy+0xc>
 80063b2:	4770      	bx	lr
 80063b4:	b510      	push	{r4, lr}
 80063b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80063ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 80063be:	4291      	cmp	r1, r2
 80063c0:	d1f9      	bne.n	80063b6 <memcpy+0xe>
 80063c2:	bd10      	pop	{r4, pc}

080063c4 <_realloc_r>:
 80063c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063c8:	4680      	mov	r8, r0
 80063ca:	4615      	mov	r5, r2
 80063cc:	460c      	mov	r4, r1
 80063ce:	b921      	cbnz	r1, 80063da <_realloc_r+0x16>
 80063d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80063d4:	4611      	mov	r1, r2
 80063d6:	f7ff bc4b 	b.w	8005c70 <_malloc_r>
 80063da:	b92a      	cbnz	r2, 80063e8 <_realloc_r+0x24>
 80063dc:	f7ff fbdc 	bl	8005b98 <_free_r>
 80063e0:	2400      	movs	r4, #0
 80063e2:	4620      	mov	r0, r4
 80063e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80063e8:	f000 f81a 	bl	8006420 <_malloc_usable_size_r>
 80063ec:	4285      	cmp	r5, r0
 80063ee:	4606      	mov	r6, r0
 80063f0:	d802      	bhi.n	80063f8 <_realloc_r+0x34>
 80063f2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80063f6:	d8f4      	bhi.n	80063e2 <_realloc_r+0x1e>
 80063f8:	4629      	mov	r1, r5
 80063fa:	4640      	mov	r0, r8
 80063fc:	f7ff fc38 	bl	8005c70 <_malloc_r>
 8006400:	4607      	mov	r7, r0
 8006402:	2800      	cmp	r0, #0
 8006404:	d0ec      	beq.n	80063e0 <_realloc_r+0x1c>
 8006406:	42b5      	cmp	r5, r6
 8006408:	462a      	mov	r2, r5
 800640a:	4621      	mov	r1, r4
 800640c:	bf28      	it	cs
 800640e:	4632      	movcs	r2, r6
 8006410:	f7ff ffca 	bl	80063a8 <memcpy>
 8006414:	4621      	mov	r1, r4
 8006416:	4640      	mov	r0, r8
 8006418:	f7ff fbbe 	bl	8005b98 <_free_r>
 800641c:	463c      	mov	r4, r7
 800641e:	e7e0      	b.n	80063e2 <_realloc_r+0x1e>

08006420 <_malloc_usable_size_r>:
 8006420:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006424:	1f18      	subs	r0, r3, #4
 8006426:	2b00      	cmp	r3, #0
 8006428:	bfbc      	itt	lt
 800642a:	580b      	ldrlt	r3, [r1, r0]
 800642c:	18c0      	addlt	r0, r0, r3
 800642e:	4770      	bx	lr

08006430 <_init>:
 8006430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006432:	bf00      	nop
 8006434:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006436:	bc08      	pop	{r3}
 8006438:	469e      	mov	lr, r3
 800643a:	4770      	bx	lr

0800643c <_fini>:
 800643c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800643e:	bf00      	nop
 8006440:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006442:	bc08      	pop	{r3}
 8006444:	469e      	mov	lr, r3
 8006446:	4770      	bx	lr
