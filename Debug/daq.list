
daq.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004dbc  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004f94  08004f94  00005f94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004fac  08004fac  0000601c  2**0
                  CONTENTS
  4 .ARM          00000008  08004fac  08004fac  00005fac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004fb4  08004fb4  0000601c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004fb4  08004fb4  00005fb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004fb8  08004fb8  00005fb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  20000000  08004fbc  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000160  2000001c  08004fd8  0000601c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000017c  08004fd8  0000617c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000601c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dd6c  00000000  00000000  0000604c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002056  00000000  00000000  00013db8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d20  00000000  00000000  00015e10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009f0  00000000  00000000  00016b30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026507  00000000  00000000  00017520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dc21  00000000  00000000  0003da27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fba23  00000000  00000000  0004b648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014706b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000036a8  00000000  00000000  001470b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  0014a758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000001c 	.word	0x2000001c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08004f7c 	.word	0x08004f7c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000020 	.word	0x20000020
 8000214:	08004f7c 	.word	0x08004f7c

08000218 <strcmp>:
 8000218:	f810 2b01 	ldrb.w	r2, [r0], #1
 800021c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000220:	2a01      	cmp	r2, #1
 8000222:	bf28      	it	cs
 8000224:	429a      	cmpcs	r2, r3
 8000226:	d0f7      	beq.n	8000218 <strcmp>
 8000228:	1ad0      	subs	r0, r2, r3
 800022a:	4770      	bx	lr

0800022c <HAL_ADC_LevelOutOfWindowCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc) {
 800022c:	b480      	push	{r7}
 800022e:	b083      	sub	sp, #12
 8000230:	af00      	add	r7, sp, #0
 8000232:	6078      	str	r0, [r7, #4]

}
 8000234:	bf00      	nop
 8000236:	370c      	adds	r7, #12
 8000238:	46bd      	mov	sp, r7
 800023a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800023e:	4770      	bx	lr

08000240 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000244:	f000 fbd5 	bl	80009f2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000248:	f000 f82a 	bl	80002a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800024c:	f000 f9b4 	bl	80005b8 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000250:	f000 f978 	bl	8000544 <MX_SPI1_Init>
  MX_ADC1_Init();
 8000254:	f000 f870 	bl	8000338 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000258:	f000 f90e 	bl	8000478 <MX_ADC2_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    if (HAL_SPI_Receive(&hspi1, rx_buffer, 4, HAL_MAX_DELAY) == HAL_OK)
 800025c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000260:	2204      	movs	r2, #4
 8000262:	490b      	ldr	r1, [pc, #44]	@ (8000290 <main+0x50>)
 8000264:	480b      	ldr	r0, [pc, #44]	@ (8000294 <main+0x54>)
 8000266:	f004 f836 	bl	80042d6 <HAL_SPI_Receive>
 800026a:	4603      	mov	r3, r0
 800026c:	2b00      	cmp	r3, #0
 800026e:	d1f5      	bne.n	800025c <main+0x1c>
    {
      if (strcmp(rx_buffer, "ping") == 0)
 8000270:	4909      	ldr	r1, [pc, #36]	@ (8000298 <main+0x58>)
 8000272:	4807      	ldr	r0, [pc, #28]	@ (8000290 <main+0x50>)
 8000274:	f7ff ffd0 	bl	8000218 <strcmp>
 8000278:	4603      	mov	r3, r0
 800027a:	2b00      	cmp	r3, #0
 800027c:	d1ee      	bne.n	800025c <main+0x1c>
      {
        HAL_SPI_Transmit(&hspi1, tx_buffer, 4, HAL_MAX_DELAY);
 800027e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000282:	2204      	movs	r2, #4
 8000284:	4905      	ldr	r1, [pc, #20]	@ (800029c <main+0x5c>)
 8000286:	4803      	ldr	r0, [pc, #12]	@ (8000294 <main+0x54>)
 8000288:	f003 feaf 	bl	8003fea <HAL_SPI_Transmit>
    if (HAL_SPI_Receive(&hspi1, rx_buffer, 4, HAL_MAX_DELAY) == HAL_OK)
 800028c:	e7e6      	b.n	800025c <main+0x1c>
 800028e:	bf00      	nop
 8000290:	20000008 	.word	0x20000008
 8000294:	20000110 	.word	0x20000110
 8000298:	08004f94 	.word	0x08004f94
 800029c:	20000000 	.word	0x20000000

080002a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b094      	sub	sp, #80	@ 0x50
 80002a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002a6:	f107 0318 	add.w	r3, r7, #24
 80002aa:	2238      	movs	r2, #56	@ 0x38
 80002ac:	2100      	movs	r1, #0
 80002ae:	4618      	mov	r0, r3
 80002b0:	f004 fe38 	bl	8004f24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002b4:	1d3b      	adds	r3, r7, #4
 80002b6:	2200      	movs	r2, #0
 80002b8:	601a      	str	r2, [r3, #0]
 80002ba:	605a      	str	r2, [r3, #4]
 80002bc:	609a      	str	r2, [r3, #8]
 80002be:	60da      	str	r2, [r3, #12]
 80002c0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80002c2:	2000      	movs	r0, #0
 80002c4:	f002 fdee 	bl	8002ea4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002c8:	2302      	movs	r3, #2
 80002ca:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002cc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80002d0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002d2:	2340      	movs	r3, #64	@ 0x40
 80002d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002d6:	2302      	movs	r3, #2
 80002d8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002da:	2302      	movs	r3, #2
 80002dc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80002de:	2304      	movs	r3, #4
 80002e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80002e2:	2355      	movs	r3, #85	@ 0x55
 80002e4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80002e6:	2302      	movs	r3, #2
 80002e8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80002ea:	2302      	movs	r3, #2
 80002ec:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80002ee:	2302      	movs	r3, #2
 80002f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002f2:	f107 0318 	add.w	r3, r7, #24
 80002f6:	4618      	mov	r0, r3
 80002f8:	f002 fe88 	bl	800300c <HAL_RCC_OscConfig>
 80002fc:	4603      	mov	r3, r0
 80002fe:	2b00      	cmp	r3, #0
 8000300:	d001      	beq.n	8000306 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000302:	f000 f9c3 	bl	800068c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000306:	230f      	movs	r3, #15
 8000308:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800030a:	2303      	movs	r3, #3
 800030c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800030e:	2300      	movs	r3, #0
 8000310:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000312:	2300      	movs	r3, #0
 8000314:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000316:	2300      	movs	r3, #0
 8000318:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800031a:	1d3b      	adds	r3, r7, #4
 800031c:	2104      	movs	r1, #4
 800031e:	4618      	mov	r0, r3
 8000320:	f003 f986 	bl	8003630 <HAL_RCC_ClockConfig>
 8000324:	4603      	mov	r3, r0
 8000326:	2b00      	cmp	r3, #0
 8000328:	d001      	beq.n	800032e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800032a:	f000 f9af 	bl	800068c <Error_Handler>
  }
}
 800032e:	bf00      	nop
 8000330:	3750      	adds	r7, #80	@ 0x50
 8000332:	46bd      	mov	sp, r7
 8000334:	bd80      	pop	{r7, pc}
	...

08000338 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	b092      	sub	sp, #72	@ 0x48
 800033c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800033e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000342:	2200      	movs	r2, #0
 8000344:	601a      	str	r2, [r3, #0]
 8000346:	605a      	str	r2, [r3, #4]
 8000348:	609a      	str	r2, [r3, #8]
  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 800034a:	f107 0320 	add.w	r3, r7, #32
 800034e:	2200      	movs	r2, #0
 8000350:	601a      	str	r2, [r3, #0]
 8000352:	605a      	str	r2, [r3, #4]
 8000354:	609a      	str	r2, [r3, #8]
 8000356:	60da      	str	r2, [r3, #12]
 8000358:	611a      	str	r2, [r3, #16]
 800035a:	615a      	str	r2, [r3, #20]
 800035c:	619a      	str	r2, [r3, #24]
  ADC_ChannelConfTypeDef sConfig = {0};
 800035e:	463b      	mov	r3, r7
 8000360:	2220      	movs	r2, #32
 8000362:	2100      	movs	r1, #0
 8000364:	4618      	mov	r0, r3
 8000366:	f004 fddd 	bl	8004f24 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800036a:	4b40      	ldr	r3, [pc, #256]	@ (800046c <MX_ADC1_Init+0x134>)
 800036c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000370:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000372:	4b3e      	ldr	r3, [pc, #248]	@ (800046c <MX_ADC1_Init+0x134>)
 8000374:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000378:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800037a:	4b3c      	ldr	r3, [pc, #240]	@ (800046c <MX_ADC1_Init+0x134>)
 800037c:	2200      	movs	r2, #0
 800037e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000380:	4b3a      	ldr	r3, [pc, #232]	@ (800046c <MX_ADC1_Init+0x134>)
 8000382:	2200      	movs	r2, #0
 8000384:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000386:	4b39      	ldr	r3, [pc, #228]	@ (800046c <MX_ADC1_Init+0x134>)
 8000388:	2200      	movs	r2, #0
 800038a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800038c:	4b37      	ldr	r3, [pc, #220]	@ (800046c <MX_ADC1_Init+0x134>)
 800038e:	2200      	movs	r2, #0
 8000390:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000392:	4b36      	ldr	r3, [pc, #216]	@ (800046c <MX_ADC1_Init+0x134>)
 8000394:	2204      	movs	r2, #4
 8000396:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000398:	4b34      	ldr	r3, [pc, #208]	@ (800046c <MX_ADC1_Init+0x134>)
 800039a:	2200      	movs	r2, #0
 800039c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800039e:	4b33      	ldr	r3, [pc, #204]	@ (800046c <MX_ADC1_Init+0x134>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80003a4:	4b31      	ldr	r3, [pc, #196]	@ (800046c <MX_ADC1_Init+0x134>)
 80003a6:	2201      	movs	r2, #1
 80003a8:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80003aa:	4b30      	ldr	r3, [pc, #192]	@ (800046c <MX_ADC1_Init+0x134>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003b2:	4b2e      	ldr	r3, [pc, #184]	@ (800046c <MX_ADC1_Init+0x134>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80003b8:	4b2c      	ldr	r3, [pc, #176]	@ (800046c <MX_ADC1_Init+0x134>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80003be:	4b2b      	ldr	r3, [pc, #172]	@ (800046c <MX_ADC1_Init+0x134>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80003c6:	4b29      	ldr	r3, [pc, #164]	@ (800046c <MX_ADC1_Init+0x134>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80003cc:	4b27      	ldr	r3, [pc, #156]	@ (800046c <MX_ADC1_Init+0x134>)
 80003ce:	2200      	movs	r2, #0
 80003d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80003d4:	4825      	ldr	r0, [pc, #148]	@ (800046c <MX_ADC1_Init+0x134>)
 80003d6:	f000 fe6d 	bl	80010b4 <HAL_ADC_Init>
 80003da:	4603      	mov	r3, r0
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d001      	beq.n	80003e4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80003e0:	f000 f954 	bl	800068c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80003e4:	2300      	movs	r3, #0
 80003e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80003e8:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80003ec:	4619      	mov	r1, r3
 80003ee:	481f      	ldr	r0, [pc, #124]	@ (800046c <MX_ADC1_Init+0x134>)
 80003f0:	f002 f934 	bl	800265c <HAL_ADCEx_MultiModeConfigChannel>
 80003f4:	4603      	mov	r3, r0
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d001      	beq.n	80003fe <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 80003fa:	f000 f947 	bl	800068c <Error_Handler>
  }

  /** Configure Analog WatchDog 1
  */
  AnalogWDGConfig.WatchdogNumber = ADC_ANALOGWATCHDOG_1;
 80003fe:	4b1c      	ldr	r3, [pc, #112]	@ (8000470 <MX_ADC1_Init+0x138>)
 8000400:	623b      	str	r3, [r7, #32]
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 8000402:	f44f 0340 	mov.w	r3, #12582912	@ 0xc00000
 8000406:	627b      	str	r3, [r7, #36]	@ 0x24
  AnalogWDGConfig.Channel = ADC_CHANNEL_1;
 8000408:	4b1a      	ldr	r3, [pc, #104]	@ (8000474 <MX_ADC1_Init+0x13c>)
 800040a:	62bb      	str	r3, [r7, #40]	@ 0x28
  AnalogWDGConfig.ITMode = DISABLE;
 800040c:	2300      	movs	r3, #0
 800040e:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  AnalogWDGConfig.HighThreshold = 3000;
 8000412:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8000416:	633b      	str	r3, [r7, #48]	@ 0x30
  AnalogWDGConfig.LowThreshold = 0;
 8000418:	2300      	movs	r3, #0
 800041a:	637b      	str	r3, [r7, #52]	@ 0x34
  AnalogWDGConfig.FilteringConfig = ADC_AWD_FILTERING_NONE;
 800041c:	2300      	movs	r3, #0
 800041e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
 8000420:	f107 0320 	add.w	r3, r7, #32
 8000424:	4619      	mov	r1, r3
 8000426:	4811      	ldr	r0, [pc, #68]	@ (800046c <MX_ADC1_Init+0x134>)
 8000428:	f001 feb4 	bl	8002194 <HAL_ADC_AnalogWDGConfig>
 800042c:	4603      	mov	r3, r0
 800042e:	2b00      	cmp	r3, #0
 8000430:	d001      	beq.n	8000436 <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8000432:	f000 f92b 	bl	800068c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000436:	4b0f      	ldr	r3, [pc, #60]	@ (8000474 <MX_ADC1_Init+0x13c>)
 8000438:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800043a:	2306      	movs	r3, #6
 800043c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800043e:	2300      	movs	r3, #0
 8000440:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000442:	237f      	movs	r3, #127	@ 0x7f
 8000444:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000446:	2304      	movs	r3, #4
 8000448:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800044a:	2300      	movs	r3, #0
 800044c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800044e:	463b      	mov	r3, r7
 8000450:	4619      	mov	r1, r3
 8000452:	4806      	ldr	r0, [pc, #24]	@ (800046c <MX_ADC1_Init+0x134>)
 8000454:	f001 fa5e 	bl	8001914 <HAL_ADC_ConfigChannel>
 8000458:	4603      	mov	r3, r0
 800045a:	2b00      	cmp	r3, #0
 800045c:	d001      	beq.n	8000462 <MX_ADC1_Init+0x12a>
  {
    Error_Handler();
 800045e:	f000 f915 	bl	800068c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000462:	bf00      	nop
 8000464:	3748      	adds	r7, #72	@ 0x48
 8000466:	46bd      	mov	sp, r7
 8000468:	bd80      	pop	{r7, pc}
 800046a:	bf00      	nop
 800046c:	20000038 	.word	0x20000038
 8000470:	7dc00000 	.word	0x7dc00000
 8000474:	04300002 	.word	0x04300002

08000478 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b088      	sub	sp, #32
 800047c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800047e:	463b      	mov	r3, r7
 8000480:	2220      	movs	r2, #32
 8000482:	2100      	movs	r1, #0
 8000484:	4618      	mov	r0, r3
 8000486:	f004 fd4d 	bl	8004f24 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800048a:	4b2b      	ldr	r3, [pc, #172]	@ (8000538 <MX_ADC2_Init+0xc0>)
 800048c:	4a2b      	ldr	r2, [pc, #172]	@ (800053c <MX_ADC2_Init+0xc4>)
 800048e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000490:	4b29      	ldr	r3, [pc, #164]	@ (8000538 <MX_ADC2_Init+0xc0>)
 8000492:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000496:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000498:	4b27      	ldr	r3, [pc, #156]	@ (8000538 <MX_ADC2_Init+0xc0>)
 800049a:	2200      	movs	r2, #0
 800049c:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800049e:	4b26      	ldr	r3, [pc, #152]	@ (8000538 <MX_ADC2_Init+0xc0>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80004a4:	4b24      	ldr	r3, [pc, #144]	@ (8000538 <MX_ADC2_Init+0xc0>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80004aa:	4b23      	ldr	r3, [pc, #140]	@ (8000538 <MX_ADC2_Init+0xc0>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80004b0:	4b21      	ldr	r3, [pc, #132]	@ (8000538 <MX_ADC2_Init+0xc0>)
 80004b2:	2204      	movs	r2, #4
 80004b4:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80004b6:	4b20      	ldr	r3, [pc, #128]	@ (8000538 <MX_ADC2_Init+0xc0>)
 80004b8:	2200      	movs	r2, #0
 80004ba:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80004bc:	4b1e      	ldr	r3, [pc, #120]	@ (8000538 <MX_ADC2_Init+0xc0>)
 80004be:	2200      	movs	r2, #0
 80004c0:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 80004c2:	4b1d      	ldr	r3, [pc, #116]	@ (8000538 <MX_ADC2_Init+0xc0>)
 80004c4:	2201      	movs	r2, #1
 80004c6:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80004c8:	4b1b      	ldr	r3, [pc, #108]	@ (8000538 <MX_ADC2_Init+0xc0>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80004d0:	4b19      	ldr	r3, [pc, #100]	@ (8000538 <MX_ADC2_Init+0xc0>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80004d6:	4b18      	ldr	r3, [pc, #96]	@ (8000538 <MX_ADC2_Init+0xc0>)
 80004d8:	2200      	movs	r2, #0
 80004da:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80004dc:	4b16      	ldr	r3, [pc, #88]	@ (8000538 <MX_ADC2_Init+0xc0>)
 80004de:	2200      	movs	r2, #0
 80004e0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80004e4:	4b14      	ldr	r3, [pc, #80]	@ (8000538 <MX_ADC2_Init+0xc0>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80004ea:	4b13      	ldr	r3, [pc, #76]	@ (8000538 <MX_ADC2_Init+0xc0>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80004f2:	4811      	ldr	r0, [pc, #68]	@ (8000538 <MX_ADC2_Init+0xc0>)
 80004f4:	f000 fdde 	bl	80010b4 <HAL_ADC_Init>
 80004f8:	4603      	mov	r3, r0
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d001      	beq.n	8000502 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 80004fe:	f000 f8c5 	bl	800068c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000502:	4b0f      	ldr	r3, [pc, #60]	@ (8000540 <MX_ADC2_Init+0xc8>)
 8000504:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000506:	2306      	movs	r3, #6
 8000508:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800050a:	2300      	movs	r3, #0
 800050c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800050e:	237f      	movs	r3, #127	@ 0x7f
 8000510:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000512:	2304      	movs	r3, #4
 8000514:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000516:	2300      	movs	r3, #0
 8000518:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800051a:	463b      	mov	r3, r7
 800051c:	4619      	mov	r1, r3
 800051e:	4806      	ldr	r0, [pc, #24]	@ (8000538 <MX_ADC2_Init+0xc0>)
 8000520:	f001 f9f8 	bl	8001914 <HAL_ADC_ConfigChannel>
 8000524:	4603      	mov	r3, r0
 8000526:	2b00      	cmp	r3, #0
 8000528:	d001      	beq.n	800052e <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 800052a:	f000 f8af 	bl	800068c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800052e:	bf00      	nop
 8000530:	3720      	adds	r7, #32
 8000532:	46bd      	mov	sp, r7
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	200000a4 	.word	0x200000a4
 800053c:	50000100 	.word	0x50000100
 8000540:	08600004 	.word	0x08600004

08000544 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000548:	4b19      	ldr	r3, [pc, #100]	@ (80005b0 <MX_SPI1_Init+0x6c>)
 800054a:	4a1a      	ldr	r2, [pc, #104]	@ (80005b4 <MX_SPI1_Init+0x70>)
 800054c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 800054e:	4b18      	ldr	r3, [pc, #96]	@ (80005b0 <MX_SPI1_Init+0x6c>)
 8000550:	2200      	movs	r2, #0
 8000552:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000554:	4b16      	ldr	r3, [pc, #88]	@ (80005b0 <MX_SPI1_Init+0x6c>)
 8000556:	2200      	movs	r2, #0
 8000558:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800055a:	4b15      	ldr	r3, [pc, #84]	@ (80005b0 <MX_SPI1_Init+0x6c>)
 800055c:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000560:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000562:	4b13      	ldr	r3, [pc, #76]	@ (80005b0 <MX_SPI1_Init+0x6c>)
 8000564:	2200      	movs	r2, #0
 8000566:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000568:	4b11      	ldr	r3, [pc, #68]	@ (80005b0 <MX_SPI1_Init+0x6c>)
 800056a:	2200      	movs	r2, #0
 800056c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800056e:	4b10      	ldr	r3, [pc, #64]	@ (80005b0 <MX_SPI1_Init+0x6c>)
 8000570:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000574:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000576:	4b0e      	ldr	r3, [pc, #56]	@ (80005b0 <MX_SPI1_Init+0x6c>)
 8000578:	2200      	movs	r2, #0
 800057a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800057c:	4b0c      	ldr	r3, [pc, #48]	@ (80005b0 <MX_SPI1_Init+0x6c>)
 800057e:	2200      	movs	r2, #0
 8000580:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000582:	4b0b      	ldr	r3, [pc, #44]	@ (80005b0 <MX_SPI1_Init+0x6c>)
 8000584:	2200      	movs	r2, #0
 8000586:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000588:	4b09      	ldr	r3, [pc, #36]	@ (80005b0 <MX_SPI1_Init+0x6c>)
 800058a:	2207      	movs	r2, #7
 800058c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800058e:	4b08      	ldr	r3, [pc, #32]	@ (80005b0 <MX_SPI1_Init+0x6c>)
 8000590:	2200      	movs	r2, #0
 8000592:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000594:	4b06      	ldr	r3, [pc, #24]	@ (80005b0 <MX_SPI1_Init+0x6c>)
 8000596:	2200      	movs	r2, #0
 8000598:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800059a:	4805      	ldr	r0, [pc, #20]	@ (80005b0 <MX_SPI1_Init+0x6c>)
 800059c:	f003 fc7a 	bl	8003e94 <HAL_SPI_Init>
 80005a0:	4603      	mov	r3, r0
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d001      	beq.n	80005aa <MX_SPI1_Init+0x66>
  {
    Error_Handler();
 80005a6:	f000 f871 	bl	800068c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80005aa:	bf00      	nop
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	20000110 	.word	0x20000110
 80005b4:	40013000 	.word	0x40013000

080005b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b08a      	sub	sp, #40	@ 0x28
 80005bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005be:	f107 0314 	add.w	r3, r7, #20
 80005c2:	2200      	movs	r2, #0
 80005c4:	601a      	str	r2, [r3, #0]
 80005c6:	605a      	str	r2, [r3, #4]
 80005c8:	609a      	str	r2, [r3, #8]
 80005ca:	60da      	str	r2, [r3, #12]
 80005cc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005ce:	4b2d      	ldr	r3, [pc, #180]	@ (8000684 <MX_GPIO_Init+0xcc>)
 80005d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005d2:	4a2c      	ldr	r2, [pc, #176]	@ (8000684 <MX_GPIO_Init+0xcc>)
 80005d4:	f043 0304 	orr.w	r3, r3, #4
 80005d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005da:	4b2a      	ldr	r3, [pc, #168]	@ (8000684 <MX_GPIO_Init+0xcc>)
 80005dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005de:	f003 0304 	and.w	r3, r3, #4
 80005e2:	613b      	str	r3, [r7, #16]
 80005e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005e6:	4b27      	ldr	r3, [pc, #156]	@ (8000684 <MX_GPIO_Init+0xcc>)
 80005e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005ea:	4a26      	ldr	r2, [pc, #152]	@ (8000684 <MX_GPIO_Init+0xcc>)
 80005ec:	f043 0320 	orr.w	r3, r3, #32
 80005f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005f2:	4b24      	ldr	r3, [pc, #144]	@ (8000684 <MX_GPIO_Init+0xcc>)
 80005f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005f6:	f003 0320 	and.w	r3, r3, #32
 80005fa:	60fb      	str	r3, [r7, #12]
 80005fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005fe:	4b21      	ldr	r3, [pc, #132]	@ (8000684 <MX_GPIO_Init+0xcc>)
 8000600:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000602:	4a20      	ldr	r2, [pc, #128]	@ (8000684 <MX_GPIO_Init+0xcc>)
 8000604:	f043 0301 	orr.w	r3, r3, #1
 8000608:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800060a:	4b1e      	ldr	r3, [pc, #120]	@ (8000684 <MX_GPIO_Init+0xcc>)
 800060c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800060e:	f003 0301 	and.w	r3, r3, #1
 8000612:	60bb      	str	r3, [r7, #8]
 8000614:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000616:	4b1b      	ldr	r3, [pc, #108]	@ (8000684 <MX_GPIO_Init+0xcc>)
 8000618:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800061a:	4a1a      	ldr	r2, [pc, #104]	@ (8000684 <MX_GPIO_Init+0xcc>)
 800061c:	f043 0302 	orr.w	r3, r3, #2
 8000620:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000622:	4b18      	ldr	r3, [pc, #96]	@ (8000684 <MX_GPIO_Init+0xcc>)
 8000624:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000626:	f003 0302 	and.w	r3, r3, #2
 800062a:	607b      	str	r3, [r7, #4]
 800062c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800062e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000632:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000634:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000638:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800063a:	2300      	movs	r3, #0
 800063c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800063e:	f107 0314 	add.w	r3, r7, #20
 8000642:	4619      	mov	r1, r3
 8000644:	4810      	ldr	r0, [pc, #64]	@ (8000688 <MX_GPIO_Init+0xd0>)
 8000646:	f002 fa87 	bl	8002b58 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPUART1_TX_Pin LPUART1_RX_Pin */
  GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 800064a:	230c      	movs	r3, #12
 800064c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800064e:	2302      	movs	r3, #2
 8000650:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000652:	2300      	movs	r3, #0
 8000654:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000656:	2300      	movs	r3, #0
 8000658:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 800065a:	230c      	movs	r3, #12
 800065c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800065e:	f107 0314 	add.w	r3, r7, #20
 8000662:	4619      	mov	r1, r3
 8000664:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000668:	f002 fa76 	bl	8002b58 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800066c:	2200      	movs	r2, #0
 800066e:	2100      	movs	r1, #0
 8000670:	2028      	movs	r0, #40	@ 0x28
 8000672:	f002 f9d6 	bl	8002a22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000676:	2028      	movs	r0, #40	@ 0x28
 8000678:	f002 f9ed 	bl	8002a56 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800067c:	bf00      	nop
 800067e:	3728      	adds	r7, #40	@ 0x28
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	40021000 	.word	0x40021000
 8000688:	48000800 	.word	0x48000800

0800068c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000690:	b672      	cpsid	i
}
 8000692:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000694:	bf00      	nop
 8000696:	e7fd      	b.n	8000694 <Error_Handler+0x8>

08000698 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800069e:	4b0f      	ldr	r3, [pc, #60]	@ (80006dc <HAL_MspInit+0x44>)
 80006a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80006a2:	4a0e      	ldr	r2, [pc, #56]	@ (80006dc <HAL_MspInit+0x44>)
 80006a4:	f043 0301 	orr.w	r3, r3, #1
 80006a8:	6613      	str	r3, [r2, #96]	@ 0x60
 80006aa:	4b0c      	ldr	r3, [pc, #48]	@ (80006dc <HAL_MspInit+0x44>)
 80006ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80006ae:	f003 0301 	and.w	r3, r3, #1
 80006b2:	607b      	str	r3, [r7, #4]
 80006b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006b6:	4b09      	ldr	r3, [pc, #36]	@ (80006dc <HAL_MspInit+0x44>)
 80006b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80006ba:	4a08      	ldr	r2, [pc, #32]	@ (80006dc <HAL_MspInit+0x44>)
 80006bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006c0:	6593      	str	r3, [r2, #88]	@ 0x58
 80006c2:	4b06      	ldr	r3, [pc, #24]	@ (80006dc <HAL_MspInit+0x44>)
 80006c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80006c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006ca:	603b      	str	r3, [r7, #0]
 80006cc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80006ce:	f002 fc8d 	bl	8002fec <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006d2:	bf00      	nop
 80006d4:	3708      	adds	r7, #8
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	40021000 	.word	0x40021000

080006e0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b0a0      	sub	sp, #128	@ 0x80
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80006ec:	2200      	movs	r2, #0
 80006ee:	601a      	str	r2, [r3, #0]
 80006f0:	605a      	str	r2, [r3, #4]
 80006f2:	609a      	str	r2, [r3, #8]
 80006f4:	60da      	str	r2, [r3, #12]
 80006f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006f8:	f107 0318 	add.w	r3, r7, #24
 80006fc:	2254      	movs	r2, #84	@ 0x54
 80006fe:	2100      	movs	r1, #0
 8000700:	4618      	mov	r0, r3
 8000702:	f004 fc0f 	bl	8004f24 <memset>
  if(hadc->Instance==ADC1)
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800070e:	d146      	bne.n	800079e <HAL_ADC_MspInit+0xbe>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000710:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000714:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000716:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800071a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800071c:	f107 0318 	add.w	r3, r7, #24
 8000720:	4618      	mov	r0, r3
 8000722:	f003 f969 	bl	80039f8 <HAL_RCCEx_PeriphCLKConfig>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 800072c:	f7ff ffae 	bl	800068c <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000730:	4b42      	ldr	r3, [pc, #264]	@ (800083c <HAL_ADC_MspInit+0x15c>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	3301      	adds	r3, #1
 8000736:	4a41      	ldr	r2, [pc, #260]	@ (800083c <HAL_ADC_MspInit+0x15c>)
 8000738:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800073a:	4b40      	ldr	r3, [pc, #256]	@ (800083c <HAL_ADC_MspInit+0x15c>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	2b01      	cmp	r3, #1
 8000740:	d10b      	bne.n	800075a <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000742:	4b3f      	ldr	r3, [pc, #252]	@ (8000840 <HAL_ADC_MspInit+0x160>)
 8000744:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000746:	4a3e      	ldr	r2, [pc, #248]	@ (8000840 <HAL_ADC_MspInit+0x160>)
 8000748:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800074c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800074e:	4b3c      	ldr	r3, [pc, #240]	@ (8000840 <HAL_ADC_MspInit+0x160>)
 8000750:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000752:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000756:	617b      	str	r3, [r7, #20]
 8000758:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800075a:	4b39      	ldr	r3, [pc, #228]	@ (8000840 <HAL_ADC_MspInit+0x160>)
 800075c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800075e:	4a38      	ldr	r2, [pc, #224]	@ (8000840 <HAL_ADC_MspInit+0x160>)
 8000760:	f043 0301 	orr.w	r3, r3, #1
 8000764:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000766:	4b36      	ldr	r3, [pc, #216]	@ (8000840 <HAL_ADC_MspInit+0x160>)
 8000768:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800076a:	f003 0301 	and.w	r3, r3, #1
 800076e:	613b      	str	r3, [r7, #16]
 8000770:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000772:	2301      	movs	r3, #1
 8000774:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000776:	2303      	movs	r3, #3
 8000778:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077a:	2300      	movs	r3, #0
 800077c:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800077e:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000782:	4619      	mov	r1, r3
 8000784:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000788:	f002 f9e6 	bl	8002b58 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800078c:	2200      	movs	r2, #0
 800078e:	2100      	movs	r1, #0
 8000790:	2012      	movs	r0, #18
 8000792:	f002 f946 	bl	8002a22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000796:	2012      	movs	r0, #18
 8000798:	f002 f95d 	bl	8002a56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800079c:	e04a      	b.n	8000834 <HAL_ADC_MspInit+0x154>
  else if(hadc->Instance==ADC2)
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	4a28      	ldr	r2, [pc, #160]	@ (8000844 <HAL_ADC_MspInit+0x164>)
 80007a4:	4293      	cmp	r3, r2
 80007a6:	d145      	bne.n	8000834 <HAL_ADC_MspInit+0x154>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80007a8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80007ac:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80007ae:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80007b2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007b4:	f107 0318 	add.w	r3, r7, #24
 80007b8:	4618      	mov	r0, r3
 80007ba:	f003 f91d 	bl	80039f8 <HAL_RCCEx_PeriphCLKConfig>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <HAL_ADC_MspInit+0xe8>
      Error_Handler();
 80007c4:	f7ff ff62 	bl	800068c <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80007c8:	4b1c      	ldr	r3, [pc, #112]	@ (800083c <HAL_ADC_MspInit+0x15c>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	3301      	adds	r3, #1
 80007ce:	4a1b      	ldr	r2, [pc, #108]	@ (800083c <HAL_ADC_MspInit+0x15c>)
 80007d0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80007d2:	4b1a      	ldr	r3, [pc, #104]	@ (800083c <HAL_ADC_MspInit+0x15c>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	2b01      	cmp	r3, #1
 80007d8:	d10b      	bne.n	80007f2 <HAL_ADC_MspInit+0x112>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80007da:	4b19      	ldr	r3, [pc, #100]	@ (8000840 <HAL_ADC_MspInit+0x160>)
 80007dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007de:	4a18      	ldr	r2, [pc, #96]	@ (8000840 <HAL_ADC_MspInit+0x160>)
 80007e0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80007e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007e6:	4b16      	ldr	r3, [pc, #88]	@ (8000840 <HAL_ADC_MspInit+0x160>)
 80007e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80007ee:	60fb      	str	r3, [r7, #12]
 80007f0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f2:	4b13      	ldr	r3, [pc, #76]	@ (8000840 <HAL_ADC_MspInit+0x160>)
 80007f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007f6:	4a12      	ldr	r2, [pc, #72]	@ (8000840 <HAL_ADC_MspInit+0x160>)
 80007f8:	f043 0301 	orr.w	r3, r3, #1
 80007fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007fe:	4b10      	ldr	r3, [pc, #64]	@ (8000840 <HAL_ADC_MspInit+0x160>)
 8000800:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000802:	f003 0301 	and.w	r3, r3, #1
 8000806:	60bb      	str	r3, [r7, #8]
 8000808:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800080a:	2302      	movs	r3, #2
 800080c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800080e:	2303      	movs	r3, #3
 8000810:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000812:	2300      	movs	r3, #0
 8000814:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000816:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800081a:	4619      	mov	r1, r3
 800081c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000820:	f002 f99a 	bl	8002b58 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000824:	2200      	movs	r2, #0
 8000826:	2100      	movs	r1, #0
 8000828:	2012      	movs	r0, #18
 800082a:	f002 f8fa 	bl	8002a22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800082e:	2012      	movs	r0, #18
 8000830:	f002 f911 	bl	8002a56 <HAL_NVIC_EnableIRQ>
}
 8000834:	bf00      	nop
 8000836:	3780      	adds	r7, #128	@ 0x80
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	20000174 	.word	0x20000174
 8000840:	40021000 	.word	0x40021000
 8000844:	50000100 	.word	0x50000100

08000848 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b08a      	sub	sp, #40	@ 0x28
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000850:	f107 0314 	add.w	r3, r7, #20
 8000854:	2200      	movs	r2, #0
 8000856:	601a      	str	r2, [r3, #0]
 8000858:	605a      	str	r2, [r3, #4]
 800085a:	609a      	str	r2, [r3, #8]
 800085c:	60da      	str	r2, [r3, #12]
 800085e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	4a1b      	ldr	r2, [pc, #108]	@ (80008d4 <HAL_SPI_MspInit+0x8c>)
 8000866:	4293      	cmp	r3, r2
 8000868:	d130      	bne.n	80008cc <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800086a:	4b1b      	ldr	r3, [pc, #108]	@ (80008d8 <HAL_SPI_MspInit+0x90>)
 800086c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800086e:	4a1a      	ldr	r2, [pc, #104]	@ (80008d8 <HAL_SPI_MspInit+0x90>)
 8000870:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000874:	6613      	str	r3, [r2, #96]	@ 0x60
 8000876:	4b18      	ldr	r3, [pc, #96]	@ (80008d8 <HAL_SPI_MspInit+0x90>)
 8000878:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800087a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800087e:	613b      	str	r3, [r7, #16]
 8000880:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000882:	4b15      	ldr	r3, [pc, #84]	@ (80008d8 <HAL_SPI_MspInit+0x90>)
 8000884:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000886:	4a14      	ldr	r2, [pc, #80]	@ (80008d8 <HAL_SPI_MspInit+0x90>)
 8000888:	f043 0301 	orr.w	r3, r3, #1
 800088c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800088e:	4b12      	ldr	r3, [pc, #72]	@ (80008d8 <HAL_SPI_MspInit+0x90>)
 8000890:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000892:	f003 0301 	and.w	r3, r3, #1
 8000896:	60fb      	str	r3, [r7, #12]
 8000898:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800089a:	23e0      	movs	r3, #224	@ 0xe0
 800089c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800089e:	2302      	movs	r3, #2
 80008a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a2:	2300      	movs	r3, #0
 80008a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a6:	2300      	movs	r3, #0
 80008a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80008aa:	2305      	movs	r3, #5
 80008ac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ae:	f107 0314 	add.w	r3, r7, #20
 80008b2:	4619      	mov	r1, r3
 80008b4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008b8:	f002 f94e 	bl	8002b58 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80008bc:	2200      	movs	r2, #0
 80008be:	2100      	movs	r1, #0
 80008c0:	2023      	movs	r0, #35	@ 0x23
 80008c2:	f002 f8ae 	bl	8002a22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80008c6:	2023      	movs	r0, #35	@ 0x23
 80008c8:	f002 f8c5 	bl	8002a56 <HAL_NVIC_EnableIRQ>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80008cc:	bf00      	nop
 80008ce:	3728      	adds	r7, #40	@ 0x28
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	40013000 	.word	0x40013000
 80008d8:	40021000 	.word	0x40021000

080008dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008e0:	bf00      	nop
 80008e2:	e7fd      	b.n	80008e0 <NMI_Handler+0x4>

080008e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008e8:	bf00      	nop
 80008ea:	e7fd      	b.n	80008e8 <HardFault_Handler+0x4>

080008ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008f0:	bf00      	nop
 80008f2:	e7fd      	b.n	80008f0 <MemManage_Handler+0x4>

080008f4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008f8:	bf00      	nop
 80008fa:	e7fd      	b.n	80008f8 <BusFault_Handler+0x4>

080008fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000900:	bf00      	nop
 8000902:	e7fd      	b.n	8000900 <UsageFault_Handler+0x4>

08000904 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000908:	bf00      	nop
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr

08000912 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000912:	b480      	push	{r7}
 8000914:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000916:	bf00      	nop
 8000918:	46bd      	mov	sp, r7
 800091a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091e:	4770      	bx	lr

08000920 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000924:	bf00      	nop
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr

0800092e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800092e:	b580      	push	{r7, lr}
 8000930:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000932:	f000 f8b1 	bl	8000a98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000936:	bf00      	nop
 8000938:	bd80      	pop	{r7, pc}
	...

0800093c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000940:	4803      	ldr	r0, [pc, #12]	@ (8000950 <ADC1_2_IRQHandler+0x14>)
 8000942:	f000 fd73 	bl	800142c <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8000946:	4803      	ldr	r0, [pc, #12]	@ (8000954 <ADC1_2_IRQHandler+0x18>)
 8000948:	f000 fd70 	bl	800142c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800094c:	bf00      	nop
 800094e:	bd80      	pop	{r7, pc}
 8000950:	20000038 	.word	0x20000038
 8000954:	200000a4 	.word	0x200000a4

08000958 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800095c:	4802      	ldr	r0, [pc, #8]	@ (8000968 <SPI1_IRQHandler+0x10>)
 800095e:	f004 f811 	bl	8004984 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000962:	bf00      	nop
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	20000110 	.word	0x20000110

0800096c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000970:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000974:	f002 fa72 	bl	8002e5c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000978:	bf00      	nop
 800097a:	bd80      	pop	{r7, pc}

0800097c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000980:	4b06      	ldr	r3, [pc, #24]	@ (800099c <SystemInit+0x20>)
 8000982:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000986:	4a05      	ldr	r2, [pc, #20]	@ (800099c <SystemInit+0x20>)
 8000988:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800098c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000990:	bf00      	nop
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop
 800099c:	e000ed00 	.word	0xe000ed00

080009a0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009a0:	480d      	ldr	r0, [pc, #52]	@ (80009d8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009a2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80009a4:	f7ff ffea 	bl	800097c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009a8:	480c      	ldr	r0, [pc, #48]	@ (80009dc <LoopForever+0x6>)
  ldr r1, =_edata
 80009aa:	490d      	ldr	r1, [pc, #52]	@ (80009e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009ac:	4a0d      	ldr	r2, [pc, #52]	@ (80009e4 <LoopForever+0xe>)
  movs r3, #0
 80009ae:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80009b0:	e002      	b.n	80009b8 <LoopCopyDataInit>

080009b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009b6:	3304      	adds	r3, #4

080009b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009bc:	d3f9      	bcc.n	80009b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009be:	4a0a      	ldr	r2, [pc, #40]	@ (80009e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009c0:	4c0a      	ldr	r4, [pc, #40]	@ (80009ec <LoopForever+0x16>)
  movs r3, #0
 80009c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009c4:	e001      	b.n	80009ca <LoopFillZerobss>

080009c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009c8:	3204      	adds	r2, #4

080009ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009cc:	d3fb      	bcc.n	80009c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009ce:	f004 fab1 	bl	8004f34 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80009d2:	f7ff fc35 	bl	8000240 <main>

080009d6 <LoopForever>:

LoopForever:
    b LoopForever
 80009d6:	e7fe      	b.n	80009d6 <LoopForever>
  ldr   r0, =_estack
 80009d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80009dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009e0:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 80009e4:	08004fbc 	.word	0x08004fbc
  ldr r2, =_sbss
 80009e8:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 80009ec:	2000017c 	.word	0x2000017c

080009f0 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80009f0:	e7fe      	b.n	80009f0 <ADC3_IRQHandler>

080009f2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009f2:	b580      	push	{r7, lr}
 80009f4:	b082      	sub	sp, #8
 80009f6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80009f8:	2300      	movs	r3, #0
 80009fa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009fc:	2003      	movs	r0, #3
 80009fe:	f002 f805 	bl	8002a0c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a02:	2000      	movs	r0, #0
 8000a04:	f000 f80e 	bl	8000a24 <HAL_InitTick>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d002      	beq.n	8000a14 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000a0e:	2301      	movs	r3, #1
 8000a10:	71fb      	strb	r3, [r7, #7]
 8000a12:	e001      	b.n	8000a18 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a14:	f7ff fe40 	bl	8000698 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a18:	79fb      	ldrb	r3, [r7, #7]

}
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	3708      	adds	r7, #8
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
	...

08000a24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b084      	sub	sp, #16
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000a30:	4b16      	ldr	r3, [pc, #88]	@ (8000a8c <HAL_InitTick+0x68>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d022      	beq.n	8000a7e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000a38:	4b15      	ldr	r3, [pc, #84]	@ (8000a90 <HAL_InitTick+0x6c>)
 8000a3a:	681a      	ldr	r2, [r3, #0]
 8000a3c:	4b13      	ldr	r3, [pc, #76]	@ (8000a8c <HAL_InitTick+0x68>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000a44:	fbb1 f3f3 	udiv	r3, r1, r3
 8000a48:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f002 f810 	bl	8002a72 <HAL_SYSTICK_Config>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d10f      	bne.n	8000a78 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	2b0f      	cmp	r3, #15
 8000a5c:	d809      	bhi.n	8000a72 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a5e:	2200      	movs	r2, #0
 8000a60:	6879      	ldr	r1, [r7, #4]
 8000a62:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000a66:	f001 ffdc 	bl	8002a22 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a6a:	4a0a      	ldr	r2, [pc, #40]	@ (8000a94 <HAL_InitTick+0x70>)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	6013      	str	r3, [r2, #0]
 8000a70:	e007      	b.n	8000a82 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000a72:	2301      	movs	r3, #1
 8000a74:	73fb      	strb	r3, [r7, #15]
 8000a76:	e004      	b.n	8000a82 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a78:	2301      	movs	r3, #1
 8000a7a:	73fb      	strb	r3, [r7, #15]
 8000a7c:	e001      	b.n	8000a82 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000a82:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a84:	4618      	mov	r0, r3
 8000a86:	3710      	adds	r7, #16
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	20000018 	.word	0x20000018
 8000a90:	20000010 	.word	0x20000010
 8000a94:	20000014 	.word	0x20000014

08000a98 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a9c:	4b05      	ldr	r3, [pc, #20]	@ (8000ab4 <HAL_IncTick+0x1c>)
 8000a9e:	681a      	ldr	r2, [r3, #0]
 8000aa0:	4b05      	ldr	r3, [pc, #20]	@ (8000ab8 <HAL_IncTick+0x20>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4413      	add	r3, r2
 8000aa6:	4a03      	ldr	r2, [pc, #12]	@ (8000ab4 <HAL_IncTick+0x1c>)
 8000aa8:	6013      	str	r3, [r2, #0]
}
 8000aaa:	bf00      	nop
 8000aac:	46bd      	mov	sp, r7
 8000aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab2:	4770      	bx	lr
 8000ab4:	20000178 	.word	0x20000178
 8000ab8:	20000018 	.word	0x20000018

08000abc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  return uwTick;
 8000ac0:	4b03      	ldr	r3, [pc, #12]	@ (8000ad0 <HAL_GetTick+0x14>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
}
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop
 8000ad0:	20000178 	.word	0x20000178

08000ad4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b083      	sub	sp, #12
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
 8000adc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	689b      	ldr	r3, [r3, #8]
 8000ae2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	431a      	orrs	r2, r3
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	609a      	str	r2, [r3, #8]
}
 8000aee:	bf00      	nop
 8000af0:	370c      	adds	r7, #12
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr

08000afa <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000afa:	b480      	push	{r7}
 8000afc:	b083      	sub	sp, #12
 8000afe:	af00      	add	r7, sp, #0
 8000b00:	6078      	str	r0, [r7, #4]
 8000b02:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	689b      	ldr	r3, [r3, #8]
 8000b08:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	431a      	orrs	r2, r3
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	609a      	str	r2, [r3, #8]
}
 8000b14:	bf00      	nop
 8000b16:	370c      	adds	r7, #12
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1e:	4770      	bx	lr

08000b20 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b083      	sub	sp, #12
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	689b      	ldr	r3, [r3, #8]
 8000b2c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8000b30:	4618      	mov	r0, r3
 8000b32:	370c      	adds	r7, #12
 8000b34:	46bd      	mov	sp, r7
 8000b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3a:	4770      	bx	lr

08000b3c <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b087      	sub	sp, #28
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	60f8      	str	r0, [r7, #12]
 8000b44:	60b9      	str	r1, [r7, #8]
 8000b46:	607a      	str	r2, [r7, #4]
 8000b48:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	3360      	adds	r3, #96	@ 0x60
 8000b4e:	461a      	mov	r2, r3
 8000b50:	68bb      	ldr	r3, [r7, #8]
 8000b52:	009b      	lsls	r3, r3, #2
 8000b54:	4413      	add	r3, r2
 8000b56:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000b58:	697b      	ldr	r3, [r7, #20]
 8000b5a:	681a      	ldr	r2, [r3, #0]
 8000b5c:	4b08      	ldr	r3, [pc, #32]	@ (8000b80 <LL_ADC_SetOffset+0x44>)
 8000b5e:	4013      	ands	r3, r2
 8000b60:	687a      	ldr	r2, [r7, #4]
 8000b62:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8000b66:	683a      	ldr	r2, [r7, #0]
 8000b68:	430a      	orrs	r2, r1
 8000b6a:	4313      	orrs	r3, r2
 8000b6c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8000b70:	697b      	ldr	r3, [r7, #20]
 8000b72:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000b74:	bf00      	nop
 8000b76:	371c      	adds	r7, #28
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr
 8000b80:	03fff000 	.word	0x03fff000

08000b84 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b085      	sub	sp, #20
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
 8000b8c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	3360      	adds	r3, #96	@ 0x60
 8000b92:	461a      	mov	r2, r3
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	009b      	lsls	r3, r3, #2
 8000b98:	4413      	add	r3, r2
 8000b9a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	3714      	adds	r7, #20
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr

08000bb0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b087      	sub	sp, #28
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	60f8      	str	r0, [r7, #12]
 8000bb8:	60b9      	str	r1, [r7, #8]
 8000bba:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	3360      	adds	r3, #96	@ 0x60
 8000bc0:	461a      	mov	r2, r3
 8000bc2:	68bb      	ldr	r3, [r7, #8]
 8000bc4:	009b      	lsls	r3, r3, #2
 8000bc6:	4413      	add	r3, r2
 8000bc8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000bca:	697b      	ldr	r3, [r7, #20]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	431a      	orrs	r2, r3
 8000bd6:	697b      	ldr	r3, [r7, #20]
 8000bd8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000bda:	bf00      	nop
 8000bdc:	371c      	adds	r7, #28
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr

08000be6 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8000be6:	b480      	push	{r7}
 8000be8:	b087      	sub	sp, #28
 8000bea:	af00      	add	r7, sp, #0
 8000bec:	60f8      	str	r0, [r7, #12]
 8000bee:	60b9      	str	r1, [r7, #8]
 8000bf0:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	3360      	adds	r3, #96	@ 0x60
 8000bf6:	461a      	mov	r2, r3
 8000bf8:	68bb      	ldr	r3, [r7, #8]
 8000bfa:	009b      	lsls	r3, r3, #2
 8000bfc:	4413      	add	r3, r2
 8000bfe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000c00:	697b      	ldr	r3, [r7, #20]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	431a      	orrs	r2, r3
 8000c0c:	697b      	ldr	r3, [r7, #20]
 8000c0e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8000c10:	bf00      	nop
 8000c12:	371c      	adds	r7, #28
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr

08000c1c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b087      	sub	sp, #28
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	60f8      	str	r0, [r7, #12]
 8000c24:	60b9      	str	r1, [r7, #8]
 8000c26:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	3360      	adds	r3, #96	@ 0x60
 8000c2c:	461a      	mov	r2, r3
 8000c2e:	68bb      	ldr	r3, [r7, #8]
 8000c30:	009b      	lsls	r3, r3, #2
 8000c32:	4413      	add	r3, r2
 8000c34:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000c36:	697b      	ldr	r3, [r7, #20]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	431a      	orrs	r2, r3
 8000c42:	697b      	ldr	r3, [r7, #20]
 8000c44:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8000c46:	bf00      	nop
 8000c48:	371c      	adds	r7, #28
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr

08000c52 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8000c52:	b480      	push	{r7}
 8000c54:	b083      	sub	sp, #12
 8000c56:	af00      	add	r7, sp, #0
 8000c58:	6078      	str	r0, [r7, #4]
 8000c5a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	695b      	ldr	r3, [r3, #20]
 8000c60:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	431a      	orrs	r2, r3
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	615a      	str	r2, [r3, #20]
}
 8000c6c:	bf00      	nop
 8000c6e:	370c      	adds	r7, #12
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr

08000c78 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b083      	sub	sp, #12
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	68db      	ldr	r3, [r3, #12]
 8000c84:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d101      	bne.n	8000c90 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	e000      	b.n	8000c92 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000c90:	2300      	movs	r3, #0
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	370c      	adds	r7, #12
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr

08000c9e <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000c9e:	b480      	push	{r7}
 8000ca0:	b087      	sub	sp, #28
 8000ca2:	af00      	add	r7, sp, #0
 8000ca4:	60f8      	str	r0, [r7, #12]
 8000ca6:	60b9      	str	r1, [r7, #8]
 8000ca8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	3330      	adds	r3, #48	@ 0x30
 8000cae:	461a      	mov	r2, r3
 8000cb0:	68bb      	ldr	r3, [r7, #8]
 8000cb2:	0a1b      	lsrs	r3, r3, #8
 8000cb4:	009b      	lsls	r3, r3, #2
 8000cb6:	f003 030c 	and.w	r3, r3, #12
 8000cba:	4413      	add	r3, r2
 8000cbc:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000cbe:	697b      	ldr	r3, [r7, #20]
 8000cc0:	681a      	ldr	r2, [r3, #0]
 8000cc2:	68bb      	ldr	r3, [r7, #8]
 8000cc4:	f003 031f 	and.w	r3, r3, #31
 8000cc8:	211f      	movs	r1, #31
 8000cca:	fa01 f303 	lsl.w	r3, r1, r3
 8000cce:	43db      	mvns	r3, r3
 8000cd0:	401a      	ands	r2, r3
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	0e9b      	lsrs	r3, r3, #26
 8000cd6:	f003 011f 	and.w	r1, r3, #31
 8000cda:	68bb      	ldr	r3, [r7, #8]
 8000cdc:	f003 031f 	and.w	r3, r3, #31
 8000ce0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ce4:	431a      	orrs	r2, r3
 8000ce6:	697b      	ldr	r3, [r7, #20]
 8000ce8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000cea:	bf00      	nop
 8000cec:	371c      	adds	r7, #28
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr

08000cf6 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8000cf6:	b480      	push	{r7}
 8000cf8:	b083      	sub	sp, #12
 8000cfa:	af00      	add	r7, sp, #0
 8000cfc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d02:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d101      	bne.n	8000d0e <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	e000      	b.n	8000d10 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8000d0e:	2300      	movs	r3, #0
}
 8000d10:	4618      	mov	r0, r3
 8000d12:	370c      	adds	r7, #12
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr

08000d1c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b087      	sub	sp, #28
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	60f8      	str	r0, [r7, #12]
 8000d24:	60b9      	str	r1, [r7, #8]
 8000d26:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	3314      	adds	r3, #20
 8000d2c:	461a      	mov	r2, r3
 8000d2e:	68bb      	ldr	r3, [r7, #8]
 8000d30:	0e5b      	lsrs	r3, r3, #25
 8000d32:	009b      	lsls	r3, r3, #2
 8000d34:	f003 0304 	and.w	r3, r3, #4
 8000d38:	4413      	add	r3, r2
 8000d3a:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	681a      	ldr	r2, [r3, #0]
 8000d40:	68bb      	ldr	r3, [r7, #8]
 8000d42:	0d1b      	lsrs	r3, r3, #20
 8000d44:	f003 031f 	and.w	r3, r3, #31
 8000d48:	2107      	movs	r1, #7
 8000d4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d4e:	43db      	mvns	r3, r3
 8000d50:	401a      	ands	r2, r3
 8000d52:	68bb      	ldr	r3, [r7, #8]
 8000d54:	0d1b      	lsrs	r3, r3, #20
 8000d56:	f003 031f 	and.w	r3, r3, #31
 8000d5a:	6879      	ldr	r1, [r7, #4]
 8000d5c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d60:	431a      	orrs	r2, r3
 8000d62:	697b      	ldr	r3, [r7, #20]
 8000d64:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000d66:	bf00      	nop
 8000d68:	371c      	adds	r7, #28
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
	...

08000d74 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b085      	sub	sp, #20
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	60f8      	str	r0, [r7, #12]
 8000d7c:	60b9      	str	r1, [r7, #8]
 8000d7e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8000d86:	68bb      	ldr	r3, [r7, #8]
 8000d88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000d8c:	43db      	mvns	r3, r3
 8000d8e:	401a      	ands	r2, r3
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	f003 0318 	and.w	r3, r3, #24
 8000d96:	4908      	ldr	r1, [pc, #32]	@ (8000db8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000d98:	40d9      	lsrs	r1, r3
 8000d9a:	68bb      	ldr	r3, [r7, #8]
 8000d9c:	400b      	ands	r3, r1
 8000d9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000da2:	431a      	orrs	r2, r3
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000daa:	bf00      	nop
 8000dac:	3714      	adds	r7, #20
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	0007ffff 	.word	0x0007ffff

08000dbc <LL_ADC_SetAnalogWDMonitChannels>:
  *             On this STM32 series, all ADCx are not available on all devices. Refer to device datasheet
  *             for more details.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetAnalogWDMonitChannels(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDChannelGroup)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b087      	sub	sp, #28
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	60f8      	str	r0, [r7, #12]
 8000dc4:	60b9      	str	r1, [r7, #8]
 8000dc6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "AWDChannelGroup" with bits position  */
  /* in register and register position depending on parameter "AWDy".         */
  /* Parameters "AWDChannelGroup" and "AWDy" are used with masks because      */
  /* containing other bits reserved for other purpose.                        */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR,
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	330c      	adds	r3, #12
 8000dcc:	4618      	mov	r0, r3
 8000dce:	68bb      	ldr	r3, [r7, #8]
 8000dd0:	0d1b      	lsrs	r3, r3, #20
 8000dd2:	f003 0103 	and.w	r1, r3, #3
 8000dd6:	68bb      	ldr	r3, [r7, #8]
 8000dd8:	f003 0201 	and.w	r2, r3, #1
 8000ddc:	4613      	mov	r3, r2
 8000dde:	00db      	lsls	r3, r3, #3
 8000de0:	4413      	add	r3, r2
 8000de2:	009b      	lsls	r3, r3, #2
 8000de4:	440b      	add	r3, r1
 8000de6:	009b      	lsls	r3, r3, #2
 8000de8:	4403      	add	r3, r0
 8000dea:	617b      	str	r3, [r7, #20]
                                             ((AWDy & ADC_AWD_CRX_REGOFFSET_MASK) >> ADC_AWD_CRX_REGOFFSET_POS)
                                             + ((AWDy & ADC_AWD_CR12_REGOFFSETGAP_MASK)
                                                * ADC_AWD_CR12_REGOFFSETGAP_VAL));

  MODIFY_REG(*preg,
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	681a      	ldr	r2, [r3, #0]
 8000df0:	68bb      	ldr	r3, [r7, #8]
 8000df2:	f023 4302 	bic.w	r3, r3, #2181038080	@ 0x82000000
 8000df6:	f423 1360 	bic.w	r3, r3, #3670016	@ 0x380000
 8000dfa:	43db      	mvns	r3, r3
 8000dfc:	401a      	ands	r2, r3
 8000dfe:	6879      	ldr	r1, [r7, #4]
 8000e00:	68bb      	ldr	r3, [r7, #8]
 8000e02:	400b      	ands	r3, r1
 8000e04:	431a      	orrs	r2, r3
 8000e06:	697b      	ldr	r3, [r7, #20]
 8000e08:	601a      	str	r2, [r3, #0]
             (AWDy & ADC_AWD_CR_ALL_CHANNEL_MASK),
             AWDChannelGroup & AWDy);
}
 8000e0a:	bf00      	nop
 8000e0c:	371c      	adds	r7, #28
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr

08000e16 <LL_ADC_ConfigAnalogWDThresholds>:
  * @param  AWDThresholdLowValue Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ConfigAnalogWDThresholds(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDThresholdHighValue,
                                                     uint32_t AWDThresholdLowValue)
{
 8000e16:	b480      	push	{r7}
 8000e18:	b087      	sub	sp, #28
 8000e1a:	af00      	add	r7, sp, #0
 8000e1c:	60f8      	str	r0, [r7, #12]
 8000e1e:	60b9      	str	r1, [r7, #8]
 8000e20:	607a      	str	r2, [r7, #4]
 8000e22:	603b      	str	r3, [r7, #0]
  /* Set bits with content of parameter "AWDThresholdxxxValue" with bits      */
  /* position in register and register position depending on parameter        */
  /* "AWDy".                                                                  */
  /* Parameters "AWDy" and "AWDThresholdxxxValue" are used with masks because */
  /* containing other bits reserved for other purpose.                        */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->TR1,
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	3320      	adds	r3, #32
 8000e28:	461a      	mov	r2, r3
 8000e2a:	68bb      	ldr	r3, [r7, #8]
 8000e2c:	0d1b      	lsrs	r3, r3, #20
 8000e2e:	009b      	lsls	r3, r3, #2
 8000e30:	f003 030c 	and.w	r3, r3, #12
 8000e34:	4413      	add	r3, r2
 8000e36:	617b      	str	r3, [r7, #20]
                                             ((AWDy & ADC_AWD_TRX_REGOFFSET_MASK) >> ADC_AWD_TRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	f003 22f0 	and.w	r2, r3, #4026593280	@ 0xf000f000
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	0419      	lsls	r1, r3, #16
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	430b      	orrs	r3, r1
 8000e48:	431a      	orrs	r2, r3
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	601a      	str	r2, [r3, #0]
             ADC_TR1_HT1 | ADC_TR1_LT1,
             (AWDThresholdHighValue << ADC_TR1_HT1_BITOFFSET_POS) | AWDThresholdLowValue);
}
 8000e4e:	bf00      	nop
 8000e50:	371c      	adds	r7, #28
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr

08000e5a <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000e5a:	b480      	push	{r7}
 8000e5c:	b083      	sub	sp, #12
 8000e5e:	af00      	add	r7, sp, #0
 8000e60:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	689b      	ldr	r3, [r3, #8]
 8000e66:	f003 031f 	and.w	r3, r3, #31
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	370c      	adds	r7, #12
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr

08000e76 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000e76:	b480      	push	{r7}
 8000e78:	b083      	sub	sp, #12
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	689b      	ldr	r3, [r3, #8]
 8000e82:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	370c      	adds	r7, #12
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr

08000e92 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000e92:	b480      	push	{r7}
 8000e94:	b083      	sub	sp, #12
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	689b      	ldr	r3, [r3, #8]
 8000e9e:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8000ea2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000ea6:	687a      	ldr	r2, [r7, #4]
 8000ea8:	6093      	str	r3, [r2, #8]
}
 8000eaa:	bf00      	nop
 8000eac:	370c      	adds	r7, #12
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr

08000eb6 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8000eb6:	b480      	push	{r7}
 8000eb8:	b083      	sub	sp, #12
 8000eba:	af00      	add	r7, sp, #0
 8000ebc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	689b      	ldr	r3, [r3, #8]
 8000ec2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000ec6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000eca:	d101      	bne.n	8000ed0 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000ecc:	2301      	movs	r3, #1
 8000ece:	e000      	b.n	8000ed2 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000ed0:	2300      	movs	r3, #0
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	370c      	adds	r7, #12
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr

08000ede <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000ede:	b480      	push	{r7}
 8000ee0:	b083      	sub	sp, #12
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	689b      	ldr	r3, [r3, #8]
 8000eea:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8000eee:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000ef2:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000efa:	bf00      	nop
 8000efc:	370c      	adds	r7, #12
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr

08000f06 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8000f06:	b480      	push	{r7}
 8000f08:	b083      	sub	sp, #12
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	689b      	ldr	r3, [r3, #8]
 8000f12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f16:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8000f1a:	d101      	bne.n	8000f20 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	e000      	b.n	8000f22 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000f20:	2300      	movs	r3, #0
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	370c      	adds	r7, #12
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr

08000f2e <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8000f2e:	b480      	push	{r7}
 8000f30:	b083      	sub	sp, #12
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	689b      	ldr	r3, [r3, #8]
 8000f3a:	f003 0301 	and.w	r3, r3, #1
 8000f3e:	2b01      	cmp	r3, #1
 8000f40:	d101      	bne.n	8000f46 <LL_ADC_IsEnabled+0x18>
 8000f42:	2301      	movs	r3, #1
 8000f44:	e000      	b.n	8000f48 <LL_ADC_IsEnabled+0x1a>
 8000f46:	2300      	movs	r3, #0
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	370c      	adds	r7, #12
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr

08000f54 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b083      	sub	sp, #12
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	689b      	ldr	r3, [r3, #8]
 8000f60:	f003 0304 	and.w	r3, r3, #4
 8000f64:	2b04      	cmp	r3, #4
 8000f66:	d101      	bne.n	8000f6c <LL_ADC_REG_IsConversionOngoing+0x18>
 8000f68:	2301      	movs	r3, #1
 8000f6a:	e000      	b.n	8000f6e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000f6c:	2300      	movs	r3, #0
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	370c      	adds	r7, #12
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr

08000f7a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8000f7a:	b480      	push	{r7}
 8000f7c:	b083      	sub	sp, #12
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	689b      	ldr	r3, [r3, #8]
 8000f86:	f003 0308 	and.w	r3, r3, #8
 8000f8a:	2b08      	cmp	r3, #8
 8000f8c:	d101      	bne.n	8000f92 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8000f8e:	2301      	movs	r3, #1
 8000f90:	e000      	b.n	8000f94 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8000f92:	2300      	movs	r3, #0
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	370c      	adds	r7, #12
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr

08000fa0 <LL_ADC_ClearFlag_AWD1>:
  * @rmtoll ISR      AWD1           LL_ADC_ClearFlag_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD1(ADC_TypeDef *ADCx)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD1);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2280      	movs	r2, #128	@ 0x80
 8000fac:	601a      	str	r2, [r3, #0]
}
 8000fae:	bf00      	nop
 8000fb0:	370c      	adds	r7, #12
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr

08000fba <LL_ADC_ClearFlag_AWD2>:
  * @rmtoll ISR      AWD2           LL_ADC_ClearFlag_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD2(ADC_TypeDef *ADCx)
{
 8000fba:	b480      	push	{r7}
 8000fbc:	b083      	sub	sp, #12
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD2);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000fc8:	601a      	str	r2, [r3, #0]
}
 8000fca:	bf00      	nop
 8000fcc:	370c      	adds	r7, #12
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr

08000fd6 <LL_ADC_ClearFlag_AWD3>:
  * @rmtoll ISR      AWD3           LL_ADC_ClearFlag_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD3(ADC_TypeDef *ADCx)
{
 8000fd6:	b480      	push	{r7}
 8000fd8:	b083      	sub	sp, #12
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD3);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000fe4:	601a      	str	r2, [r3, #0]
}
 8000fe6:	bf00      	nop
 8000fe8:	370c      	adds	r7, #12
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr

08000ff2 <LL_ADC_EnableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_EnableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD1(ADC_TypeDef *ADCx)
{
 8000ff2:	b480      	push	{r7}
 8000ff4:	b083      	sub	sp, #12
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	605a      	str	r2, [r3, #4]
}
 8001006:	bf00      	nop
 8001008:	370c      	adds	r7, #12
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr

08001012 <LL_ADC_EnableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_EnableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD2(ADC_TypeDef *ADCx)
{
 8001012:	b480      	push	{r7}
 8001014:	b083      	sub	sp, #12
 8001016:	af00      	add	r7, sp, #0
 8001018:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	605a      	str	r2, [r3, #4]
}
 8001026:	bf00      	nop
 8001028:	370c      	adds	r7, #12
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr

08001032 <LL_ADC_EnableIT_AWD3>:
  * @rmtoll IER      AWD3IE         LL_ADC_EnableIT_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD3(ADC_TypeDef *ADCx)
{
 8001032:	b480      	push	{r7}
 8001034:	b083      	sub	sp, #12
 8001036:	af00      	add	r7, sp, #0
 8001038:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	605a      	str	r2, [r3, #4]
}
 8001046:	bf00      	nop
 8001048:	370c      	adds	r7, #12
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr

08001052 <LL_ADC_DisableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_DisableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD1(ADC_TypeDef *ADCx)
{
 8001052:	b480      	push	{r7}
 8001054:	b083      	sub	sp, #12
 8001056:	af00      	add	r7, sp, #0
 8001058:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	605a      	str	r2, [r3, #4]
}
 8001066:	bf00      	nop
 8001068:	370c      	adds	r7, #12
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr

08001072 <LL_ADC_DisableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_DisableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD2(ADC_TypeDef *ADCx)
{
 8001072:	b480      	push	{r7}
 8001074:	b083      	sub	sp, #12
 8001076:	af00      	add	r7, sp, #0
 8001078:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	605a      	str	r2, [r3, #4]
}
 8001086:	bf00      	nop
 8001088:	370c      	adds	r7, #12
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr

08001092 <LL_ADC_DisableIT_AWD3>:
  * @rmtoll IER      AWD3IE         LL_ADC_DisableIT_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD3(ADC_TypeDef *ADCx)
{
 8001092:	b480      	push	{r7}
 8001094:	b083      	sub	sp, #12
 8001096:	af00      	add	r7, sp, #0
 8001098:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	605a      	str	r2, [r3, #4]
}
 80010a6:	bf00      	nop
 80010a8:	370c      	adds	r7, #12
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr
	...

080010b4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80010b4:	b590      	push	{r4, r7, lr}
 80010b6:	b089      	sub	sp, #36	@ 0x24
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010bc:	2300      	movs	r3, #0
 80010be:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80010c0:	2300      	movs	r3, #0
 80010c2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d101      	bne.n	80010ce <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80010ca:	2301      	movs	r3, #1
 80010cc:	e1a9      	b.n	8001422 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	695b      	ldr	r3, [r3, #20]
 80010d2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d109      	bne.n	80010f0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80010dc:	6878      	ldr	r0, [r7, #4]
 80010de:	f7ff faff 	bl	80006e0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2200      	movs	r2, #0
 80010e6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2200      	movs	r2, #0
 80010ec:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4618      	mov	r0, r3
 80010f6:	f7ff fede 	bl	8000eb6 <LL_ADC_IsDeepPowerDownEnabled>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d004      	beq.n	800110a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4618      	mov	r0, r3
 8001106:	f7ff fec4 	bl	8000e92 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4618      	mov	r0, r3
 8001110:	f7ff fef9 	bl	8000f06 <LL_ADC_IsInternalRegulatorEnabled>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d115      	bne.n	8001146 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4618      	mov	r0, r3
 8001120:	f7ff fedd 	bl	8000ede <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001124:	4b9c      	ldr	r3, [pc, #624]	@ (8001398 <HAL_ADC_Init+0x2e4>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	099b      	lsrs	r3, r3, #6
 800112a:	4a9c      	ldr	r2, [pc, #624]	@ (800139c <HAL_ADC_Init+0x2e8>)
 800112c:	fba2 2303 	umull	r2, r3, r2, r3
 8001130:	099b      	lsrs	r3, r3, #6
 8001132:	3301      	adds	r3, #1
 8001134:	005b      	lsls	r3, r3, #1
 8001136:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001138:	e002      	b.n	8001140 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	3b01      	subs	r3, #1
 800113e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d1f9      	bne.n	800113a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4618      	mov	r0, r3
 800114c:	f7ff fedb 	bl	8000f06 <LL_ADC_IsInternalRegulatorEnabled>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d10d      	bne.n	8001172 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800115a:	f043 0210 	orr.w	r2, r3, #16
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001166:	f043 0201 	orr.w	r2, r3, #1
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800116e:	2301      	movs	r3, #1
 8001170:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4618      	mov	r0, r3
 8001178:	f7ff feec 	bl	8000f54 <LL_ADC_REG_IsConversionOngoing>
 800117c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001182:	f003 0310 	and.w	r3, r3, #16
 8001186:	2b00      	cmp	r3, #0
 8001188:	f040 8142 	bne.w	8001410 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	2b00      	cmp	r3, #0
 8001190:	f040 813e 	bne.w	8001410 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001198:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800119c:	f043 0202 	orr.w	r2, r3, #2
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4618      	mov	r0, r3
 80011aa:	f7ff fec0 	bl	8000f2e <LL_ADC_IsEnabled>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d141      	bne.n	8001238 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80011bc:	d004      	beq.n	80011c8 <HAL_ADC_Init+0x114>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4a77      	ldr	r2, [pc, #476]	@ (80013a0 <HAL_ADC_Init+0x2ec>)
 80011c4:	4293      	cmp	r3, r2
 80011c6:	d10f      	bne.n	80011e8 <HAL_ADC_Init+0x134>
 80011c8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80011cc:	f7ff feaf 	bl	8000f2e <LL_ADC_IsEnabled>
 80011d0:	4604      	mov	r4, r0
 80011d2:	4873      	ldr	r0, [pc, #460]	@ (80013a0 <HAL_ADC_Init+0x2ec>)
 80011d4:	f7ff feab 	bl	8000f2e <LL_ADC_IsEnabled>
 80011d8:	4603      	mov	r3, r0
 80011da:	4323      	orrs	r3, r4
 80011dc:	2b00      	cmp	r3, #0
 80011de:	bf0c      	ite	eq
 80011e0:	2301      	moveq	r3, #1
 80011e2:	2300      	movne	r3, #0
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	e012      	b.n	800120e <HAL_ADC_Init+0x15a>
 80011e8:	486e      	ldr	r0, [pc, #440]	@ (80013a4 <HAL_ADC_Init+0x2f0>)
 80011ea:	f7ff fea0 	bl	8000f2e <LL_ADC_IsEnabled>
 80011ee:	4604      	mov	r4, r0
 80011f0:	486d      	ldr	r0, [pc, #436]	@ (80013a8 <HAL_ADC_Init+0x2f4>)
 80011f2:	f7ff fe9c 	bl	8000f2e <LL_ADC_IsEnabled>
 80011f6:	4603      	mov	r3, r0
 80011f8:	431c      	orrs	r4, r3
 80011fa:	486c      	ldr	r0, [pc, #432]	@ (80013ac <HAL_ADC_Init+0x2f8>)
 80011fc:	f7ff fe97 	bl	8000f2e <LL_ADC_IsEnabled>
 8001200:	4603      	mov	r3, r0
 8001202:	4323      	orrs	r3, r4
 8001204:	2b00      	cmp	r3, #0
 8001206:	bf0c      	ite	eq
 8001208:	2301      	moveq	r3, #1
 800120a:	2300      	movne	r3, #0
 800120c:	b2db      	uxtb	r3, r3
 800120e:	2b00      	cmp	r3, #0
 8001210:	d012      	beq.n	8001238 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800121a:	d004      	beq.n	8001226 <HAL_ADC_Init+0x172>
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a5f      	ldr	r2, [pc, #380]	@ (80013a0 <HAL_ADC_Init+0x2ec>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d101      	bne.n	800122a <HAL_ADC_Init+0x176>
 8001226:	4a62      	ldr	r2, [pc, #392]	@ (80013b0 <HAL_ADC_Init+0x2fc>)
 8001228:	e000      	b.n	800122c <HAL_ADC_Init+0x178>
 800122a:	4a62      	ldr	r2, [pc, #392]	@ (80013b4 <HAL_ADC_Init+0x300>)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	4619      	mov	r1, r3
 8001232:	4610      	mov	r0, r2
 8001234:	f7ff fc4e 	bl	8000ad4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	7f5b      	ldrb	r3, [r3, #29]
 800123c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001242:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001248:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800124e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001256:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001258:	4313      	orrs	r3, r2
 800125a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001262:	2b01      	cmp	r3, #1
 8001264:	d106      	bne.n	8001274 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800126a:	3b01      	subs	r3, #1
 800126c:	045b      	lsls	r3, r3, #17
 800126e:	69ba      	ldr	r2, [r7, #24]
 8001270:	4313      	orrs	r3, r2
 8001272:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001278:	2b00      	cmp	r3, #0
 800127a:	d009      	beq.n	8001290 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001280:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001288:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800128a:	69ba      	ldr	r2, [r7, #24]
 800128c:	4313      	orrs	r3, r2
 800128e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	68da      	ldr	r2, [r3, #12]
 8001296:	4b48      	ldr	r3, [pc, #288]	@ (80013b8 <HAL_ADC_Init+0x304>)
 8001298:	4013      	ands	r3, r2
 800129a:	687a      	ldr	r2, [r7, #4]
 800129c:	6812      	ldr	r2, [r2, #0]
 800129e:	69b9      	ldr	r1, [r7, #24]
 80012a0:	430b      	orrs	r3, r1
 80012a2:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	691b      	ldr	r3, [r3, #16]
 80012aa:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	430a      	orrs	r2, r1
 80012b8:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4618      	mov	r0, r3
 80012c0:	f7ff fe5b 	bl	8000f7a <LL_ADC_INJ_IsConversionOngoing>
 80012c4:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d17f      	bne.n	80013cc <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d17c      	bne.n	80013cc <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80012d6:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80012de:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80012e0:	4313      	orrs	r3, r2
 80012e2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	68db      	ldr	r3, [r3, #12]
 80012ea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80012ee:	f023 0302 	bic.w	r3, r3, #2
 80012f2:	687a      	ldr	r2, [r7, #4]
 80012f4:	6812      	ldr	r2, [r2, #0]
 80012f6:	69b9      	ldr	r1, [r7, #24]
 80012f8:	430b      	orrs	r3, r1
 80012fa:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	691b      	ldr	r3, [r3, #16]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d017      	beq.n	8001334 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	691a      	ldr	r2, [r3, #16]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001312:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800131c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001320:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001324:	687a      	ldr	r2, [r7, #4]
 8001326:	6911      	ldr	r1, [r2, #16]
 8001328:	687a      	ldr	r2, [r7, #4]
 800132a:	6812      	ldr	r2, [r2, #0]
 800132c:	430b      	orrs	r3, r1
 800132e:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8001332:	e013      	b.n	800135c <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	691a      	ldr	r2, [r3, #16]
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001342:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800134c:	687a      	ldr	r2, [r7, #4]
 800134e:	6812      	ldr	r2, [r2, #0]
 8001350:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001354:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001358:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001362:	2b01      	cmp	r3, #1
 8001364:	d12a      	bne.n	80013bc <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	691b      	ldr	r3, [r3, #16]
 800136c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001370:	f023 0304 	bic.w	r3, r3, #4
 8001374:	687a      	ldr	r2, [r7, #4]
 8001376:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8001378:	687a      	ldr	r2, [r7, #4]
 800137a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800137c:	4311      	orrs	r1, r2
 800137e:	687a      	ldr	r2, [r7, #4]
 8001380:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001382:	4311      	orrs	r1, r2
 8001384:	687a      	ldr	r2, [r7, #4]
 8001386:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001388:	430a      	orrs	r2, r1
 800138a:	431a      	orrs	r2, r3
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f042 0201 	orr.w	r2, r2, #1
 8001394:	611a      	str	r2, [r3, #16]
 8001396:	e019      	b.n	80013cc <HAL_ADC_Init+0x318>
 8001398:	20000010 	.word	0x20000010
 800139c:	053e2d63 	.word	0x053e2d63
 80013a0:	50000100 	.word	0x50000100
 80013a4:	50000400 	.word	0x50000400
 80013a8:	50000500 	.word	0x50000500
 80013ac:	50000600 	.word	0x50000600
 80013b0:	50000300 	.word	0x50000300
 80013b4:	50000700 	.word	0x50000700
 80013b8:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	691a      	ldr	r2, [r3, #16]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f022 0201 	bic.w	r2, r2, #1
 80013ca:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	695b      	ldr	r3, [r3, #20]
 80013d0:	2b01      	cmp	r3, #1
 80013d2:	d10c      	bne.n	80013ee <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013da:	f023 010f 	bic.w	r1, r3, #15
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6a1b      	ldr	r3, [r3, #32]
 80013e2:	1e5a      	subs	r2, r3, #1
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	430a      	orrs	r2, r1
 80013ea:	631a      	str	r2, [r3, #48]	@ 0x30
 80013ec:	e007      	b.n	80013fe <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f022 020f 	bic.w	r2, r2, #15
 80013fc:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001402:	f023 0303 	bic.w	r3, r3, #3
 8001406:	f043 0201 	orr.w	r2, r3, #1
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800140e:	e007      	b.n	8001420 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001414:	f043 0210 	orr.w	r2, r3, #16
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800141c:	2301      	movs	r3, #1
 800141e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001420:	7ffb      	ldrb	r3, [r7, #31]
}
 8001422:	4618      	mov	r0, r3
 8001424:	3724      	adds	r7, #36	@ 0x24
 8001426:	46bd      	mov	sp, r7
 8001428:	bd90      	pop	{r4, r7, pc}
 800142a:	bf00      	nop

0800142c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b08a      	sub	sp, #40	@ 0x28
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001434:	2300      	movs	r3, #0
 8001436:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001450:	d004      	beq.n	800145c <HAL_ADC_IRQHandler+0x30>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4a8e      	ldr	r2, [pc, #568]	@ (8001690 <HAL_ADC_IRQHandler+0x264>)
 8001458:	4293      	cmp	r3, r2
 800145a:	d101      	bne.n	8001460 <HAL_ADC_IRQHandler+0x34>
 800145c:	4b8d      	ldr	r3, [pc, #564]	@ (8001694 <HAL_ADC_IRQHandler+0x268>)
 800145e:	e000      	b.n	8001462 <HAL_ADC_IRQHandler+0x36>
 8001460:	4b8d      	ldr	r3, [pc, #564]	@ (8001698 <HAL_ADC_IRQHandler+0x26c>)
 8001462:	4618      	mov	r0, r3
 8001464:	f7ff fcf9 	bl	8000e5a <LL_ADC_GetMultimode>
 8001468:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800146a:	69fb      	ldr	r3, [r7, #28]
 800146c:	f003 0302 	and.w	r3, r3, #2
 8001470:	2b00      	cmp	r3, #0
 8001472:	d017      	beq.n	80014a4 <HAL_ADC_IRQHandler+0x78>
 8001474:	69bb      	ldr	r3, [r7, #24]
 8001476:	f003 0302 	and.w	r3, r3, #2
 800147a:	2b00      	cmp	r3, #0
 800147c:	d012      	beq.n	80014a4 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001482:	f003 0310 	and.w	r3, r3, #16
 8001486:	2b00      	cmp	r3, #0
 8001488:	d105      	bne.n	8001496 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800148e:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001496:	6878      	ldr	r0, [r7, #4]
 8001498:	f001 f8d6 	bl	8002648 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	2202      	movs	r2, #2
 80014a2:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80014a4:	69fb      	ldr	r3, [r7, #28]
 80014a6:	f003 0304 	and.w	r3, r3, #4
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d004      	beq.n	80014b8 <HAL_ADC_IRQHandler+0x8c>
 80014ae:	69bb      	ldr	r3, [r7, #24]
 80014b0:	f003 0304 	and.w	r3, r3, #4
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d10b      	bne.n	80014d0 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80014b8:	69fb      	ldr	r3, [r7, #28]
 80014ba:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80014be:	2b00      	cmp	r3, #0
 80014c0:	f000 8094 	beq.w	80015ec <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80014c4:	69bb      	ldr	r3, [r7, #24]
 80014c6:	f003 0308 	and.w	r3, r3, #8
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	f000 808e 	beq.w	80015ec <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014d4:	f003 0310 	and.w	r3, r3, #16
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d105      	bne.n	80014e8 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014e0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4618      	mov	r0, r3
 80014ee:	f7ff fbc3 	bl	8000c78 <LL_ADC_REG_IsTriggerSourceSWStart>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d072      	beq.n	80015de <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a64      	ldr	r2, [pc, #400]	@ (8001690 <HAL_ADC_IRQHandler+0x264>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d009      	beq.n	8001516 <HAL_ADC_IRQHandler+0xea>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4a65      	ldr	r2, [pc, #404]	@ (800169c <HAL_ADC_IRQHandler+0x270>)
 8001508:	4293      	cmp	r3, r2
 800150a:	d002      	beq.n	8001512 <HAL_ADC_IRQHandler+0xe6>
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	e003      	b.n	800151a <HAL_ADC_IRQHandler+0xee>
 8001512:	4b63      	ldr	r3, [pc, #396]	@ (80016a0 <HAL_ADC_IRQHandler+0x274>)
 8001514:	e001      	b.n	800151a <HAL_ADC_IRQHandler+0xee>
 8001516:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800151a:	687a      	ldr	r2, [r7, #4]
 800151c:	6812      	ldr	r2, [r2, #0]
 800151e:	4293      	cmp	r3, r2
 8001520:	d008      	beq.n	8001534 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d005      	beq.n	8001534 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	2b05      	cmp	r3, #5
 800152c:	d002      	beq.n	8001534 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	2b09      	cmp	r3, #9
 8001532:	d104      	bne.n	800153e <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	68db      	ldr	r3, [r3, #12]
 800153a:	623b      	str	r3, [r7, #32]
 800153c:	e014      	b.n	8001568 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a53      	ldr	r2, [pc, #332]	@ (8001690 <HAL_ADC_IRQHandler+0x264>)
 8001544:	4293      	cmp	r3, r2
 8001546:	d009      	beq.n	800155c <HAL_ADC_IRQHandler+0x130>
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a53      	ldr	r2, [pc, #332]	@ (800169c <HAL_ADC_IRQHandler+0x270>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d002      	beq.n	8001558 <HAL_ADC_IRQHandler+0x12c>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	e003      	b.n	8001560 <HAL_ADC_IRQHandler+0x134>
 8001558:	4b51      	ldr	r3, [pc, #324]	@ (80016a0 <HAL_ADC_IRQHandler+0x274>)
 800155a:	e001      	b.n	8001560 <HAL_ADC_IRQHandler+0x134>
 800155c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001560:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	68db      	ldr	r3, [r3, #12]
 8001566:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001568:	6a3b      	ldr	r3, [r7, #32]
 800156a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800156e:	2b00      	cmp	r3, #0
 8001570:	d135      	bne.n	80015de <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f003 0308 	and.w	r3, r3, #8
 800157c:	2b08      	cmp	r3, #8
 800157e:	d12e      	bne.n	80015de <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4618      	mov	r0, r3
 8001586:	f7ff fce5 	bl	8000f54 <LL_ADC_REG_IsConversionOngoing>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d11a      	bne.n	80015c6 <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	685a      	ldr	r2, [r3, #4]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f022 020c 	bic.w	r2, r2, #12
 800159e:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015a4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015b0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d112      	bne.n	80015de <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015bc:	f043 0201 	orr.w	r2, r3, #1
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80015c4:	e00b      	b.n	80015de <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015ca:	f043 0210 	orr.w	r2, r3, #16
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015d6:	f043 0201 	orr.w	r2, r3, #1
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80015de:	6878      	ldr	r0, [r7, #4]
 80015e0:	f000 f984 	bl	80018ec <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	220c      	movs	r2, #12
 80015ea:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80015ec:	69fb      	ldr	r3, [r7, #28]
 80015ee:	f003 0320 	and.w	r3, r3, #32
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d004      	beq.n	8001600 <HAL_ADC_IRQHandler+0x1d4>
 80015f6:	69bb      	ldr	r3, [r7, #24]
 80015f8:	f003 0320 	and.w	r3, r3, #32
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d10b      	bne.n	8001618 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001600:	69fb      	ldr	r3, [r7, #28]
 8001602:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001606:	2b00      	cmp	r3, #0
 8001608:	f000 80b3 	beq.w	8001772 <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800160c:	69bb      	ldr	r3, [r7, #24]
 800160e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001612:	2b00      	cmp	r3, #0
 8001614:	f000 80ad 	beq.w	8001772 <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800161c:	f003 0310 	and.w	r3, r3, #16
 8001620:	2b00      	cmp	r3, #0
 8001622:	d105      	bne.n	8001630 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001628:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4618      	mov	r0, r3
 8001636:	f7ff fb5e 	bl	8000cf6 <LL_ADC_INJ_IsTriggerSourceSWStart>
 800163a:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4618      	mov	r0, r3
 8001642:	f7ff fb19 	bl	8000c78 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001646:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a10      	ldr	r2, [pc, #64]	@ (8001690 <HAL_ADC_IRQHandler+0x264>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d009      	beq.n	8001666 <HAL_ADC_IRQHandler+0x23a>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a11      	ldr	r2, [pc, #68]	@ (800169c <HAL_ADC_IRQHandler+0x270>)
 8001658:	4293      	cmp	r3, r2
 800165a:	d002      	beq.n	8001662 <HAL_ADC_IRQHandler+0x236>
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	e003      	b.n	800166a <HAL_ADC_IRQHandler+0x23e>
 8001662:	4b0f      	ldr	r3, [pc, #60]	@ (80016a0 <HAL_ADC_IRQHandler+0x274>)
 8001664:	e001      	b.n	800166a <HAL_ADC_IRQHandler+0x23e>
 8001666:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800166a:	687a      	ldr	r2, [r7, #4]
 800166c:	6812      	ldr	r2, [r2, #0]
 800166e:	4293      	cmp	r3, r2
 8001670:	d008      	beq.n	8001684 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d005      	beq.n	8001684 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	2b06      	cmp	r3, #6
 800167c:	d002      	beq.n	8001684 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	2b07      	cmp	r3, #7
 8001682:	d10f      	bne.n	80016a4 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	68db      	ldr	r3, [r3, #12]
 800168a:	623b      	str	r3, [r7, #32]
 800168c:	e01f      	b.n	80016ce <HAL_ADC_IRQHandler+0x2a2>
 800168e:	bf00      	nop
 8001690:	50000100 	.word	0x50000100
 8001694:	50000300 	.word	0x50000300
 8001698:	50000700 	.word	0x50000700
 800169c:	50000500 	.word	0x50000500
 80016a0:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a8b      	ldr	r2, [pc, #556]	@ (80018d8 <HAL_ADC_IRQHandler+0x4ac>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d009      	beq.n	80016c2 <HAL_ADC_IRQHandler+0x296>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4a8a      	ldr	r2, [pc, #552]	@ (80018dc <HAL_ADC_IRQHandler+0x4b0>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d002      	beq.n	80016be <HAL_ADC_IRQHandler+0x292>
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	e003      	b.n	80016c6 <HAL_ADC_IRQHandler+0x29a>
 80016be:	4b88      	ldr	r3, [pc, #544]	@ (80018e0 <HAL_ADC_IRQHandler+0x4b4>)
 80016c0:	e001      	b.n	80016c6 <HAL_ADC_IRQHandler+0x29a>
 80016c2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80016c6:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	68db      	ldr	r3, [r3, #12]
 80016cc:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d047      	beq.n	8001764 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80016d4:	6a3b      	ldr	r3, [r7, #32]
 80016d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d007      	beq.n	80016ee <HAL_ADC_IRQHandler+0x2c2>
 80016de:	68bb      	ldr	r3, [r7, #8]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d03f      	beq.n	8001764 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80016e4:	6a3b      	ldr	r3, [r7, #32]
 80016e6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d13a      	bne.n	8001764 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80016f8:	2b40      	cmp	r3, #64	@ 0x40
 80016fa:	d133      	bne.n	8001764 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80016fc:	6a3b      	ldr	r3, [r7, #32]
 80016fe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001702:	2b00      	cmp	r3, #0
 8001704:	d12e      	bne.n	8001764 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4618      	mov	r0, r3
 800170c:	f7ff fc35 	bl	8000f7a <LL_ADC_INJ_IsConversionOngoing>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d11a      	bne.n	800174c <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	685a      	ldr	r2, [r3, #4]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001724:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800172a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001736:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800173a:	2b00      	cmp	r3, #0
 800173c:	d112      	bne.n	8001764 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001742:	f043 0201 	orr.w	r2, r3, #1
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	65da      	str	r2, [r3, #92]	@ 0x5c
 800174a:	e00b      	b.n	8001764 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001750:	f043 0210 	orr.w	r2, r3, #16
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800175c:	f043 0201 	orr.w	r2, r3, #1
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001764:	6878      	ldr	r0, [r7, #4]
 8001766:	f000 ff47 	bl	80025f8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	2260      	movs	r2, #96	@ 0x60
 8001770:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001772:	69fb      	ldr	r3, [r7, #28]
 8001774:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001778:	2b00      	cmp	r3, #0
 800177a:	d011      	beq.n	80017a0 <HAL_ADC_IRQHandler+0x374>
 800177c:	69bb      	ldr	r3, [r7, #24]
 800177e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001782:	2b00      	cmp	r3, #0
 8001784:	d00c      	beq.n	80017a0 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800178a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001792:	6878      	ldr	r0, [r7, #4]
 8001794:	f7fe fd4a 	bl	800022c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	2280      	movs	r2, #128	@ 0x80
 800179e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80017a0:	69fb      	ldr	r3, [r7, #28]
 80017a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d012      	beq.n	80017d0 <HAL_ADC_IRQHandler+0x3a4>
 80017aa:	69bb      	ldr	r3, [r7, #24]
 80017ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d00d      	beq.n	80017d0 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017b8:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80017c0:	6878      	ldr	r0, [r7, #4]
 80017c2:	f000 ff2d 	bl	8002620 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80017ce:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80017d0:	69fb      	ldr	r3, [r7, #28]
 80017d2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d012      	beq.n	8001800 <HAL_ADC_IRQHandler+0x3d4>
 80017da:	69bb      	ldr	r3, [r7, #24]
 80017dc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d00d      	beq.n	8001800 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017e8:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80017f0:	6878      	ldr	r0, [r7, #4]
 80017f2:	f000 ff1f 	bl	8002634 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80017fe:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001800:	69fb      	ldr	r3, [r7, #28]
 8001802:	f003 0310 	and.w	r3, r3, #16
 8001806:	2b00      	cmp	r3, #0
 8001808:	d043      	beq.n	8001892 <HAL_ADC_IRQHandler+0x466>
 800180a:	69bb      	ldr	r3, [r7, #24]
 800180c:	f003 0310 	and.w	r3, r3, #16
 8001810:	2b00      	cmp	r3, #0
 8001812:	d03e      	beq.n	8001892 <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001818:	2b00      	cmp	r3, #0
 800181a:	d102      	bne.n	8001822 <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 800181c:	2301      	movs	r3, #1
 800181e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001820:	e021      	b.n	8001866 <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d015      	beq.n	8001854 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001830:	d004      	beq.n	800183c <HAL_ADC_IRQHandler+0x410>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a28      	ldr	r2, [pc, #160]	@ (80018d8 <HAL_ADC_IRQHandler+0x4ac>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d101      	bne.n	8001840 <HAL_ADC_IRQHandler+0x414>
 800183c:	4b29      	ldr	r3, [pc, #164]	@ (80018e4 <HAL_ADC_IRQHandler+0x4b8>)
 800183e:	e000      	b.n	8001842 <HAL_ADC_IRQHandler+0x416>
 8001840:	4b29      	ldr	r3, [pc, #164]	@ (80018e8 <HAL_ADC_IRQHandler+0x4bc>)
 8001842:	4618      	mov	r0, r3
 8001844:	f7ff fb17 	bl	8000e76 <LL_ADC_GetMultiDMATransfer>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d00b      	beq.n	8001866 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 800184e:	2301      	movs	r3, #1
 8001850:	627b      	str	r3, [r7, #36]	@ 0x24
 8001852:	e008      	b.n	8001866 <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	68db      	ldr	r3, [r3, #12]
 800185a:	f003 0301 	and.w	r3, r3, #1
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8001862:	2301      	movs	r3, #1
 8001864:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8001866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001868:	2b01      	cmp	r3, #1
 800186a:	d10e      	bne.n	800188a <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001870:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800187c:	f043 0202 	orr.w	r2, r3, #2
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001884:	6878      	ldr	r0, [r7, #4]
 8001886:	f000 f83b 	bl	8001900 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	2210      	movs	r2, #16
 8001890:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001898:	2b00      	cmp	r3, #0
 800189a:	d018      	beq.n	80018ce <HAL_ADC_IRQHandler+0x4a2>
 800189c:	69bb      	ldr	r3, [r7, #24]
 800189e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d013      	beq.n	80018ce <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018aa:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018b6:	f043 0208 	orr.w	r2, r3, #8
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80018c6:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80018c8:	6878      	ldr	r0, [r7, #4]
 80018ca:	f000 fe9f 	bl	800260c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80018ce:	bf00      	nop
 80018d0:	3728      	adds	r7, #40	@ 0x28
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	50000100 	.word	0x50000100
 80018dc:	50000500 	.word	0x50000500
 80018e0:	50000400 	.word	0x50000400
 80018e4:	50000300 	.word	0x50000300
 80018e8:	50000700 	.word	0x50000700

080018ec <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80018f4:	bf00      	nop
 80018f6:	370c      	adds	r7, #12
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr

08001900 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001900:	b480      	push	{r7}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001908:	bf00      	nop
 800190a:	370c      	adds	r7, #12
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr

08001914 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b0b6      	sub	sp, #216	@ 0xd8
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
 800191c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800191e:	2300      	movs	r3, #0
 8001920:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001924:	2300      	movs	r3, #0
 8001926:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800192e:	2b01      	cmp	r3, #1
 8001930:	d102      	bne.n	8001938 <HAL_ADC_ConfigChannel+0x24>
 8001932:	2302      	movs	r3, #2
 8001934:	f000 bc13 	b.w	800215e <HAL_ADC_ConfigChannel+0x84a>
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2201      	movs	r2, #1
 800193c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4618      	mov	r0, r3
 8001946:	f7ff fb05 	bl	8000f54 <LL_ADC_REG_IsConversionOngoing>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	f040 83f3 	bne.w	8002138 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6818      	ldr	r0, [r3, #0]
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	6859      	ldr	r1, [r3, #4]
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	461a      	mov	r2, r3
 8001960:	f7ff f99d 	bl	8000c9e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4618      	mov	r0, r3
 800196a:	f7ff faf3 	bl	8000f54 <LL_ADC_REG_IsConversionOngoing>
 800196e:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4618      	mov	r0, r3
 8001978:	f7ff faff 	bl	8000f7a <LL_ADC_INJ_IsConversionOngoing>
 800197c:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001980:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001984:	2b00      	cmp	r3, #0
 8001986:	f040 81d9 	bne.w	8001d3c <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800198a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800198e:	2b00      	cmp	r3, #0
 8001990:	f040 81d4 	bne.w	8001d3c <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800199c:	d10f      	bne.n	80019be <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6818      	ldr	r0, [r3, #0]
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	2200      	movs	r2, #0
 80019a8:	4619      	mov	r1, r3
 80019aa:	f7ff f9b7 	bl	8000d1c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80019b6:	4618      	mov	r0, r3
 80019b8:	f7ff f94b 	bl	8000c52 <LL_ADC_SetSamplingTimeCommonConfig>
 80019bc:	e00e      	b.n	80019dc <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6818      	ldr	r0, [r3, #0]
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	6819      	ldr	r1, [r3, #0]
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	461a      	mov	r2, r3
 80019cc:	f7ff f9a6 	bl	8000d1c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	2100      	movs	r1, #0
 80019d6:	4618      	mov	r0, r3
 80019d8:	f7ff f93b 	bl	8000c52 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	695a      	ldr	r2, [r3, #20]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	68db      	ldr	r3, [r3, #12]
 80019e6:	08db      	lsrs	r3, r3, #3
 80019e8:	f003 0303 	and.w	r3, r3, #3
 80019ec:	005b      	lsls	r3, r3, #1
 80019ee:	fa02 f303 	lsl.w	r3, r2, r3
 80019f2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	691b      	ldr	r3, [r3, #16]
 80019fa:	2b04      	cmp	r3, #4
 80019fc:	d022      	beq.n	8001a44 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6818      	ldr	r0, [r3, #0]
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	6919      	ldr	r1, [r3, #16]
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001a0e:	f7ff f895 	bl	8000b3c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6818      	ldr	r0, [r3, #0]
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	6919      	ldr	r1, [r3, #16]
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	699b      	ldr	r3, [r3, #24]
 8001a1e:	461a      	mov	r2, r3
 8001a20:	f7ff f8e1 	bl	8000be6 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6818      	ldr	r0, [r3, #0]
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001a30:	2b01      	cmp	r3, #1
 8001a32:	d102      	bne.n	8001a3a <HAL_ADC_ConfigChannel+0x126>
 8001a34:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001a38:	e000      	b.n	8001a3c <HAL_ADC_ConfigChannel+0x128>
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	461a      	mov	r2, r3
 8001a3e:	f7ff f8ed 	bl	8000c1c <LL_ADC_SetOffsetSaturation>
 8001a42:	e17b      	b.n	8001d3c <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	2100      	movs	r1, #0
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f7ff f89a 	bl	8000b84 <LL_ADC_GetOffsetChannel>
 8001a50:	4603      	mov	r3, r0
 8001a52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d10a      	bne.n	8001a70 <HAL_ADC_ConfigChannel+0x15c>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	2100      	movs	r1, #0
 8001a60:	4618      	mov	r0, r3
 8001a62:	f7ff f88f 	bl	8000b84 <LL_ADC_GetOffsetChannel>
 8001a66:	4603      	mov	r3, r0
 8001a68:	0e9b      	lsrs	r3, r3, #26
 8001a6a:	f003 021f 	and.w	r2, r3, #31
 8001a6e:	e01e      	b.n	8001aae <HAL_ADC_ConfigChannel+0x19a>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	2100      	movs	r1, #0
 8001a76:	4618      	mov	r0, r3
 8001a78:	f7ff f884 	bl	8000b84 <LL_ADC_GetOffsetChannel>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a82:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001a86:	fa93 f3a3 	rbit	r3, r3
 8001a8a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001a8e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001a92:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001a96:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d101      	bne.n	8001aa2 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8001a9e:	2320      	movs	r3, #32
 8001aa0:	e004      	b.n	8001aac <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8001aa2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001aa6:	fab3 f383 	clz	r3, r3
 8001aaa:	b2db      	uxtb	r3, r3
 8001aac:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d105      	bne.n	8001ac6 <HAL_ADC_ConfigChannel+0x1b2>
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	0e9b      	lsrs	r3, r3, #26
 8001ac0:	f003 031f 	and.w	r3, r3, #31
 8001ac4:	e018      	b.n	8001af8 <HAL_ADC_ConfigChannel+0x1e4>
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ace:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001ad2:	fa93 f3a3 	rbit	r3, r3
 8001ad6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8001ada:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001ade:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8001ae2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d101      	bne.n	8001aee <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8001aea:	2320      	movs	r3, #32
 8001aec:	e004      	b.n	8001af8 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8001aee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001af2:	fab3 f383 	clz	r3, r3
 8001af6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d106      	bne.n	8001b0a <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	2200      	movs	r2, #0
 8001b02:	2100      	movs	r1, #0
 8001b04:	4618      	mov	r0, r3
 8001b06:	f7ff f853 	bl	8000bb0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	2101      	movs	r1, #1
 8001b10:	4618      	mov	r0, r3
 8001b12:	f7ff f837 	bl	8000b84 <LL_ADC_GetOffsetChannel>
 8001b16:	4603      	mov	r3, r0
 8001b18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d10a      	bne.n	8001b36 <HAL_ADC_ConfigChannel+0x222>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	2101      	movs	r1, #1
 8001b26:	4618      	mov	r0, r3
 8001b28:	f7ff f82c 	bl	8000b84 <LL_ADC_GetOffsetChannel>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	0e9b      	lsrs	r3, r3, #26
 8001b30:	f003 021f 	and.w	r2, r3, #31
 8001b34:	e01e      	b.n	8001b74 <HAL_ADC_ConfigChannel+0x260>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	2101      	movs	r1, #1
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f7ff f821 	bl	8000b84 <LL_ADC_GetOffsetChannel>
 8001b42:	4603      	mov	r3, r0
 8001b44:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b48:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001b4c:	fa93 f3a3 	rbit	r3, r3
 8001b50:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8001b54:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001b58:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8001b5c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d101      	bne.n	8001b68 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8001b64:	2320      	movs	r3, #32
 8001b66:	e004      	b.n	8001b72 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8001b68:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001b6c:	fab3 f383 	clz	r3, r3
 8001b70:	b2db      	uxtb	r3, r3
 8001b72:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d105      	bne.n	8001b8c <HAL_ADC_ConfigChannel+0x278>
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	0e9b      	lsrs	r3, r3, #26
 8001b86:	f003 031f 	and.w	r3, r3, #31
 8001b8a:	e018      	b.n	8001bbe <HAL_ADC_ConfigChannel+0x2aa>
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b94:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001b98:	fa93 f3a3 	rbit	r3, r3
 8001b9c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8001ba0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001ba4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8001ba8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d101      	bne.n	8001bb4 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8001bb0:	2320      	movs	r3, #32
 8001bb2:	e004      	b.n	8001bbe <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8001bb4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001bb8:	fab3 f383 	clz	r3, r3
 8001bbc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001bbe:	429a      	cmp	r2, r3
 8001bc0:	d106      	bne.n	8001bd0 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	2101      	movs	r1, #1
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f7fe fff0 	bl	8000bb0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	2102      	movs	r1, #2
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f7fe ffd4 	bl	8000b84 <LL_ADC_GetOffsetChannel>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d10a      	bne.n	8001bfc <HAL_ADC_ConfigChannel+0x2e8>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	2102      	movs	r1, #2
 8001bec:	4618      	mov	r0, r3
 8001bee:	f7fe ffc9 	bl	8000b84 <LL_ADC_GetOffsetChannel>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	0e9b      	lsrs	r3, r3, #26
 8001bf6:	f003 021f 	and.w	r2, r3, #31
 8001bfa:	e01e      	b.n	8001c3a <HAL_ADC_ConfigChannel+0x326>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	2102      	movs	r1, #2
 8001c02:	4618      	mov	r0, r3
 8001c04:	f7fe ffbe 	bl	8000b84 <LL_ADC_GetOffsetChannel>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001c12:	fa93 f3a3 	rbit	r3, r3
 8001c16:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8001c1a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001c1e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8001c22:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d101      	bne.n	8001c2e <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8001c2a:	2320      	movs	r3, #32
 8001c2c:	e004      	b.n	8001c38 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8001c2e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001c32:	fab3 f383 	clz	r3, r3
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d105      	bne.n	8001c52 <HAL_ADC_ConfigChannel+0x33e>
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	0e9b      	lsrs	r3, r3, #26
 8001c4c:	f003 031f 	and.w	r3, r3, #31
 8001c50:	e016      	b.n	8001c80 <HAL_ADC_ConfigChannel+0x36c>
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c5a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001c5e:	fa93 f3a3 	rbit	r3, r3
 8001c62:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8001c64:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001c66:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8001c6a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d101      	bne.n	8001c76 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8001c72:	2320      	movs	r3, #32
 8001c74:	e004      	b.n	8001c80 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8001c76:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001c7a:	fab3 f383 	clz	r3, r3
 8001c7e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001c80:	429a      	cmp	r2, r3
 8001c82:	d106      	bne.n	8001c92 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	2102      	movs	r1, #2
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f7fe ff8f 	bl	8000bb0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	2103      	movs	r1, #3
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f7fe ff73 	bl	8000b84 <LL_ADC_GetOffsetChannel>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d10a      	bne.n	8001cbe <HAL_ADC_ConfigChannel+0x3aa>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	2103      	movs	r1, #3
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f7fe ff68 	bl	8000b84 <LL_ADC_GetOffsetChannel>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	0e9b      	lsrs	r3, r3, #26
 8001cb8:	f003 021f 	and.w	r2, r3, #31
 8001cbc:	e017      	b.n	8001cee <HAL_ADC_ConfigChannel+0x3da>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	2103      	movs	r1, #3
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f7fe ff5d 	bl	8000b84 <LL_ADC_GetOffsetChannel>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001cd0:	fa93 f3a3 	rbit	r3, r3
 8001cd4:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8001cd6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001cd8:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8001cda:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d101      	bne.n	8001ce4 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8001ce0:	2320      	movs	r3, #32
 8001ce2:	e003      	b.n	8001cec <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8001ce4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001ce6:	fab3 f383 	clz	r3, r3
 8001cea:	b2db      	uxtb	r3, r3
 8001cec:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d105      	bne.n	8001d06 <HAL_ADC_ConfigChannel+0x3f2>
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	0e9b      	lsrs	r3, r3, #26
 8001d00:	f003 031f 	and.w	r3, r3, #31
 8001d04:	e011      	b.n	8001d2a <HAL_ADC_ConfigChannel+0x416>
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d0c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001d0e:	fa93 f3a3 	rbit	r3, r3
 8001d12:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8001d14:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001d16:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8001d18:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d101      	bne.n	8001d22 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8001d1e:	2320      	movs	r3, #32
 8001d20:	e003      	b.n	8001d2a <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8001d22:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001d24:	fab3 f383 	clz	r3, r3
 8001d28:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001d2a:	429a      	cmp	r2, r3
 8001d2c:	d106      	bne.n	8001d3c <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	2200      	movs	r2, #0
 8001d34:	2103      	movs	r1, #3
 8001d36:	4618      	mov	r0, r3
 8001d38:	f7fe ff3a 	bl	8000bb0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4618      	mov	r0, r3
 8001d42:	f7ff f8f4 	bl	8000f2e <LL_ADC_IsEnabled>
 8001d46:	4603      	mov	r3, r0
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	f040 813d 	bne.w	8001fc8 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6818      	ldr	r0, [r3, #0]
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	6819      	ldr	r1, [r3, #0]
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	68db      	ldr	r3, [r3, #12]
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	f7ff f80a 	bl	8000d74 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	4aa2      	ldr	r2, [pc, #648]	@ (8001ff0 <HAL_ADC_ConfigChannel+0x6dc>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	f040 812e 	bne.w	8001fc8 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d10b      	bne.n	8001d94 <HAL_ADC_ConfigChannel+0x480>
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	0e9b      	lsrs	r3, r3, #26
 8001d82:	3301      	adds	r3, #1
 8001d84:	f003 031f 	and.w	r3, r3, #31
 8001d88:	2b09      	cmp	r3, #9
 8001d8a:	bf94      	ite	ls
 8001d8c:	2301      	movls	r3, #1
 8001d8e:	2300      	movhi	r3, #0
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	e019      	b.n	8001dc8 <HAL_ADC_ConfigChannel+0x4b4>
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d9a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001d9c:	fa93 f3a3 	rbit	r3, r3
 8001da0:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8001da2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001da4:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8001da6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d101      	bne.n	8001db0 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8001dac:	2320      	movs	r3, #32
 8001dae:	e003      	b.n	8001db8 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8001db0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001db2:	fab3 f383 	clz	r3, r3
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	3301      	adds	r3, #1
 8001dba:	f003 031f 	and.w	r3, r3, #31
 8001dbe:	2b09      	cmp	r3, #9
 8001dc0:	bf94      	ite	ls
 8001dc2:	2301      	movls	r3, #1
 8001dc4:	2300      	movhi	r3, #0
 8001dc6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d079      	beq.n	8001ec0 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d107      	bne.n	8001de8 <HAL_ADC_ConfigChannel+0x4d4>
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	0e9b      	lsrs	r3, r3, #26
 8001dde:	3301      	adds	r3, #1
 8001de0:	069b      	lsls	r3, r3, #26
 8001de2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001de6:	e015      	b.n	8001e14 <HAL_ADC_ConfigChannel+0x500>
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001df0:	fa93 f3a3 	rbit	r3, r3
 8001df4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8001df6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001df8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8001dfa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d101      	bne.n	8001e04 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8001e00:	2320      	movs	r3, #32
 8001e02:	e003      	b.n	8001e0c <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8001e04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e06:	fab3 f383 	clz	r3, r3
 8001e0a:	b2db      	uxtb	r3, r3
 8001e0c:	3301      	adds	r3, #1
 8001e0e:	069b      	lsls	r3, r3, #26
 8001e10:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d109      	bne.n	8001e34 <HAL_ADC_ConfigChannel+0x520>
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	0e9b      	lsrs	r3, r3, #26
 8001e26:	3301      	adds	r3, #1
 8001e28:	f003 031f 	and.w	r3, r3, #31
 8001e2c:	2101      	movs	r1, #1
 8001e2e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e32:	e017      	b.n	8001e64 <HAL_ADC_ConfigChannel+0x550>
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e3a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001e3c:	fa93 f3a3 	rbit	r3, r3
 8001e40:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8001e42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001e44:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8001e46:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d101      	bne.n	8001e50 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8001e4c:	2320      	movs	r3, #32
 8001e4e:	e003      	b.n	8001e58 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8001e50:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001e52:	fab3 f383 	clz	r3, r3
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	3301      	adds	r3, #1
 8001e5a:	f003 031f 	and.w	r3, r3, #31
 8001e5e:	2101      	movs	r1, #1
 8001e60:	fa01 f303 	lsl.w	r3, r1, r3
 8001e64:	ea42 0103 	orr.w	r1, r2, r3
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d10a      	bne.n	8001e8a <HAL_ADC_ConfigChannel+0x576>
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	0e9b      	lsrs	r3, r3, #26
 8001e7a:	3301      	adds	r3, #1
 8001e7c:	f003 021f 	and.w	r2, r3, #31
 8001e80:	4613      	mov	r3, r2
 8001e82:	005b      	lsls	r3, r3, #1
 8001e84:	4413      	add	r3, r2
 8001e86:	051b      	lsls	r3, r3, #20
 8001e88:	e018      	b.n	8001ebc <HAL_ADC_ConfigChannel+0x5a8>
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e92:	fa93 f3a3 	rbit	r3, r3
 8001e96:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8001e98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8001e9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d101      	bne.n	8001ea6 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8001ea2:	2320      	movs	r3, #32
 8001ea4:	e003      	b.n	8001eae <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8001ea6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001ea8:	fab3 f383 	clz	r3, r3
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	3301      	adds	r3, #1
 8001eb0:	f003 021f 	and.w	r2, r3, #31
 8001eb4:	4613      	mov	r3, r2
 8001eb6:	005b      	lsls	r3, r3, #1
 8001eb8:	4413      	add	r3, r2
 8001eba:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ebc:	430b      	orrs	r3, r1
 8001ebe:	e07e      	b.n	8001fbe <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d107      	bne.n	8001edc <HAL_ADC_ConfigChannel+0x5c8>
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	0e9b      	lsrs	r3, r3, #26
 8001ed2:	3301      	adds	r3, #1
 8001ed4:	069b      	lsls	r3, r3, #26
 8001ed6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001eda:	e015      	b.n	8001f08 <HAL_ADC_ConfigChannel+0x5f4>
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ee2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ee4:	fa93 f3a3 	rbit	r3, r3
 8001ee8:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8001eea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001eec:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8001eee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d101      	bne.n	8001ef8 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8001ef4:	2320      	movs	r3, #32
 8001ef6:	e003      	b.n	8001f00 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8001ef8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001efa:	fab3 f383 	clz	r3, r3
 8001efe:	b2db      	uxtb	r3, r3
 8001f00:	3301      	adds	r3, #1
 8001f02:	069b      	lsls	r3, r3, #26
 8001f04:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d109      	bne.n	8001f28 <HAL_ADC_ConfigChannel+0x614>
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	0e9b      	lsrs	r3, r3, #26
 8001f1a:	3301      	adds	r3, #1
 8001f1c:	f003 031f 	and.w	r3, r3, #31
 8001f20:	2101      	movs	r1, #1
 8001f22:	fa01 f303 	lsl.w	r3, r1, r3
 8001f26:	e017      	b.n	8001f58 <HAL_ADC_ConfigChannel+0x644>
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f2e:	6a3b      	ldr	r3, [r7, #32]
 8001f30:	fa93 f3a3 	rbit	r3, r3
 8001f34:	61fb      	str	r3, [r7, #28]
  return result;
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8001f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d101      	bne.n	8001f44 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8001f40:	2320      	movs	r3, #32
 8001f42:	e003      	b.n	8001f4c <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8001f44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f46:	fab3 f383 	clz	r3, r3
 8001f4a:	b2db      	uxtb	r3, r3
 8001f4c:	3301      	adds	r3, #1
 8001f4e:	f003 031f 	and.w	r3, r3, #31
 8001f52:	2101      	movs	r1, #1
 8001f54:	fa01 f303 	lsl.w	r3, r1, r3
 8001f58:	ea42 0103 	orr.w	r1, r2, r3
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d10d      	bne.n	8001f84 <HAL_ADC_ConfigChannel+0x670>
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	0e9b      	lsrs	r3, r3, #26
 8001f6e:	3301      	adds	r3, #1
 8001f70:	f003 021f 	and.w	r2, r3, #31
 8001f74:	4613      	mov	r3, r2
 8001f76:	005b      	lsls	r3, r3, #1
 8001f78:	4413      	add	r3, r2
 8001f7a:	3b1e      	subs	r3, #30
 8001f7c:	051b      	lsls	r3, r3, #20
 8001f7e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001f82:	e01b      	b.n	8001fbc <HAL_ADC_ConfigChannel+0x6a8>
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	fa93 f3a3 	rbit	r3, r3
 8001f90:	613b      	str	r3, [r7, #16]
  return result;
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001f96:	69bb      	ldr	r3, [r7, #24]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d101      	bne.n	8001fa0 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8001f9c:	2320      	movs	r3, #32
 8001f9e:	e003      	b.n	8001fa8 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8001fa0:	69bb      	ldr	r3, [r7, #24]
 8001fa2:	fab3 f383 	clz	r3, r3
 8001fa6:	b2db      	uxtb	r3, r3
 8001fa8:	3301      	adds	r3, #1
 8001faa:	f003 021f 	and.w	r2, r3, #31
 8001fae:	4613      	mov	r3, r2
 8001fb0:	005b      	lsls	r3, r3, #1
 8001fb2:	4413      	add	r3, r2
 8001fb4:	3b1e      	subs	r3, #30
 8001fb6:	051b      	lsls	r3, r3, #20
 8001fb8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001fbc:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8001fbe:	683a      	ldr	r2, [r7, #0]
 8001fc0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	f7fe feaa 	bl	8000d1c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	4b09      	ldr	r3, [pc, #36]	@ (8001ff4 <HAL_ADC_ConfigChannel+0x6e0>)
 8001fce:	4013      	ands	r3, r2
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	f000 80be 	beq.w	8002152 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001fde:	d004      	beq.n	8001fea <HAL_ADC_ConfigChannel+0x6d6>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a04      	ldr	r2, [pc, #16]	@ (8001ff8 <HAL_ADC_ConfigChannel+0x6e4>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d10a      	bne.n	8002000 <HAL_ADC_ConfigChannel+0x6ec>
 8001fea:	4b04      	ldr	r3, [pc, #16]	@ (8001ffc <HAL_ADC_ConfigChannel+0x6e8>)
 8001fec:	e009      	b.n	8002002 <HAL_ADC_ConfigChannel+0x6ee>
 8001fee:	bf00      	nop
 8001ff0:	407f0000 	.word	0x407f0000
 8001ff4:	80080000 	.word	0x80080000
 8001ff8:	50000100 	.word	0x50000100
 8001ffc:	50000300 	.word	0x50000300
 8002000:	4b59      	ldr	r3, [pc, #356]	@ (8002168 <HAL_ADC_ConfigChannel+0x854>)
 8002002:	4618      	mov	r0, r3
 8002004:	f7fe fd8c 	bl	8000b20 <LL_ADC_GetCommonPathInternalCh>
 8002008:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a56      	ldr	r2, [pc, #344]	@ (800216c <HAL_ADC_ConfigChannel+0x858>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d004      	beq.n	8002020 <HAL_ADC_ConfigChannel+0x70c>
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a55      	ldr	r2, [pc, #340]	@ (8002170 <HAL_ADC_ConfigChannel+0x85c>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d13a      	bne.n	8002096 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002020:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002024:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002028:	2b00      	cmp	r3, #0
 800202a:	d134      	bne.n	8002096 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002034:	d005      	beq.n	8002042 <HAL_ADC_ConfigChannel+0x72e>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a4e      	ldr	r2, [pc, #312]	@ (8002174 <HAL_ADC_ConfigChannel+0x860>)
 800203c:	4293      	cmp	r3, r2
 800203e:	f040 8085 	bne.w	800214c <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800204a:	d004      	beq.n	8002056 <HAL_ADC_ConfigChannel+0x742>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a49      	ldr	r2, [pc, #292]	@ (8002178 <HAL_ADC_ConfigChannel+0x864>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d101      	bne.n	800205a <HAL_ADC_ConfigChannel+0x746>
 8002056:	4a49      	ldr	r2, [pc, #292]	@ (800217c <HAL_ADC_ConfigChannel+0x868>)
 8002058:	e000      	b.n	800205c <HAL_ADC_ConfigChannel+0x748>
 800205a:	4a43      	ldr	r2, [pc, #268]	@ (8002168 <HAL_ADC_ConfigChannel+0x854>)
 800205c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002060:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002064:	4619      	mov	r1, r3
 8002066:	4610      	mov	r0, r2
 8002068:	f7fe fd47 	bl	8000afa <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800206c:	4b44      	ldr	r3, [pc, #272]	@ (8002180 <HAL_ADC_ConfigChannel+0x86c>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	099b      	lsrs	r3, r3, #6
 8002072:	4a44      	ldr	r2, [pc, #272]	@ (8002184 <HAL_ADC_ConfigChannel+0x870>)
 8002074:	fba2 2303 	umull	r2, r3, r2, r3
 8002078:	099b      	lsrs	r3, r3, #6
 800207a:	1c5a      	adds	r2, r3, #1
 800207c:	4613      	mov	r3, r2
 800207e:	005b      	lsls	r3, r3, #1
 8002080:	4413      	add	r3, r2
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002086:	e002      	b.n	800208e <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	3b01      	subs	r3, #1
 800208c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d1f9      	bne.n	8002088 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002094:	e05a      	b.n	800214c <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a3b      	ldr	r2, [pc, #236]	@ (8002188 <HAL_ADC_ConfigChannel+0x874>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d125      	bne.n	80020ec <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80020a0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80020a4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d11f      	bne.n	80020ec <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a31      	ldr	r2, [pc, #196]	@ (8002178 <HAL_ADC_ConfigChannel+0x864>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d104      	bne.n	80020c0 <HAL_ADC_ConfigChannel+0x7ac>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a34      	ldr	r2, [pc, #208]	@ (800218c <HAL_ADC_ConfigChannel+0x878>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d047      	beq.n	8002150 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80020c8:	d004      	beq.n	80020d4 <HAL_ADC_ConfigChannel+0x7c0>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a2a      	ldr	r2, [pc, #168]	@ (8002178 <HAL_ADC_ConfigChannel+0x864>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d101      	bne.n	80020d8 <HAL_ADC_ConfigChannel+0x7c4>
 80020d4:	4a29      	ldr	r2, [pc, #164]	@ (800217c <HAL_ADC_ConfigChannel+0x868>)
 80020d6:	e000      	b.n	80020da <HAL_ADC_ConfigChannel+0x7c6>
 80020d8:	4a23      	ldr	r2, [pc, #140]	@ (8002168 <HAL_ADC_ConfigChannel+0x854>)
 80020da:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80020de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80020e2:	4619      	mov	r1, r3
 80020e4:	4610      	mov	r0, r2
 80020e6:	f7fe fd08 	bl	8000afa <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80020ea:	e031      	b.n	8002150 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a27      	ldr	r2, [pc, #156]	@ (8002190 <HAL_ADC_ConfigChannel+0x87c>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d12d      	bne.n	8002152 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80020f6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80020fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d127      	bne.n	8002152 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a1c      	ldr	r2, [pc, #112]	@ (8002178 <HAL_ADC_ConfigChannel+0x864>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d022      	beq.n	8002152 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002114:	d004      	beq.n	8002120 <HAL_ADC_ConfigChannel+0x80c>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a17      	ldr	r2, [pc, #92]	@ (8002178 <HAL_ADC_ConfigChannel+0x864>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d101      	bne.n	8002124 <HAL_ADC_ConfigChannel+0x810>
 8002120:	4a16      	ldr	r2, [pc, #88]	@ (800217c <HAL_ADC_ConfigChannel+0x868>)
 8002122:	e000      	b.n	8002126 <HAL_ADC_ConfigChannel+0x812>
 8002124:	4a10      	ldr	r2, [pc, #64]	@ (8002168 <HAL_ADC_ConfigChannel+0x854>)
 8002126:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800212a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800212e:	4619      	mov	r1, r3
 8002130:	4610      	mov	r0, r2
 8002132:	f7fe fce2 	bl	8000afa <LL_ADC_SetCommonPathInternalCh>
 8002136:	e00c      	b.n	8002152 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800213c:	f043 0220 	orr.w	r2, r3, #32
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800214a:	e002      	b.n	8002152 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800214c:	bf00      	nop
 800214e:	e000      	b.n	8002152 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002150:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2200      	movs	r2, #0
 8002156:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800215a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800215e:	4618      	mov	r0, r3
 8002160:	37d8      	adds	r7, #216	@ 0xd8
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	50000700 	.word	0x50000700
 800216c:	c3210000 	.word	0xc3210000
 8002170:	90c00010 	.word	0x90c00010
 8002174:	50000600 	.word	0x50000600
 8002178:	50000100 	.word	0x50000100
 800217c:	50000300 	.word	0x50000300
 8002180:	20000010 	.word	0x20000010
 8002184:	053e2d63 	.word	0x053e2d63
 8002188:	c7520000 	.word	0xc7520000
 800218c:	50000500 	.word	0x50000500
 8002190:	cb840000 	.word	0xcb840000

08002194 <HAL_ADC_AnalogWDGConfig>:
  * @param hadc ADC handle
  * @param pAnalogWDGConfig Structure of ADC analog watchdog configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef *hadc, const ADC_AnalogWDGConfTypeDef *pAnalogWDGConfig)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b08e      	sub	sp, #56	@ 0x38
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
 800219c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800219e:	2300      	movs	r3, #0
 80021a0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  assert_param(IS_ADC_ANALOG_WATCHDOG_NUMBER(pAnalogWDGConfig->WatchdogNumber));
  assert_param(IS_ADC_ANALOG_WATCHDOG_MODE(pAnalogWDGConfig->WatchdogMode));
  assert_param(IS_ADC_ANALOG_WATCHDOG_FILTERING_MODE(pAnalogWDGConfig->FilteringConfig));
  assert_param(IS_FUNCTIONAL_STATE(pAnalogWDGConfig->ITMode));

  if ((pAnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80021ac:	d003      	beq.n	80021b6 <HAL_ADC_AnalogWDGConfig+0x22>
      (pAnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_INJEC)   ||
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	685b      	ldr	r3, [r3, #4]
  if ((pAnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 80021b2:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
    assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), pAnalogWDGConfig->HighThreshold));
    assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), pAnalogWDGConfig->LowThreshold));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d101      	bne.n	80021c4 <HAL_ADC_AnalogWDGConfig+0x30>
 80021c0:	2302      	movs	r3, #2
 80021c2:	e1ea      	b.n	800259a <HAL_ADC_AnalogWDGConfig+0x406>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2201      	movs	r2, #1
 80021c8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on ADC groups regular and injected:                  */
  /*  - Analog watchdog channels                                              */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4618      	mov	r0, r3
 80021d2:	f7fe febf 	bl	8000f54 <LL_ADC_REG_IsConversionOngoing>
 80021d6:	62b8      	str	r0, [r7, #40]	@ 0x28
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4618      	mov	r0, r3
 80021de:	f7fe fecc 	bl	8000f7a <LL_ADC_INJ_IsConversionOngoing>
 80021e2:	6278      	str	r0, [r7, #36]	@ 0x24
  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80021e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	f040 8175 	bne.w	80024d6 <HAL_ADC_AnalogWDGConfig+0x342>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80021ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	f040 8171 	bne.w	80024d6 <HAL_ADC_AnalogWDGConfig+0x342>
     )
  {
    /* Analog watchdog configuration */
    if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a90      	ldr	r2, [pc, #576]	@ (800243c <HAL_ADC_AnalogWDGConfig+0x2a8>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	f040 808d 	bne.w	800231a <HAL_ADC_AnalogWDGConfig+0x186>
    {
      /* Configuration of analog watchdog:                                    */
      /*  - Set the analog watchdog enable mode: one or overall group of      */
      /*    channels, on groups regular and-or injected.                      */
      switch (pAnalogWDGConfig->WatchdogMode)
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	f1b3 7fe0 	cmp.w	r3, #29360128	@ 0x1c00000
 8002208:	d034      	beq.n	8002274 <HAL_ADC_AnalogWDGConfig+0xe0>
 800220a:	f1b3 7fe0 	cmp.w	r3, #29360128	@ 0x1c00000
 800220e:	d856      	bhi.n	80022be <HAL_ADC_AnalogWDGConfig+0x12a>
 8002210:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002214:	d04b      	beq.n	80022ae <HAL_ADC_AnalogWDGConfig+0x11a>
 8002216:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800221a:	d850      	bhi.n	80022be <HAL_ADC_AnalogWDGConfig+0x12a>
 800221c:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8002220:	d01b      	beq.n	800225a <HAL_ADC_AnalogWDGConfig+0xc6>
 8002222:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8002226:	d84a      	bhi.n	80022be <HAL_ADC_AnalogWDGConfig+0x12a>
 8002228:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800222c:	d037      	beq.n	800229e <HAL_ADC_AnalogWDGConfig+0x10a>
 800222e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002232:	d844      	bhi.n	80022be <HAL_ADC_AnalogWDGConfig+0x12a>
 8002234:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002238:	d029      	beq.n	800228e <HAL_ADC_AnalogWDGConfig+0xfa>
 800223a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800223e:	d13e      	bne.n	80022be <HAL_ADC_AnalogWDGConfig+0x12a>
      {
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1,
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6818      	ldr	r0, [r3, #0]
                                          __LL_ADC_ANALOGWD_CHANNEL_GROUP(pAnalogWDGConfig->Channel,
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	f023 737c 	bic.w	r3, r3, #66060288	@ 0x3f00000
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1,
 800224c:	f443 0340 	orr.w	r3, r3, #12582912	@ 0xc00000
 8002250:	461a      	mov	r2, r3
 8002252:	497a      	ldr	r1, [pc, #488]	@ (800243c <HAL_ADC_AnalogWDGConfig+0x2a8>)
 8002254:	f7fe fdb2 	bl	8000dbc <LL_ADC_SetAnalogWDMonitChannels>
                                                                          LL_ADC_GROUP_REGULAR));
          break;
 8002258:	e039      	b.n	80022ce <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_SINGLE_INJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1,
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6818      	ldr	r0, [r3, #0]
                                          __LL_ADC_ANALOGWD_CHANNEL_GROUP(pAnalogWDGConfig->Channel,
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	f023 737c 	bic.w	r3, r3, #66060288	@ 0x3f00000
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1,
 8002266:	f043 73a0 	orr.w	r3, r3, #20971520	@ 0x1400000
 800226a:	461a      	mov	r2, r3
 800226c:	4973      	ldr	r1, [pc, #460]	@ (800243c <HAL_ADC_AnalogWDGConfig+0x2a8>)
 800226e:	f7fe fda5 	bl	8000dbc <LL_ADC_SetAnalogWDMonitChannels>
                                                                          LL_ADC_GROUP_INJECTED));
          break;
 8002272:	e02c      	b.n	80022ce <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_SINGLE_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1,
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6818      	ldr	r0, [r3, #0]
                                          __LL_ADC_ANALOGWD_CHANNEL_GROUP(pAnalogWDGConfig->Channel,
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	f023 737c 	bic.w	r3, r3, #66060288	@ 0x3f00000
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1,
 8002280:	f043 73e0 	orr.w	r3, r3, #29360128	@ 0x1c00000
 8002284:	461a      	mov	r2, r3
 8002286:	496d      	ldr	r1, [pc, #436]	@ (800243c <HAL_ADC_AnalogWDGConfig+0x2a8>)
 8002288:	f7fe fd98 	bl	8000dbc <LL_ADC_SetAnalogWDMonitChannels>
                                                                          LL_ADC_GROUP_REGULAR_INJECTED));
          break;
 800228c:	e01f      	b.n	80022ce <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_ALL_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a6b      	ldr	r2, [pc, #428]	@ (8002440 <HAL_ADC_AnalogWDGConfig+0x2ac>)
 8002294:	4969      	ldr	r1, [pc, #420]	@ (800243c <HAL_ADC_AnalogWDGConfig+0x2a8>)
 8002296:	4618      	mov	r0, r3
 8002298:	f7fe fd90 	bl	8000dbc <LL_ADC_SetAnalogWDMonitChannels>
          break;
 800229c:	e017      	b.n	80022ce <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_ALL_INJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_INJ);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a68      	ldr	r2, [pc, #416]	@ (8002444 <HAL_ADC_AnalogWDGConfig+0x2b0>)
 80022a4:	4965      	ldr	r1, [pc, #404]	@ (800243c <HAL_ADC_AnalogWDGConfig+0x2a8>)
 80022a6:	4618      	mov	r0, r3
 80022a8:	f7fe fd88 	bl	8000dbc <LL_ADC_SetAnalogWDMonitChannels>
          break;
 80022ac:	e00f      	b.n	80022ce <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_ALL_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG_INJ);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a65      	ldr	r2, [pc, #404]	@ (8002448 <HAL_ADC_AnalogWDGConfig+0x2b4>)
 80022b4:	4961      	ldr	r1, [pc, #388]	@ (800243c <HAL_ADC_AnalogWDGConfig+0x2a8>)
 80022b6:	4618      	mov	r0, r3
 80022b8:	f7fe fd80 	bl	8000dbc <LL_ADC_SetAnalogWDMonitChannels>
          break;
 80022bc:	e007      	b.n	80022ce <HAL_ADC_AnalogWDGConfig+0x13a>

        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_DISABLE);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	2200      	movs	r2, #0
 80022c4:	495d      	ldr	r1, [pc, #372]	@ (800243c <HAL_ADC_AnalogWDGConfig+0x2a8>)
 80022c6:	4618      	mov	r0, r3
 80022c8:	f7fe fd78 	bl	8000dbc <LL_ADC_SetAnalogWDMonitChannels>
          break;
 80022cc:	bf00      	nop
      }

      /* Set the filtering configuration */
      MODIFY_REG(hadc->Instance->TR1,
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	6a1b      	ldr	r3, [r3, #32]
 80022d4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	699a      	ldr	r2, [r3, #24]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	430a      	orrs	r2, r1
 80022e2:	621a      	str	r2, [r3, #32]
                 ADC_TR1_AWDFILT,
                 pAnalogWDGConfig->FilteringConfig);

      /* Update state, clear previous result related to AWD1 */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022e8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Clear flag ADC analog watchdog */
      /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
      /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
      /* (in case left enabled by previous ADC operations).                 */
      LL_ADC_ClearFlag_AWD1(hadc->Instance);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4618      	mov	r0, r3
 80022f6:	f7fe fe53 	bl	8000fa0 <LL_ADC_ClearFlag_AWD1>

      /* Configure ADC analog watchdog interrupt */
      if (pAnalogWDGConfig->ITMode == ENABLE)
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	7b1b      	ldrb	r3, [r3, #12]
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d105      	bne.n	800230e <HAL_ADC_AnalogWDGConfig+0x17a>
      {
        LL_ADC_EnableIT_AWD1(hadc->Instance);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4618      	mov	r0, r3
 8002308:	f7fe fe73 	bl	8000ff2 <LL_ADC_EnableIT_AWD1>
 800230c:	e0e3      	b.n	80024d6 <HAL_ADC_AnalogWDGConfig+0x342>
      }
      else
      {
        LL_ADC_DisableIT_AWD1(hadc->Instance);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4618      	mov	r0, r3
 8002314:	f7fe fe9d 	bl	8001052 <LL_ADC_DisableIT_AWD1>
 8002318:	e0dd      	b.n	80024d6 <HAL_ADC_AnalogWDGConfig+0x342>
      }
    }
    /* Case of ADC_ANALOGWATCHDOG_2 or ADC_ANALOGWATCHDOG_3 */
    else
    {
      switch (pAnalogWDGConfig->WatchdogMode)
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	f1b3 7fe0 	cmp.w	r3, #29360128	@ 0x1c00000
 8002322:	d01d      	beq.n	8002360 <HAL_ADC_AnalogWDGConfig+0x1cc>
 8002324:	f1b3 7fe0 	cmp.w	r3, #29360128	@ 0x1c00000
 8002328:	f200 8092 	bhi.w	8002450 <HAL_ADC_AnalogWDGConfig+0x2bc>
 800232c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002330:	d07b      	beq.n	800242a <HAL_ADC_AnalogWDGConfig+0x296>
 8002332:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002336:	f200 808b 	bhi.w	8002450 <HAL_ADC_AnalogWDGConfig+0x2bc>
 800233a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800233e:	d00f      	beq.n	8002360 <HAL_ADC_AnalogWDGConfig+0x1cc>
 8002340:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8002344:	f200 8084 	bhi.w	8002450 <HAL_ADC_AnalogWDGConfig+0x2bc>
 8002348:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800234c:	d06d      	beq.n	800242a <HAL_ADC_AnalogWDGConfig+0x296>
 800234e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002352:	d87d      	bhi.n	8002450 <HAL_ADC_AnalogWDGConfig+0x2bc>
 8002354:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002358:	d067      	beq.n	800242a <HAL_ADC_AnalogWDGConfig+0x296>
 800235a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800235e:	d177      	bne.n	8002450 <HAL_ADC_AnalogWDGConfig+0x2bc>
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
        case ADC_ANALOGWATCHDOG_SINGLE_INJEC:
        case ADC_ANALOGWATCHDOG_SINGLE_REGINJEC:
          /* Update AWD by bitfield to keep the possibility to monitor        */
          /* several channels by successive calls of this function.           */
          if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a39      	ldr	r2, [pc, #228]	@ (800244c <HAL_ADC_AnalogWDGConfig+0x2b8>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d12f      	bne.n	80023ca <HAL_ADC_AnalogWDGConfig+0x236>
          {
            SET_BIT(hadc->Instance->AWD2CR,
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002372:	2b00      	cmp	r3, #0
 8002374:	d108      	bne.n	8002388 <HAL_ADC_AnalogWDGConfig+0x1f4>
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	0e9b      	lsrs	r3, r3, #26
 800237c:	f003 031f 	and.w	r3, r3, #31
 8002380:	2201      	movs	r2, #1
 8002382:	fa02 f303 	lsl.w	r3, r2, r3
 8002386:	e016      	b.n	80023b6 <HAL_ADC_AnalogWDGConfig+0x222>
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800238e:	69fb      	ldr	r3, [r7, #28]
 8002390:	fa93 f3a3 	rbit	r3, r3
 8002394:	61bb      	str	r3, [r7, #24]
  return result;
 8002396:	69bb      	ldr	r3, [r7, #24]
 8002398:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800239a:	6a3b      	ldr	r3, [r7, #32]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d101      	bne.n	80023a4 <HAL_ADC_AnalogWDGConfig+0x210>
    return 32U;
 80023a0:	2320      	movs	r3, #32
 80023a2:	e003      	b.n	80023ac <HAL_ADC_AnalogWDGConfig+0x218>
  return __builtin_clz(value);
 80023a4:	6a3b      	ldr	r3, [r7, #32]
 80023a6:	fab3 f383 	clz	r3, r3
 80023aa:	b2db      	uxtb	r3, r3
 80023ac:	f003 031f 	and.w	r3, r3, #31
 80023b0:	2201      	movs	r2, #1
 80023b2:	fa02 f303 	lsl.w	r3, r2, r3
 80023b6:	687a      	ldr	r2, [r7, #4]
 80023b8:	6812      	ldr	r2, [r2, #0]
 80023ba:	f8d2 10a0 	ldr.w	r1, [r2, #160]	@ 0xa0
 80023be:	687a      	ldr	r2, [r7, #4]
 80023c0:	6812      	ldr	r2, [r2, #0]
 80023c2:	430b      	orrs	r3, r1
 80023c4:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
          else
          {
            SET_BIT(hadc->Instance->AWD3CR,
                    (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(pAnalogWDGConfig->Channel) & 0x1FUL)));
          }
          break;
 80023c8:	e04b      	b.n	8002462 <HAL_ADC_AnalogWDGConfig+0x2ce>
            SET_BIT(hadc->Instance->AWD3CR,
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d108      	bne.n	80023e8 <HAL_ADC_AnalogWDGConfig+0x254>
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	0e9b      	lsrs	r3, r3, #26
 80023dc:	f003 031f 	and.w	r3, r3, #31
 80023e0:	2201      	movs	r2, #1
 80023e2:	fa02 f303 	lsl.w	r3, r2, r3
 80023e6:	e016      	b.n	8002416 <HAL_ADC_AnalogWDGConfig+0x282>
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	fa93 f3a3 	rbit	r3, r3
 80023f4:	60fb      	str	r3, [r7, #12]
  return result;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d101      	bne.n	8002404 <HAL_ADC_AnalogWDGConfig+0x270>
    return 32U;
 8002400:	2320      	movs	r3, #32
 8002402:	e003      	b.n	800240c <HAL_ADC_AnalogWDGConfig+0x278>
  return __builtin_clz(value);
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	fab3 f383 	clz	r3, r3
 800240a:	b2db      	uxtb	r3, r3
 800240c:	f003 031f 	and.w	r3, r3, #31
 8002410:	2201      	movs	r2, #1
 8002412:	fa02 f303 	lsl.w	r3, r2, r3
 8002416:	687a      	ldr	r2, [r7, #4]
 8002418:	6812      	ldr	r2, [r2, #0]
 800241a:	f8d2 10a4 	ldr.w	r1, [r2, #164]	@ 0xa4
 800241e:	687a      	ldr	r2, [r7, #4]
 8002420:	6812      	ldr	r2, [r2, #0]
 8002422:	430b      	orrs	r3, r1
 8002424:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
          break;
 8002428:	e01b      	b.n	8002462 <HAL_ADC_AnalogWDGConfig+0x2ce>

        case ADC_ANALOGWATCHDOG_ALL_REG:
        case ADC_ANALOGWATCHDOG_ALL_INJEC:
        case ADC_ANALOGWATCHDOG_ALL_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance,
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6818      	ldr	r0, [r3, #0]
                                          pAnalogWDGConfig->WatchdogNumber, LL_ADC_AWD_ALL_CHANNELS_REG_INJ);
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	681b      	ldr	r3, [r3, #0]
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance,
 8002432:	4a05      	ldr	r2, [pc, #20]	@ (8002448 <HAL_ADC_AnalogWDGConfig+0x2b4>)
 8002434:	4619      	mov	r1, r3
 8002436:	f7fe fcc1 	bl	8000dbc <LL_ADC_SetAnalogWDMonitChannels>
          break;
 800243a:	e012      	b.n	8002462 <HAL_ADC_AnalogWDGConfig+0x2ce>
 800243c:	7dc00000 	.word	0x7dc00000
 8002440:	0087ffff 	.word	0x0087ffff
 8002444:	0107ffff 	.word	0x0107ffff
 8002448:	0187ffff 	.word	0x0187ffff
 800244c:	0017ffff 	.word	0x0017ffff

        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, pAnalogWDGConfig->WatchdogNumber, LL_ADC_AWD_DISABLE);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6818      	ldr	r0, [r3, #0]
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	2200      	movs	r2, #0
 800245a:	4619      	mov	r1, r3
 800245c:	f7fe fcae 	bl	8000dbc <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8002460:	bf00      	nop
      }

      if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a4f      	ldr	r2, [pc, #316]	@ (80025a4 <HAL_ADC_AnalogWDGConfig+0x410>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d11a      	bne.n	80024a2 <HAL_ADC_AnalogWDGConfig+0x30e>
      {
        /* Update state, clear previous result related to AWD2 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002470:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	65da      	str	r2, [r3, #92]	@ 0x5c

        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD2(hadc->Instance);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4618      	mov	r0, r3
 800247e:	f7fe fd9c 	bl	8000fba <LL_ADC_ClearFlag_AWD2>

        /* Configure ADC analog watchdog interrupt */
        if (pAnalogWDGConfig->ITMode == ENABLE)
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	7b1b      	ldrb	r3, [r3, #12]
 8002486:	2b01      	cmp	r3, #1
 8002488:	d105      	bne.n	8002496 <HAL_ADC_AnalogWDGConfig+0x302>
        {
          LL_ADC_EnableIT_AWD2(hadc->Instance);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4618      	mov	r0, r3
 8002490:	f7fe fdbf 	bl	8001012 <LL_ADC_EnableIT_AWD2>
 8002494:	e01f      	b.n	80024d6 <HAL_ADC_AnalogWDGConfig+0x342>
        }
        else
        {
          LL_ADC_DisableIT_AWD2(hadc->Instance);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4618      	mov	r0, r3
 800249c:	f7fe fde9 	bl	8001072 <LL_ADC_DisableIT_AWD2>
 80024a0:	e019      	b.n	80024d6 <HAL_ADC_AnalogWDGConfig+0x342>
      }
      /* (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_3) */
      else
      {
        /* Update state, clear previous result related to AWD3 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024a6:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	65da      	str	r2, [r3, #92]	@ 0x5c

        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD3(hadc->Instance);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4618      	mov	r0, r3
 80024b4:	f7fe fd8f 	bl	8000fd6 <LL_ADC_ClearFlag_AWD3>

        /* Configure ADC analog watchdog interrupt */
        if (pAnalogWDGConfig->ITMode == ENABLE)
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	7b1b      	ldrb	r3, [r3, #12]
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d105      	bne.n	80024cc <HAL_ADC_AnalogWDGConfig+0x338>
        {
          LL_ADC_EnableIT_AWD3(hadc->Instance);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4618      	mov	r0, r3
 80024c6:	f7fe fdb4 	bl	8001032 <LL_ADC_EnableIT_AWD3>
 80024ca:	e004      	b.n	80024d6 <HAL_ADC_AnalogWDGConfig+0x342>
        }
        else
        {
          LL_ADC_DisableIT_AWD3(hadc->Instance);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4618      	mov	r0, r3
 80024d2:	f7fe fdde 	bl	8001092 <LL_ADC_DisableIT_AWD3>
    }

  }

  /* Analog watchdog thresholds configuration */
  if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a33      	ldr	r2, [pc, #204]	@ (80025a8 <HAL_ADC_AnalogWDGConfig+0x414>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d118      	bne.n	8002512 <HAL_ADC_AnalogWDGConfig+0x37e>
  {
    /* Shift the offset with respect to the selected ADC resolution:        */
    /* Thresholds have to be left-aligned on bit 11, the LSB (right bits)   */
    /* are set to 0.                                                        */
    tmp_awd_high_threshold_shifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, pAnalogWDGConfig->HighThreshold);
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	691a      	ldr	r2, [r3, #16]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	68db      	ldr	r3, [r3, #12]
 80024ea:	08db      	lsrs	r3, r3, #3
 80024ec:	f003 0303 	and.w	r3, r3, #3
 80024f0:	005b      	lsls	r3, r3, #1
 80024f2:	fa02 f303 	lsl.w	r3, r2, r3
 80024f6:	637b      	str	r3, [r7, #52]	@ 0x34
    tmp_awd_low_threshold_shifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, pAnalogWDGConfig->LowThreshold);
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	695a      	ldr	r2, [r3, #20]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	68db      	ldr	r3, [r3, #12]
 8002502:	08db      	lsrs	r3, r3, #3
 8002504:	f003 0303 	and.w	r3, r3, #3
 8002508:	005b      	lsls	r3, r3, #1
 800250a:	fa02 f303 	lsl.w	r3, r2, r3
 800250e:	633b      	str	r3, [r7, #48]	@ 0x30
 8002510:	e035      	b.n	800257e <HAL_ADC_AnalogWDGConfig+0x3ea>
  else
  {
    /* Shift the offset with respect to the selected ADC resolution:        */
    /* Thresholds have to be left-aligned on bit 7, the LSB (right bits)    */
    /* are set to 0.                                                        */
    tmp_awd_high_threshold_shifted = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, pAnalogWDGConfig->HighThreshold);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	f003 0318 	and.w	r3, r3, #24
 800251c:	2b18      	cmp	r3, #24
 800251e:	d00f      	beq.n	8002540 <HAL_ADC_AnalogWDGConfig+0x3ac>
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	691a      	ldr	r2, [r3, #16]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	68db      	ldr	r3, [r3, #12]
 800252a:	08db      	lsrs	r3, r3, #3
 800252c:	f003 0303 	and.w	r3, r3, #3
 8002530:	f1c3 0302 	rsb	r3, r3, #2
 8002534:	005b      	lsls	r3, r3, #1
 8002536:	f003 031e 	and.w	r3, r3, #30
 800253a:	fa22 f303 	lsr.w	r3, r2, r3
 800253e:	e002      	b.n	8002546 <HAL_ADC_AnalogWDGConfig+0x3b2>
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	691b      	ldr	r3, [r3, #16]
 8002544:	009b      	lsls	r3, r3, #2
 8002546:	637b      	str	r3, [r7, #52]	@ 0x34
    tmp_awd_low_threshold_shifted  = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, pAnalogWDGConfig->LowThreshold);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	68db      	ldr	r3, [r3, #12]
 800254e:	f003 0318 	and.w	r3, r3, #24
 8002552:	2b18      	cmp	r3, #24
 8002554:	d00f      	beq.n	8002576 <HAL_ADC_AnalogWDGConfig+0x3e2>
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	695a      	ldr	r2, [r3, #20]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	08db      	lsrs	r3, r3, #3
 8002562:	f003 0303 	and.w	r3, r3, #3
 8002566:	f1c3 0302 	rsb	r3, r3, #2
 800256a:	005b      	lsls	r3, r3, #1
 800256c:	f003 031e 	and.w	r3, r3, #30
 8002570:	fa22 f303 	lsr.w	r3, r2, r3
 8002574:	e002      	b.n	800257c <HAL_ADC_AnalogWDGConfig+0x3e8>
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	695b      	ldr	r3, [r3, #20]
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	633b      	str	r3, [r7, #48]	@ 0x30
  }

  /* Set ADC analog watchdog thresholds value of both thresholds high and low */
  LL_ADC_ConfigAnalogWDThresholds(hadc->Instance, pAnalogWDGConfig->WatchdogNumber, tmp_awd_high_threshold_shifted,
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6818      	ldr	r0, [r3, #0]
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	6819      	ldr	r1, [r3, #0]
 8002586:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002588:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800258a:	f7fe fc44 	bl	8000e16 <LL_ADC_ConfigAnalogWDThresholds>
                                  tmp_awd_low_threshold_shifted);

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2200      	movs	r2, #0
 8002592:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002596:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800259a:	4618      	mov	r0, r3
 800259c:	3738      	adds	r7, #56	@ 0x38
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	0017ffff 	.word	0x0017ffff
 80025a8:	7dc00000 	.word	0x7dc00000

080025ac <LL_ADC_IsEnabled>:
{
 80025ac:	b480      	push	{r7}
 80025ae:	b083      	sub	sp, #12
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	f003 0301 	and.w	r3, r3, #1
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d101      	bne.n	80025c4 <LL_ADC_IsEnabled+0x18>
 80025c0:	2301      	movs	r3, #1
 80025c2:	e000      	b.n	80025c6 <LL_ADC_IsEnabled+0x1a>
 80025c4:	2300      	movs	r3, #0
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	370c      	adds	r7, #12
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr

080025d2 <LL_ADC_REG_IsConversionOngoing>:
{
 80025d2:	b480      	push	{r7}
 80025d4:	b083      	sub	sp, #12
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	f003 0304 	and.w	r3, r3, #4
 80025e2:	2b04      	cmp	r3, #4
 80025e4:	d101      	bne.n	80025ea <LL_ADC_REG_IsConversionOngoing+0x18>
 80025e6:	2301      	movs	r3, #1
 80025e8:	e000      	b.n	80025ec <LL_ADC_REG_IsConversionOngoing+0x1a>
 80025ea:	2300      	movs	r3, #0
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	370c      	adds	r7, #12
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr

080025f8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b083      	sub	sp, #12
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002600:	bf00      	nop
 8002602:	370c      	adds	r7, #12
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr

0800260c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 800260c:	b480      	push	{r7}
 800260e:	b083      	sub	sp, #12
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002614:	bf00      	nop
 8002616:	370c      	adds	r7, #12
 8002618:	46bd      	mov	sp, r7
 800261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261e:	4770      	bx	lr

08002620 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002628:	bf00      	nop
 800262a:	370c      	adds	r7, #12
 800262c:	46bd      	mov	sp, r7
 800262e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002632:	4770      	bx	lr

08002634 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002634:	b480      	push	{r7}
 8002636:	b083      	sub	sp, #12
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800263c:	bf00      	nop
 800263e:	370c      	adds	r7, #12
 8002640:	46bd      	mov	sp, r7
 8002642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002646:	4770      	bx	lr

08002648 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002648:	b480      	push	{r7}
 800264a:	b083      	sub	sp, #12
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002650:	bf00      	nop
 8002652:	370c      	adds	r7, #12
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr

0800265c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 800265c:	b590      	push	{r4, r7, lr}
 800265e:	b0a1      	sub	sp, #132	@ 0x84
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
 8002664:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002666:	2300      	movs	r3, #0
 8002668:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002672:	2b01      	cmp	r3, #1
 8002674:	d101      	bne.n	800267a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002676:	2302      	movs	r3, #2
 8002678:	e0e7      	b.n	800284a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2201      	movs	r2, #1
 800267e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002682:	2300      	movs	r3, #0
 8002684:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002686:	2300      	movs	r3, #0
 8002688:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002692:	d102      	bne.n	800269a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002694:	4b6f      	ldr	r3, [pc, #444]	@ (8002854 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002696:	60bb      	str	r3, [r7, #8]
 8002698:	e009      	b.n	80026ae <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a6e      	ldr	r2, [pc, #440]	@ (8002858 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d102      	bne.n	80026aa <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80026a4:	4b6d      	ldr	r3, [pc, #436]	@ (800285c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80026a6:	60bb      	str	r3, [r7, #8]
 80026a8:	e001      	b.n	80026ae <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80026aa:	2300      	movs	r3, #0
 80026ac:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d10b      	bne.n	80026cc <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026b8:	f043 0220 	orr.w	r2, r3, #32
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2200      	movs	r2, #0
 80026c4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	e0be      	b.n	800284a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	4618      	mov	r0, r3
 80026d0:	f7ff ff7f 	bl	80025d2 <LL_ADC_REG_IsConversionOngoing>
 80026d4:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4618      	mov	r0, r3
 80026dc:	f7ff ff79 	bl	80025d2 <LL_ADC_REG_IsConversionOngoing>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	f040 80a0 	bne.w	8002828 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80026e8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	f040 809c 	bne.w	8002828 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80026f8:	d004      	beq.n	8002704 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a55      	ldr	r2, [pc, #340]	@ (8002854 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d101      	bne.n	8002708 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002704:	4b56      	ldr	r3, [pc, #344]	@ (8002860 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8002706:	e000      	b.n	800270a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002708:	4b56      	ldr	r3, [pc, #344]	@ (8002864 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 800270a:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d04b      	beq.n	80027ac <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002714:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	6859      	ldr	r1, [r3, #4]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002726:	035b      	lsls	r3, r3, #13
 8002728:	430b      	orrs	r3, r1
 800272a:	431a      	orrs	r2, r3
 800272c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800272e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002738:	d004      	beq.n	8002744 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a45      	ldr	r2, [pc, #276]	@ (8002854 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d10f      	bne.n	8002764 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8002744:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002748:	f7ff ff30 	bl	80025ac <LL_ADC_IsEnabled>
 800274c:	4604      	mov	r4, r0
 800274e:	4841      	ldr	r0, [pc, #260]	@ (8002854 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002750:	f7ff ff2c 	bl	80025ac <LL_ADC_IsEnabled>
 8002754:	4603      	mov	r3, r0
 8002756:	4323      	orrs	r3, r4
 8002758:	2b00      	cmp	r3, #0
 800275a:	bf0c      	ite	eq
 800275c:	2301      	moveq	r3, #1
 800275e:	2300      	movne	r3, #0
 8002760:	b2db      	uxtb	r3, r3
 8002762:	e012      	b.n	800278a <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8002764:	483c      	ldr	r0, [pc, #240]	@ (8002858 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002766:	f7ff ff21 	bl	80025ac <LL_ADC_IsEnabled>
 800276a:	4604      	mov	r4, r0
 800276c:	483b      	ldr	r0, [pc, #236]	@ (800285c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800276e:	f7ff ff1d 	bl	80025ac <LL_ADC_IsEnabled>
 8002772:	4603      	mov	r3, r0
 8002774:	431c      	orrs	r4, r3
 8002776:	483c      	ldr	r0, [pc, #240]	@ (8002868 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002778:	f7ff ff18 	bl	80025ac <LL_ADC_IsEnabled>
 800277c:	4603      	mov	r3, r0
 800277e:	4323      	orrs	r3, r4
 8002780:	2b00      	cmp	r3, #0
 8002782:	bf0c      	ite	eq
 8002784:	2301      	moveq	r3, #1
 8002786:	2300      	movne	r3, #0
 8002788:	b2db      	uxtb	r3, r3
 800278a:	2b00      	cmp	r3, #0
 800278c:	d056      	beq.n	800283c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800278e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002796:	f023 030f 	bic.w	r3, r3, #15
 800279a:	683a      	ldr	r2, [r7, #0]
 800279c:	6811      	ldr	r1, [r2, #0]
 800279e:	683a      	ldr	r2, [r7, #0]
 80027a0:	6892      	ldr	r2, [r2, #8]
 80027a2:	430a      	orrs	r2, r1
 80027a4:	431a      	orrs	r2, r3
 80027a6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80027a8:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80027aa:	e047      	b.n	800283c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80027ac:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80027b4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80027b6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80027c0:	d004      	beq.n	80027cc <HAL_ADCEx_MultiModeConfigChannel+0x170>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a23      	ldr	r2, [pc, #140]	@ (8002854 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d10f      	bne.n	80027ec <HAL_ADCEx_MultiModeConfigChannel+0x190>
 80027cc:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80027d0:	f7ff feec 	bl	80025ac <LL_ADC_IsEnabled>
 80027d4:	4604      	mov	r4, r0
 80027d6:	481f      	ldr	r0, [pc, #124]	@ (8002854 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80027d8:	f7ff fee8 	bl	80025ac <LL_ADC_IsEnabled>
 80027dc:	4603      	mov	r3, r0
 80027de:	4323      	orrs	r3, r4
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	bf0c      	ite	eq
 80027e4:	2301      	moveq	r3, #1
 80027e6:	2300      	movne	r3, #0
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	e012      	b.n	8002812 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80027ec:	481a      	ldr	r0, [pc, #104]	@ (8002858 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80027ee:	f7ff fedd 	bl	80025ac <LL_ADC_IsEnabled>
 80027f2:	4604      	mov	r4, r0
 80027f4:	4819      	ldr	r0, [pc, #100]	@ (800285c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80027f6:	f7ff fed9 	bl	80025ac <LL_ADC_IsEnabled>
 80027fa:	4603      	mov	r3, r0
 80027fc:	431c      	orrs	r4, r3
 80027fe:	481a      	ldr	r0, [pc, #104]	@ (8002868 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002800:	f7ff fed4 	bl	80025ac <LL_ADC_IsEnabled>
 8002804:	4603      	mov	r3, r0
 8002806:	4323      	orrs	r3, r4
 8002808:	2b00      	cmp	r3, #0
 800280a:	bf0c      	ite	eq
 800280c:	2301      	moveq	r3, #1
 800280e:	2300      	movne	r3, #0
 8002810:	b2db      	uxtb	r3, r3
 8002812:	2b00      	cmp	r3, #0
 8002814:	d012      	beq.n	800283c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002816:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800281e:	f023 030f 	bic.w	r3, r3, #15
 8002822:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002824:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002826:	e009      	b.n	800283c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800282c:	f043 0220 	orr.w	r2, r3, #32
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800283a:	e000      	b.n	800283e <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800283c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2200      	movs	r2, #0
 8002842:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002846:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800284a:	4618      	mov	r0, r3
 800284c:	3784      	adds	r7, #132	@ 0x84
 800284e:	46bd      	mov	sp, r7
 8002850:	bd90      	pop	{r4, r7, pc}
 8002852:	bf00      	nop
 8002854:	50000100 	.word	0x50000100
 8002858:	50000400 	.word	0x50000400
 800285c:	50000500 	.word	0x50000500
 8002860:	50000300 	.word	0x50000300
 8002864:	50000700 	.word	0x50000700
 8002868:	50000600 	.word	0x50000600

0800286c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800286c:	b480      	push	{r7}
 800286e:	b085      	sub	sp, #20
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	f003 0307 	and.w	r3, r3, #7
 800287a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800287c:	4b0c      	ldr	r3, [pc, #48]	@ (80028b0 <__NVIC_SetPriorityGrouping+0x44>)
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002882:	68ba      	ldr	r2, [r7, #8]
 8002884:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002888:	4013      	ands	r3, r2
 800288a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002894:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002898:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800289c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800289e:	4a04      	ldr	r2, [pc, #16]	@ (80028b0 <__NVIC_SetPriorityGrouping+0x44>)
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	60d3      	str	r3, [r2, #12]
}
 80028a4:	bf00      	nop
 80028a6:	3714      	adds	r7, #20
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr
 80028b0:	e000ed00 	.word	0xe000ed00

080028b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028b4:	b480      	push	{r7}
 80028b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028b8:	4b04      	ldr	r3, [pc, #16]	@ (80028cc <__NVIC_GetPriorityGrouping+0x18>)
 80028ba:	68db      	ldr	r3, [r3, #12]
 80028bc:	0a1b      	lsrs	r3, r3, #8
 80028be:	f003 0307 	and.w	r3, r3, #7
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	46bd      	mov	sp, r7
 80028c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ca:	4770      	bx	lr
 80028cc:	e000ed00 	.word	0xe000ed00

080028d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b083      	sub	sp, #12
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	4603      	mov	r3, r0
 80028d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	db0b      	blt.n	80028fa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028e2:	79fb      	ldrb	r3, [r7, #7]
 80028e4:	f003 021f 	and.w	r2, r3, #31
 80028e8:	4907      	ldr	r1, [pc, #28]	@ (8002908 <__NVIC_EnableIRQ+0x38>)
 80028ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ee:	095b      	lsrs	r3, r3, #5
 80028f0:	2001      	movs	r0, #1
 80028f2:	fa00 f202 	lsl.w	r2, r0, r2
 80028f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80028fa:	bf00      	nop
 80028fc:	370c      	adds	r7, #12
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr
 8002906:	bf00      	nop
 8002908:	e000e100 	.word	0xe000e100

0800290c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800290c:	b480      	push	{r7}
 800290e:	b083      	sub	sp, #12
 8002910:	af00      	add	r7, sp, #0
 8002912:	4603      	mov	r3, r0
 8002914:	6039      	str	r1, [r7, #0]
 8002916:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002918:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800291c:	2b00      	cmp	r3, #0
 800291e:	db0a      	blt.n	8002936 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	b2da      	uxtb	r2, r3
 8002924:	490c      	ldr	r1, [pc, #48]	@ (8002958 <__NVIC_SetPriority+0x4c>)
 8002926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800292a:	0112      	lsls	r2, r2, #4
 800292c:	b2d2      	uxtb	r2, r2
 800292e:	440b      	add	r3, r1
 8002930:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002934:	e00a      	b.n	800294c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	b2da      	uxtb	r2, r3
 800293a:	4908      	ldr	r1, [pc, #32]	@ (800295c <__NVIC_SetPriority+0x50>)
 800293c:	79fb      	ldrb	r3, [r7, #7]
 800293e:	f003 030f 	and.w	r3, r3, #15
 8002942:	3b04      	subs	r3, #4
 8002944:	0112      	lsls	r2, r2, #4
 8002946:	b2d2      	uxtb	r2, r2
 8002948:	440b      	add	r3, r1
 800294a:	761a      	strb	r2, [r3, #24]
}
 800294c:	bf00      	nop
 800294e:	370c      	adds	r7, #12
 8002950:	46bd      	mov	sp, r7
 8002952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002956:	4770      	bx	lr
 8002958:	e000e100 	.word	0xe000e100
 800295c:	e000ed00 	.word	0xe000ed00

08002960 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002960:	b480      	push	{r7}
 8002962:	b089      	sub	sp, #36	@ 0x24
 8002964:	af00      	add	r7, sp, #0
 8002966:	60f8      	str	r0, [r7, #12]
 8002968:	60b9      	str	r1, [r7, #8]
 800296a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	f003 0307 	and.w	r3, r3, #7
 8002972:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002974:	69fb      	ldr	r3, [r7, #28]
 8002976:	f1c3 0307 	rsb	r3, r3, #7
 800297a:	2b04      	cmp	r3, #4
 800297c:	bf28      	it	cs
 800297e:	2304      	movcs	r3, #4
 8002980:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	3304      	adds	r3, #4
 8002986:	2b06      	cmp	r3, #6
 8002988:	d902      	bls.n	8002990 <NVIC_EncodePriority+0x30>
 800298a:	69fb      	ldr	r3, [r7, #28]
 800298c:	3b03      	subs	r3, #3
 800298e:	e000      	b.n	8002992 <NVIC_EncodePriority+0x32>
 8002990:	2300      	movs	r3, #0
 8002992:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002994:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002998:	69bb      	ldr	r3, [r7, #24]
 800299a:	fa02 f303 	lsl.w	r3, r2, r3
 800299e:	43da      	mvns	r2, r3
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	401a      	ands	r2, r3
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029a8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	fa01 f303 	lsl.w	r3, r1, r3
 80029b2:	43d9      	mvns	r1, r3
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029b8:	4313      	orrs	r3, r2
         );
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	3724      	adds	r7, #36	@ 0x24
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr
	...

080029c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	3b01      	subs	r3, #1
 80029d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80029d8:	d301      	bcc.n	80029de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029da:	2301      	movs	r3, #1
 80029dc:	e00f      	b.n	80029fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029de:	4a0a      	ldr	r2, [pc, #40]	@ (8002a08 <SysTick_Config+0x40>)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	3b01      	subs	r3, #1
 80029e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029e6:	210f      	movs	r1, #15
 80029e8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80029ec:	f7ff ff8e 	bl	800290c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029f0:	4b05      	ldr	r3, [pc, #20]	@ (8002a08 <SysTick_Config+0x40>)
 80029f2:	2200      	movs	r2, #0
 80029f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029f6:	4b04      	ldr	r3, [pc, #16]	@ (8002a08 <SysTick_Config+0x40>)
 80029f8:	2207      	movs	r2, #7
 80029fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029fc:	2300      	movs	r3, #0
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3708      	adds	r7, #8
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	bf00      	nop
 8002a08:	e000e010 	.word	0xe000e010

08002a0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b082      	sub	sp, #8
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a14:	6878      	ldr	r0, [r7, #4]
 8002a16:	f7ff ff29 	bl	800286c <__NVIC_SetPriorityGrouping>
}
 8002a1a:	bf00      	nop
 8002a1c:	3708      	adds	r7, #8
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}

08002a22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a22:	b580      	push	{r7, lr}
 8002a24:	b086      	sub	sp, #24
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	4603      	mov	r3, r0
 8002a2a:	60b9      	str	r1, [r7, #8]
 8002a2c:	607a      	str	r2, [r7, #4]
 8002a2e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002a30:	f7ff ff40 	bl	80028b4 <__NVIC_GetPriorityGrouping>
 8002a34:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	68b9      	ldr	r1, [r7, #8]
 8002a3a:	6978      	ldr	r0, [r7, #20]
 8002a3c:	f7ff ff90 	bl	8002960 <NVIC_EncodePriority>
 8002a40:	4602      	mov	r2, r0
 8002a42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a46:	4611      	mov	r1, r2
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f7ff ff5f 	bl	800290c <__NVIC_SetPriority>
}
 8002a4e:	bf00      	nop
 8002a50:	3718      	adds	r7, #24
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}

08002a56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a56:	b580      	push	{r7, lr}
 8002a58:	b082      	sub	sp, #8
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a64:	4618      	mov	r0, r3
 8002a66:	f7ff ff33 	bl	80028d0 <__NVIC_EnableIRQ>
}
 8002a6a:	bf00      	nop
 8002a6c:	3708      	adds	r7, #8
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}

08002a72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a72:	b580      	push	{r7, lr}
 8002a74:	b082      	sub	sp, #8
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	f7ff ffa4 	bl	80029c8 <SysTick_Config>
 8002a80:	4603      	mov	r3, r0
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3708      	adds	r7, #8
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}

08002a8a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002a8a:	b580      	push	{r7, lr}
 8002a8c:	b084      	sub	sp, #16
 8002a8e:	af00      	add	r7, sp, #0
 8002a90:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a92:	2300      	movs	r3, #0
 8002a94:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	2b02      	cmp	r3, #2
 8002aa0:	d00d      	beq.n	8002abe <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2204      	movs	r2, #4
 8002aa6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2201      	movs	r2, #1
 8002aac:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	73fb      	strb	r3, [r7, #15]
 8002abc:	e047      	b.n	8002b4e <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f022 020e 	bic.w	r2, r2, #14
 8002acc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f022 0201 	bic.w	r2, r2, #1
 8002adc:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ae8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002aec:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002af2:	f003 021f 	and.w	r2, r3, #31
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002afa:	2101      	movs	r1, #1
 8002afc:	fa01 f202 	lsl.w	r2, r1, r2
 8002b00:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b06:	687a      	ldr	r2, [r7, #4]
 8002b08:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002b0a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d00c      	beq.n	8002b2e <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b1e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002b22:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b28:	687a      	ldr	r2, [r7, #4]
 8002b2a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002b2c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2201      	movs	r2, #1
 8002b32:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d003      	beq.n	8002b4e <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	4798      	blx	r3
    }
  }
  return status;
 8002b4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	3710      	adds	r7, #16
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}

08002b58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b087      	sub	sp, #28
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
 8002b60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002b62:	2300      	movs	r3, #0
 8002b64:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002b66:	e15a      	b.n	8002e1e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	2101      	movs	r1, #1
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	fa01 f303 	lsl.w	r3, r1, r3
 8002b74:	4013      	ands	r3, r2
 8002b76:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	f000 814c 	beq.w	8002e18 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	f003 0303 	and.w	r3, r3, #3
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d005      	beq.n	8002b98 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002b94:	2b02      	cmp	r3, #2
 8002b96:	d130      	bne.n	8002bfa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	005b      	lsls	r3, r3, #1
 8002ba2:	2203      	movs	r2, #3
 8002ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba8:	43db      	mvns	r3, r3
 8002baa:	693a      	ldr	r2, [r7, #16]
 8002bac:	4013      	ands	r3, r2
 8002bae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	68da      	ldr	r2, [r3, #12]
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	005b      	lsls	r3, r3, #1
 8002bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bbc:	693a      	ldr	r2, [r7, #16]
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	693a      	ldr	r2, [r7, #16]
 8002bc6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002bce:	2201      	movs	r2, #1
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd6:	43db      	mvns	r3, r3
 8002bd8:	693a      	ldr	r2, [r7, #16]
 8002bda:	4013      	ands	r3, r2
 8002bdc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	091b      	lsrs	r3, r3, #4
 8002be4:	f003 0201 	and.w	r2, r3, #1
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	fa02 f303 	lsl.w	r3, r2, r3
 8002bee:	693a      	ldr	r2, [r7, #16]
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	693a      	ldr	r2, [r7, #16]
 8002bf8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	f003 0303 	and.w	r3, r3, #3
 8002c02:	2b03      	cmp	r3, #3
 8002c04:	d017      	beq.n	8002c36 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	68db      	ldr	r3, [r3, #12]
 8002c0a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	005b      	lsls	r3, r3, #1
 8002c10:	2203      	movs	r2, #3
 8002c12:	fa02 f303 	lsl.w	r3, r2, r3
 8002c16:	43db      	mvns	r3, r3
 8002c18:	693a      	ldr	r2, [r7, #16]
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	689a      	ldr	r2, [r3, #8]
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	005b      	lsls	r3, r3, #1
 8002c26:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2a:	693a      	ldr	r2, [r7, #16]
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	693a      	ldr	r2, [r7, #16]
 8002c34:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	f003 0303 	and.w	r3, r3, #3
 8002c3e:	2b02      	cmp	r3, #2
 8002c40:	d123      	bne.n	8002c8a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	08da      	lsrs	r2, r3, #3
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	3208      	adds	r2, #8
 8002c4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c4e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	f003 0307 	and.w	r3, r3, #7
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	220f      	movs	r2, #15
 8002c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5e:	43db      	mvns	r3, r3
 8002c60:	693a      	ldr	r2, [r7, #16]
 8002c62:	4013      	ands	r3, r2
 8002c64:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	691a      	ldr	r2, [r3, #16]
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	f003 0307 	and.w	r3, r3, #7
 8002c70:	009b      	lsls	r3, r3, #2
 8002c72:	fa02 f303 	lsl.w	r3, r2, r3
 8002c76:	693a      	ldr	r2, [r7, #16]
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	08da      	lsrs	r2, r3, #3
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	3208      	adds	r2, #8
 8002c84:	6939      	ldr	r1, [r7, #16]
 8002c86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	005b      	lsls	r3, r3, #1
 8002c94:	2203      	movs	r2, #3
 8002c96:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9a:	43db      	mvns	r3, r3
 8002c9c:	693a      	ldr	r2, [r7, #16]
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	f003 0203 	and.w	r2, r3, #3
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	005b      	lsls	r3, r3, #1
 8002cae:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb2:	693a      	ldr	r2, [r7, #16]
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	693a      	ldr	r2, [r7, #16]
 8002cbc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	f000 80a6 	beq.w	8002e18 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ccc:	4b5b      	ldr	r3, [pc, #364]	@ (8002e3c <HAL_GPIO_Init+0x2e4>)
 8002cce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cd0:	4a5a      	ldr	r2, [pc, #360]	@ (8002e3c <HAL_GPIO_Init+0x2e4>)
 8002cd2:	f043 0301 	orr.w	r3, r3, #1
 8002cd6:	6613      	str	r3, [r2, #96]	@ 0x60
 8002cd8:	4b58      	ldr	r3, [pc, #352]	@ (8002e3c <HAL_GPIO_Init+0x2e4>)
 8002cda:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cdc:	f003 0301 	and.w	r3, r3, #1
 8002ce0:	60bb      	str	r3, [r7, #8]
 8002ce2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ce4:	4a56      	ldr	r2, [pc, #344]	@ (8002e40 <HAL_GPIO_Init+0x2e8>)
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	089b      	lsrs	r3, r3, #2
 8002cea:	3302      	adds	r3, #2
 8002cec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cf0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	f003 0303 	and.w	r3, r3, #3
 8002cf8:	009b      	lsls	r3, r3, #2
 8002cfa:	220f      	movs	r2, #15
 8002cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002d00:	43db      	mvns	r3, r3
 8002d02:	693a      	ldr	r2, [r7, #16]
 8002d04:	4013      	ands	r3, r2
 8002d06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002d0e:	d01f      	beq.n	8002d50 <HAL_GPIO_Init+0x1f8>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	4a4c      	ldr	r2, [pc, #304]	@ (8002e44 <HAL_GPIO_Init+0x2ec>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d019      	beq.n	8002d4c <HAL_GPIO_Init+0x1f4>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	4a4b      	ldr	r2, [pc, #300]	@ (8002e48 <HAL_GPIO_Init+0x2f0>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d013      	beq.n	8002d48 <HAL_GPIO_Init+0x1f0>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	4a4a      	ldr	r2, [pc, #296]	@ (8002e4c <HAL_GPIO_Init+0x2f4>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d00d      	beq.n	8002d44 <HAL_GPIO_Init+0x1ec>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	4a49      	ldr	r2, [pc, #292]	@ (8002e50 <HAL_GPIO_Init+0x2f8>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d007      	beq.n	8002d40 <HAL_GPIO_Init+0x1e8>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	4a48      	ldr	r2, [pc, #288]	@ (8002e54 <HAL_GPIO_Init+0x2fc>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d101      	bne.n	8002d3c <HAL_GPIO_Init+0x1e4>
 8002d38:	2305      	movs	r3, #5
 8002d3a:	e00a      	b.n	8002d52 <HAL_GPIO_Init+0x1fa>
 8002d3c:	2306      	movs	r3, #6
 8002d3e:	e008      	b.n	8002d52 <HAL_GPIO_Init+0x1fa>
 8002d40:	2304      	movs	r3, #4
 8002d42:	e006      	b.n	8002d52 <HAL_GPIO_Init+0x1fa>
 8002d44:	2303      	movs	r3, #3
 8002d46:	e004      	b.n	8002d52 <HAL_GPIO_Init+0x1fa>
 8002d48:	2302      	movs	r3, #2
 8002d4a:	e002      	b.n	8002d52 <HAL_GPIO_Init+0x1fa>
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e000      	b.n	8002d52 <HAL_GPIO_Init+0x1fa>
 8002d50:	2300      	movs	r3, #0
 8002d52:	697a      	ldr	r2, [r7, #20]
 8002d54:	f002 0203 	and.w	r2, r2, #3
 8002d58:	0092      	lsls	r2, r2, #2
 8002d5a:	4093      	lsls	r3, r2
 8002d5c:	693a      	ldr	r2, [r7, #16]
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d62:	4937      	ldr	r1, [pc, #220]	@ (8002e40 <HAL_GPIO_Init+0x2e8>)
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	089b      	lsrs	r3, r3, #2
 8002d68:	3302      	adds	r3, #2
 8002d6a:	693a      	ldr	r2, [r7, #16]
 8002d6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002d70:	4b39      	ldr	r3, [pc, #228]	@ (8002e58 <HAL_GPIO_Init+0x300>)
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	43db      	mvns	r3, r3
 8002d7a:	693a      	ldr	r2, [r7, #16]
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d003      	beq.n	8002d94 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002d8c:	693a      	ldr	r2, [r7, #16]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	4313      	orrs	r3, r2
 8002d92:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002d94:	4a30      	ldr	r2, [pc, #192]	@ (8002e58 <HAL_GPIO_Init+0x300>)
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002d9a:	4b2f      	ldr	r3, [pc, #188]	@ (8002e58 <HAL_GPIO_Init+0x300>)
 8002d9c:	68db      	ldr	r3, [r3, #12]
 8002d9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	43db      	mvns	r3, r3
 8002da4:	693a      	ldr	r2, [r7, #16]
 8002da6:	4013      	ands	r3, r2
 8002da8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d003      	beq.n	8002dbe <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002db6:	693a      	ldr	r2, [r7, #16]
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002dbe:	4a26      	ldr	r2, [pc, #152]	@ (8002e58 <HAL_GPIO_Init+0x300>)
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002dc4:	4b24      	ldr	r3, [pc, #144]	@ (8002e58 <HAL_GPIO_Init+0x300>)
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	43db      	mvns	r3, r3
 8002dce:	693a      	ldr	r2, [r7, #16]
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d003      	beq.n	8002de8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002de0:	693a      	ldr	r2, [r7, #16]
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	4313      	orrs	r3, r2
 8002de6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002de8:	4a1b      	ldr	r2, [pc, #108]	@ (8002e58 <HAL_GPIO_Init+0x300>)
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002dee:	4b1a      	ldr	r3, [pc, #104]	@ (8002e58 <HAL_GPIO_Init+0x300>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	43db      	mvns	r3, r3
 8002df8:	693a      	ldr	r2, [r7, #16]
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d003      	beq.n	8002e12 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002e0a:	693a      	ldr	r2, [r7, #16]
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002e12:	4a11      	ldr	r2, [pc, #68]	@ (8002e58 <HAL_GPIO_Init+0x300>)
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	3301      	adds	r3, #1
 8002e1c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	fa22 f303 	lsr.w	r3, r2, r3
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	f47f ae9d 	bne.w	8002b68 <HAL_GPIO_Init+0x10>
  }
}
 8002e2e:	bf00      	nop
 8002e30:	bf00      	nop
 8002e32:	371c      	adds	r7, #28
 8002e34:	46bd      	mov	sp, r7
 8002e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3a:	4770      	bx	lr
 8002e3c:	40021000 	.word	0x40021000
 8002e40:	40010000 	.word	0x40010000
 8002e44:	48000400 	.word	0x48000400
 8002e48:	48000800 	.word	0x48000800
 8002e4c:	48000c00 	.word	0x48000c00
 8002e50:	48001000 	.word	0x48001000
 8002e54:	48001400 	.word	0x48001400
 8002e58:	40010400 	.word	0x40010400

08002e5c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b082      	sub	sp, #8
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	4603      	mov	r3, r0
 8002e64:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002e66:	4b08      	ldr	r3, [pc, #32]	@ (8002e88 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e68:	695a      	ldr	r2, [r3, #20]
 8002e6a:	88fb      	ldrh	r3, [r7, #6]
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d006      	beq.n	8002e80 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002e72:	4a05      	ldr	r2, [pc, #20]	@ (8002e88 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e74:	88fb      	ldrh	r3, [r7, #6]
 8002e76:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002e78:	88fb      	ldrh	r3, [r7, #6]
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f000 f806 	bl	8002e8c <HAL_GPIO_EXTI_Callback>
  }
}
 8002e80:	bf00      	nop
 8002e82:	3708      	adds	r7, #8
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}
 8002e88:	40010400 	.word	0x40010400

08002e8c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b083      	sub	sp, #12
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	4603      	mov	r3, r0
 8002e94:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002e96:	bf00      	nop
 8002e98:	370c      	adds	r7, #12
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea0:	4770      	bx	lr
	...

08002ea4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b085      	sub	sp, #20
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d141      	bne.n	8002f36 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002eb2:	4b4b      	ldr	r3, [pc, #300]	@ (8002fe0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002eba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ebe:	d131      	bne.n	8002f24 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002ec0:	4b47      	ldr	r3, [pc, #284]	@ (8002fe0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ec2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002ec6:	4a46      	ldr	r2, [pc, #280]	@ (8002fe0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ec8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002ecc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ed0:	4b43      	ldr	r3, [pc, #268]	@ (8002fe0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002ed8:	4a41      	ldr	r2, [pc, #260]	@ (8002fe0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002eda:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002ede:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002ee0:	4b40      	ldr	r3, [pc, #256]	@ (8002fe4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	2232      	movs	r2, #50	@ 0x32
 8002ee6:	fb02 f303 	mul.w	r3, r2, r3
 8002eea:	4a3f      	ldr	r2, [pc, #252]	@ (8002fe8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002eec:	fba2 2303 	umull	r2, r3, r2, r3
 8002ef0:	0c9b      	lsrs	r3, r3, #18
 8002ef2:	3301      	adds	r3, #1
 8002ef4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ef6:	e002      	b.n	8002efe <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	3b01      	subs	r3, #1
 8002efc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002efe:	4b38      	ldr	r3, [pc, #224]	@ (8002fe0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f00:	695b      	ldr	r3, [r3, #20]
 8002f02:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f06:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f0a:	d102      	bne.n	8002f12 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d1f2      	bne.n	8002ef8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002f12:	4b33      	ldr	r3, [pc, #204]	@ (8002fe0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f14:	695b      	ldr	r3, [r3, #20]
 8002f16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f1e:	d158      	bne.n	8002fd2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002f20:	2303      	movs	r3, #3
 8002f22:	e057      	b.n	8002fd4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002f24:	4b2e      	ldr	r3, [pc, #184]	@ (8002fe0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f26:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002f2a:	4a2d      	ldr	r2, [pc, #180]	@ (8002fe0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f2c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002f30:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002f34:	e04d      	b.n	8002fd2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f3c:	d141      	bne.n	8002fc2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002f3e:	4b28      	ldr	r3, [pc, #160]	@ (8002fe0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002f46:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f4a:	d131      	bne.n	8002fb0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002f4c:	4b24      	ldr	r3, [pc, #144]	@ (8002fe0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002f52:	4a23      	ldr	r2, [pc, #140]	@ (8002fe0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f54:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f58:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f5c:	4b20      	ldr	r3, [pc, #128]	@ (8002fe0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002f64:	4a1e      	ldr	r2, [pc, #120]	@ (8002fe0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f66:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002f6a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002f6c:	4b1d      	ldr	r3, [pc, #116]	@ (8002fe4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	2232      	movs	r2, #50	@ 0x32
 8002f72:	fb02 f303 	mul.w	r3, r2, r3
 8002f76:	4a1c      	ldr	r2, [pc, #112]	@ (8002fe8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002f78:	fba2 2303 	umull	r2, r3, r2, r3
 8002f7c:	0c9b      	lsrs	r3, r3, #18
 8002f7e:	3301      	adds	r3, #1
 8002f80:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f82:	e002      	b.n	8002f8a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	3b01      	subs	r3, #1
 8002f88:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f8a:	4b15      	ldr	r3, [pc, #84]	@ (8002fe0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f8c:	695b      	ldr	r3, [r3, #20]
 8002f8e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f96:	d102      	bne.n	8002f9e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d1f2      	bne.n	8002f84 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002f9e:	4b10      	ldr	r3, [pc, #64]	@ (8002fe0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fa0:	695b      	ldr	r3, [r3, #20]
 8002fa2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fa6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002faa:	d112      	bne.n	8002fd2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002fac:	2303      	movs	r3, #3
 8002fae:	e011      	b.n	8002fd4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002fb0:	4b0b      	ldr	r3, [pc, #44]	@ (8002fe0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002fb6:	4a0a      	ldr	r2, [pc, #40]	@ (8002fe0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fb8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002fbc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002fc0:	e007      	b.n	8002fd2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002fc2:	4b07      	ldr	r3, [pc, #28]	@ (8002fe0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002fca:	4a05      	ldr	r2, [pc, #20]	@ (8002fe0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fcc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002fd0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002fd2:	2300      	movs	r3, #0
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	3714      	adds	r7, #20
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fde:	4770      	bx	lr
 8002fe0:	40007000 	.word	0x40007000
 8002fe4:	20000010 	.word	0x20000010
 8002fe8:	431bde83 	.word	0x431bde83

08002fec <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002fec:	b480      	push	{r7}
 8002fee:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002ff0:	4b05      	ldr	r3, [pc, #20]	@ (8003008 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	4a04      	ldr	r2, [pc, #16]	@ (8003008 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002ff6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ffa:	6093      	str	r3, [r2, #8]
}
 8002ffc:	bf00      	nop
 8002ffe:	46bd      	mov	sp, r7
 8003000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003004:	4770      	bx	lr
 8003006:	bf00      	nop
 8003008:	40007000 	.word	0x40007000

0800300c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b088      	sub	sp, #32
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d101      	bne.n	800301e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e2fe      	b.n	800361c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0301 	and.w	r3, r3, #1
 8003026:	2b00      	cmp	r3, #0
 8003028:	d075      	beq.n	8003116 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800302a:	4b97      	ldr	r3, [pc, #604]	@ (8003288 <HAL_RCC_OscConfig+0x27c>)
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	f003 030c 	and.w	r3, r3, #12
 8003032:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003034:	4b94      	ldr	r3, [pc, #592]	@ (8003288 <HAL_RCC_OscConfig+0x27c>)
 8003036:	68db      	ldr	r3, [r3, #12]
 8003038:	f003 0303 	and.w	r3, r3, #3
 800303c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800303e:	69bb      	ldr	r3, [r7, #24]
 8003040:	2b0c      	cmp	r3, #12
 8003042:	d102      	bne.n	800304a <HAL_RCC_OscConfig+0x3e>
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	2b03      	cmp	r3, #3
 8003048:	d002      	beq.n	8003050 <HAL_RCC_OscConfig+0x44>
 800304a:	69bb      	ldr	r3, [r7, #24]
 800304c:	2b08      	cmp	r3, #8
 800304e:	d10b      	bne.n	8003068 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003050:	4b8d      	ldr	r3, [pc, #564]	@ (8003288 <HAL_RCC_OscConfig+0x27c>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003058:	2b00      	cmp	r3, #0
 800305a:	d05b      	beq.n	8003114 <HAL_RCC_OscConfig+0x108>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d157      	bne.n	8003114 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e2d9      	b.n	800361c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003070:	d106      	bne.n	8003080 <HAL_RCC_OscConfig+0x74>
 8003072:	4b85      	ldr	r3, [pc, #532]	@ (8003288 <HAL_RCC_OscConfig+0x27c>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a84      	ldr	r2, [pc, #528]	@ (8003288 <HAL_RCC_OscConfig+0x27c>)
 8003078:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800307c:	6013      	str	r3, [r2, #0]
 800307e:	e01d      	b.n	80030bc <HAL_RCC_OscConfig+0xb0>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003088:	d10c      	bne.n	80030a4 <HAL_RCC_OscConfig+0x98>
 800308a:	4b7f      	ldr	r3, [pc, #508]	@ (8003288 <HAL_RCC_OscConfig+0x27c>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a7e      	ldr	r2, [pc, #504]	@ (8003288 <HAL_RCC_OscConfig+0x27c>)
 8003090:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003094:	6013      	str	r3, [r2, #0]
 8003096:	4b7c      	ldr	r3, [pc, #496]	@ (8003288 <HAL_RCC_OscConfig+0x27c>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a7b      	ldr	r2, [pc, #492]	@ (8003288 <HAL_RCC_OscConfig+0x27c>)
 800309c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030a0:	6013      	str	r3, [r2, #0]
 80030a2:	e00b      	b.n	80030bc <HAL_RCC_OscConfig+0xb0>
 80030a4:	4b78      	ldr	r3, [pc, #480]	@ (8003288 <HAL_RCC_OscConfig+0x27c>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a77      	ldr	r2, [pc, #476]	@ (8003288 <HAL_RCC_OscConfig+0x27c>)
 80030aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030ae:	6013      	str	r3, [r2, #0]
 80030b0:	4b75      	ldr	r3, [pc, #468]	@ (8003288 <HAL_RCC_OscConfig+0x27c>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a74      	ldr	r2, [pc, #464]	@ (8003288 <HAL_RCC_OscConfig+0x27c>)
 80030b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80030ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d013      	beq.n	80030ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030c4:	f7fd fcfa 	bl	8000abc <HAL_GetTick>
 80030c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030ca:	e008      	b.n	80030de <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030cc:	f7fd fcf6 	bl	8000abc <HAL_GetTick>
 80030d0:	4602      	mov	r2, r0
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	2b64      	cmp	r3, #100	@ 0x64
 80030d8:	d901      	bls.n	80030de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80030da:	2303      	movs	r3, #3
 80030dc:	e29e      	b.n	800361c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030de:	4b6a      	ldr	r3, [pc, #424]	@ (8003288 <HAL_RCC_OscConfig+0x27c>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d0f0      	beq.n	80030cc <HAL_RCC_OscConfig+0xc0>
 80030ea:	e014      	b.n	8003116 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ec:	f7fd fce6 	bl	8000abc <HAL_GetTick>
 80030f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80030f2:	e008      	b.n	8003106 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030f4:	f7fd fce2 	bl	8000abc <HAL_GetTick>
 80030f8:	4602      	mov	r2, r0
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	2b64      	cmp	r3, #100	@ 0x64
 8003100:	d901      	bls.n	8003106 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003102:	2303      	movs	r3, #3
 8003104:	e28a      	b.n	800361c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003106:	4b60      	ldr	r3, [pc, #384]	@ (8003288 <HAL_RCC_OscConfig+0x27c>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800310e:	2b00      	cmp	r3, #0
 8003110:	d1f0      	bne.n	80030f4 <HAL_RCC_OscConfig+0xe8>
 8003112:	e000      	b.n	8003116 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003114:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0302 	and.w	r3, r3, #2
 800311e:	2b00      	cmp	r3, #0
 8003120:	d075      	beq.n	800320e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003122:	4b59      	ldr	r3, [pc, #356]	@ (8003288 <HAL_RCC_OscConfig+0x27c>)
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	f003 030c 	and.w	r3, r3, #12
 800312a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800312c:	4b56      	ldr	r3, [pc, #344]	@ (8003288 <HAL_RCC_OscConfig+0x27c>)
 800312e:	68db      	ldr	r3, [r3, #12]
 8003130:	f003 0303 	and.w	r3, r3, #3
 8003134:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003136:	69bb      	ldr	r3, [r7, #24]
 8003138:	2b0c      	cmp	r3, #12
 800313a:	d102      	bne.n	8003142 <HAL_RCC_OscConfig+0x136>
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	2b02      	cmp	r3, #2
 8003140:	d002      	beq.n	8003148 <HAL_RCC_OscConfig+0x13c>
 8003142:	69bb      	ldr	r3, [r7, #24]
 8003144:	2b04      	cmp	r3, #4
 8003146:	d11f      	bne.n	8003188 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003148:	4b4f      	ldr	r3, [pc, #316]	@ (8003288 <HAL_RCC_OscConfig+0x27c>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003150:	2b00      	cmp	r3, #0
 8003152:	d005      	beq.n	8003160 <HAL_RCC_OscConfig+0x154>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d101      	bne.n	8003160 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	e25d      	b.n	800361c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003160:	4b49      	ldr	r3, [pc, #292]	@ (8003288 <HAL_RCC_OscConfig+0x27c>)
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	691b      	ldr	r3, [r3, #16]
 800316c:	061b      	lsls	r3, r3, #24
 800316e:	4946      	ldr	r1, [pc, #280]	@ (8003288 <HAL_RCC_OscConfig+0x27c>)
 8003170:	4313      	orrs	r3, r2
 8003172:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003174:	4b45      	ldr	r3, [pc, #276]	@ (800328c <HAL_RCC_OscConfig+0x280>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4618      	mov	r0, r3
 800317a:	f7fd fc53 	bl	8000a24 <HAL_InitTick>
 800317e:	4603      	mov	r3, r0
 8003180:	2b00      	cmp	r3, #0
 8003182:	d043      	beq.n	800320c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	e249      	b.n	800361c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	68db      	ldr	r3, [r3, #12]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d023      	beq.n	80031d8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003190:	4b3d      	ldr	r3, [pc, #244]	@ (8003288 <HAL_RCC_OscConfig+0x27c>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a3c      	ldr	r2, [pc, #240]	@ (8003288 <HAL_RCC_OscConfig+0x27c>)
 8003196:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800319a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800319c:	f7fd fc8e 	bl	8000abc <HAL_GetTick>
 80031a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80031a2:	e008      	b.n	80031b6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031a4:	f7fd fc8a 	bl	8000abc <HAL_GetTick>
 80031a8:	4602      	mov	r2, r0
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	1ad3      	subs	r3, r2, r3
 80031ae:	2b02      	cmp	r3, #2
 80031b0:	d901      	bls.n	80031b6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80031b2:	2303      	movs	r3, #3
 80031b4:	e232      	b.n	800361c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80031b6:	4b34      	ldr	r3, [pc, #208]	@ (8003288 <HAL_RCC_OscConfig+0x27c>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d0f0      	beq.n	80031a4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031c2:	4b31      	ldr	r3, [pc, #196]	@ (8003288 <HAL_RCC_OscConfig+0x27c>)
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	691b      	ldr	r3, [r3, #16]
 80031ce:	061b      	lsls	r3, r3, #24
 80031d0:	492d      	ldr	r1, [pc, #180]	@ (8003288 <HAL_RCC_OscConfig+0x27c>)
 80031d2:	4313      	orrs	r3, r2
 80031d4:	604b      	str	r3, [r1, #4]
 80031d6:	e01a      	b.n	800320e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031d8:	4b2b      	ldr	r3, [pc, #172]	@ (8003288 <HAL_RCC_OscConfig+0x27c>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a2a      	ldr	r2, [pc, #168]	@ (8003288 <HAL_RCC_OscConfig+0x27c>)
 80031de:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80031e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031e4:	f7fd fc6a 	bl	8000abc <HAL_GetTick>
 80031e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80031ea:	e008      	b.n	80031fe <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031ec:	f7fd fc66 	bl	8000abc <HAL_GetTick>
 80031f0:	4602      	mov	r2, r0
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	1ad3      	subs	r3, r2, r3
 80031f6:	2b02      	cmp	r3, #2
 80031f8:	d901      	bls.n	80031fe <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80031fa:	2303      	movs	r3, #3
 80031fc:	e20e      	b.n	800361c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80031fe:	4b22      	ldr	r3, [pc, #136]	@ (8003288 <HAL_RCC_OscConfig+0x27c>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003206:	2b00      	cmp	r3, #0
 8003208:	d1f0      	bne.n	80031ec <HAL_RCC_OscConfig+0x1e0>
 800320a:	e000      	b.n	800320e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800320c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 0308 	and.w	r3, r3, #8
 8003216:	2b00      	cmp	r3, #0
 8003218:	d041      	beq.n	800329e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	695b      	ldr	r3, [r3, #20]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d01c      	beq.n	800325c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003222:	4b19      	ldr	r3, [pc, #100]	@ (8003288 <HAL_RCC_OscConfig+0x27c>)
 8003224:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003228:	4a17      	ldr	r2, [pc, #92]	@ (8003288 <HAL_RCC_OscConfig+0x27c>)
 800322a:	f043 0301 	orr.w	r3, r3, #1
 800322e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003232:	f7fd fc43 	bl	8000abc <HAL_GetTick>
 8003236:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003238:	e008      	b.n	800324c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800323a:	f7fd fc3f 	bl	8000abc <HAL_GetTick>
 800323e:	4602      	mov	r2, r0
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	1ad3      	subs	r3, r2, r3
 8003244:	2b02      	cmp	r3, #2
 8003246:	d901      	bls.n	800324c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003248:	2303      	movs	r3, #3
 800324a:	e1e7      	b.n	800361c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800324c:	4b0e      	ldr	r3, [pc, #56]	@ (8003288 <HAL_RCC_OscConfig+0x27c>)
 800324e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003252:	f003 0302 	and.w	r3, r3, #2
 8003256:	2b00      	cmp	r3, #0
 8003258:	d0ef      	beq.n	800323a <HAL_RCC_OscConfig+0x22e>
 800325a:	e020      	b.n	800329e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800325c:	4b0a      	ldr	r3, [pc, #40]	@ (8003288 <HAL_RCC_OscConfig+0x27c>)
 800325e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003262:	4a09      	ldr	r2, [pc, #36]	@ (8003288 <HAL_RCC_OscConfig+0x27c>)
 8003264:	f023 0301 	bic.w	r3, r3, #1
 8003268:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800326c:	f7fd fc26 	bl	8000abc <HAL_GetTick>
 8003270:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003272:	e00d      	b.n	8003290 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003274:	f7fd fc22 	bl	8000abc <HAL_GetTick>
 8003278:	4602      	mov	r2, r0
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	2b02      	cmp	r3, #2
 8003280:	d906      	bls.n	8003290 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003282:	2303      	movs	r3, #3
 8003284:	e1ca      	b.n	800361c <HAL_RCC_OscConfig+0x610>
 8003286:	bf00      	nop
 8003288:	40021000 	.word	0x40021000
 800328c:	20000014 	.word	0x20000014
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003290:	4b8c      	ldr	r3, [pc, #560]	@ (80034c4 <HAL_RCC_OscConfig+0x4b8>)
 8003292:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003296:	f003 0302 	and.w	r3, r3, #2
 800329a:	2b00      	cmp	r3, #0
 800329c:	d1ea      	bne.n	8003274 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 0304 	and.w	r3, r3, #4
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	f000 80a6 	beq.w	80033f8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032ac:	2300      	movs	r3, #0
 80032ae:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80032b0:	4b84      	ldr	r3, [pc, #528]	@ (80034c4 <HAL_RCC_OscConfig+0x4b8>)
 80032b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d101      	bne.n	80032c0 <HAL_RCC_OscConfig+0x2b4>
 80032bc:	2301      	movs	r3, #1
 80032be:	e000      	b.n	80032c2 <HAL_RCC_OscConfig+0x2b6>
 80032c0:	2300      	movs	r3, #0
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d00d      	beq.n	80032e2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032c6:	4b7f      	ldr	r3, [pc, #508]	@ (80034c4 <HAL_RCC_OscConfig+0x4b8>)
 80032c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032ca:	4a7e      	ldr	r2, [pc, #504]	@ (80034c4 <HAL_RCC_OscConfig+0x4b8>)
 80032cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80032d2:	4b7c      	ldr	r3, [pc, #496]	@ (80034c4 <HAL_RCC_OscConfig+0x4b8>)
 80032d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032da:	60fb      	str	r3, [r7, #12]
 80032dc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80032de:	2301      	movs	r3, #1
 80032e0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032e2:	4b79      	ldr	r3, [pc, #484]	@ (80034c8 <HAL_RCC_OscConfig+0x4bc>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d118      	bne.n	8003320 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80032ee:	4b76      	ldr	r3, [pc, #472]	@ (80034c8 <HAL_RCC_OscConfig+0x4bc>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a75      	ldr	r2, [pc, #468]	@ (80034c8 <HAL_RCC_OscConfig+0x4bc>)
 80032f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032fa:	f7fd fbdf 	bl	8000abc <HAL_GetTick>
 80032fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003300:	e008      	b.n	8003314 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003302:	f7fd fbdb 	bl	8000abc <HAL_GetTick>
 8003306:	4602      	mov	r2, r0
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	1ad3      	subs	r3, r2, r3
 800330c:	2b02      	cmp	r3, #2
 800330e:	d901      	bls.n	8003314 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003310:	2303      	movs	r3, #3
 8003312:	e183      	b.n	800361c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003314:	4b6c      	ldr	r3, [pc, #432]	@ (80034c8 <HAL_RCC_OscConfig+0x4bc>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800331c:	2b00      	cmp	r3, #0
 800331e:	d0f0      	beq.n	8003302 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	2b01      	cmp	r3, #1
 8003326:	d108      	bne.n	800333a <HAL_RCC_OscConfig+0x32e>
 8003328:	4b66      	ldr	r3, [pc, #408]	@ (80034c4 <HAL_RCC_OscConfig+0x4b8>)
 800332a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800332e:	4a65      	ldr	r2, [pc, #404]	@ (80034c4 <HAL_RCC_OscConfig+0x4b8>)
 8003330:	f043 0301 	orr.w	r3, r3, #1
 8003334:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003338:	e024      	b.n	8003384 <HAL_RCC_OscConfig+0x378>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	2b05      	cmp	r3, #5
 8003340:	d110      	bne.n	8003364 <HAL_RCC_OscConfig+0x358>
 8003342:	4b60      	ldr	r3, [pc, #384]	@ (80034c4 <HAL_RCC_OscConfig+0x4b8>)
 8003344:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003348:	4a5e      	ldr	r2, [pc, #376]	@ (80034c4 <HAL_RCC_OscConfig+0x4b8>)
 800334a:	f043 0304 	orr.w	r3, r3, #4
 800334e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003352:	4b5c      	ldr	r3, [pc, #368]	@ (80034c4 <HAL_RCC_OscConfig+0x4b8>)
 8003354:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003358:	4a5a      	ldr	r2, [pc, #360]	@ (80034c4 <HAL_RCC_OscConfig+0x4b8>)
 800335a:	f043 0301 	orr.w	r3, r3, #1
 800335e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003362:	e00f      	b.n	8003384 <HAL_RCC_OscConfig+0x378>
 8003364:	4b57      	ldr	r3, [pc, #348]	@ (80034c4 <HAL_RCC_OscConfig+0x4b8>)
 8003366:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800336a:	4a56      	ldr	r2, [pc, #344]	@ (80034c4 <HAL_RCC_OscConfig+0x4b8>)
 800336c:	f023 0301 	bic.w	r3, r3, #1
 8003370:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003374:	4b53      	ldr	r3, [pc, #332]	@ (80034c4 <HAL_RCC_OscConfig+0x4b8>)
 8003376:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800337a:	4a52      	ldr	r2, [pc, #328]	@ (80034c4 <HAL_RCC_OscConfig+0x4b8>)
 800337c:	f023 0304 	bic.w	r3, r3, #4
 8003380:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d016      	beq.n	80033ba <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800338c:	f7fd fb96 	bl	8000abc <HAL_GetTick>
 8003390:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003392:	e00a      	b.n	80033aa <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003394:	f7fd fb92 	bl	8000abc <HAL_GetTick>
 8003398:	4602      	mov	r2, r0
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	1ad3      	subs	r3, r2, r3
 800339e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d901      	bls.n	80033aa <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80033a6:	2303      	movs	r3, #3
 80033a8:	e138      	b.n	800361c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033aa:	4b46      	ldr	r3, [pc, #280]	@ (80034c4 <HAL_RCC_OscConfig+0x4b8>)
 80033ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033b0:	f003 0302 	and.w	r3, r3, #2
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d0ed      	beq.n	8003394 <HAL_RCC_OscConfig+0x388>
 80033b8:	e015      	b.n	80033e6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033ba:	f7fd fb7f 	bl	8000abc <HAL_GetTick>
 80033be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80033c0:	e00a      	b.n	80033d8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033c2:	f7fd fb7b 	bl	8000abc <HAL_GetTick>
 80033c6:	4602      	mov	r2, r0
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	1ad3      	subs	r3, r2, r3
 80033cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d901      	bls.n	80033d8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80033d4:	2303      	movs	r3, #3
 80033d6:	e121      	b.n	800361c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80033d8:	4b3a      	ldr	r3, [pc, #232]	@ (80034c4 <HAL_RCC_OscConfig+0x4b8>)
 80033da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033de:	f003 0302 	and.w	r3, r3, #2
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d1ed      	bne.n	80033c2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80033e6:	7ffb      	ldrb	r3, [r7, #31]
 80033e8:	2b01      	cmp	r3, #1
 80033ea:	d105      	bne.n	80033f8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033ec:	4b35      	ldr	r3, [pc, #212]	@ (80034c4 <HAL_RCC_OscConfig+0x4b8>)
 80033ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033f0:	4a34      	ldr	r2, [pc, #208]	@ (80034c4 <HAL_RCC_OscConfig+0x4b8>)
 80033f2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80033f6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 0320 	and.w	r3, r3, #32
 8003400:	2b00      	cmp	r3, #0
 8003402:	d03c      	beq.n	800347e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	699b      	ldr	r3, [r3, #24]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d01c      	beq.n	8003446 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800340c:	4b2d      	ldr	r3, [pc, #180]	@ (80034c4 <HAL_RCC_OscConfig+0x4b8>)
 800340e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003412:	4a2c      	ldr	r2, [pc, #176]	@ (80034c4 <HAL_RCC_OscConfig+0x4b8>)
 8003414:	f043 0301 	orr.w	r3, r3, #1
 8003418:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800341c:	f7fd fb4e 	bl	8000abc <HAL_GetTick>
 8003420:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003422:	e008      	b.n	8003436 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003424:	f7fd fb4a 	bl	8000abc <HAL_GetTick>
 8003428:	4602      	mov	r2, r0
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	2b02      	cmp	r3, #2
 8003430:	d901      	bls.n	8003436 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003432:	2303      	movs	r3, #3
 8003434:	e0f2      	b.n	800361c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003436:	4b23      	ldr	r3, [pc, #140]	@ (80034c4 <HAL_RCC_OscConfig+0x4b8>)
 8003438:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800343c:	f003 0302 	and.w	r3, r3, #2
 8003440:	2b00      	cmp	r3, #0
 8003442:	d0ef      	beq.n	8003424 <HAL_RCC_OscConfig+0x418>
 8003444:	e01b      	b.n	800347e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003446:	4b1f      	ldr	r3, [pc, #124]	@ (80034c4 <HAL_RCC_OscConfig+0x4b8>)
 8003448:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800344c:	4a1d      	ldr	r2, [pc, #116]	@ (80034c4 <HAL_RCC_OscConfig+0x4b8>)
 800344e:	f023 0301 	bic.w	r3, r3, #1
 8003452:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003456:	f7fd fb31 	bl	8000abc <HAL_GetTick>
 800345a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800345c:	e008      	b.n	8003470 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800345e:	f7fd fb2d 	bl	8000abc <HAL_GetTick>
 8003462:	4602      	mov	r2, r0
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	1ad3      	subs	r3, r2, r3
 8003468:	2b02      	cmp	r3, #2
 800346a:	d901      	bls.n	8003470 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800346c:	2303      	movs	r3, #3
 800346e:	e0d5      	b.n	800361c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003470:	4b14      	ldr	r3, [pc, #80]	@ (80034c4 <HAL_RCC_OscConfig+0x4b8>)
 8003472:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003476:	f003 0302 	and.w	r3, r3, #2
 800347a:	2b00      	cmp	r3, #0
 800347c:	d1ef      	bne.n	800345e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	69db      	ldr	r3, [r3, #28]
 8003482:	2b00      	cmp	r3, #0
 8003484:	f000 80c9 	beq.w	800361a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003488:	4b0e      	ldr	r3, [pc, #56]	@ (80034c4 <HAL_RCC_OscConfig+0x4b8>)
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	f003 030c 	and.w	r3, r3, #12
 8003490:	2b0c      	cmp	r3, #12
 8003492:	f000 8083 	beq.w	800359c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	69db      	ldr	r3, [r3, #28]
 800349a:	2b02      	cmp	r3, #2
 800349c:	d15e      	bne.n	800355c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800349e:	4b09      	ldr	r3, [pc, #36]	@ (80034c4 <HAL_RCC_OscConfig+0x4b8>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a08      	ldr	r2, [pc, #32]	@ (80034c4 <HAL_RCC_OscConfig+0x4b8>)
 80034a4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80034a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034aa:	f7fd fb07 	bl	8000abc <HAL_GetTick>
 80034ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034b0:	e00c      	b.n	80034cc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034b2:	f7fd fb03 	bl	8000abc <HAL_GetTick>
 80034b6:	4602      	mov	r2, r0
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	1ad3      	subs	r3, r2, r3
 80034bc:	2b02      	cmp	r3, #2
 80034be:	d905      	bls.n	80034cc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80034c0:	2303      	movs	r3, #3
 80034c2:	e0ab      	b.n	800361c <HAL_RCC_OscConfig+0x610>
 80034c4:	40021000 	.word	0x40021000
 80034c8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034cc:	4b55      	ldr	r3, [pc, #340]	@ (8003624 <HAL_RCC_OscConfig+0x618>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d1ec      	bne.n	80034b2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034d8:	4b52      	ldr	r3, [pc, #328]	@ (8003624 <HAL_RCC_OscConfig+0x618>)
 80034da:	68da      	ldr	r2, [r3, #12]
 80034dc:	4b52      	ldr	r3, [pc, #328]	@ (8003628 <HAL_RCC_OscConfig+0x61c>)
 80034de:	4013      	ands	r3, r2
 80034e0:	687a      	ldr	r2, [r7, #4]
 80034e2:	6a11      	ldr	r1, [r2, #32]
 80034e4:	687a      	ldr	r2, [r7, #4]
 80034e6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80034e8:	3a01      	subs	r2, #1
 80034ea:	0112      	lsls	r2, r2, #4
 80034ec:	4311      	orrs	r1, r2
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80034f2:	0212      	lsls	r2, r2, #8
 80034f4:	4311      	orrs	r1, r2
 80034f6:	687a      	ldr	r2, [r7, #4]
 80034f8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80034fa:	0852      	lsrs	r2, r2, #1
 80034fc:	3a01      	subs	r2, #1
 80034fe:	0552      	lsls	r2, r2, #21
 8003500:	4311      	orrs	r1, r2
 8003502:	687a      	ldr	r2, [r7, #4]
 8003504:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003506:	0852      	lsrs	r2, r2, #1
 8003508:	3a01      	subs	r2, #1
 800350a:	0652      	lsls	r2, r2, #25
 800350c:	4311      	orrs	r1, r2
 800350e:	687a      	ldr	r2, [r7, #4]
 8003510:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003512:	06d2      	lsls	r2, r2, #27
 8003514:	430a      	orrs	r2, r1
 8003516:	4943      	ldr	r1, [pc, #268]	@ (8003624 <HAL_RCC_OscConfig+0x618>)
 8003518:	4313      	orrs	r3, r2
 800351a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800351c:	4b41      	ldr	r3, [pc, #260]	@ (8003624 <HAL_RCC_OscConfig+0x618>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a40      	ldr	r2, [pc, #256]	@ (8003624 <HAL_RCC_OscConfig+0x618>)
 8003522:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003526:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003528:	4b3e      	ldr	r3, [pc, #248]	@ (8003624 <HAL_RCC_OscConfig+0x618>)
 800352a:	68db      	ldr	r3, [r3, #12]
 800352c:	4a3d      	ldr	r2, [pc, #244]	@ (8003624 <HAL_RCC_OscConfig+0x618>)
 800352e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003532:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003534:	f7fd fac2 	bl	8000abc <HAL_GetTick>
 8003538:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800353a:	e008      	b.n	800354e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800353c:	f7fd fabe 	bl	8000abc <HAL_GetTick>
 8003540:	4602      	mov	r2, r0
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	1ad3      	subs	r3, r2, r3
 8003546:	2b02      	cmp	r3, #2
 8003548:	d901      	bls.n	800354e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800354a:	2303      	movs	r3, #3
 800354c:	e066      	b.n	800361c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800354e:	4b35      	ldr	r3, [pc, #212]	@ (8003624 <HAL_RCC_OscConfig+0x618>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003556:	2b00      	cmp	r3, #0
 8003558:	d0f0      	beq.n	800353c <HAL_RCC_OscConfig+0x530>
 800355a:	e05e      	b.n	800361a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800355c:	4b31      	ldr	r3, [pc, #196]	@ (8003624 <HAL_RCC_OscConfig+0x618>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a30      	ldr	r2, [pc, #192]	@ (8003624 <HAL_RCC_OscConfig+0x618>)
 8003562:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003566:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003568:	f7fd faa8 	bl	8000abc <HAL_GetTick>
 800356c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800356e:	e008      	b.n	8003582 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003570:	f7fd faa4 	bl	8000abc <HAL_GetTick>
 8003574:	4602      	mov	r2, r0
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	1ad3      	subs	r3, r2, r3
 800357a:	2b02      	cmp	r3, #2
 800357c:	d901      	bls.n	8003582 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800357e:	2303      	movs	r3, #3
 8003580:	e04c      	b.n	800361c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003582:	4b28      	ldr	r3, [pc, #160]	@ (8003624 <HAL_RCC_OscConfig+0x618>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800358a:	2b00      	cmp	r3, #0
 800358c:	d1f0      	bne.n	8003570 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800358e:	4b25      	ldr	r3, [pc, #148]	@ (8003624 <HAL_RCC_OscConfig+0x618>)
 8003590:	68da      	ldr	r2, [r3, #12]
 8003592:	4924      	ldr	r1, [pc, #144]	@ (8003624 <HAL_RCC_OscConfig+0x618>)
 8003594:	4b25      	ldr	r3, [pc, #148]	@ (800362c <HAL_RCC_OscConfig+0x620>)
 8003596:	4013      	ands	r3, r2
 8003598:	60cb      	str	r3, [r1, #12]
 800359a:	e03e      	b.n	800361a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	69db      	ldr	r3, [r3, #28]
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d101      	bne.n	80035a8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	e039      	b.n	800361c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80035a8:	4b1e      	ldr	r3, [pc, #120]	@ (8003624 <HAL_RCC_OscConfig+0x618>)
 80035aa:	68db      	ldr	r3, [r3, #12]
 80035ac:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	f003 0203 	and.w	r2, r3, #3
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6a1b      	ldr	r3, [r3, #32]
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d12c      	bne.n	8003616 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035c6:	3b01      	subs	r3, #1
 80035c8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035ca:	429a      	cmp	r2, r3
 80035cc:	d123      	bne.n	8003616 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035d8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80035da:	429a      	cmp	r2, r3
 80035dc:	d11b      	bne.n	8003616 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035e8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80035ea:	429a      	cmp	r2, r3
 80035ec:	d113      	bne.n	8003616 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035f8:	085b      	lsrs	r3, r3, #1
 80035fa:	3b01      	subs	r3, #1
 80035fc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80035fe:	429a      	cmp	r2, r3
 8003600:	d109      	bne.n	8003616 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800360c:	085b      	lsrs	r3, r3, #1
 800360e:	3b01      	subs	r3, #1
 8003610:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003612:	429a      	cmp	r2, r3
 8003614:	d001      	beq.n	800361a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	e000      	b.n	800361c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800361a:	2300      	movs	r3, #0
}
 800361c:	4618      	mov	r0, r3
 800361e:	3720      	adds	r7, #32
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}
 8003624:	40021000 	.word	0x40021000
 8003628:	019f800c 	.word	0x019f800c
 800362c:	feeefffc 	.word	0xfeeefffc

08003630 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b086      	sub	sp, #24
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
 8003638:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800363a:	2300      	movs	r3, #0
 800363c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d101      	bne.n	8003648 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	e11e      	b.n	8003886 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003648:	4b91      	ldr	r3, [pc, #580]	@ (8003890 <HAL_RCC_ClockConfig+0x260>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 030f 	and.w	r3, r3, #15
 8003650:	683a      	ldr	r2, [r7, #0]
 8003652:	429a      	cmp	r2, r3
 8003654:	d910      	bls.n	8003678 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003656:	4b8e      	ldr	r3, [pc, #568]	@ (8003890 <HAL_RCC_ClockConfig+0x260>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f023 020f 	bic.w	r2, r3, #15
 800365e:	498c      	ldr	r1, [pc, #560]	@ (8003890 <HAL_RCC_ClockConfig+0x260>)
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	4313      	orrs	r3, r2
 8003664:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003666:	4b8a      	ldr	r3, [pc, #552]	@ (8003890 <HAL_RCC_ClockConfig+0x260>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 030f 	and.w	r3, r3, #15
 800366e:	683a      	ldr	r2, [r7, #0]
 8003670:	429a      	cmp	r2, r3
 8003672:	d001      	beq.n	8003678 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	e106      	b.n	8003886 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 0301 	and.w	r3, r3, #1
 8003680:	2b00      	cmp	r3, #0
 8003682:	d073      	beq.n	800376c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	2b03      	cmp	r3, #3
 800368a:	d129      	bne.n	80036e0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800368c:	4b81      	ldr	r3, [pc, #516]	@ (8003894 <HAL_RCC_ClockConfig+0x264>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003694:	2b00      	cmp	r3, #0
 8003696:	d101      	bne.n	800369c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	e0f4      	b.n	8003886 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800369c:	f000 f966 	bl	800396c <RCC_GetSysClockFreqFromPLLSource>
 80036a0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	4a7c      	ldr	r2, [pc, #496]	@ (8003898 <HAL_RCC_ClockConfig+0x268>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d93f      	bls.n	800372a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80036aa:	4b7a      	ldr	r3, [pc, #488]	@ (8003894 <HAL_RCC_ClockConfig+0x264>)
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d009      	beq.n	80036ca <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d033      	beq.n	800372a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d12f      	bne.n	800372a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80036ca:	4b72      	ldr	r3, [pc, #456]	@ (8003894 <HAL_RCC_ClockConfig+0x264>)
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80036d2:	4a70      	ldr	r2, [pc, #448]	@ (8003894 <HAL_RCC_ClockConfig+0x264>)
 80036d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80036d8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80036da:	2380      	movs	r3, #128	@ 0x80
 80036dc:	617b      	str	r3, [r7, #20]
 80036de:	e024      	b.n	800372a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	2b02      	cmp	r3, #2
 80036e6:	d107      	bne.n	80036f8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80036e8:	4b6a      	ldr	r3, [pc, #424]	@ (8003894 <HAL_RCC_ClockConfig+0x264>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d109      	bne.n	8003708 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	e0c6      	b.n	8003886 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036f8:	4b66      	ldr	r3, [pc, #408]	@ (8003894 <HAL_RCC_ClockConfig+0x264>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003700:	2b00      	cmp	r3, #0
 8003702:	d101      	bne.n	8003708 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	e0be      	b.n	8003886 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003708:	f000 f8ce 	bl	80038a8 <HAL_RCC_GetSysClockFreq>
 800370c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	4a61      	ldr	r2, [pc, #388]	@ (8003898 <HAL_RCC_ClockConfig+0x268>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d909      	bls.n	800372a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003716:	4b5f      	ldr	r3, [pc, #380]	@ (8003894 <HAL_RCC_ClockConfig+0x264>)
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800371e:	4a5d      	ldr	r2, [pc, #372]	@ (8003894 <HAL_RCC_ClockConfig+0x264>)
 8003720:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003724:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003726:	2380      	movs	r3, #128	@ 0x80
 8003728:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800372a:	4b5a      	ldr	r3, [pc, #360]	@ (8003894 <HAL_RCC_ClockConfig+0x264>)
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	f023 0203 	bic.w	r2, r3, #3
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	4957      	ldr	r1, [pc, #348]	@ (8003894 <HAL_RCC_ClockConfig+0x264>)
 8003738:	4313      	orrs	r3, r2
 800373a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800373c:	f7fd f9be 	bl	8000abc <HAL_GetTick>
 8003740:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003742:	e00a      	b.n	800375a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003744:	f7fd f9ba 	bl	8000abc <HAL_GetTick>
 8003748:	4602      	mov	r2, r0
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	1ad3      	subs	r3, r2, r3
 800374e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003752:	4293      	cmp	r3, r2
 8003754:	d901      	bls.n	800375a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003756:	2303      	movs	r3, #3
 8003758:	e095      	b.n	8003886 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800375a:	4b4e      	ldr	r3, [pc, #312]	@ (8003894 <HAL_RCC_ClockConfig+0x264>)
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	f003 020c 	and.w	r2, r3, #12
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	009b      	lsls	r3, r3, #2
 8003768:	429a      	cmp	r2, r3
 800376a:	d1eb      	bne.n	8003744 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 0302 	and.w	r3, r3, #2
 8003774:	2b00      	cmp	r3, #0
 8003776:	d023      	beq.n	80037c0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 0304 	and.w	r3, r3, #4
 8003780:	2b00      	cmp	r3, #0
 8003782:	d005      	beq.n	8003790 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003784:	4b43      	ldr	r3, [pc, #268]	@ (8003894 <HAL_RCC_ClockConfig+0x264>)
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	4a42      	ldr	r2, [pc, #264]	@ (8003894 <HAL_RCC_ClockConfig+0x264>)
 800378a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800378e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f003 0308 	and.w	r3, r3, #8
 8003798:	2b00      	cmp	r3, #0
 800379a:	d007      	beq.n	80037ac <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800379c:	4b3d      	ldr	r3, [pc, #244]	@ (8003894 <HAL_RCC_ClockConfig+0x264>)
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80037a4:	4a3b      	ldr	r2, [pc, #236]	@ (8003894 <HAL_RCC_ClockConfig+0x264>)
 80037a6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80037aa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037ac:	4b39      	ldr	r3, [pc, #228]	@ (8003894 <HAL_RCC_ClockConfig+0x264>)
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	4936      	ldr	r1, [pc, #216]	@ (8003894 <HAL_RCC_ClockConfig+0x264>)
 80037ba:	4313      	orrs	r3, r2
 80037bc:	608b      	str	r3, [r1, #8]
 80037be:	e008      	b.n	80037d2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	2b80      	cmp	r3, #128	@ 0x80
 80037c4:	d105      	bne.n	80037d2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80037c6:	4b33      	ldr	r3, [pc, #204]	@ (8003894 <HAL_RCC_ClockConfig+0x264>)
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	4a32      	ldr	r2, [pc, #200]	@ (8003894 <HAL_RCC_ClockConfig+0x264>)
 80037cc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80037d0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80037d2:	4b2f      	ldr	r3, [pc, #188]	@ (8003890 <HAL_RCC_ClockConfig+0x260>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 030f 	and.w	r3, r3, #15
 80037da:	683a      	ldr	r2, [r7, #0]
 80037dc:	429a      	cmp	r2, r3
 80037de:	d21d      	bcs.n	800381c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037e0:	4b2b      	ldr	r3, [pc, #172]	@ (8003890 <HAL_RCC_ClockConfig+0x260>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f023 020f 	bic.w	r2, r3, #15
 80037e8:	4929      	ldr	r1, [pc, #164]	@ (8003890 <HAL_RCC_ClockConfig+0x260>)
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	4313      	orrs	r3, r2
 80037ee:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80037f0:	f7fd f964 	bl	8000abc <HAL_GetTick>
 80037f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037f6:	e00a      	b.n	800380e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037f8:	f7fd f960 	bl	8000abc <HAL_GetTick>
 80037fc:	4602      	mov	r2, r0
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	1ad3      	subs	r3, r2, r3
 8003802:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003806:	4293      	cmp	r3, r2
 8003808:	d901      	bls.n	800380e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800380a:	2303      	movs	r3, #3
 800380c:	e03b      	b.n	8003886 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800380e:	4b20      	ldr	r3, [pc, #128]	@ (8003890 <HAL_RCC_ClockConfig+0x260>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f003 030f 	and.w	r3, r3, #15
 8003816:	683a      	ldr	r2, [r7, #0]
 8003818:	429a      	cmp	r2, r3
 800381a:	d1ed      	bne.n	80037f8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 0304 	and.w	r3, r3, #4
 8003824:	2b00      	cmp	r3, #0
 8003826:	d008      	beq.n	800383a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003828:	4b1a      	ldr	r3, [pc, #104]	@ (8003894 <HAL_RCC_ClockConfig+0x264>)
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	4917      	ldr	r1, [pc, #92]	@ (8003894 <HAL_RCC_ClockConfig+0x264>)
 8003836:	4313      	orrs	r3, r2
 8003838:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 0308 	and.w	r3, r3, #8
 8003842:	2b00      	cmp	r3, #0
 8003844:	d009      	beq.n	800385a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003846:	4b13      	ldr	r3, [pc, #76]	@ (8003894 <HAL_RCC_ClockConfig+0x264>)
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	691b      	ldr	r3, [r3, #16]
 8003852:	00db      	lsls	r3, r3, #3
 8003854:	490f      	ldr	r1, [pc, #60]	@ (8003894 <HAL_RCC_ClockConfig+0x264>)
 8003856:	4313      	orrs	r3, r2
 8003858:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800385a:	f000 f825 	bl	80038a8 <HAL_RCC_GetSysClockFreq>
 800385e:	4602      	mov	r2, r0
 8003860:	4b0c      	ldr	r3, [pc, #48]	@ (8003894 <HAL_RCC_ClockConfig+0x264>)
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	091b      	lsrs	r3, r3, #4
 8003866:	f003 030f 	and.w	r3, r3, #15
 800386a:	490c      	ldr	r1, [pc, #48]	@ (800389c <HAL_RCC_ClockConfig+0x26c>)
 800386c:	5ccb      	ldrb	r3, [r1, r3]
 800386e:	f003 031f 	and.w	r3, r3, #31
 8003872:	fa22 f303 	lsr.w	r3, r2, r3
 8003876:	4a0a      	ldr	r2, [pc, #40]	@ (80038a0 <HAL_RCC_ClockConfig+0x270>)
 8003878:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800387a:	4b0a      	ldr	r3, [pc, #40]	@ (80038a4 <HAL_RCC_ClockConfig+0x274>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4618      	mov	r0, r3
 8003880:	f7fd f8d0 	bl	8000a24 <HAL_InitTick>
 8003884:	4603      	mov	r3, r0
}
 8003886:	4618      	mov	r0, r3
 8003888:	3718      	adds	r7, #24
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}
 800388e:	bf00      	nop
 8003890:	40022000 	.word	0x40022000
 8003894:	40021000 	.word	0x40021000
 8003898:	04c4b400 	.word	0x04c4b400
 800389c:	08004f9c 	.word	0x08004f9c
 80038a0:	20000010 	.word	0x20000010
 80038a4:	20000014 	.word	0x20000014

080038a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b087      	sub	sp, #28
 80038ac:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80038ae:	4b2c      	ldr	r3, [pc, #176]	@ (8003960 <HAL_RCC_GetSysClockFreq+0xb8>)
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	f003 030c 	and.w	r3, r3, #12
 80038b6:	2b04      	cmp	r3, #4
 80038b8:	d102      	bne.n	80038c0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80038ba:	4b2a      	ldr	r3, [pc, #168]	@ (8003964 <HAL_RCC_GetSysClockFreq+0xbc>)
 80038bc:	613b      	str	r3, [r7, #16]
 80038be:	e047      	b.n	8003950 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80038c0:	4b27      	ldr	r3, [pc, #156]	@ (8003960 <HAL_RCC_GetSysClockFreq+0xb8>)
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	f003 030c 	and.w	r3, r3, #12
 80038c8:	2b08      	cmp	r3, #8
 80038ca:	d102      	bne.n	80038d2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80038cc:	4b26      	ldr	r3, [pc, #152]	@ (8003968 <HAL_RCC_GetSysClockFreq+0xc0>)
 80038ce:	613b      	str	r3, [r7, #16]
 80038d0:	e03e      	b.n	8003950 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80038d2:	4b23      	ldr	r3, [pc, #140]	@ (8003960 <HAL_RCC_GetSysClockFreq+0xb8>)
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	f003 030c 	and.w	r3, r3, #12
 80038da:	2b0c      	cmp	r3, #12
 80038dc:	d136      	bne.n	800394c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80038de:	4b20      	ldr	r3, [pc, #128]	@ (8003960 <HAL_RCC_GetSysClockFreq+0xb8>)
 80038e0:	68db      	ldr	r3, [r3, #12]
 80038e2:	f003 0303 	and.w	r3, r3, #3
 80038e6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80038e8:	4b1d      	ldr	r3, [pc, #116]	@ (8003960 <HAL_RCC_GetSysClockFreq+0xb8>)
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	091b      	lsrs	r3, r3, #4
 80038ee:	f003 030f 	and.w	r3, r3, #15
 80038f2:	3301      	adds	r3, #1
 80038f4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	2b03      	cmp	r3, #3
 80038fa:	d10c      	bne.n	8003916 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80038fc:	4a1a      	ldr	r2, [pc, #104]	@ (8003968 <HAL_RCC_GetSysClockFreq+0xc0>)
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	fbb2 f3f3 	udiv	r3, r2, r3
 8003904:	4a16      	ldr	r2, [pc, #88]	@ (8003960 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003906:	68d2      	ldr	r2, [r2, #12]
 8003908:	0a12      	lsrs	r2, r2, #8
 800390a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800390e:	fb02 f303 	mul.w	r3, r2, r3
 8003912:	617b      	str	r3, [r7, #20]
      break;
 8003914:	e00c      	b.n	8003930 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003916:	4a13      	ldr	r2, [pc, #76]	@ (8003964 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	fbb2 f3f3 	udiv	r3, r2, r3
 800391e:	4a10      	ldr	r2, [pc, #64]	@ (8003960 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003920:	68d2      	ldr	r2, [r2, #12]
 8003922:	0a12      	lsrs	r2, r2, #8
 8003924:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003928:	fb02 f303 	mul.w	r3, r2, r3
 800392c:	617b      	str	r3, [r7, #20]
      break;
 800392e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003930:	4b0b      	ldr	r3, [pc, #44]	@ (8003960 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003932:	68db      	ldr	r3, [r3, #12]
 8003934:	0e5b      	lsrs	r3, r3, #25
 8003936:	f003 0303 	and.w	r3, r3, #3
 800393a:	3301      	adds	r3, #1
 800393c:	005b      	lsls	r3, r3, #1
 800393e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003940:	697a      	ldr	r2, [r7, #20]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	fbb2 f3f3 	udiv	r3, r2, r3
 8003948:	613b      	str	r3, [r7, #16]
 800394a:	e001      	b.n	8003950 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800394c:	2300      	movs	r3, #0
 800394e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003950:	693b      	ldr	r3, [r7, #16]
}
 8003952:	4618      	mov	r0, r3
 8003954:	371c      	adds	r7, #28
 8003956:	46bd      	mov	sp, r7
 8003958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395c:	4770      	bx	lr
 800395e:	bf00      	nop
 8003960:	40021000 	.word	0x40021000
 8003964:	00f42400 	.word	0x00f42400
 8003968:	016e3600 	.word	0x016e3600

0800396c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800396c:	b480      	push	{r7}
 800396e:	b087      	sub	sp, #28
 8003970:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003972:	4b1e      	ldr	r3, [pc, #120]	@ (80039ec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003974:	68db      	ldr	r3, [r3, #12]
 8003976:	f003 0303 	and.w	r3, r3, #3
 800397a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800397c:	4b1b      	ldr	r3, [pc, #108]	@ (80039ec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800397e:	68db      	ldr	r3, [r3, #12]
 8003980:	091b      	lsrs	r3, r3, #4
 8003982:	f003 030f 	and.w	r3, r3, #15
 8003986:	3301      	adds	r3, #1
 8003988:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	2b03      	cmp	r3, #3
 800398e:	d10c      	bne.n	80039aa <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003990:	4a17      	ldr	r2, [pc, #92]	@ (80039f0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	fbb2 f3f3 	udiv	r3, r2, r3
 8003998:	4a14      	ldr	r2, [pc, #80]	@ (80039ec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800399a:	68d2      	ldr	r2, [r2, #12]
 800399c:	0a12      	lsrs	r2, r2, #8
 800399e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80039a2:	fb02 f303 	mul.w	r3, r2, r3
 80039a6:	617b      	str	r3, [r7, #20]
    break;
 80039a8:	e00c      	b.n	80039c4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80039aa:	4a12      	ldr	r2, [pc, #72]	@ (80039f4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80039b2:	4a0e      	ldr	r2, [pc, #56]	@ (80039ec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80039b4:	68d2      	ldr	r2, [r2, #12]
 80039b6:	0a12      	lsrs	r2, r2, #8
 80039b8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80039bc:	fb02 f303 	mul.w	r3, r2, r3
 80039c0:	617b      	str	r3, [r7, #20]
    break;
 80039c2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80039c4:	4b09      	ldr	r3, [pc, #36]	@ (80039ec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80039c6:	68db      	ldr	r3, [r3, #12]
 80039c8:	0e5b      	lsrs	r3, r3, #25
 80039ca:	f003 0303 	and.w	r3, r3, #3
 80039ce:	3301      	adds	r3, #1
 80039d0:	005b      	lsls	r3, r3, #1
 80039d2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80039d4:	697a      	ldr	r2, [r7, #20]
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80039dc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80039de:	687b      	ldr	r3, [r7, #4]
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	371c      	adds	r7, #28
 80039e4:	46bd      	mov	sp, r7
 80039e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ea:	4770      	bx	lr
 80039ec:	40021000 	.word	0x40021000
 80039f0:	016e3600 	.word	0x016e3600
 80039f4:	00f42400 	.word	0x00f42400

080039f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b086      	sub	sp, #24
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003a00:	2300      	movs	r3, #0
 8003a02:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003a04:	2300      	movs	r3, #0
 8003a06:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	f000 8098 	beq.w	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a16:	2300      	movs	r3, #0
 8003a18:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a1a:	4b43      	ldr	r3, [pc, #268]	@ (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d10d      	bne.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a26:	4b40      	ldr	r3, [pc, #256]	@ (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a2a:	4a3f      	ldr	r2, [pc, #252]	@ (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a30:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a32:	4b3d      	ldr	r3, [pc, #244]	@ (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a3a:	60bb      	str	r3, [r7, #8]
 8003a3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a42:	4b3a      	ldr	r3, [pc, #232]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a39      	ldr	r2, [pc, #228]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003a48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a4c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a4e:	f7fd f835 	bl	8000abc <HAL_GetTick>
 8003a52:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a54:	e009      	b.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a56:	f7fd f831 	bl	8000abc <HAL_GetTick>
 8003a5a:	4602      	mov	r2, r0
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	1ad3      	subs	r3, r2, r3
 8003a60:	2b02      	cmp	r3, #2
 8003a62:	d902      	bls.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003a64:	2303      	movs	r3, #3
 8003a66:	74fb      	strb	r3, [r7, #19]
        break;
 8003a68:	e005      	b.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a6a:	4b30      	ldr	r3, [pc, #192]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d0ef      	beq.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003a76:	7cfb      	ldrb	r3, [r7, #19]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d159      	bne.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003a7c:	4b2a      	ldr	r3, [pc, #168]	@ (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a82:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a86:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d01e      	beq.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a92:	697a      	ldr	r2, [r7, #20]
 8003a94:	429a      	cmp	r2, r3
 8003a96:	d019      	beq.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003a98:	4b23      	ldr	r3, [pc, #140]	@ (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a9e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003aa2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003aa4:	4b20      	ldr	r3, [pc, #128]	@ (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003aa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003aaa:	4a1f      	ldr	r2, [pc, #124]	@ (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003aac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ab0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003ab4:	4b1c      	ldr	r3, [pc, #112]	@ (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ab6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003aba:	4a1b      	ldr	r2, [pc, #108]	@ (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003abc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ac0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003ac4:	4a18      	ldr	r2, [pc, #96]	@ (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	f003 0301 	and.w	r3, r3, #1
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d016      	beq.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ad6:	f7fc fff1 	bl	8000abc <HAL_GetTick>
 8003ada:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003adc:	e00b      	b.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ade:	f7fc ffed 	bl	8000abc <HAL_GetTick>
 8003ae2:	4602      	mov	r2, r0
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	1ad3      	subs	r3, r2, r3
 8003ae8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d902      	bls.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003af0:	2303      	movs	r3, #3
 8003af2:	74fb      	strb	r3, [r7, #19]
            break;
 8003af4:	e006      	b.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003af6:	4b0c      	ldr	r3, [pc, #48]	@ (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003af8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003afc:	f003 0302 	and.w	r3, r3, #2
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d0ec      	beq.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003b04:	7cfb      	ldrb	r3, [r7, #19]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d10b      	bne.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b0a:	4b07      	ldr	r3, [pc, #28]	@ (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b10:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b18:	4903      	ldr	r1, [pc, #12]	@ (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003b20:	e008      	b.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003b22:	7cfb      	ldrb	r3, [r7, #19]
 8003b24:	74bb      	strb	r3, [r7, #18]
 8003b26:	e005      	b.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003b28:	40021000 	.word	0x40021000
 8003b2c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b30:	7cfb      	ldrb	r3, [r7, #19]
 8003b32:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b34:	7c7b      	ldrb	r3, [r7, #17]
 8003b36:	2b01      	cmp	r3, #1
 8003b38:	d105      	bne.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b3a:	4ba7      	ldr	r3, [pc, #668]	@ (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b3e:	4aa6      	ldr	r2, [pc, #664]	@ (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b40:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b44:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 0301 	and.w	r3, r3, #1
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d00a      	beq.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b52:	4ba1      	ldr	r3, [pc, #644]	@ (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b58:	f023 0203 	bic.w	r2, r3, #3
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	499d      	ldr	r1, [pc, #628]	@ (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b62:	4313      	orrs	r3, r2
 8003b64:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f003 0302 	and.w	r3, r3, #2
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d00a      	beq.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003b74:	4b98      	ldr	r3, [pc, #608]	@ (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b7a:	f023 020c 	bic.w	r2, r3, #12
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	4995      	ldr	r1, [pc, #596]	@ (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b84:	4313      	orrs	r3, r2
 8003b86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f003 0304 	and.w	r3, r3, #4
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d00a      	beq.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003b96:	4b90      	ldr	r3, [pc, #576]	@ (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b9c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	68db      	ldr	r3, [r3, #12]
 8003ba4:	498c      	ldr	r1, [pc, #560]	@ (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f003 0308 	and.w	r3, r3, #8
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d00a      	beq.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003bb8:	4b87      	ldr	r3, [pc, #540]	@ (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bbe:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	691b      	ldr	r3, [r3, #16]
 8003bc6:	4984      	ldr	r1, [pc, #528]	@ (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f003 0310 	and.w	r3, r3, #16
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d00a      	beq.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003bda:	4b7f      	ldr	r3, [pc, #508]	@ (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003be0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	695b      	ldr	r3, [r3, #20]
 8003be8:	497b      	ldr	r1, [pc, #492]	@ (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bea:	4313      	orrs	r3, r2
 8003bec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f003 0320 	and.w	r3, r3, #32
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d00a      	beq.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003bfc:	4b76      	ldr	r3, [pc, #472]	@ (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c02:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	699b      	ldr	r3, [r3, #24]
 8003c0a:	4973      	ldr	r1, [pc, #460]	@ (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d00a      	beq.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c1e:	4b6e      	ldr	r3, [pc, #440]	@ (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c24:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	69db      	ldr	r3, [r3, #28]
 8003c2c:	496a      	ldr	r1, [pc, #424]	@ (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d00a      	beq.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003c40:	4b65      	ldr	r3, [pc, #404]	@ (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c46:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6a1b      	ldr	r3, [r3, #32]
 8003c4e:	4962      	ldr	r1, [pc, #392]	@ (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c50:	4313      	orrs	r3, r2
 8003c52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d00a      	beq.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003c62:	4b5d      	ldr	r3, [pc, #372]	@ (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c68:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c70:	4959      	ldr	r1, [pc, #356]	@ (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c72:	4313      	orrs	r3, r2
 8003c74:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d00a      	beq.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003c84:	4b54      	ldr	r3, [pc, #336]	@ (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c86:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003c8a:	f023 0203 	bic.w	r2, r3, #3
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c92:	4951      	ldr	r1, [pc, #324]	@ (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c94:	4313      	orrs	r3, r2
 8003c96:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d00a      	beq.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003ca6:	4b4c      	ldr	r3, [pc, #304]	@ (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ca8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cac:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cb4:	4948      	ldr	r1, [pc, #288]	@ (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d015      	beq.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003cc8:	4b43      	ldr	r3, [pc, #268]	@ (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cce:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cd6:	4940      	ldr	r1, [pc, #256]	@ (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ce2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003ce6:	d105      	bne.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ce8:	4b3b      	ldr	r3, [pc, #236]	@ (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cea:	68db      	ldr	r3, [r3, #12]
 8003cec:	4a3a      	ldr	r2, [pc, #232]	@ (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003cf2:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d015      	beq.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003d00:	4b35      	ldr	r3, [pc, #212]	@ (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d06:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d0e:	4932      	ldr	r1, [pc, #200]	@ (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d10:	4313      	orrs	r3, r2
 8003d12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d1a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003d1e:	d105      	bne.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d20:	4b2d      	ldr	r3, [pc, #180]	@ (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d22:	68db      	ldr	r3, [r3, #12]
 8003d24:	4a2c      	ldr	r2, [pc, #176]	@ (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d26:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003d2a:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d015      	beq.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003d38:	4b27      	ldr	r3, [pc, #156]	@ (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d3e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d46:	4924      	ldr	r1, [pc, #144]	@ (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d52:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003d56:	d105      	bne.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d58:	4b1f      	ldr	r3, [pc, #124]	@ (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d5a:	68db      	ldr	r3, [r3, #12]
 8003d5c:	4a1e      	ldr	r2, [pc, #120]	@ (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d5e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003d62:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d015      	beq.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003d70:	4b19      	ldr	r3, [pc, #100]	@ (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d76:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d7e:	4916      	ldr	r1, [pc, #88]	@ (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d80:	4313      	orrs	r3, r2
 8003d82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d8a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003d8e:	d105      	bne.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d90:	4b11      	ldr	r3, [pc, #68]	@ (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d92:	68db      	ldr	r3, [r3, #12]
 8003d94:	4a10      	ldr	r2, [pc, #64]	@ (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d96:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003d9a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d019      	beq.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003da8:	4b0b      	ldr	r3, [pc, #44]	@ (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dae:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003db6:	4908      	ldr	r1, [pc, #32]	@ (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003db8:	4313      	orrs	r3, r2
 8003dba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dc2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003dc6:	d109      	bne.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003dc8:	4b03      	ldr	r3, [pc, #12]	@ (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003dca:	68db      	ldr	r3, [r3, #12]
 8003dcc:	4a02      	ldr	r2, [pc, #8]	@ (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003dce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003dd2:	60d3      	str	r3, [r2, #12]
 8003dd4:	e002      	b.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003dd6:	bf00      	nop
 8003dd8:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d015      	beq.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003de8:	4b29      	ldr	r3, [pc, #164]	@ (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003dea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dee:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003df6:	4926      	ldr	r1, [pc, #152]	@ (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e02:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003e06:	d105      	bne.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003e08:	4b21      	ldr	r3, [pc, #132]	@ (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003e0a:	68db      	ldr	r3, [r3, #12]
 8003e0c:	4a20      	ldr	r2, [pc, #128]	@ (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003e0e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e12:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d015      	beq.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003e20:	4b1b      	ldr	r3, [pc, #108]	@ (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e26:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e2e:	4918      	ldr	r1, [pc, #96]	@ (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003e30:	4313      	orrs	r3, r2
 8003e32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e3e:	d105      	bne.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003e40:	4b13      	ldr	r3, [pc, #76]	@ (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003e42:	68db      	ldr	r3, [r3, #12]
 8003e44:	4a12      	ldr	r2, [pc, #72]	@ (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003e46:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e4a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d015      	beq.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003e58:	4b0d      	ldr	r3, [pc, #52]	@ (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003e5a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003e5e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e66:	490a      	ldr	r1, [pc, #40]	@ (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e72:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003e76:	d105      	bne.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e78:	4b05      	ldr	r3, [pc, #20]	@ (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003e7a:	68db      	ldr	r3, [r3, #12]
 8003e7c:	4a04      	ldr	r2, [pc, #16]	@ (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003e7e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003e82:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003e84:	7cbb      	ldrb	r3, [r7, #18]
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3718      	adds	r7, #24
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}
 8003e8e:	bf00      	nop
 8003e90:	40021000 	.word	0x40021000

08003e94 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b084      	sub	sp, #16
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d101      	bne.n	8003ea6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e09d      	b.n	8003fe2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d108      	bne.n	8003ec0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003eb6:	d009      	beq.n	8003ecc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	61da      	str	r2, [r3, #28]
 8003ebe:	e005      	b.n	8003ecc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003ed8:	b2db      	uxtb	r3, r3
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d106      	bne.n	8003eec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	f7fc fcae 	bl	8000848 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2202      	movs	r2, #2
 8003ef0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003f02:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	68db      	ldr	r3, [r3, #12]
 8003f08:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003f0c:	d902      	bls.n	8003f14 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	60fb      	str	r3, [r7, #12]
 8003f12:	e002      	b.n	8003f1a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003f14:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003f18:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	68db      	ldr	r3, [r3, #12]
 8003f1e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003f22:	d007      	beq.n	8003f34 <HAL_SPI_Init+0xa0>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	68db      	ldr	r3, [r3, #12]
 8003f28:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003f2c:	d002      	beq.n	8003f34 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2200      	movs	r2, #0
 8003f32:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003f44:	431a      	orrs	r2, r3
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	691b      	ldr	r3, [r3, #16]
 8003f4a:	f003 0302 	and.w	r3, r3, #2
 8003f4e:	431a      	orrs	r2, r3
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	695b      	ldr	r3, [r3, #20]
 8003f54:	f003 0301 	and.w	r3, r3, #1
 8003f58:	431a      	orrs	r2, r3
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	699b      	ldr	r3, [r3, #24]
 8003f5e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f62:	431a      	orrs	r2, r3
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	69db      	ldr	r3, [r3, #28]
 8003f68:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003f6c:	431a      	orrs	r2, r3
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6a1b      	ldr	r3, [r3, #32]
 8003f72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f76:	ea42 0103 	orr.w	r1, r2, r3
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f7e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	430a      	orrs	r2, r1
 8003f88:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	699b      	ldr	r3, [r3, #24]
 8003f8e:	0c1b      	lsrs	r3, r3, #16
 8003f90:	f003 0204 	and.w	r2, r3, #4
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f98:	f003 0310 	and.w	r3, r3, #16
 8003f9c:	431a      	orrs	r2, r3
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fa2:	f003 0308 	and.w	r3, r3, #8
 8003fa6:	431a      	orrs	r2, r3
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	68db      	ldr	r3, [r3, #12]
 8003fac:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003fb0:	ea42 0103 	orr.w	r1, r2, r3
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	430a      	orrs	r2, r1
 8003fc0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	69da      	ldr	r2, [r3, #28]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003fd0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003fe0:	2300      	movs	r3, #0
}
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	3710      	adds	r7, #16
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bd80      	pop	{r7, pc}

08003fea <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fea:	b580      	push	{r7, lr}
 8003fec:	b088      	sub	sp, #32
 8003fee:	af00      	add	r7, sp, #0
 8003ff0:	60f8      	str	r0, [r7, #12]
 8003ff2:	60b9      	str	r1, [r7, #8]
 8003ff4:	603b      	str	r3, [r7, #0]
 8003ff6:	4613      	mov	r3, r2
 8003ff8:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003ffa:	f7fc fd5f 	bl	8000abc <HAL_GetTick>
 8003ffe:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004000:	88fb      	ldrh	r3, [r7, #6]
 8004002:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800400a:	b2db      	uxtb	r3, r3
 800400c:	2b01      	cmp	r3, #1
 800400e:	d001      	beq.n	8004014 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004010:	2302      	movs	r3, #2
 8004012:	e15c      	b.n	80042ce <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d002      	beq.n	8004020 <HAL_SPI_Transmit+0x36>
 800401a:	88fb      	ldrh	r3, [r7, #6]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d101      	bne.n	8004024 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	e154      	b.n	80042ce <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800402a:	2b01      	cmp	r3, #1
 800402c:	d101      	bne.n	8004032 <HAL_SPI_Transmit+0x48>
 800402e:	2302      	movs	r3, #2
 8004030:	e14d      	b.n	80042ce <HAL_SPI_Transmit+0x2e4>
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2201      	movs	r2, #1
 8004036:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2203      	movs	r2, #3
 800403e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2200      	movs	r2, #0
 8004046:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	68ba      	ldr	r2, [r7, #8]
 800404c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	88fa      	ldrh	r2, [r7, #6]
 8004052:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	88fa      	ldrh	r2, [r7, #6]
 8004058:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2200      	movs	r2, #0
 800405e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	2200      	movs	r2, #0
 8004064:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	2200      	movs	r2, #0
 800406c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	2200      	movs	r2, #0
 8004074:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2200      	movs	r2, #0
 800407a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	689b      	ldr	r3, [r3, #8]
 8004080:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004084:	d10f      	bne.n	80040a6 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004094:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	681a      	ldr	r2, [r3, #0]
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80040a4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040b0:	2b40      	cmp	r3, #64	@ 0x40
 80040b2:	d007      	beq.n	80040c4 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80040c2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	68db      	ldr	r3, [r3, #12]
 80040c8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80040cc:	d952      	bls.n	8004174 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d002      	beq.n	80040dc <HAL_SPI_Transmit+0xf2>
 80040d6:	8b7b      	ldrh	r3, [r7, #26]
 80040d8:	2b01      	cmp	r3, #1
 80040da:	d145      	bne.n	8004168 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040e0:	881a      	ldrh	r2, [r3, #0]
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040ec:	1c9a      	adds	r2, r3, #2
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80040f6:	b29b      	uxth	r3, r3
 80040f8:	3b01      	subs	r3, #1
 80040fa:	b29a      	uxth	r2, r3
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004100:	e032      	b.n	8004168 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	f003 0302 	and.w	r3, r3, #2
 800410c:	2b02      	cmp	r3, #2
 800410e:	d112      	bne.n	8004136 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004114:	881a      	ldrh	r2, [r3, #0]
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004120:	1c9a      	adds	r2, r3, #2
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800412a:	b29b      	uxth	r3, r3
 800412c:	3b01      	subs	r3, #1
 800412e:	b29a      	uxth	r2, r3
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004134:	e018      	b.n	8004168 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004136:	f7fc fcc1 	bl	8000abc <HAL_GetTick>
 800413a:	4602      	mov	r2, r0
 800413c:	69fb      	ldr	r3, [r7, #28]
 800413e:	1ad3      	subs	r3, r2, r3
 8004140:	683a      	ldr	r2, [r7, #0]
 8004142:	429a      	cmp	r2, r3
 8004144:	d803      	bhi.n	800414e <HAL_SPI_Transmit+0x164>
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800414c:	d102      	bne.n	8004154 <HAL_SPI_Transmit+0x16a>
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d109      	bne.n	8004168 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2201      	movs	r2, #1
 8004158:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2200      	movs	r2, #0
 8004160:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8004164:	2303      	movs	r3, #3
 8004166:	e0b2      	b.n	80042ce <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800416c:	b29b      	uxth	r3, r3
 800416e:	2b00      	cmp	r3, #0
 8004170:	d1c7      	bne.n	8004102 <HAL_SPI_Transmit+0x118>
 8004172:	e083      	b.n	800427c <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d002      	beq.n	8004182 <HAL_SPI_Transmit+0x198>
 800417c:	8b7b      	ldrh	r3, [r7, #26]
 800417e:	2b01      	cmp	r3, #1
 8004180:	d177      	bne.n	8004272 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004186:	b29b      	uxth	r3, r3
 8004188:	2b01      	cmp	r3, #1
 800418a:	d912      	bls.n	80041b2 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004190:	881a      	ldrh	r2, [r3, #0]
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800419c:	1c9a      	adds	r2, r3, #2
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80041a6:	b29b      	uxth	r3, r3
 80041a8:	3b02      	subs	r3, #2
 80041aa:	b29a      	uxth	r2, r3
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80041b0:	e05f      	b.n	8004272 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	330c      	adds	r3, #12
 80041bc:	7812      	ldrb	r2, [r2, #0]
 80041be:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041c4:	1c5a      	adds	r2, r3, #1
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80041ce:	b29b      	uxth	r3, r3
 80041d0:	3b01      	subs	r3, #1
 80041d2:	b29a      	uxth	r2, r3
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80041d8:	e04b      	b.n	8004272 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	f003 0302 	and.w	r3, r3, #2
 80041e4:	2b02      	cmp	r3, #2
 80041e6:	d12b      	bne.n	8004240 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80041ec:	b29b      	uxth	r3, r3
 80041ee:	2b01      	cmp	r3, #1
 80041f0:	d912      	bls.n	8004218 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041f6:	881a      	ldrh	r2, [r3, #0]
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004202:	1c9a      	adds	r2, r3, #2
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800420c:	b29b      	uxth	r3, r3
 800420e:	3b02      	subs	r3, #2
 8004210:	b29a      	uxth	r2, r3
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004216:	e02c      	b.n	8004272 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	330c      	adds	r3, #12
 8004222:	7812      	ldrb	r2, [r2, #0]
 8004224:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800422a:	1c5a      	adds	r2, r3, #1
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004234:	b29b      	uxth	r3, r3
 8004236:	3b01      	subs	r3, #1
 8004238:	b29a      	uxth	r2, r3
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800423e:	e018      	b.n	8004272 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004240:	f7fc fc3c 	bl	8000abc <HAL_GetTick>
 8004244:	4602      	mov	r2, r0
 8004246:	69fb      	ldr	r3, [r7, #28]
 8004248:	1ad3      	subs	r3, r2, r3
 800424a:	683a      	ldr	r2, [r7, #0]
 800424c:	429a      	cmp	r2, r3
 800424e:	d803      	bhi.n	8004258 <HAL_SPI_Transmit+0x26e>
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004256:	d102      	bne.n	800425e <HAL_SPI_Transmit+0x274>
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d109      	bne.n	8004272 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	2201      	movs	r2, #1
 8004262:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	2200      	movs	r2, #0
 800426a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800426e:	2303      	movs	r3, #3
 8004270:	e02d      	b.n	80042ce <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004276:	b29b      	uxth	r3, r3
 8004278:	2b00      	cmp	r3, #0
 800427a:	d1ae      	bne.n	80041da <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800427c:	69fa      	ldr	r2, [r7, #28]
 800427e:	6839      	ldr	r1, [r7, #0]
 8004280:	68f8      	ldr	r0, [r7, #12]
 8004282:	f000 fe09 	bl	8004e98 <SPI_EndRxTxTransaction>
 8004286:	4603      	mov	r3, r0
 8004288:	2b00      	cmp	r3, #0
 800428a:	d002      	beq.n	8004292 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	2220      	movs	r2, #32
 8004290:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d10a      	bne.n	80042b0 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800429a:	2300      	movs	r3, #0
 800429c:	617b      	str	r3, [r7, #20]
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	68db      	ldr	r3, [r3, #12]
 80042a4:	617b      	str	r3, [r7, #20]
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	617b      	str	r3, [r7, #20]
 80042ae:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2201      	movs	r2, #1
 80042b4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	2200      	movs	r2, #0
 80042bc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d001      	beq.n	80042cc <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 80042c8:	2301      	movs	r3, #1
 80042ca:	e000      	b.n	80042ce <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 80042cc:	2300      	movs	r3, #0
  }
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	3720      	adds	r7, #32
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}

080042d6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042d6:	b580      	push	{r7, lr}
 80042d8:	b088      	sub	sp, #32
 80042da:	af02      	add	r7, sp, #8
 80042dc:	60f8      	str	r0, [r7, #12]
 80042de:	60b9      	str	r1, [r7, #8]
 80042e0:	603b      	str	r3, [r7, #0]
 80042e2:	4613      	mov	r3, r2
 80042e4:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80042ec:	b2db      	uxtb	r3, r3
 80042ee:	2b01      	cmp	r3, #1
 80042f0:	d001      	beq.n	80042f6 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80042f2:	2302      	movs	r3, #2
 80042f4:	e123      	b.n	800453e <HAL_SPI_Receive+0x268>
  }

  if ((pData == NULL) || (Size == 0U))
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d002      	beq.n	8004302 <HAL_SPI_Receive+0x2c>
 80042fc:	88fb      	ldrh	r3, [r7, #6]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d101      	bne.n	8004306 <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	e11b      	b.n	800453e <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800430e:	d112      	bne.n	8004336 <HAL_SPI_Receive+0x60>
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d10e      	bne.n	8004336 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2204      	movs	r2, #4
 800431c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004320:	88fa      	ldrh	r2, [r7, #6]
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	9300      	str	r3, [sp, #0]
 8004326:	4613      	mov	r3, r2
 8004328:	68ba      	ldr	r2, [r7, #8]
 800432a:	68b9      	ldr	r1, [r7, #8]
 800432c:	68f8      	ldr	r0, [r7, #12]
 800432e:	f000 f90a 	bl	8004546 <HAL_SPI_TransmitReceive>
 8004332:	4603      	mov	r3, r0
 8004334:	e103      	b.n	800453e <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004336:	f7fc fbc1 	bl	8000abc <HAL_GetTick>
 800433a:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004342:	2b01      	cmp	r3, #1
 8004344:	d101      	bne.n	800434a <HAL_SPI_Receive+0x74>
 8004346:	2302      	movs	r3, #2
 8004348:	e0f9      	b.n	800453e <HAL_SPI_Receive+0x268>
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2201      	movs	r2, #1
 800434e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2204      	movs	r2, #4
 8004356:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2200      	movs	r2, #0
 800435e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	68ba      	ldr	r2, [r7, #8]
 8004364:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	88fa      	ldrh	r2, [r7, #6]
 800436a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	88fa      	ldrh	r2, [r7, #6]
 8004372:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2200      	movs	r2, #0
 800437a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2200      	movs	r2, #0
 8004380:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	2200      	movs	r2, #0
 8004386:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2200      	movs	r2, #0
 800438c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2200      	movs	r2, #0
 8004392:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	68db      	ldr	r3, [r3, #12]
 8004398:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800439c:	d908      	bls.n	80043b0 <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	685a      	ldr	r2, [r3, #4]
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80043ac:	605a      	str	r2, [r3, #4]
 80043ae:	e007      	b.n	80043c0 <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	685a      	ldr	r2, [r3, #4]
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80043be:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80043c8:	d10f      	bne.n	80043ea <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	681a      	ldr	r2, [r3, #0]
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80043d8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80043e8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043f4:	2b40      	cmp	r3, #64	@ 0x40
 80043f6:	d007      	beq.n	8004408 <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	681a      	ldr	r2, [r3, #0]
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004406:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	68db      	ldr	r3, [r3, #12]
 800440c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004410:	d875      	bhi.n	80044fe <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004412:	e037      	b.n	8004484 <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	689b      	ldr	r3, [r3, #8]
 800441a:	f003 0301 	and.w	r3, r3, #1
 800441e:	2b01      	cmp	r3, #1
 8004420:	d117      	bne.n	8004452 <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f103 020c 	add.w	r2, r3, #12
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800442e:	7812      	ldrb	r2, [r2, #0]
 8004430:	b2d2      	uxtb	r2, r2
 8004432:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004438:	1c5a      	adds	r2, r3, #1
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004444:	b29b      	uxth	r3, r3
 8004446:	3b01      	subs	r3, #1
 8004448:	b29a      	uxth	r2, r3
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8004450:	e018      	b.n	8004484 <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004452:	f7fc fb33 	bl	8000abc <HAL_GetTick>
 8004456:	4602      	mov	r2, r0
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	1ad3      	subs	r3, r2, r3
 800445c:	683a      	ldr	r2, [r7, #0]
 800445e:	429a      	cmp	r2, r3
 8004460:	d803      	bhi.n	800446a <HAL_SPI_Receive+0x194>
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004468:	d102      	bne.n	8004470 <HAL_SPI_Receive+0x19a>
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d109      	bne.n	8004484 <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	2201      	movs	r2, #1
 8004474:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2200      	movs	r2, #0
 800447c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8004480:	2303      	movs	r3, #3
 8004482:	e05c      	b.n	800453e <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800448a:	b29b      	uxth	r3, r3
 800448c:	2b00      	cmp	r3, #0
 800448e:	d1c1      	bne.n	8004414 <HAL_SPI_Receive+0x13e>
 8004490:	e03b      	b.n	800450a <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	f003 0301 	and.w	r3, r3, #1
 800449c:	2b01      	cmp	r3, #1
 800449e:	d115      	bne.n	80044cc <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	68da      	ldr	r2, [r3, #12]
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044aa:	b292      	uxth	r2, r2
 80044ac:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044b2:	1c9a      	adds	r2, r3, #2
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80044be:	b29b      	uxth	r3, r3
 80044c0:	3b01      	subs	r3, #1
 80044c2:	b29a      	uxth	r2, r3
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80044ca:	e018      	b.n	80044fe <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80044cc:	f7fc faf6 	bl	8000abc <HAL_GetTick>
 80044d0:	4602      	mov	r2, r0
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	1ad3      	subs	r3, r2, r3
 80044d6:	683a      	ldr	r2, [r7, #0]
 80044d8:	429a      	cmp	r2, r3
 80044da:	d803      	bhi.n	80044e4 <HAL_SPI_Receive+0x20e>
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80044e2:	d102      	bne.n	80044ea <HAL_SPI_Receive+0x214>
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d109      	bne.n	80044fe <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2201      	movs	r2, #1
 80044ee:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2200      	movs	r2, #0
 80044f6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80044fa:	2303      	movs	r3, #3
 80044fc:	e01f      	b.n	800453e <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004504:	b29b      	uxth	r3, r3
 8004506:	2b00      	cmp	r3, #0
 8004508:	d1c3      	bne.n	8004492 <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800450a:	697a      	ldr	r2, [r7, #20]
 800450c:	6839      	ldr	r1, [r7, #0]
 800450e:	68f8      	ldr	r0, [r7, #12]
 8004510:	f000 fc6a 	bl	8004de8 <SPI_EndRxTransaction>
 8004514:	4603      	mov	r3, r0
 8004516:	2b00      	cmp	r3, #0
 8004518:	d002      	beq.n	8004520 <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	2220      	movs	r2, #32
 800451e:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2201      	movs	r2, #1
 8004524:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	2200      	movs	r2, #0
 800452c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004534:	2b00      	cmp	r3, #0
 8004536:	d001      	beq.n	800453c <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 8004538:	2301      	movs	r3, #1
 800453a:	e000      	b.n	800453e <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 800453c:	2300      	movs	r3, #0
  }
}
 800453e:	4618      	mov	r0, r3
 8004540:	3718      	adds	r7, #24
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}

08004546 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004546:	b580      	push	{r7, lr}
 8004548:	b08a      	sub	sp, #40	@ 0x28
 800454a:	af00      	add	r7, sp, #0
 800454c:	60f8      	str	r0, [r7, #12]
 800454e:	60b9      	str	r1, [r7, #8]
 8004550:	607a      	str	r2, [r7, #4]
 8004552:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004554:	2301      	movs	r3, #1
 8004556:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004558:	f7fc fab0 	bl	8000abc <HAL_GetTick>
 800455c:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004564:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800456c:	887b      	ldrh	r3, [r7, #2]
 800456e:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8004570:	887b      	ldrh	r3, [r7, #2]
 8004572:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004574:	7ffb      	ldrb	r3, [r7, #31]
 8004576:	2b01      	cmp	r3, #1
 8004578:	d00c      	beq.n	8004594 <HAL_SPI_TransmitReceive+0x4e>
 800457a:	69bb      	ldr	r3, [r7, #24]
 800457c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004580:	d106      	bne.n	8004590 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d102      	bne.n	8004590 <HAL_SPI_TransmitReceive+0x4a>
 800458a:	7ffb      	ldrb	r3, [r7, #31]
 800458c:	2b04      	cmp	r3, #4
 800458e:	d001      	beq.n	8004594 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8004590:	2302      	movs	r3, #2
 8004592:	e1f3      	b.n	800497c <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d005      	beq.n	80045a6 <HAL_SPI_TransmitReceive+0x60>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d002      	beq.n	80045a6 <HAL_SPI_TransmitReceive+0x60>
 80045a0:	887b      	ldrh	r3, [r7, #2]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d101      	bne.n	80045aa <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	e1e8      	b.n	800497c <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80045b0:	2b01      	cmp	r3, #1
 80045b2:	d101      	bne.n	80045b8 <HAL_SPI_TransmitReceive+0x72>
 80045b4:	2302      	movs	r3, #2
 80045b6:	e1e1      	b.n	800497c <HAL_SPI_TransmitReceive+0x436>
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2201      	movs	r2, #1
 80045bc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80045c6:	b2db      	uxtb	r3, r3
 80045c8:	2b04      	cmp	r3, #4
 80045ca:	d003      	beq.n	80045d4 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	2205      	movs	r2, #5
 80045d0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2200      	movs	r2, #0
 80045d8:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	687a      	ldr	r2, [r7, #4]
 80045de:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	887a      	ldrh	r2, [r7, #2]
 80045e4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	887a      	ldrh	r2, [r7, #2]
 80045ec:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	68ba      	ldr	r2, [r7, #8]
 80045f4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	887a      	ldrh	r2, [r7, #2]
 80045fa:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	887a      	ldrh	r2, [r7, #2]
 8004600:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	2200      	movs	r2, #0
 8004606:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	2200      	movs	r2, #0
 800460c:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	68db      	ldr	r3, [r3, #12]
 8004612:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004616:	d802      	bhi.n	800461e <HAL_SPI_TransmitReceive+0xd8>
 8004618:	8abb      	ldrh	r3, [r7, #20]
 800461a:	2b01      	cmp	r3, #1
 800461c:	d908      	bls.n	8004630 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	685a      	ldr	r2, [r3, #4]
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800462c:	605a      	str	r2, [r3, #4]
 800462e:	e007      	b.n	8004640 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	685a      	ldr	r2, [r3, #4]
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800463e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800464a:	2b40      	cmp	r3, #64	@ 0x40
 800464c:	d007      	beq.n	800465e <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800465c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	68db      	ldr	r3, [r3, #12]
 8004662:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004666:	f240 8083 	bls.w	8004770 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d002      	beq.n	8004678 <HAL_SPI_TransmitReceive+0x132>
 8004672:	8afb      	ldrh	r3, [r7, #22]
 8004674:	2b01      	cmp	r3, #1
 8004676:	d16f      	bne.n	8004758 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800467c:	881a      	ldrh	r2, [r3, #0]
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004688:	1c9a      	adds	r2, r3, #2
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004692:	b29b      	uxth	r3, r3
 8004694:	3b01      	subs	r3, #1
 8004696:	b29a      	uxth	r2, r3
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800469c:	e05c      	b.n	8004758 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	f003 0302 	and.w	r3, r3, #2
 80046a8:	2b02      	cmp	r3, #2
 80046aa:	d11b      	bne.n	80046e4 <HAL_SPI_TransmitReceive+0x19e>
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80046b0:	b29b      	uxth	r3, r3
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d016      	beq.n	80046e4 <HAL_SPI_TransmitReceive+0x19e>
 80046b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	d113      	bne.n	80046e4 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046c0:	881a      	ldrh	r2, [r3, #0]
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046cc:	1c9a      	adds	r2, r3, #2
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80046d6:	b29b      	uxth	r3, r3
 80046d8:	3b01      	subs	r3, #1
 80046da:	b29a      	uxth	r2, r3
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80046e0:	2300      	movs	r3, #0
 80046e2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	f003 0301 	and.w	r3, r3, #1
 80046ee:	2b01      	cmp	r3, #1
 80046f0:	d11c      	bne.n	800472c <HAL_SPI_TransmitReceive+0x1e6>
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80046f8:	b29b      	uxth	r3, r3
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d016      	beq.n	800472c <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	68da      	ldr	r2, [r3, #12]
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004708:	b292      	uxth	r2, r2
 800470a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004710:	1c9a      	adds	r2, r3, #2
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800471c:	b29b      	uxth	r3, r3
 800471e:	3b01      	subs	r3, #1
 8004720:	b29a      	uxth	r2, r3
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004728:	2301      	movs	r3, #1
 800472a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800472c:	f7fc f9c6 	bl	8000abc <HAL_GetTick>
 8004730:	4602      	mov	r2, r0
 8004732:	6a3b      	ldr	r3, [r7, #32]
 8004734:	1ad3      	subs	r3, r2, r3
 8004736:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004738:	429a      	cmp	r2, r3
 800473a:	d80d      	bhi.n	8004758 <HAL_SPI_TransmitReceive+0x212>
 800473c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800473e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004742:	d009      	beq.n	8004758 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	2201      	movs	r2, #1
 8004748:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2200      	movs	r2, #0
 8004750:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8004754:	2303      	movs	r3, #3
 8004756:	e111      	b.n	800497c <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800475c:	b29b      	uxth	r3, r3
 800475e:	2b00      	cmp	r3, #0
 8004760:	d19d      	bne.n	800469e <HAL_SPI_TransmitReceive+0x158>
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004768:	b29b      	uxth	r3, r3
 800476a:	2b00      	cmp	r3, #0
 800476c:	d197      	bne.n	800469e <HAL_SPI_TransmitReceive+0x158>
 800476e:	e0e5      	b.n	800493c <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d003      	beq.n	8004780 <HAL_SPI_TransmitReceive+0x23a>
 8004778:	8afb      	ldrh	r3, [r7, #22]
 800477a:	2b01      	cmp	r3, #1
 800477c:	f040 80d1 	bne.w	8004922 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004784:	b29b      	uxth	r3, r3
 8004786:	2b01      	cmp	r3, #1
 8004788:	d912      	bls.n	80047b0 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800478e:	881a      	ldrh	r2, [r3, #0]
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800479a:	1c9a      	adds	r2, r3, #2
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80047a4:	b29b      	uxth	r3, r3
 80047a6:	3b02      	subs	r3, #2
 80047a8:	b29a      	uxth	r2, r3
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80047ae:	e0b8      	b.n	8004922 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	330c      	adds	r3, #12
 80047ba:	7812      	ldrb	r2, [r2, #0]
 80047bc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047c2:	1c5a      	adds	r2, r3, #1
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80047cc:	b29b      	uxth	r3, r3
 80047ce:	3b01      	subs	r3, #1
 80047d0:	b29a      	uxth	r2, r3
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80047d6:	e0a4      	b.n	8004922 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	f003 0302 	and.w	r3, r3, #2
 80047e2:	2b02      	cmp	r3, #2
 80047e4:	d134      	bne.n	8004850 <HAL_SPI_TransmitReceive+0x30a>
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80047ea:	b29b      	uxth	r3, r3
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d02f      	beq.n	8004850 <HAL_SPI_TransmitReceive+0x30a>
 80047f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047f2:	2b01      	cmp	r3, #1
 80047f4:	d12c      	bne.n	8004850 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80047fa:	b29b      	uxth	r3, r3
 80047fc:	2b01      	cmp	r3, #1
 80047fe:	d912      	bls.n	8004826 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004804:	881a      	ldrh	r2, [r3, #0]
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004810:	1c9a      	adds	r2, r3, #2
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800481a:	b29b      	uxth	r3, r3
 800481c:	3b02      	subs	r3, #2
 800481e:	b29a      	uxth	r2, r3
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004824:	e012      	b.n	800484c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	330c      	adds	r3, #12
 8004830:	7812      	ldrb	r2, [r2, #0]
 8004832:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004838:	1c5a      	adds	r2, r3, #1
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004842:	b29b      	uxth	r3, r3
 8004844:	3b01      	subs	r3, #1
 8004846:	b29a      	uxth	r2, r3
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800484c:	2300      	movs	r3, #0
 800484e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	689b      	ldr	r3, [r3, #8]
 8004856:	f003 0301 	and.w	r3, r3, #1
 800485a:	2b01      	cmp	r3, #1
 800485c:	d148      	bne.n	80048f0 <HAL_SPI_TransmitReceive+0x3aa>
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004864:	b29b      	uxth	r3, r3
 8004866:	2b00      	cmp	r3, #0
 8004868:	d042      	beq.n	80048f0 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004870:	b29b      	uxth	r3, r3
 8004872:	2b01      	cmp	r3, #1
 8004874:	d923      	bls.n	80048be <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	68da      	ldr	r2, [r3, #12]
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004880:	b292      	uxth	r2, r2
 8004882:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004888:	1c9a      	adds	r2, r3, #2
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004894:	b29b      	uxth	r3, r3
 8004896:	3b02      	subs	r3, #2
 8004898:	b29a      	uxth	r2, r3
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80048a6:	b29b      	uxth	r3, r3
 80048a8:	2b01      	cmp	r3, #1
 80048aa:	d81f      	bhi.n	80048ec <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	685a      	ldr	r2, [r3, #4]
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80048ba:	605a      	str	r2, [r3, #4]
 80048bc:	e016      	b.n	80048ec <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f103 020c 	add.w	r2, r3, #12
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048ca:	7812      	ldrb	r2, [r2, #0]
 80048cc:	b2d2      	uxtb	r2, r2
 80048ce:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048d4:	1c5a      	adds	r2, r3, #1
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80048e0:	b29b      	uxth	r3, r3
 80048e2:	3b01      	subs	r3, #1
 80048e4:	b29a      	uxth	r2, r3
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80048ec:	2301      	movs	r3, #1
 80048ee:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80048f0:	f7fc f8e4 	bl	8000abc <HAL_GetTick>
 80048f4:	4602      	mov	r2, r0
 80048f6:	6a3b      	ldr	r3, [r7, #32]
 80048f8:	1ad3      	subs	r3, r2, r3
 80048fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80048fc:	429a      	cmp	r2, r3
 80048fe:	d803      	bhi.n	8004908 <HAL_SPI_TransmitReceive+0x3c2>
 8004900:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004902:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004906:	d102      	bne.n	800490e <HAL_SPI_TransmitReceive+0x3c8>
 8004908:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800490a:	2b00      	cmp	r3, #0
 800490c:	d109      	bne.n	8004922 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	2201      	movs	r2, #1
 8004912:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2200      	movs	r2, #0
 800491a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800491e:	2303      	movs	r3, #3
 8004920:	e02c      	b.n	800497c <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004926:	b29b      	uxth	r3, r3
 8004928:	2b00      	cmp	r3, #0
 800492a:	f47f af55 	bne.w	80047d8 <HAL_SPI_TransmitReceive+0x292>
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004934:	b29b      	uxth	r3, r3
 8004936:	2b00      	cmp	r3, #0
 8004938:	f47f af4e 	bne.w	80047d8 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800493c:	6a3a      	ldr	r2, [r7, #32]
 800493e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004940:	68f8      	ldr	r0, [r7, #12]
 8004942:	f000 faa9 	bl	8004e98 <SPI_EndRxTxTransaction>
 8004946:	4603      	mov	r3, r0
 8004948:	2b00      	cmp	r3, #0
 800494a:	d008      	beq.n	800495e <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	2220      	movs	r2, #32
 8004950:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2200      	movs	r2, #0
 8004956:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800495a:	2301      	movs	r3, #1
 800495c:	e00e      	b.n	800497c <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	2201      	movs	r2, #1
 8004962:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	2200      	movs	r2, #0
 800496a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004972:	2b00      	cmp	r3, #0
 8004974:	d001      	beq.n	800497a <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8004976:	2301      	movs	r3, #1
 8004978:	e000      	b.n	800497c <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 800497a:	2300      	movs	r3, #0
  }
}
 800497c:	4618      	mov	r0, r3
 800497e:	3728      	adds	r7, #40	@ 0x28
 8004980:	46bd      	mov	sp, r7
 8004982:	bd80      	pop	{r7, pc}

08004984 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b088      	sub	sp, #32
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	689b      	ldr	r3, [r3, #8]
 800499a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800499c:	69bb      	ldr	r3, [r7, #24]
 800499e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d10e      	bne.n	80049c4 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80049a6:	69bb      	ldr	r3, [r7, #24]
 80049a8:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d009      	beq.n	80049c4 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80049b0:	69fb      	ldr	r3, [r7, #28]
 80049b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d004      	beq.n	80049c4 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	4798      	blx	r3
    return;
 80049c2:	e0ce      	b.n	8004b62 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80049c4:	69bb      	ldr	r3, [r7, #24]
 80049c6:	f003 0302 	and.w	r3, r3, #2
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d009      	beq.n	80049e2 <HAL_SPI_IRQHandler+0x5e>
 80049ce:	69fb      	ldr	r3, [r7, #28]
 80049d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d004      	beq.n	80049e2 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049dc:	6878      	ldr	r0, [r7, #4]
 80049de:	4798      	blx	r3
    return;
 80049e0:	e0bf      	b.n	8004b62 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80049e2:	69bb      	ldr	r3, [r7, #24]
 80049e4:	f003 0320 	and.w	r3, r3, #32
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d10a      	bne.n	8004a02 <HAL_SPI_IRQHandler+0x7e>
 80049ec:	69bb      	ldr	r3, [r7, #24]
 80049ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d105      	bne.n	8004a02 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80049f6:	69bb      	ldr	r3, [r7, #24]
 80049f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	f000 80b0 	beq.w	8004b62 <HAL_SPI_IRQHandler+0x1de>
 8004a02:	69fb      	ldr	r3, [r7, #28]
 8004a04:	f003 0320 	and.w	r3, r3, #32
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	f000 80aa 	beq.w	8004b62 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004a0e:	69bb      	ldr	r3, [r7, #24]
 8004a10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d023      	beq.n	8004a60 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004a1e:	b2db      	uxtb	r3, r3
 8004a20:	2b03      	cmp	r3, #3
 8004a22:	d011      	beq.n	8004a48 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a28:	f043 0204 	orr.w	r2, r3, #4
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004a30:	2300      	movs	r3, #0
 8004a32:	617b      	str	r3, [r7, #20]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	68db      	ldr	r3, [r3, #12]
 8004a3a:	617b      	str	r3, [r7, #20]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	689b      	ldr	r3, [r3, #8]
 8004a42:	617b      	str	r3, [r7, #20]
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	e00b      	b.n	8004a60 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004a48:	2300      	movs	r3, #0
 8004a4a:	613b      	str	r3, [r7, #16]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	68db      	ldr	r3, [r3, #12]
 8004a52:	613b      	str	r3, [r7, #16]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	613b      	str	r3, [r7, #16]
 8004a5c:	693b      	ldr	r3, [r7, #16]
        return;
 8004a5e:	e080      	b.n	8004b62 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004a60:	69bb      	ldr	r3, [r7, #24]
 8004a62:	f003 0320 	and.w	r3, r3, #32
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d014      	beq.n	8004a94 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a6e:	f043 0201 	orr.w	r2, r3, #1
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004a76:	2300      	movs	r3, #0
 8004a78:	60fb      	str	r3, [r7, #12]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	60fb      	str	r3, [r7, #12]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	681a      	ldr	r2, [r3, #0]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004a90:	601a      	str	r2, [r3, #0]
 8004a92:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004a94:	69bb      	ldr	r3, [r7, #24]
 8004a96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d00c      	beq.n	8004ab8 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004aa2:	f043 0208 	orr.w	r2, r3, #8
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004aaa:	2300      	movs	r3, #0
 8004aac:	60bb      	str	r3, [r7, #8]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	689b      	ldr	r3, [r3, #8]
 8004ab4:	60bb      	str	r3, [r7, #8]
 8004ab6:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d04f      	beq.n	8004b60 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	685a      	ldr	r2, [r3, #4]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004ace:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004ad8:	69fb      	ldr	r3, [r7, #28]
 8004ada:	f003 0302 	and.w	r3, r3, #2
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d104      	bne.n	8004aec <HAL_SPI_IRQHandler+0x168>
 8004ae2:	69fb      	ldr	r3, [r7, #28]
 8004ae4:	f003 0301 	and.w	r3, r3, #1
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d034      	beq.n	8004b56 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	685a      	ldr	r2, [r3, #4]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f022 0203 	bic.w	r2, r2, #3
 8004afa:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d011      	beq.n	8004b28 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b08:	4a17      	ldr	r2, [pc, #92]	@ (8004b68 <HAL_SPI_IRQHandler+0x1e4>)
 8004b0a:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b10:	4618      	mov	r0, r3
 8004b12:	f7fd ffba 	bl	8002a8a <HAL_DMA_Abort_IT>
 8004b16:	4603      	mov	r3, r0
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d005      	beq.n	8004b28 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b20:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d016      	beq.n	8004b5e <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b34:	4a0c      	ldr	r2, [pc, #48]	@ (8004b68 <HAL_SPI_IRQHandler+0x1e4>)
 8004b36:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	f7fd ffa4 	bl	8002a8a <HAL_DMA_Abort_IT>
 8004b42:	4603      	mov	r3, r0
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d00a      	beq.n	8004b5e <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b4c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8004b54:	e003      	b.n	8004b5e <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	f000 f808 	bl	8004b6c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004b5c:	e000      	b.n	8004b60 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8004b5e:	bf00      	nop
    return;
 8004b60:	bf00      	nop
  }
}
 8004b62:	3720      	adds	r7, #32
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bd80      	pop	{r7, pc}
 8004b68:	08004b81 	.word	0x08004b81

08004b6c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b083      	sub	sp, #12
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004b74:	bf00      	nop
 8004b76:	370c      	adds	r7, #12
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7e:	4770      	bx	lr

08004b80 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b084      	sub	sp, #16
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b8c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2200      	movs	r2, #0
 8004b92:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004b9c:	68f8      	ldr	r0, [r7, #12]
 8004b9e:	f7ff ffe5 	bl	8004b6c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004ba2:	bf00      	nop
 8004ba4:	3710      	adds	r7, #16
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd80      	pop	{r7, pc}
	...

08004bac <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b088      	sub	sp, #32
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	60f8      	str	r0, [r7, #12]
 8004bb4:	60b9      	str	r1, [r7, #8]
 8004bb6:	603b      	str	r3, [r7, #0]
 8004bb8:	4613      	mov	r3, r2
 8004bba:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004bbc:	f7fb ff7e 	bl	8000abc <HAL_GetTick>
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bc4:	1a9b      	subs	r3, r3, r2
 8004bc6:	683a      	ldr	r2, [r7, #0]
 8004bc8:	4413      	add	r3, r2
 8004bca:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004bcc:	f7fb ff76 	bl	8000abc <HAL_GetTick>
 8004bd0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004bd2:	4b39      	ldr	r3, [pc, #228]	@ (8004cb8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	015b      	lsls	r3, r3, #5
 8004bd8:	0d1b      	lsrs	r3, r3, #20
 8004bda:	69fa      	ldr	r2, [r7, #28]
 8004bdc:	fb02 f303 	mul.w	r3, r2, r3
 8004be0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004be2:	e054      	b.n	8004c8e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004bea:	d050      	beq.n	8004c8e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004bec:	f7fb ff66 	bl	8000abc <HAL_GetTick>
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	69bb      	ldr	r3, [r7, #24]
 8004bf4:	1ad3      	subs	r3, r2, r3
 8004bf6:	69fa      	ldr	r2, [r7, #28]
 8004bf8:	429a      	cmp	r2, r3
 8004bfa:	d902      	bls.n	8004c02 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004bfc:	69fb      	ldr	r3, [r7, #28]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d13d      	bne.n	8004c7e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	685a      	ldr	r2, [r3, #4]
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004c10:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004c1a:	d111      	bne.n	8004c40 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	689b      	ldr	r3, [r3, #8]
 8004c20:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c24:	d004      	beq.n	8004c30 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c2e:	d107      	bne.n	8004c40 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	681a      	ldr	r2, [r3, #0]
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004c3e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c44:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c48:	d10f      	bne.n	8004c6a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	681a      	ldr	r2, [r3, #0]
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004c58:	601a      	str	r2, [r3, #0]
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	681a      	ldr	r2, [r3, #0]
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004c68:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	2201      	movs	r2, #1
 8004c6e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2200      	movs	r2, #0
 8004c76:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004c7a:	2303      	movs	r3, #3
 8004c7c:	e017      	b.n	8004cae <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d101      	bne.n	8004c88 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004c84:	2300      	movs	r3, #0
 8004c86:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	3b01      	subs	r3, #1
 8004c8c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	689a      	ldr	r2, [r3, #8]
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	4013      	ands	r3, r2
 8004c98:	68ba      	ldr	r2, [r7, #8]
 8004c9a:	429a      	cmp	r2, r3
 8004c9c:	bf0c      	ite	eq
 8004c9e:	2301      	moveq	r3, #1
 8004ca0:	2300      	movne	r3, #0
 8004ca2:	b2db      	uxtb	r3, r3
 8004ca4:	461a      	mov	r2, r3
 8004ca6:	79fb      	ldrb	r3, [r7, #7]
 8004ca8:	429a      	cmp	r2, r3
 8004caa:	d19b      	bne.n	8004be4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004cac:	2300      	movs	r3, #0
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	3720      	adds	r7, #32
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bd80      	pop	{r7, pc}
 8004cb6:	bf00      	nop
 8004cb8:	20000010 	.word	0x20000010

08004cbc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b08a      	sub	sp, #40	@ 0x28
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	60f8      	str	r0, [r7, #12]
 8004cc4:	60b9      	str	r1, [r7, #8]
 8004cc6:	607a      	str	r2, [r7, #4]
 8004cc8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004cca:	2300      	movs	r3, #0
 8004ccc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004cce:	f7fb fef5 	bl	8000abc <HAL_GetTick>
 8004cd2:	4602      	mov	r2, r0
 8004cd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cd6:	1a9b      	subs	r3, r3, r2
 8004cd8:	683a      	ldr	r2, [r7, #0]
 8004cda:	4413      	add	r3, r2
 8004cdc:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8004cde:	f7fb feed 	bl	8000abc <HAL_GetTick>
 8004ce2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	330c      	adds	r3, #12
 8004cea:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004cec:	4b3d      	ldr	r3, [pc, #244]	@ (8004de4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004cee:	681a      	ldr	r2, [r3, #0]
 8004cf0:	4613      	mov	r3, r2
 8004cf2:	009b      	lsls	r3, r3, #2
 8004cf4:	4413      	add	r3, r2
 8004cf6:	00da      	lsls	r2, r3, #3
 8004cf8:	1ad3      	subs	r3, r2, r3
 8004cfa:	0d1b      	lsrs	r3, r3, #20
 8004cfc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004cfe:	fb02 f303 	mul.w	r3, r2, r3
 8004d02:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004d04:	e060      	b.n	8004dc8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004d0c:	d107      	bne.n	8004d1e <SPI_WaitFifoStateUntilTimeout+0x62>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d104      	bne.n	8004d1e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004d14:	69fb      	ldr	r3, [r7, #28]
 8004d16:	781b      	ldrb	r3, [r3, #0]
 8004d18:	b2db      	uxtb	r3, r3
 8004d1a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004d1c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004d24:	d050      	beq.n	8004dc8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004d26:	f7fb fec9 	bl	8000abc <HAL_GetTick>
 8004d2a:	4602      	mov	r2, r0
 8004d2c:	6a3b      	ldr	r3, [r7, #32]
 8004d2e:	1ad3      	subs	r3, r2, r3
 8004d30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d32:	429a      	cmp	r2, r3
 8004d34:	d902      	bls.n	8004d3c <SPI_WaitFifoStateUntilTimeout+0x80>
 8004d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d13d      	bne.n	8004db8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	685a      	ldr	r2, [r3, #4]
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004d4a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004d54:	d111      	bne.n	8004d7a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	689b      	ldr	r3, [r3, #8]
 8004d5a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004d5e:	d004      	beq.n	8004d6a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	689b      	ldr	r3, [r3, #8]
 8004d64:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d68:	d107      	bne.n	8004d7a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	681a      	ldr	r2, [r3, #0]
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004d78:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d7e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d82:	d10f      	bne.n	8004da4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004d92:	601a      	str	r2, [r3, #0]
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	681a      	ldr	r2, [r3, #0]
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004da2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2201      	movs	r2, #1
 8004da8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	2200      	movs	r2, #0
 8004db0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004db4:	2303      	movs	r3, #3
 8004db6:	e010      	b.n	8004dda <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004db8:	69bb      	ldr	r3, [r7, #24]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d101      	bne.n	8004dc2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8004dc2:	69bb      	ldr	r3, [r7, #24]
 8004dc4:	3b01      	subs	r3, #1
 8004dc6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	689a      	ldr	r2, [r3, #8]
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	4013      	ands	r3, r2
 8004dd2:	687a      	ldr	r2, [r7, #4]
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	d196      	bne.n	8004d06 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004dd8:	2300      	movs	r3, #0
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	3728      	adds	r7, #40	@ 0x28
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}
 8004de2:	bf00      	nop
 8004de4:	20000010 	.word	0x20000010

08004de8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b086      	sub	sp, #24
 8004dec:	af02      	add	r7, sp, #8
 8004dee:	60f8      	str	r0, [r7, #12]
 8004df0:	60b9      	str	r1, [r7, #8]
 8004df2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004dfc:	d111      	bne.n	8004e22 <SPI_EndRxTransaction+0x3a>
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	689b      	ldr	r3, [r3, #8]
 8004e02:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e06:	d004      	beq.n	8004e12 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	689b      	ldr	r3, [r3, #8]
 8004e0c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e10:	d107      	bne.n	8004e22 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	681a      	ldr	r2, [r3, #0]
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004e20:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	9300      	str	r3, [sp, #0]
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	2180      	movs	r1, #128	@ 0x80
 8004e2c:	68f8      	ldr	r0, [r7, #12]
 8004e2e:	f7ff febd 	bl	8004bac <SPI_WaitFlagStateUntilTimeout>
 8004e32:	4603      	mov	r3, r0
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d007      	beq.n	8004e48 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e3c:	f043 0220 	orr.w	r2, r3, #32
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004e44:	2303      	movs	r3, #3
 8004e46:	e023      	b.n	8004e90 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004e50:	d11d      	bne.n	8004e8e <SPI_EndRxTransaction+0xa6>
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	689b      	ldr	r3, [r3, #8]
 8004e56:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e5a:	d004      	beq.n	8004e66 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e64:	d113      	bne.n	8004e8e <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	9300      	str	r3, [sp, #0]
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004e72:	68f8      	ldr	r0, [r7, #12]
 8004e74:	f7ff ff22 	bl	8004cbc <SPI_WaitFifoStateUntilTimeout>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d007      	beq.n	8004e8e <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e82:	f043 0220 	orr.w	r2, r3, #32
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8004e8a:	2303      	movs	r3, #3
 8004e8c:	e000      	b.n	8004e90 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8004e8e:	2300      	movs	r3, #0
}
 8004e90:	4618      	mov	r0, r3
 8004e92:	3710      	adds	r7, #16
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bd80      	pop	{r7, pc}

08004e98 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b086      	sub	sp, #24
 8004e9c:	af02      	add	r7, sp, #8
 8004e9e:	60f8      	str	r0, [r7, #12]
 8004ea0:	60b9      	str	r1, [r7, #8]
 8004ea2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	9300      	str	r3, [sp, #0]
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8004eb0:	68f8      	ldr	r0, [r7, #12]
 8004eb2:	f7ff ff03 	bl	8004cbc <SPI_WaitFifoStateUntilTimeout>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d007      	beq.n	8004ecc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ec0:	f043 0220 	orr.w	r2, r3, #32
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004ec8:	2303      	movs	r3, #3
 8004eca:	e027      	b.n	8004f1c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	9300      	str	r3, [sp, #0]
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	2180      	movs	r1, #128	@ 0x80
 8004ed6:	68f8      	ldr	r0, [r7, #12]
 8004ed8:	f7ff fe68 	bl	8004bac <SPI_WaitFlagStateUntilTimeout>
 8004edc:	4603      	mov	r3, r0
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d007      	beq.n	8004ef2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ee6:	f043 0220 	orr.w	r2, r3, #32
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004eee:	2303      	movs	r3, #3
 8004ef0:	e014      	b.n	8004f1c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	9300      	str	r3, [sp, #0]
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004efe:	68f8      	ldr	r0, [r7, #12]
 8004f00:	f7ff fedc 	bl	8004cbc <SPI_WaitFifoStateUntilTimeout>
 8004f04:	4603      	mov	r3, r0
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d007      	beq.n	8004f1a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f0e:	f043 0220 	orr.w	r2, r3, #32
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004f16:	2303      	movs	r3, #3
 8004f18:	e000      	b.n	8004f1c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004f1a:	2300      	movs	r3, #0
}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	3710      	adds	r7, #16
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bd80      	pop	{r7, pc}

08004f24 <memset>:
 8004f24:	4402      	add	r2, r0
 8004f26:	4603      	mov	r3, r0
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d100      	bne.n	8004f2e <memset+0xa>
 8004f2c:	4770      	bx	lr
 8004f2e:	f803 1b01 	strb.w	r1, [r3], #1
 8004f32:	e7f9      	b.n	8004f28 <memset+0x4>

08004f34 <__libc_init_array>:
 8004f34:	b570      	push	{r4, r5, r6, lr}
 8004f36:	4d0d      	ldr	r5, [pc, #52]	@ (8004f6c <__libc_init_array+0x38>)
 8004f38:	4c0d      	ldr	r4, [pc, #52]	@ (8004f70 <__libc_init_array+0x3c>)
 8004f3a:	1b64      	subs	r4, r4, r5
 8004f3c:	10a4      	asrs	r4, r4, #2
 8004f3e:	2600      	movs	r6, #0
 8004f40:	42a6      	cmp	r6, r4
 8004f42:	d109      	bne.n	8004f58 <__libc_init_array+0x24>
 8004f44:	4d0b      	ldr	r5, [pc, #44]	@ (8004f74 <__libc_init_array+0x40>)
 8004f46:	4c0c      	ldr	r4, [pc, #48]	@ (8004f78 <__libc_init_array+0x44>)
 8004f48:	f000 f818 	bl	8004f7c <_init>
 8004f4c:	1b64      	subs	r4, r4, r5
 8004f4e:	10a4      	asrs	r4, r4, #2
 8004f50:	2600      	movs	r6, #0
 8004f52:	42a6      	cmp	r6, r4
 8004f54:	d105      	bne.n	8004f62 <__libc_init_array+0x2e>
 8004f56:	bd70      	pop	{r4, r5, r6, pc}
 8004f58:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f5c:	4798      	blx	r3
 8004f5e:	3601      	adds	r6, #1
 8004f60:	e7ee      	b.n	8004f40 <__libc_init_array+0xc>
 8004f62:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f66:	4798      	blx	r3
 8004f68:	3601      	adds	r6, #1
 8004f6a:	e7f2      	b.n	8004f52 <__libc_init_array+0x1e>
 8004f6c:	08004fb4 	.word	0x08004fb4
 8004f70:	08004fb4 	.word	0x08004fb4
 8004f74:	08004fb4 	.word	0x08004fb4
 8004f78:	08004fb8 	.word	0x08004fb8

08004f7c <_init>:
 8004f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f7e:	bf00      	nop
 8004f80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f82:	bc08      	pop	{r3}
 8004f84:	469e      	mov	lr, r3
 8004f86:	4770      	bx	lr

08004f88 <_fini>:
 8004f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f8a:	bf00      	nop
 8004f8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f8e:	bc08      	pop	{r3}
 8004f90:	469e      	mov	lr, r3
 8004f92:	4770      	bx	lr
