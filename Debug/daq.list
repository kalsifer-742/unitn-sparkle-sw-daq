
daq.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000027dc  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080029b4  080029b4  000039b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080029cc  080029cc  0000401c  2**0
                  CONTENTS
  4 .ARM          00000008  080029cc  080029cc  000039cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080029d4  080029d4  0000401c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080029d4  080029d4  000039d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080029d8  080029d8  000039d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  20000000  080029dc  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000084  2000001c  080029f8  0000401c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000a0  080029f8  000040a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000401c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000806f  00000000  00000000  0000404c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001773  00000000  00000000  0000c0bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000838  00000000  00000000  0000d830  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000627  00000000  00000000  0000e068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000241c2  00000000  00000000  0000e68f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008960  00000000  00000000  00032851  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e4839  00000000  00000000  0003b1b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011f9ea  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000203c  00000000  00000000  0011fa30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  00121a6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000001c 	.word	0x2000001c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800299c 	.word	0x0800299c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000020 	.word	0x20000020
 8000214:	0800299c 	.word	0x0800299c

08000218 <strcmp>:
 8000218:	f810 2b01 	ldrb.w	r2, [r0], #1
 800021c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000220:	2a01      	cmp	r2, #1
 8000222:	bf28      	it	cs
 8000224:	429a      	cmpcs	r2, r3
 8000226:	d0f7      	beq.n	8000218 <strcmp>
 8000228:	1ad0      	subs	r0, r2, r3
 800022a:	4770      	bx	lr

0800022c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800022c:	b580      	push	{r7, lr}
 800022e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000230:	f000 fa09 	bl	8000646 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000234:	f000 f826 	bl	8000284 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000238:	f000 f8aa 	bl	8000390 <MX_GPIO_Init>
  MX_SPI1_Init();
 800023c:	f000 f86e 	bl	800031c <MX_SPI1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    if (HAL_SPI_Receive(&hspi1, rx_buffer, 4, HAL_MAX_DELAY) == HAL_OK)
 8000240:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000244:	2204      	movs	r2, #4
 8000246:	490b      	ldr	r1, [pc, #44]	@ (8000274 <main+0x48>)
 8000248:	480b      	ldr	r0, [pc, #44]	@ (8000278 <main+0x4c>)
 800024a:	f001 fd54 	bl	8001cf6 <HAL_SPI_Receive>
 800024e:	4603      	mov	r3, r0
 8000250:	2b00      	cmp	r3, #0
 8000252:	d1f5      	bne.n	8000240 <main+0x14>
    {
      if (strcmp(rx_buffer, "ping") == 0)
 8000254:	4909      	ldr	r1, [pc, #36]	@ (800027c <main+0x50>)
 8000256:	4807      	ldr	r0, [pc, #28]	@ (8000274 <main+0x48>)
 8000258:	f7ff ffde 	bl	8000218 <strcmp>
 800025c:	4603      	mov	r3, r0
 800025e:	2b00      	cmp	r3, #0
 8000260:	d1ee      	bne.n	8000240 <main+0x14>
      {
        HAL_SPI_Transmit(&hspi1, tx_buffer, 4, HAL_MAX_DELAY);
 8000262:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000266:	2204      	movs	r2, #4
 8000268:	4905      	ldr	r1, [pc, #20]	@ (8000280 <main+0x54>)
 800026a:	4803      	ldr	r0, [pc, #12]	@ (8000278 <main+0x4c>)
 800026c:	f001 fbcd 	bl	8001a0a <HAL_SPI_Transmit>
    if (HAL_SPI_Receive(&hspi1, rx_buffer, 4, HAL_MAX_DELAY) == HAL_OK)
 8000270:	e7e6      	b.n	8000240 <main+0x14>
 8000272:	bf00      	nop
 8000274:	20000008 	.word	0x20000008
 8000278:	20000038 	.word	0x20000038
 800027c:	080029b4 	.word	0x080029b4
 8000280:	20000000 	.word	0x20000000

08000284 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000284:	b580      	push	{r7, lr}
 8000286:	b094      	sub	sp, #80	@ 0x50
 8000288:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800028a:	f107 0318 	add.w	r3, r7, #24
 800028e:	2238      	movs	r2, #56	@ 0x38
 8000290:	2100      	movs	r1, #0
 8000292:	4618      	mov	r0, r3
 8000294:	f002 fb56 	bl	8002944 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000298:	1d3b      	adds	r3, r7, #4
 800029a:	2200      	movs	r2, #0
 800029c:	601a      	str	r2, [r3, #0]
 800029e:	605a      	str	r2, [r3, #4]
 80002a0:	609a      	str	r2, [r3, #8]
 80002a2:	60da      	str	r2, [r3, #12]
 80002a4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80002a6:	2000      	movs	r0, #0
 80002a8:	f000 fd5a 	bl	8000d60 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002ac:	2302      	movs	r3, #2
 80002ae:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002b0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80002b4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002b6:	2340      	movs	r3, #64	@ 0x40
 80002b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002ba:	2302      	movs	r3, #2
 80002bc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002be:	2302      	movs	r3, #2
 80002c0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80002c2:	2304      	movs	r3, #4
 80002c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80002c6:	2355      	movs	r3, #85	@ 0x55
 80002c8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80002ca:	2302      	movs	r3, #2
 80002cc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80002ce:	2302      	movs	r3, #2
 80002d0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80002d2:	2302      	movs	r3, #2
 80002d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002d6:	f107 0318 	add.w	r3, r7, #24
 80002da:	4618      	mov	r0, r3
 80002dc:	f000 fdf4 	bl	8000ec8 <HAL_RCC_OscConfig>
 80002e0:	4603      	mov	r3, r0
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <SystemClock_Config+0x66>
  {
    Error_Handler();
 80002e6:	f000 f8bd 	bl	8000464 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ea:	230f      	movs	r3, #15
 80002ec:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002ee:	2303      	movs	r3, #3
 80002f0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002f2:	2300      	movs	r3, #0
 80002f4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002f6:	2300      	movs	r3, #0
 80002f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002fa:	2300      	movs	r3, #0
 80002fc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80002fe:	1d3b      	adds	r3, r7, #4
 8000300:	2104      	movs	r1, #4
 8000302:	4618      	mov	r0, r3
 8000304:	f001 f8f2 	bl	80014ec <HAL_RCC_ClockConfig>
 8000308:	4603      	mov	r3, r0
 800030a:	2b00      	cmp	r3, #0
 800030c:	d001      	beq.n	8000312 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800030e:	f000 f8a9 	bl	8000464 <Error_Handler>
  }
}
 8000312:	bf00      	nop
 8000314:	3750      	adds	r7, #80	@ 0x50
 8000316:	46bd      	mov	sp, r7
 8000318:	bd80      	pop	{r7, pc}
	...

0800031c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000320:	4b19      	ldr	r3, [pc, #100]	@ (8000388 <MX_SPI1_Init+0x6c>)
 8000322:	4a1a      	ldr	r2, [pc, #104]	@ (800038c <MX_SPI1_Init+0x70>)
 8000324:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8000326:	4b18      	ldr	r3, [pc, #96]	@ (8000388 <MX_SPI1_Init+0x6c>)
 8000328:	2200      	movs	r2, #0
 800032a:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800032c:	4b16      	ldr	r3, [pc, #88]	@ (8000388 <MX_SPI1_Init+0x6c>)
 800032e:	2200      	movs	r2, #0
 8000330:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000332:	4b15      	ldr	r3, [pc, #84]	@ (8000388 <MX_SPI1_Init+0x6c>)
 8000334:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000338:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800033a:	4b13      	ldr	r3, [pc, #76]	@ (8000388 <MX_SPI1_Init+0x6c>)
 800033c:	2200      	movs	r2, #0
 800033e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000340:	4b11      	ldr	r3, [pc, #68]	@ (8000388 <MX_SPI1_Init+0x6c>)
 8000342:	2200      	movs	r2, #0
 8000344:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000346:	4b10      	ldr	r3, [pc, #64]	@ (8000388 <MX_SPI1_Init+0x6c>)
 8000348:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800034c:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800034e:	4b0e      	ldr	r3, [pc, #56]	@ (8000388 <MX_SPI1_Init+0x6c>)
 8000350:	2200      	movs	r2, #0
 8000352:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000354:	4b0c      	ldr	r3, [pc, #48]	@ (8000388 <MX_SPI1_Init+0x6c>)
 8000356:	2200      	movs	r2, #0
 8000358:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800035a:	4b0b      	ldr	r3, [pc, #44]	@ (8000388 <MX_SPI1_Init+0x6c>)
 800035c:	2200      	movs	r2, #0
 800035e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000360:	4b09      	ldr	r3, [pc, #36]	@ (8000388 <MX_SPI1_Init+0x6c>)
 8000362:	2207      	movs	r2, #7
 8000364:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000366:	4b08      	ldr	r3, [pc, #32]	@ (8000388 <MX_SPI1_Init+0x6c>)
 8000368:	2200      	movs	r2, #0
 800036a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800036c:	4b06      	ldr	r3, [pc, #24]	@ (8000388 <MX_SPI1_Init+0x6c>)
 800036e:	2200      	movs	r2, #0
 8000370:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000372:	4805      	ldr	r0, [pc, #20]	@ (8000388 <MX_SPI1_Init+0x6c>)
 8000374:	f001 fa9e 	bl	80018b4 <HAL_SPI_Init>
 8000378:	4603      	mov	r3, r0
 800037a:	2b00      	cmp	r3, #0
 800037c:	d001      	beq.n	8000382 <MX_SPI1_Init+0x66>
  {
    Error_Handler();
 800037e:	f000 f871 	bl	8000464 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000382:	bf00      	nop
 8000384:	bd80      	pop	{r7, pc}
 8000386:	bf00      	nop
 8000388:	20000038 	.word	0x20000038
 800038c:	40013000 	.word	0x40013000

08000390 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b08a      	sub	sp, #40	@ 0x28
 8000394:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000396:	f107 0314 	add.w	r3, r7, #20
 800039a:	2200      	movs	r2, #0
 800039c:	601a      	str	r2, [r3, #0]
 800039e:	605a      	str	r2, [r3, #4]
 80003a0:	609a      	str	r2, [r3, #8]
 80003a2:	60da      	str	r2, [r3, #12]
 80003a4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003a6:	4b2d      	ldr	r3, [pc, #180]	@ (800045c <MX_GPIO_Init+0xcc>)
 80003a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003aa:	4a2c      	ldr	r2, [pc, #176]	@ (800045c <MX_GPIO_Init+0xcc>)
 80003ac:	f043 0304 	orr.w	r3, r3, #4
 80003b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80003b2:	4b2a      	ldr	r3, [pc, #168]	@ (800045c <MX_GPIO_Init+0xcc>)
 80003b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003b6:	f003 0304 	and.w	r3, r3, #4
 80003ba:	613b      	str	r3, [r7, #16]
 80003bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80003be:	4b27      	ldr	r3, [pc, #156]	@ (800045c <MX_GPIO_Init+0xcc>)
 80003c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003c2:	4a26      	ldr	r2, [pc, #152]	@ (800045c <MX_GPIO_Init+0xcc>)
 80003c4:	f043 0320 	orr.w	r3, r3, #32
 80003c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80003ca:	4b24      	ldr	r3, [pc, #144]	@ (800045c <MX_GPIO_Init+0xcc>)
 80003cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003ce:	f003 0320 	and.w	r3, r3, #32
 80003d2:	60fb      	str	r3, [r7, #12]
 80003d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003d6:	4b21      	ldr	r3, [pc, #132]	@ (800045c <MX_GPIO_Init+0xcc>)
 80003d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003da:	4a20      	ldr	r2, [pc, #128]	@ (800045c <MX_GPIO_Init+0xcc>)
 80003dc:	f043 0301 	orr.w	r3, r3, #1
 80003e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80003e2:	4b1e      	ldr	r3, [pc, #120]	@ (800045c <MX_GPIO_Init+0xcc>)
 80003e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003e6:	f003 0301 	and.w	r3, r3, #1
 80003ea:	60bb      	str	r3, [r7, #8]
 80003ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003ee:	4b1b      	ldr	r3, [pc, #108]	@ (800045c <MX_GPIO_Init+0xcc>)
 80003f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003f2:	4a1a      	ldr	r2, [pc, #104]	@ (800045c <MX_GPIO_Init+0xcc>)
 80003f4:	f043 0302 	orr.w	r3, r3, #2
 80003f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80003fa:	4b18      	ldr	r3, [pc, #96]	@ (800045c <MX_GPIO_Init+0xcc>)
 80003fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003fe:	f003 0302 	and.w	r3, r3, #2
 8000402:	607b      	str	r3, [r7, #4]
 8000404:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000406:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800040a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800040c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000410:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000412:	2300      	movs	r3, #0
 8000414:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000416:	f107 0314 	add.w	r3, r7, #20
 800041a:	4619      	mov	r1, r3
 800041c:	4810      	ldr	r0, [pc, #64]	@ (8000460 <MX_GPIO_Init+0xd0>)
 800041e:	f000 faf9 	bl	8000a14 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPUART1_TX_Pin LPUART1_RX_Pin */
  GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000422:	230c      	movs	r3, #12
 8000424:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000426:	2302      	movs	r3, #2
 8000428:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800042a:	2300      	movs	r3, #0
 800042c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800042e:	2300      	movs	r3, #0
 8000430:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000432:	230c      	movs	r3, #12
 8000434:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000436:	f107 0314 	add.w	r3, r7, #20
 800043a:	4619      	mov	r1, r3
 800043c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000440:	f000 fae8 	bl	8000a14 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000444:	2200      	movs	r2, #0
 8000446:	2100      	movs	r1, #0
 8000448:	2028      	movs	r0, #40	@ 0x28
 800044a:	f000 fa48 	bl	80008de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800044e:	2028      	movs	r0, #40	@ 0x28
 8000450:	f000 fa5f 	bl	8000912 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000454:	bf00      	nop
 8000456:	3728      	adds	r7, #40	@ 0x28
 8000458:	46bd      	mov	sp, r7
 800045a:	bd80      	pop	{r7, pc}
 800045c:	40021000 	.word	0x40021000
 8000460:	48000800 	.word	0x48000800

08000464 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000464:	b480      	push	{r7}
 8000466:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000468:	b672      	cpsid	i
}
 800046a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800046c:	bf00      	nop
 800046e:	e7fd      	b.n	800046c <Error_Handler+0x8>

08000470 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	b082      	sub	sp, #8
 8000474:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000476:	4b0f      	ldr	r3, [pc, #60]	@ (80004b4 <HAL_MspInit+0x44>)
 8000478:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800047a:	4a0e      	ldr	r2, [pc, #56]	@ (80004b4 <HAL_MspInit+0x44>)
 800047c:	f043 0301 	orr.w	r3, r3, #1
 8000480:	6613      	str	r3, [r2, #96]	@ 0x60
 8000482:	4b0c      	ldr	r3, [pc, #48]	@ (80004b4 <HAL_MspInit+0x44>)
 8000484:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000486:	f003 0301 	and.w	r3, r3, #1
 800048a:	607b      	str	r3, [r7, #4]
 800048c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800048e:	4b09      	ldr	r3, [pc, #36]	@ (80004b4 <HAL_MspInit+0x44>)
 8000490:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000492:	4a08      	ldr	r2, [pc, #32]	@ (80004b4 <HAL_MspInit+0x44>)
 8000494:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000498:	6593      	str	r3, [r2, #88]	@ 0x58
 800049a:	4b06      	ldr	r3, [pc, #24]	@ (80004b4 <HAL_MspInit+0x44>)
 800049c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800049e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80004a2:	603b      	str	r3, [r7, #0]
 80004a4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80004a6:	f000 fcff 	bl	8000ea8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004aa:	bf00      	nop
 80004ac:	3708      	adds	r7, #8
 80004ae:	46bd      	mov	sp, r7
 80004b0:	bd80      	pop	{r7, pc}
 80004b2:	bf00      	nop
 80004b4:	40021000 	.word	0x40021000

080004b8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b08a      	sub	sp, #40	@ 0x28
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004c0:	f107 0314 	add.w	r3, r7, #20
 80004c4:	2200      	movs	r2, #0
 80004c6:	601a      	str	r2, [r3, #0]
 80004c8:	605a      	str	r2, [r3, #4]
 80004ca:	609a      	str	r2, [r3, #8]
 80004cc:	60da      	str	r2, [r3, #12]
 80004ce:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	4a1b      	ldr	r2, [pc, #108]	@ (8000544 <HAL_SPI_MspInit+0x8c>)
 80004d6:	4293      	cmp	r3, r2
 80004d8:	d130      	bne.n	800053c <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80004da:	4b1b      	ldr	r3, [pc, #108]	@ (8000548 <HAL_SPI_MspInit+0x90>)
 80004dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80004de:	4a1a      	ldr	r2, [pc, #104]	@ (8000548 <HAL_SPI_MspInit+0x90>)
 80004e0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80004e4:	6613      	str	r3, [r2, #96]	@ 0x60
 80004e6:	4b18      	ldr	r3, [pc, #96]	@ (8000548 <HAL_SPI_MspInit+0x90>)
 80004e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80004ea:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80004ee:	613b      	str	r3, [r7, #16]
 80004f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004f2:	4b15      	ldr	r3, [pc, #84]	@ (8000548 <HAL_SPI_MspInit+0x90>)
 80004f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004f6:	4a14      	ldr	r2, [pc, #80]	@ (8000548 <HAL_SPI_MspInit+0x90>)
 80004f8:	f043 0301 	orr.w	r3, r3, #1
 80004fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80004fe:	4b12      	ldr	r3, [pc, #72]	@ (8000548 <HAL_SPI_MspInit+0x90>)
 8000500:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000502:	f003 0301 	and.w	r3, r3, #1
 8000506:	60fb      	str	r3, [r7, #12]
 8000508:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800050a:	23e0      	movs	r3, #224	@ 0xe0
 800050c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800050e:	2302      	movs	r3, #2
 8000510:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000512:	2300      	movs	r3, #0
 8000514:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000516:	2300      	movs	r3, #0
 8000518:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800051a:	2305      	movs	r3, #5
 800051c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800051e:	f107 0314 	add.w	r3, r7, #20
 8000522:	4619      	mov	r1, r3
 8000524:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000528:	f000 fa74 	bl	8000a14 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800052c:	2200      	movs	r2, #0
 800052e:	2100      	movs	r1, #0
 8000530:	2023      	movs	r0, #35	@ 0x23
 8000532:	f000 f9d4 	bl	80008de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000536:	2023      	movs	r0, #35	@ 0x23
 8000538:	f000 f9eb 	bl	8000912 <HAL_NVIC_EnableIRQ>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 800053c:	bf00      	nop
 800053e:	3728      	adds	r7, #40	@ 0x28
 8000540:	46bd      	mov	sp, r7
 8000542:	bd80      	pop	{r7, pc}
 8000544:	40013000 	.word	0x40013000
 8000548:	40021000 	.word	0x40021000

0800054c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800054c:	b480      	push	{r7}
 800054e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000550:	bf00      	nop
 8000552:	e7fd      	b.n	8000550 <NMI_Handler+0x4>

08000554 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000554:	b480      	push	{r7}
 8000556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000558:	bf00      	nop
 800055a:	e7fd      	b.n	8000558 <HardFault_Handler+0x4>

0800055c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800055c:	b480      	push	{r7}
 800055e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000560:	bf00      	nop
 8000562:	e7fd      	b.n	8000560 <MemManage_Handler+0x4>

08000564 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000564:	b480      	push	{r7}
 8000566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000568:	bf00      	nop
 800056a:	e7fd      	b.n	8000568 <BusFault_Handler+0x4>

0800056c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000570:	bf00      	nop
 8000572:	e7fd      	b.n	8000570 <UsageFault_Handler+0x4>

08000574 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000578:	bf00      	nop
 800057a:	46bd      	mov	sp, r7
 800057c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000580:	4770      	bx	lr

08000582 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000582:	b480      	push	{r7}
 8000584:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000586:	bf00      	nop
 8000588:	46bd      	mov	sp, r7
 800058a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058e:	4770      	bx	lr

08000590 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000590:	b480      	push	{r7}
 8000592:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000594:	bf00      	nop
 8000596:	46bd      	mov	sp, r7
 8000598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059c:	4770      	bx	lr

0800059e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800059e:	b580      	push	{r7, lr}
 80005a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005a2:	f000 f8a3 	bl	80006ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005a6:	bf00      	nop
 80005a8:	bd80      	pop	{r7, pc}
	...

080005ac <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80005b0:	4802      	ldr	r0, [pc, #8]	@ (80005bc <SPI1_IRQHandler+0x10>)
 80005b2:	f001 fef7 	bl	80023a4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80005b6:	bf00      	nop
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	20000038 	.word	0x20000038

080005c0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80005c4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80005c8:	f000 fba6 	bl	8000d18 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80005cc:	bf00      	nop
 80005ce:	bd80      	pop	{r7, pc}

080005d0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005d4:	4b06      	ldr	r3, [pc, #24]	@ (80005f0 <SystemInit+0x20>)
 80005d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80005da:	4a05      	ldr	r2, [pc, #20]	@ (80005f0 <SystemInit+0x20>)
 80005dc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80005e0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005e4:	bf00      	nop
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop
 80005f0:	e000ed00 	.word	0xe000ed00

080005f4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005f4:	480d      	ldr	r0, [pc, #52]	@ (800062c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005f6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80005f8:	f7ff ffea 	bl	80005d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005fc:	480c      	ldr	r0, [pc, #48]	@ (8000630 <LoopForever+0x6>)
  ldr r1, =_edata
 80005fe:	490d      	ldr	r1, [pc, #52]	@ (8000634 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000600:	4a0d      	ldr	r2, [pc, #52]	@ (8000638 <LoopForever+0xe>)
  movs r3, #0
 8000602:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000604:	e002      	b.n	800060c <LoopCopyDataInit>

08000606 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000606:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000608:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800060a:	3304      	adds	r3, #4

0800060c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800060c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800060e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000610:	d3f9      	bcc.n	8000606 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000612:	4a0a      	ldr	r2, [pc, #40]	@ (800063c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000614:	4c0a      	ldr	r4, [pc, #40]	@ (8000640 <LoopForever+0x16>)
  movs r3, #0
 8000616:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000618:	e001      	b.n	800061e <LoopFillZerobss>

0800061a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800061a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800061c:	3204      	adds	r2, #4

0800061e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800061e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000620:	d3fb      	bcc.n	800061a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000622:	f002 f997 	bl	8002954 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000626:	f7ff fe01 	bl	800022c <main>

0800062a <LoopForever>:

LoopForever:
    b LoopForever
 800062a:	e7fe      	b.n	800062a <LoopForever>
  ldr   r0, =_estack
 800062c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000630:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000634:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000638:	080029dc 	.word	0x080029dc
  ldr r2, =_sbss
 800063c:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000640:	200000a0 	.word	0x200000a0

08000644 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000644:	e7fe      	b.n	8000644 <ADC1_2_IRQHandler>

08000646 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000646:	b580      	push	{r7, lr}
 8000648:	b082      	sub	sp, #8
 800064a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800064c:	2300      	movs	r3, #0
 800064e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000650:	2003      	movs	r0, #3
 8000652:	f000 f939 	bl	80008c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000656:	2000      	movs	r0, #0
 8000658:	f000 f80e 	bl	8000678 <HAL_InitTick>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d002      	beq.n	8000668 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000662:	2301      	movs	r3, #1
 8000664:	71fb      	strb	r3, [r7, #7]
 8000666:	e001      	b.n	800066c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000668:	f7ff ff02 	bl	8000470 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800066c:	79fb      	ldrb	r3, [r7, #7]

}
 800066e:	4618      	mov	r0, r3
 8000670:	3708      	adds	r7, #8
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
	...

08000678 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b084      	sub	sp, #16
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000680:	2300      	movs	r3, #0
 8000682:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000684:	4b16      	ldr	r3, [pc, #88]	@ (80006e0 <HAL_InitTick+0x68>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	2b00      	cmp	r3, #0
 800068a:	d022      	beq.n	80006d2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800068c:	4b15      	ldr	r3, [pc, #84]	@ (80006e4 <HAL_InitTick+0x6c>)
 800068e:	681a      	ldr	r2, [r3, #0]
 8000690:	4b13      	ldr	r3, [pc, #76]	@ (80006e0 <HAL_InitTick+0x68>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000698:	fbb1 f3f3 	udiv	r3, r1, r3
 800069c:	fbb2 f3f3 	udiv	r3, r2, r3
 80006a0:	4618      	mov	r0, r3
 80006a2:	f000 f944 	bl	800092e <HAL_SYSTICK_Config>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d10f      	bne.n	80006cc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	2b0f      	cmp	r3, #15
 80006b0:	d809      	bhi.n	80006c6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006b2:	2200      	movs	r2, #0
 80006b4:	6879      	ldr	r1, [r7, #4]
 80006b6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80006ba:	f000 f910 	bl	80008de <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80006be:	4a0a      	ldr	r2, [pc, #40]	@ (80006e8 <HAL_InitTick+0x70>)
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	6013      	str	r3, [r2, #0]
 80006c4:	e007      	b.n	80006d6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80006c6:	2301      	movs	r3, #1
 80006c8:	73fb      	strb	r3, [r7, #15]
 80006ca:	e004      	b.n	80006d6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80006cc:	2301      	movs	r3, #1
 80006ce:	73fb      	strb	r3, [r7, #15]
 80006d0:	e001      	b.n	80006d6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80006d2:	2301      	movs	r3, #1
 80006d4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80006d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80006d8:	4618      	mov	r0, r3
 80006da:	3710      	adds	r7, #16
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	20000018 	.word	0x20000018
 80006e4:	20000010 	.word	0x20000010
 80006e8:	20000014 	.word	0x20000014

080006ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006f0:	4b05      	ldr	r3, [pc, #20]	@ (8000708 <HAL_IncTick+0x1c>)
 80006f2:	681a      	ldr	r2, [r3, #0]
 80006f4:	4b05      	ldr	r3, [pc, #20]	@ (800070c <HAL_IncTick+0x20>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	4413      	add	r3, r2
 80006fa:	4a03      	ldr	r2, [pc, #12]	@ (8000708 <HAL_IncTick+0x1c>)
 80006fc:	6013      	str	r3, [r2, #0]
}
 80006fe:	bf00      	nop
 8000700:	46bd      	mov	sp, r7
 8000702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000706:	4770      	bx	lr
 8000708:	2000009c 	.word	0x2000009c
 800070c:	20000018 	.word	0x20000018

08000710 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0
  return uwTick;
 8000714:	4b03      	ldr	r3, [pc, #12]	@ (8000724 <HAL_GetTick+0x14>)
 8000716:	681b      	ldr	r3, [r3, #0]
}
 8000718:	4618      	mov	r0, r3
 800071a:	46bd      	mov	sp, r7
 800071c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000720:	4770      	bx	lr
 8000722:	bf00      	nop
 8000724:	2000009c 	.word	0x2000009c

08000728 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000728:	b480      	push	{r7}
 800072a:	b085      	sub	sp, #20
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	f003 0307 	and.w	r3, r3, #7
 8000736:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000738:	4b0c      	ldr	r3, [pc, #48]	@ (800076c <__NVIC_SetPriorityGrouping+0x44>)
 800073a:	68db      	ldr	r3, [r3, #12]
 800073c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800073e:	68ba      	ldr	r2, [r7, #8]
 8000740:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000744:	4013      	ands	r3, r2
 8000746:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800074c:	68bb      	ldr	r3, [r7, #8]
 800074e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000750:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000754:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000758:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800075a:	4a04      	ldr	r2, [pc, #16]	@ (800076c <__NVIC_SetPriorityGrouping+0x44>)
 800075c:	68bb      	ldr	r3, [r7, #8]
 800075e:	60d3      	str	r3, [r2, #12]
}
 8000760:	bf00      	nop
 8000762:	3714      	adds	r7, #20
 8000764:	46bd      	mov	sp, r7
 8000766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076a:	4770      	bx	lr
 800076c:	e000ed00 	.word	0xe000ed00

08000770 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000774:	4b04      	ldr	r3, [pc, #16]	@ (8000788 <__NVIC_GetPriorityGrouping+0x18>)
 8000776:	68db      	ldr	r3, [r3, #12]
 8000778:	0a1b      	lsrs	r3, r3, #8
 800077a:	f003 0307 	and.w	r3, r3, #7
}
 800077e:	4618      	mov	r0, r3
 8000780:	46bd      	mov	sp, r7
 8000782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000786:	4770      	bx	lr
 8000788:	e000ed00 	.word	0xe000ed00

0800078c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800078c:	b480      	push	{r7}
 800078e:	b083      	sub	sp, #12
 8000790:	af00      	add	r7, sp, #0
 8000792:	4603      	mov	r3, r0
 8000794:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800079a:	2b00      	cmp	r3, #0
 800079c:	db0b      	blt.n	80007b6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800079e:	79fb      	ldrb	r3, [r7, #7]
 80007a0:	f003 021f 	and.w	r2, r3, #31
 80007a4:	4907      	ldr	r1, [pc, #28]	@ (80007c4 <__NVIC_EnableIRQ+0x38>)
 80007a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007aa:	095b      	lsrs	r3, r3, #5
 80007ac:	2001      	movs	r0, #1
 80007ae:	fa00 f202 	lsl.w	r2, r0, r2
 80007b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80007b6:	bf00      	nop
 80007b8:	370c      	adds	r7, #12
 80007ba:	46bd      	mov	sp, r7
 80007bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	e000e100 	.word	0xe000e100

080007c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007c8:	b480      	push	{r7}
 80007ca:	b083      	sub	sp, #12
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	4603      	mov	r3, r0
 80007d0:	6039      	str	r1, [r7, #0]
 80007d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	db0a      	blt.n	80007f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007dc:	683b      	ldr	r3, [r7, #0]
 80007de:	b2da      	uxtb	r2, r3
 80007e0:	490c      	ldr	r1, [pc, #48]	@ (8000814 <__NVIC_SetPriority+0x4c>)
 80007e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007e6:	0112      	lsls	r2, r2, #4
 80007e8:	b2d2      	uxtb	r2, r2
 80007ea:	440b      	add	r3, r1
 80007ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007f0:	e00a      	b.n	8000808 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007f2:	683b      	ldr	r3, [r7, #0]
 80007f4:	b2da      	uxtb	r2, r3
 80007f6:	4908      	ldr	r1, [pc, #32]	@ (8000818 <__NVIC_SetPriority+0x50>)
 80007f8:	79fb      	ldrb	r3, [r7, #7]
 80007fa:	f003 030f 	and.w	r3, r3, #15
 80007fe:	3b04      	subs	r3, #4
 8000800:	0112      	lsls	r2, r2, #4
 8000802:	b2d2      	uxtb	r2, r2
 8000804:	440b      	add	r3, r1
 8000806:	761a      	strb	r2, [r3, #24]
}
 8000808:	bf00      	nop
 800080a:	370c      	adds	r7, #12
 800080c:	46bd      	mov	sp, r7
 800080e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000812:	4770      	bx	lr
 8000814:	e000e100 	.word	0xe000e100
 8000818:	e000ed00 	.word	0xe000ed00

0800081c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800081c:	b480      	push	{r7}
 800081e:	b089      	sub	sp, #36	@ 0x24
 8000820:	af00      	add	r7, sp, #0
 8000822:	60f8      	str	r0, [r7, #12]
 8000824:	60b9      	str	r1, [r7, #8]
 8000826:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	f003 0307 	and.w	r3, r3, #7
 800082e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000830:	69fb      	ldr	r3, [r7, #28]
 8000832:	f1c3 0307 	rsb	r3, r3, #7
 8000836:	2b04      	cmp	r3, #4
 8000838:	bf28      	it	cs
 800083a:	2304      	movcs	r3, #4
 800083c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800083e:	69fb      	ldr	r3, [r7, #28]
 8000840:	3304      	adds	r3, #4
 8000842:	2b06      	cmp	r3, #6
 8000844:	d902      	bls.n	800084c <NVIC_EncodePriority+0x30>
 8000846:	69fb      	ldr	r3, [r7, #28]
 8000848:	3b03      	subs	r3, #3
 800084a:	e000      	b.n	800084e <NVIC_EncodePriority+0x32>
 800084c:	2300      	movs	r3, #0
 800084e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000850:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000854:	69bb      	ldr	r3, [r7, #24]
 8000856:	fa02 f303 	lsl.w	r3, r2, r3
 800085a:	43da      	mvns	r2, r3
 800085c:	68bb      	ldr	r3, [r7, #8]
 800085e:	401a      	ands	r2, r3
 8000860:	697b      	ldr	r3, [r7, #20]
 8000862:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000864:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000868:	697b      	ldr	r3, [r7, #20]
 800086a:	fa01 f303 	lsl.w	r3, r1, r3
 800086e:	43d9      	mvns	r1, r3
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000874:	4313      	orrs	r3, r2
         );
}
 8000876:	4618      	mov	r0, r3
 8000878:	3724      	adds	r7, #36	@ 0x24
 800087a:	46bd      	mov	sp, r7
 800087c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000880:	4770      	bx	lr
	...

08000884 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	3b01      	subs	r3, #1
 8000890:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000894:	d301      	bcc.n	800089a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000896:	2301      	movs	r3, #1
 8000898:	e00f      	b.n	80008ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800089a:	4a0a      	ldr	r2, [pc, #40]	@ (80008c4 <SysTick_Config+0x40>)
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	3b01      	subs	r3, #1
 80008a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008a2:	210f      	movs	r1, #15
 80008a4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80008a8:	f7ff ff8e 	bl	80007c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008ac:	4b05      	ldr	r3, [pc, #20]	@ (80008c4 <SysTick_Config+0x40>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008b2:	4b04      	ldr	r3, [pc, #16]	@ (80008c4 <SysTick_Config+0x40>)
 80008b4:	2207      	movs	r2, #7
 80008b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008b8:	2300      	movs	r3, #0
}
 80008ba:	4618      	mov	r0, r3
 80008bc:	3708      	adds	r7, #8
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	e000e010 	.word	0xe000e010

080008c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008d0:	6878      	ldr	r0, [r7, #4]
 80008d2:	f7ff ff29 	bl	8000728 <__NVIC_SetPriorityGrouping>
}
 80008d6:	bf00      	nop
 80008d8:	3708      	adds	r7, #8
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}

080008de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008de:	b580      	push	{r7, lr}
 80008e0:	b086      	sub	sp, #24
 80008e2:	af00      	add	r7, sp, #0
 80008e4:	4603      	mov	r3, r0
 80008e6:	60b9      	str	r1, [r7, #8]
 80008e8:	607a      	str	r2, [r7, #4]
 80008ea:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80008ec:	f7ff ff40 	bl	8000770 <__NVIC_GetPriorityGrouping>
 80008f0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008f2:	687a      	ldr	r2, [r7, #4]
 80008f4:	68b9      	ldr	r1, [r7, #8]
 80008f6:	6978      	ldr	r0, [r7, #20]
 80008f8:	f7ff ff90 	bl	800081c <NVIC_EncodePriority>
 80008fc:	4602      	mov	r2, r0
 80008fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000902:	4611      	mov	r1, r2
 8000904:	4618      	mov	r0, r3
 8000906:	f7ff ff5f 	bl	80007c8 <__NVIC_SetPriority>
}
 800090a:	bf00      	nop
 800090c:	3718      	adds	r7, #24
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}

08000912 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000912:	b580      	push	{r7, lr}
 8000914:	b082      	sub	sp, #8
 8000916:	af00      	add	r7, sp, #0
 8000918:	4603      	mov	r3, r0
 800091a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800091c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000920:	4618      	mov	r0, r3
 8000922:	f7ff ff33 	bl	800078c <__NVIC_EnableIRQ>
}
 8000926:	bf00      	nop
 8000928:	3708      	adds	r7, #8
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}

0800092e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800092e:	b580      	push	{r7, lr}
 8000930:	b082      	sub	sp, #8
 8000932:	af00      	add	r7, sp, #0
 8000934:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000936:	6878      	ldr	r0, [r7, #4]
 8000938:	f7ff ffa4 	bl	8000884 <SysTick_Config>
 800093c:	4603      	mov	r3, r0
}
 800093e:	4618      	mov	r0, r3
 8000940:	3708      	adds	r7, #8
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}

08000946 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000946:	b580      	push	{r7, lr}
 8000948:	b084      	sub	sp, #16
 800094a:	af00      	add	r7, sp, #0
 800094c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800094e:	2300      	movs	r3, #0
 8000950:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000958:	b2db      	uxtb	r3, r3
 800095a:	2b02      	cmp	r3, #2
 800095c:	d00d      	beq.n	800097a <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	2204      	movs	r2, #4
 8000962:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	2201      	movs	r2, #1
 8000968:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	2200      	movs	r2, #0
 8000970:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8000974:	2301      	movs	r3, #1
 8000976:	73fb      	strb	r3, [r7, #15]
 8000978:	e047      	b.n	8000a0a <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	681a      	ldr	r2, [r3, #0]
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	f022 020e 	bic.w	r2, r2, #14
 8000988:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	681a      	ldr	r2, [r3, #0]
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	f022 0201 	bic.w	r2, r2, #1
 8000998:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800099e:	681a      	ldr	r2, [r3, #0]
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80009a4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80009a8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009ae:	f003 021f 	and.w	r2, r3, #31
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009b6:	2101      	movs	r1, #1
 80009b8:	fa01 f202 	lsl.w	r2, r1, r2
 80009bc:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009c2:	687a      	ldr	r2, [r7, #4]
 80009c4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80009c6:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d00c      	beq.n	80009ea <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80009d4:	681a      	ldr	r2, [r3, #0]
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80009da:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80009de:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009e4:	687a      	ldr	r2, [r7, #4]
 80009e6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80009e8:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	2201      	movs	r2, #1
 80009ee:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	2200      	movs	r2, #0
 80009f6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d003      	beq.n	8000a0a <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000a06:	6878      	ldr	r0, [r7, #4]
 8000a08:	4798      	blx	r3
    }
  }
  return status;
 8000a0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	3710      	adds	r7, #16
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}

08000a14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a14:	b480      	push	{r7}
 8000a16:	b087      	sub	sp, #28
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
 8000a1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000a22:	e15a      	b.n	8000cda <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000a24:	683b      	ldr	r3, [r7, #0]
 8000a26:	681a      	ldr	r2, [r3, #0]
 8000a28:	2101      	movs	r1, #1
 8000a2a:	697b      	ldr	r3, [r7, #20]
 8000a2c:	fa01 f303 	lsl.w	r3, r1, r3
 8000a30:	4013      	ands	r3, r2
 8000a32:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	f000 814c 	beq.w	8000cd4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	685b      	ldr	r3, [r3, #4]
 8000a40:	f003 0303 	and.w	r3, r3, #3
 8000a44:	2b01      	cmp	r3, #1
 8000a46:	d005      	beq.n	8000a54 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	685b      	ldr	r3, [r3, #4]
 8000a4c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000a50:	2b02      	cmp	r3, #2
 8000a52:	d130      	bne.n	8000ab6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	689b      	ldr	r3, [r3, #8]
 8000a58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000a5a:	697b      	ldr	r3, [r7, #20]
 8000a5c:	005b      	lsls	r3, r3, #1
 8000a5e:	2203      	movs	r2, #3
 8000a60:	fa02 f303 	lsl.w	r3, r2, r3
 8000a64:	43db      	mvns	r3, r3
 8000a66:	693a      	ldr	r2, [r7, #16]
 8000a68:	4013      	ands	r3, r2
 8000a6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	68da      	ldr	r2, [r3, #12]
 8000a70:	697b      	ldr	r3, [r7, #20]
 8000a72:	005b      	lsls	r3, r3, #1
 8000a74:	fa02 f303 	lsl.w	r3, r2, r3
 8000a78:	693a      	ldr	r2, [r7, #16]
 8000a7a:	4313      	orrs	r3, r2
 8000a7c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	693a      	ldr	r2, [r7, #16]
 8000a82:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	685b      	ldr	r3, [r3, #4]
 8000a88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	697b      	ldr	r3, [r7, #20]
 8000a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a92:	43db      	mvns	r3, r3
 8000a94:	693a      	ldr	r2, [r7, #16]
 8000a96:	4013      	ands	r3, r2
 8000a98:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a9a:	683b      	ldr	r3, [r7, #0]
 8000a9c:	685b      	ldr	r3, [r3, #4]
 8000a9e:	091b      	lsrs	r3, r3, #4
 8000aa0:	f003 0201 	and.w	r2, r3, #1
 8000aa4:	697b      	ldr	r3, [r7, #20]
 8000aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aaa:	693a      	ldr	r2, [r7, #16]
 8000aac:	4313      	orrs	r3, r2
 8000aae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	693a      	ldr	r2, [r7, #16]
 8000ab4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	685b      	ldr	r3, [r3, #4]
 8000aba:	f003 0303 	and.w	r3, r3, #3
 8000abe:	2b03      	cmp	r3, #3
 8000ac0:	d017      	beq.n	8000af2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	68db      	ldr	r3, [r3, #12]
 8000ac6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000ac8:	697b      	ldr	r3, [r7, #20]
 8000aca:	005b      	lsls	r3, r3, #1
 8000acc:	2203      	movs	r2, #3
 8000ace:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad2:	43db      	mvns	r3, r3
 8000ad4:	693a      	ldr	r2, [r7, #16]
 8000ad6:	4013      	ands	r3, r2
 8000ad8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	689a      	ldr	r2, [r3, #8]
 8000ade:	697b      	ldr	r3, [r7, #20]
 8000ae0:	005b      	lsls	r3, r3, #1
 8000ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae6:	693a      	ldr	r2, [r7, #16]
 8000ae8:	4313      	orrs	r3, r2
 8000aea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	693a      	ldr	r2, [r7, #16]
 8000af0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	685b      	ldr	r3, [r3, #4]
 8000af6:	f003 0303 	and.w	r3, r3, #3
 8000afa:	2b02      	cmp	r3, #2
 8000afc:	d123      	bne.n	8000b46 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000afe:	697b      	ldr	r3, [r7, #20]
 8000b00:	08da      	lsrs	r2, r3, #3
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	3208      	adds	r2, #8
 8000b06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b0a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000b0c:	697b      	ldr	r3, [r7, #20]
 8000b0e:	f003 0307 	and.w	r3, r3, #7
 8000b12:	009b      	lsls	r3, r3, #2
 8000b14:	220f      	movs	r2, #15
 8000b16:	fa02 f303 	lsl.w	r3, r2, r3
 8000b1a:	43db      	mvns	r3, r3
 8000b1c:	693a      	ldr	r2, [r7, #16]
 8000b1e:	4013      	ands	r3, r2
 8000b20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	691a      	ldr	r2, [r3, #16]
 8000b26:	697b      	ldr	r3, [r7, #20]
 8000b28:	f003 0307 	and.w	r3, r3, #7
 8000b2c:	009b      	lsls	r3, r3, #2
 8000b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b32:	693a      	ldr	r2, [r7, #16]
 8000b34:	4313      	orrs	r3, r2
 8000b36:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000b38:	697b      	ldr	r3, [r7, #20]
 8000b3a:	08da      	lsrs	r2, r3, #3
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	3208      	adds	r2, #8
 8000b40:	6939      	ldr	r1, [r7, #16]
 8000b42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000b4c:	697b      	ldr	r3, [r7, #20]
 8000b4e:	005b      	lsls	r3, r3, #1
 8000b50:	2203      	movs	r2, #3
 8000b52:	fa02 f303 	lsl.w	r3, r2, r3
 8000b56:	43db      	mvns	r3, r3
 8000b58:	693a      	ldr	r2, [r7, #16]
 8000b5a:	4013      	ands	r3, r2
 8000b5c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	685b      	ldr	r3, [r3, #4]
 8000b62:	f003 0203 	and.w	r2, r3, #3
 8000b66:	697b      	ldr	r3, [r7, #20]
 8000b68:	005b      	lsls	r3, r3, #1
 8000b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6e:	693a      	ldr	r2, [r7, #16]
 8000b70:	4313      	orrs	r3, r2
 8000b72:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	693a      	ldr	r2, [r7, #16]
 8000b78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	685b      	ldr	r3, [r3, #4]
 8000b7e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	f000 80a6 	beq.w	8000cd4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b88:	4b5b      	ldr	r3, [pc, #364]	@ (8000cf8 <HAL_GPIO_Init+0x2e4>)
 8000b8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b8c:	4a5a      	ldr	r2, [pc, #360]	@ (8000cf8 <HAL_GPIO_Init+0x2e4>)
 8000b8e:	f043 0301 	orr.w	r3, r3, #1
 8000b92:	6613      	str	r3, [r2, #96]	@ 0x60
 8000b94:	4b58      	ldr	r3, [pc, #352]	@ (8000cf8 <HAL_GPIO_Init+0x2e4>)
 8000b96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b98:	f003 0301 	and.w	r3, r3, #1
 8000b9c:	60bb      	str	r3, [r7, #8]
 8000b9e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ba0:	4a56      	ldr	r2, [pc, #344]	@ (8000cfc <HAL_GPIO_Init+0x2e8>)
 8000ba2:	697b      	ldr	r3, [r7, #20]
 8000ba4:	089b      	lsrs	r3, r3, #2
 8000ba6:	3302      	adds	r3, #2
 8000ba8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000bae:	697b      	ldr	r3, [r7, #20]
 8000bb0:	f003 0303 	and.w	r3, r3, #3
 8000bb4:	009b      	lsls	r3, r3, #2
 8000bb6:	220f      	movs	r2, #15
 8000bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bbc:	43db      	mvns	r3, r3
 8000bbe:	693a      	ldr	r2, [r7, #16]
 8000bc0:	4013      	ands	r3, r2
 8000bc2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000bca:	d01f      	beq.n	8000c0c <HAL_GPIO_Init+0x1f8>
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	4a4c      	ldr	r2, [pc, #304]	@ (8000d00 <HAL_GPIO_Init+0x2ec>)
 8000bd0:	4293      	cmp	r3, r2
 8000bd2:	d019      	beq.n	8000c08 <HAL_GPIO_Init+0x1f4>
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	4a4b      	ldr	r2, [pc, #300]	@ (8000d04 <HAL_GPIO_Init+0x2f0>)
 8000bd8:	4293      	cmp	r3, r2
 8000bda:	d013      	beq.n	8000c04 <HAL_GPIO_Init+0x1f0>
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	4a4a      	ldr	r2, [pc, #296]	@ (8000d08 <HAL_GPIO_Init+0x2f4>)
 8000be0:	4293      	cmp	r3, r2
 8000be2:	d00d      	beq.n	8000c00 <HAL_GPIO_Init+0x1ec>
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	4a49      	ldr	r2, [pc, #292]	@ (8000d0c <HAL_GPIO_Init+0x2f8>)
 8000be8:	4293      	cmp	r3, r2
 8000bea:	d007      	beq.n	8000bfc <HAL_GPIO_Init+0x1e8>
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	4a48      	ldr	r2, [pc, #288]	@ (8000d10 <HAL_GPIO_Init+0x2fc>)
 8000bf0:	4293      	cmp	r3, r2
 8000bf2:	d101      	bne.n	8000bf8 <HAL_GPIO_Init+0x1e4>
 8000bf4:	2305      	movs	r3, #5
 8000bf6:	e00a      	b.n	8000c0e <HAL_GPIO_Init+0x1fa>
 8000bf8:	2306      	movs	r3, #6
 8000bfa:	e008      	b.n	8000c0e <HAL_GPIO_Init+0x1fa>
 8000bfc:	2304      	movs	r3, #4
 8000bfe:	e006      	b.n	8000c0e <HAL_GPIO_Init+0x1fa>
 8000c00:	2303      	movs	r3, #3
 8000c02:	e004      	b.n	8000c0e <HAL_GPIO_Init+0x1fa>
 8000c04:	2302      	movs	r3, #2
 8000c06:	e002      	b.n	8000c0e <HAL_GPIO_Init+0x1fa>
 8000c08:	2301      	movs	r3, #1
 8000c0a:	e000      	b.n	8000c0e <HAL_GPIO_Init+0x1fa>
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	697a      	ldr	r2, [r7, #20]
 8000c10:	f002 0203 	and.w	r2, r2, #3
 8000c14:	0092      	lsls	r2, r2, #2
 8000c16:	4093      	lsls	r3, r2
 8000c18:	693a      	ldr	r2, [r7, #16]
 8000c1a:	4313      	orrs	r3, r2
 8000c1c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000c1e:	4937      	ldr	r1, [pc, #220]	@ (8000cfc <HAL_GPIO_Init+0x2e8>)
 8000c20:	697b      	ldr	r3, [r7, #20]
 8000c22:	089b      	lsrs	r3, r3, #2
 8000c24:	3302      	adds	r3, #2
 8000c26:	693a      	ldr	r2, [r7, #16]
 8000c28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000c2c:	4b39      	ldr	r3, [pc, #228]	@ (8000d14 <HAL_GPIO_Init+0x300>)
 8000c2e:	689b      	ldr	r3, [r3, #8]
 8000c30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	43db      	mvns	r3, r3
 8000c36:	693a      	ldr	r2, [r7, #16]
 8000c38:	4013      	ands	r3, r2
 8000c3a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	685b      	ldr	r3, [r3, #4]
 8000c40:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d003      	beq.n	8000c50 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8000c48:	693a      	ldr	r2, [r7, #16]
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	4313      	orrs	r3, r2
 8000c4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000c50:	4a30      	ldr	r2, [pc, #192]	@ (8000d14 <HAL_GPIO_Init+0x300>)
 8000c52:	693b      	ldr	r3, [r7, #16]
 8000c54:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000c56:	4b2f      	ldr	r3, [pc, #188]	@ (8000d14 <HAL_GPIO_Init+0x300>)
 8000c58:	68db      	ldr	r3, [r3, #12]
 8000c5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	43db      	mvns	r3, r3
 8000c60:	693a      	ldr	r2, [r7, #16]
 8000c62:	4013      	ands	r3, r2
 8000c64:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	685b      	ldr	r3, [r3, #4]
 8000c6a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d003      	beq.n	8000c7a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8000c72:	693a      	ldr	r2, [r7, #16]
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	4313      	orrs	r3, r2
 8000c78:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000c7a:	4a26      	ldr	r2, [pc, #152]	@ (8000d14 <HAL_GPIO_Init+0x300>)
 8000c7c:	693b      	ldr	r3, [r7, #16]
 8000c7e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8000c80:	4b24      	ldr	r3, [pc, #144]	@ (8000d14 <HAL_GPIO_Init+0x300>)
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	43db      	mvns	r3, r3
 8000c8a:	693a      	ldr	r2, [r7, #16]
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	685b      	ldr	r3, [r3, #4]
 8000c94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d003      	beq.n	8000ca4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8000c9c:	693a      	ldr	r2, [r7, #16]
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	4313      	orrs	r3, r2
 8000ca2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000ca4:	4a1b      	ldr	r2, [pc, #108]	@ (8000d14 <HAL_GPIO_Init+0x300>)
 8000ca6:	693b      	ldr	r3, [r7, #16]
 8000ca8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000caa:	4b1a      	ldr	r3, [pc, #104]	@ (8000d14 <HAL_GPIO_Init+0x300>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	43db      	mvns	r3, r3
 8000cb4:	693a      	ldr	r2, [r7, #16]
 8000cb6:	4013      	ands	r3, r2
 8000cb8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	685b      	ldr	r3, [r3, #4]
 8000cbe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d003      	beq.n	8000cce <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8000cc6:	693a      	ldr	r2, [r7, #16]
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	4313      	orrs	r3, r2
 8000ccc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000cce:	4a11      	ldr	r2, [pc, #68]	@ (8000d14 <HAL_GPIO_Init+0x300>)
 8000cd0:	693b      	ldr	r3, [r7, #16]
 8000cd2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	3301      	adds	r3, #1
 8000cd8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	681a      	ldr	r2, [r3, #0]
 8000cde:	697b      	ldr	r3, [r7, #20]
 8000ce0:	fa22 f303 	lsr.w	r3, r2, r3
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	f47f ae9d 	bne.w	8000a24 <HAL_GPIO_Init+0x10>
  }
}
 8000cea:	bf00      	nop
 8000cec:	bf00      	nop
 8000cee:	371c      	adds	r7, #28
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr
 8000cf8:	40021000 	.word	0x40021000
 8000cfc:	40010000 	.word	0x40010000
 8000d00:	48000400 	.word	0x48000400
 8000d04:	48000800 	.word	0x48000800
 8000d08:	48000c00 	.word	0x48000c00
 8000d0c:	48001000 	.word	0x48001000
 8000d10:	48001400 	.word	0x48001400
 8000d14:	40010400 	.word	0x40010400

08000d18 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	4603      	mov	r3, r0
 8000d20:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000d22:	4b08      	ldr	r3, [pc, #32]	@ (8000d44 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000d24:	695a      	ldr	r2, [r3, #20]
 8000d26:	88fb      	ldrh	r3, [r7, #6]
 8000d28:	4013      	ands	r3, r2
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d006      	beq.n	8000d3c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000d2e:	4a05      	ldr	r2, [pc, #20]	@ (8000d44 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000d30:	88fb      	ldrh	r3, [r7, #6]
 8000d32:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000d34:	88fb      	ldrh	r3, [r7, #6]
 8000d36:	4618      	mov	r0, r3
 8000d38:	f000 f806 	bl	8000d48 <HAL_GPIO_EXTI_Callback>
  }
}
 8000d3c:	bf00      	nop
 8000d3e:	3708      	adds	r7, #8
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	40010400 	.word	0x40010400

08000d48 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b083      	sub	sp, #12
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	4603      	mov	r3, r0
 8000d50:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000d52:	bf00      	nop
 8000d54:	370c      	adds	r7, #12
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr
	...

08000d60 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b085      	sub	sp, #20
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d141      	bne.n	8000df2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000d6e:	4b4b      	ldr	r3, [pc, #300]	@ (8000e9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000d76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000d7a:	d131      	bne.n	8000de0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000d7c:	4b47      	ldr	r3, [pc, #284]	@ (8000e9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000d82:	4a46      	ldr	r2, [pc, #280]	@ (8000e9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d84:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000d88:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d8c:	4b43      	ldr	r3, [pc, #268]	@ (8000e9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000d94:	4a41      	ldr	r2, [pc, #260]	@ (8000e9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d96:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d9a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000d9c:	4b40      	ldr	r3, [pc, #256]	@ (8000ea0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	2232      	movs	r2, #50	@ 0x32
 8000da2:	fb02 f303 	mul.w	r3, r2, r3
 8000da6:	4a3f      	ldr	r2, [pc, #252]	@ (8000ea4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000da8:	fba2 2303 	umull	r2, r3, r2, r3
 8000dac:	0c9b      	lsrs	r3, r3, #18
 8000dae:	3301      	adds	r3, #1
 8000db0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000db2:	e002      	b.n	8000dba <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	3b01      	subs	r3, #1
 8000db8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000dba:	4b38      	ldr	r3, [pc, #224]	@ (8000e9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000dbc:	695b      	ldr	r3, [r3, #20]
 8000dbe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000dc2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000dc6:	d102      	bne.n	8000dce <HAL_PWREx_ControlVoltageScaling+0x6e>
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d1f2      	bne.n	8000db4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000dce:	4b33      	ldr	r3, [pc, #204]	@ (8000e9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000dd0:	695b      	ldr	r3, [r3, #20]
 8000dd2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000dd6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000dda:	d158      	bne.n	8000e8e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000ddc:	2303      	movs	r3, #3
 8000dde:	e057      	b.n	8000e90 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000de0:	4b2e      	ldr	r3, [pc, #184]	@ (8000e9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000de2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000de6:	4a2d      	ldr	r2, [pc, #180]	@ (8000e9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000de8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000dec:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8000df0:	e04d      	b.n	8000e8e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000df8:	d141      	bne.n	8000e7e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000dfa:	4b28      	ldr	r3, [pc, #160]	@ (8000e9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000e02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000e06:	d131      	bne.n	8000e6c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000e08:	4b24      	ldr	r3, [pc, #144]	@ (8000e9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e0e:	4a23      	ldr	r2, [pc, #140]	@ (8000e9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e14:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e18:	4b20      	ldr	r3, [pc, #128]	@ (8000e9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000e20:	4a1e      	ldr	r2, [pc, #120]	@ (8000e9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e22:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e26:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000e28:	4b1d      	ldr	r3, [pc, #116]	@ (8000ea0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	2232      	movs	r2, #50	@ 0x32
 8000e2e:	fb02 f303 	mul.w	r3, r2, r3
 8000e32:	4a1c      	ldr	r2, [pc, #112]	@ (8000ea4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000e34:	fba2 2303 	umull	r2, r3, r2, r3
 8000e38:	0c9b      	lsrs	r3, r3, #18
 8000e3a:	3301      	adds	r3, #1
 8000e3c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000e3e:	e002      	b.n	8000e46 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	3b01      	subs	r3, #1
 8000e44:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000e46:	4b15      	ldr	r3, [pc, #84]	@ (8000e9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e48:	695b      	ldr	r3, [r3, #20]
 8000e4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000e4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000e52:	d102      	bne.n	8000e5a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d1f2      	bne.n	8000e40 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000e5a:	4b10      	ldr	r3, [pc, #64]	@ (8000e9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e5c:	695b      	ldr	r3, [r3, #20]
 8000e5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000e62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000e66:	d112      	bne.n	8000e8e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000e68:	2303      	movs	r3, #3
 8000e6a:	e011      	b.n	8000e90 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000e6c:	4b0b      	ldr	r3, [pc, #44]	@ (8000e9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e72:	4a0a      	ldr	r2, [pc, #40]	@ (8000e9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e78:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8000e7c:	e007      	b.n	8000e8e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000e7e:	4b07      	ldr	r3, [pc, #28]	@ (8000e9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000e86:	4a05      	ldr	r2, [pc, #20]	@ (8000e9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e88:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e8c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8000e8e:	2300      	movs	r3, #0
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	3714      	adds	r7, #20
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr
 8000e9c:	40007000 	.word	0x40007000
 8000ea0:	20000010 	.word	0x20000010
 8000ea4:	431bde83 	.word	0x431bde83

08000ea8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8000eac:	4b05      	ldr	r3, [pc, #20]	@ (8000ec4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8000eae:	689b      	ldr	r3, [r3, #8]
 8000eb0:	4a04      	ldr	r2, [pc, #16]	@ (8000ec4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8000eb2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000eb6:	6093      	str	r3, [r2, #8]
}
 8000eb8:	bf00      	nop
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	40007000 	.word	0x40007000

08000ec8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b088      	sub	sp, #32
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d101      	bne.n	8000eda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	e2fe      	b.n	80014d8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f003 0301 	and.w	r3, r3, #1
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d075      	beq.n	8000fd2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000ee6:	4b97      	ldr	r3, [pc, #604]	@ (8001144 <HAL_RCC_OscConfig+0x27c>)
 8000ee8:	689b      	ldr	r3, [r3, #8]
 8000eea:	f003 030c 	and.w	r3, r3, #12
 8000eee:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000ef0:	4b94      	ldr	r3, [pc, #592]	@ (8001144 <HAL_RCC_OscConfig+0x27c>)
 8000ef2:	68db      	ldr	r3, [r3, #12]
 8000ef4:	f003 0303 	and.w	r3, r3, #3
 8000ef8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8000efa:	69bb      	ldr	r3, [r7, #24]
 8000efc:	2b0c      	cmp	r3, #12
 8000efe:	d102      	bne.n	8000f06 <HAL_RCC_OscConfig+0x3e>
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	2b03      	cmp	r3, #3
 8000f04:	d002      	beq.n	8000f0c <HAL_RCC_OscConfig+0x44>
 8000f06:	69bb      	ldr	r3, [r7, #24]
 8000f08:	2b08      	cmp	r3, #8
 8000f0a:	d10b      	bne.n	8000f24 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f0c:	4b8d      	ldr	r3, [pc, #564]	@ (8001144 <HAL_RCC_OscConfig+0x27c>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d05b      	beq.n	8000fd0 <HAL_RCC_OscConfig+0x108>
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d157      	bne.n	8000fd0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000f20:	2301      	movs	r3, #1
 8000f22:	e2d9      	b.n	80014d8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000f2c:	d106      	bne.n	8000f3c <HAL_RCC_OscConfig+0x74>
 8000f2e:	4b85      	ldr	r3, [pc, #532]	@ (8001144 <HAL_RCC_OscConfig+0x27c>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	4a84      	ldr	r2, [pc, #528]	@ (8001144 <HAL_RCC_OscConfig+0x27c>)
 8000f34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f38:	6013      	str	r3, [r2, #0]
 8000f3a:	e01d      	b.n	8000f78 <HAL_RCC_OscConfig+0xb0>
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000f44:	d10c      	bne.n	8000f60 <HAL_RCC_OscConfig+0x98>
 8000f46:	4b7f      	ldr	r3, [pc, #508]	@ (8001144 <HAL_RCC_OscConfig+0x27c>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4a7e      	ldr	r2, [pc, #504]	@ (8001144 <HAL_RCC_OscConfig+0x27c>)
 8000f4c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f50:	6013      	str	r3, [r2, #0]
 8000f52:	4b7c      	ldr	r3, [pc, #496]	@ (8001144 <HAL_RCC_OscConfig+0x27c>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4a7b      	ldr	r2, [pc, #492]	@ (8001144 <HAL_RCC_OscConfig+0x27c>)
 8000f58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f5c:	6013      	str	r3, [r2, #0]
 8000f5e:	e00b      	b.n	8000f78 <HAL_RCC_OscConfig+0xb0>
 8000f60:	4b78      	ldr	r3, [pc, #480]	@ (8001144 <HAL_RCC_OscConfig+0x27c>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a77      	ldr	r2, [pc, #476]	@ (8001144 <HAL_RCC_OscConfig+0x27c>)
 8000f66:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000f6a:	6013      	str	r3, [r2, #0]
 8000f6c:	4b75      	ldr	r3, [pc, #468]	@ (8001144 <HAL_RCC_OscConfig+0x27c>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a74      	ldr	r2, [pc, #464]	@ (8001144 <HAL_RCC_OscConfig+0x27c>)
 8000f72:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000f76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d013      	beq.n	8000fa8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f80:	f7ff fbc6 	bl	8000710 <HAL_GetTick>
 8000f84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000f86:	e008      	b.n	8000f9a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f88:	f7ff fbc2 	bl	8000710 <HAL_GetTick>
 8000f8c:	4602      	mov	r2, r0
 8000f8e:	693b      	ldr	r3, [r7, #16]
 8000f90:	1ad3      	subs	r3, r2, r3
 8000f92:	2b64      	cmp	r3, #100	@ 0x64
 8000f94:	d901      	bls.n	8000f9a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000f96:	2303      	movs	r3, #3
 8000f98:	e29e      	b.n	80014d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000f9a:	4b6a      	ldr	r3, [pc, #424]	@ (8001144 <HAL_RCC_OscConfig+0x27c>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d0f0      	beq.n	8000f88 <HAL_RCC_OscConfig+0xc0>
 8000fa6:	e014      	b.n	8000fd2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fa8:	f7ff fbb2 	bl	8000710 <HAL_GetTick>
 8000fac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000fae:	e008      	b.n	8000fc2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fb0:	f7ff fbae 	bl	8000710 <HAL_GetTick>
 8000fb4:	4602      	mov	r2, r0
 8000fb6:	693b      	ldr	r3, [r7, #16]
 8000fb8:	1ad3      	subs	r3, r2, r3
 8000fba:	2b64      	cmp	r3, #100	@ 0x64
 8000fbc:	d901      	bls.n	8000fc2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000fbe:	2303      	movs	r3, #3
 8000fc0:	e28a      	b.n	80014d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000fc2:	4b60      	ldr	r3, [pc, #384]	@ (8001144 <HAL_RCC_OscConfig+0x27c>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d1f0      	bne.n	8000fb0 <HAL_RCC_OscConfig+0xe8>
 8000fce:	e000      	b.n	8000fd2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f003 0302 	and.w	r3, r3, #2
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d075      	beq.n	80010ca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000fde:	4b59      	ldr	r3, [pc, #356]	@ (8001144 <HAL_RCC_OscConfig+0x27c>)
 8000fe0:	689b      	ldr	r3, [r3, #8]
 8000fe2:	f003 030c 	and.w	r3, r3, #12
 8000fe6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000fe8:	4b56      	ldr	r3, [pc, #344]	@ (8001144 <HAL_RCC_OscConfig+0x27c>)
 8000fea:	68db      	ldr	r3, [r3, #12]
 8000fec:	f003 0303 	and.w	r3, r3, #3
 8000ff0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8000ff2:	69bb      	ldr	r3, [r7, #24]
 8000ff4:	2b0c      	cmp	r3, #12
 8000ff6:	d102      	bne.n	8000ffe <HAL_RCC_OscConfig+0x136>
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	2b02      	cmp	r3, #2
 8000ffc:	d002      	beq.n	8001004 <HAL_RCC_OscConfig+0x13c>
 8000ffe:	69bb      	ldr	r3, [r7, #24]
 8001000:	2b04      	cmp	r3, #4
 8001002:	d11f      	bne.n	8001044 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001004:	4b4f      	ldr	r3, [pc, #316]	@ (8001144 <HAL_RCC_OscConfig+0x27c>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800100c:	2b00      	cmp	r3, #0
 800100e:	d005      	beq.n	800101c <HAL_RCC_OscConfig+0x154>
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	68db      	ldr	r3, [r3, #12]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d101      	bne.n	800101c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001018:	2301      	movs	r3, #1
 800101a:	e25d      	b.n	80014d8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800101c:	4b49      	ldr	r3, [pc, #292]	@ (8001144 <HAL_RCC_OscConfig+0x27c>)
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	691b      	ldr	r3, [r3, #16]
 8001028:	061b      	lsls	r3, r3, #24
 800102a:	4946      	ldr	r1, [pc, #280]	@ (8001144 <HAL_RCC_OscConfig+0x27c>)
 800102c:	4313      	orrs	r3, r2
 800102e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001030:	4b45      	ldr	r3, [pc, #276]	@ (8001148 <HAL_RCC_OscConfig+0x280>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4618      	mov	r0, r3
 8001036:	f7ff fb1f 	bl	8000678 <HAL_InitTick>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d043      	beq.n	80010c8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001040:	2301      	movs	r3, #1
 8001042:	e249      	b.n	80014d8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	68db      	ldr	r3, [r3, #12]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d023      	beq.n	8001094 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800104c:	4b3d      	ldr	r3, [pc, #244]	@ (8001144 <HAL_RCC_OscConfig+0x27c>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a3c      	ldr	r2, [pc, #240]	@ (8001144 <HAL_RCC_OscConfig+0x27c>)
 8001052:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001056:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001058:	f7ff fb5a 	bl	8000710 <HAL_GetTick>
 800105c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800105e:	e008      	b.n	8001072 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001060:	f7ff fb56 	bl	8000710 <HAL_GetTick>
 8001064:	4602      	mov	r2, r0
 8001066:	693b      	ldr	r3, [r7, #16]
 8001068:	1ad3      	subs	r3, r2, r3
 800106a:	2b02      	cmp	r3, #2
 800106c:	d901      	bls.n	8001072 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800106e:	2303      	movs	r3, #3
 8001070:	e232      	b.n	80014d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001072:	4b34      	ldr	r3, [pc, #208]	@ (8001144 <HAL_RCC_OscConfig+0x27c>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800107a:	2b00      	cmp	r3, #0
 800107c:	d0f0      	beq.n	8001060 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800107e:	4b31      	ldr	r3, [pc, #196]	@ (8001144 <HAL_RCC_OscConfig+0x27c>)
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	691b      	ldr	r3, [r3, #16]
 800108a:	061b      	lsls	r3, r3, #24
 800108c:	492d      	ldr	r1, [pc, #180]	@ (8001144 <HAL_RCC_OscConfig+0x27c>)
 800108e:	4313      	orrs	r3, r2
 8001090:	604b      	str	r3, [r1, #4]
 8001092:	e01a      	b.n	80010ca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001094:	4b2b      	ldr	r3, [pc, #172]	@ (8001144 <HAL_RCC_OscConfig+0x27c>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a2a      	ldr	r2, [pc, #168]	@ (8001144 <HAL_RCC_OscConfig+0x27c>)
 800109a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800109e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010a0:	f7ff fb36 	bl	8000710 <HAL_GetTick>
 80010a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80010a6:	e008      	b.n	80010ba <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010a8:	f7ff fb32 	bl	8000710 <HAL_GetTick>
 80010ac:	4602      	mov	r2, r0
 80010ae:	693b      	ldr	r3, [r7, #16]
 80010b0:	1ad3      	subs	r3, r2, r3
 80010b2:	2b02      	cmp	r3, #2
 80010b4:	d901      	bls.n	80010ba <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80010b6:	2303      	movs	r3, #3
 80010b8:	e20e      	b.n	80014d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80010ba:	4b22      	ldr	r3, [pc, #136]	@ (8001144 <HAL_RCC_OscConfig+0x27c>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d1f0      	bne.n	80010a8 <HAL_RCC_OscConfig+0x1e0>
 80010c6:	e000      	b.n	80010ca <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80010c8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f003 0308 	and.w	r3, r3, #8
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d041      	beq.n	800115a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	695b      	ldr	r3, [r3, #20]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d01c      	beq.n	8001118 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010de:	4b19      	ldr	r3, [pc, #100]	@ (8001144 <HAL_RCC_OscConfig+0x27c>)
 80010e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80010e4:	4a17      	ldr	r2, [pc, #92]	@ (8001144 <HAL_RCC_OscConfig+0x27c>)
 80010e6:	f043 0301 	orr.w	r3, r3, #1
 80010ea:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010ee:	f7ff fb0f 	bl	8000710 <HAL_GetTick>
 80010f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80010f4:	e008      	b.n	8001108 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010f6:	f7ff fb0b 	bl	8000710 <HAL_GetTick>
 80010fa:	4602      	mov	r2, r0
 80010fc:	693b      	ldr	r3, [r7, #16]
 80010fe:	1ad3      	subs	r3, r2, r3
 8001100:	2b02      	cmp	r3, #2
 8001102:	d901      	bls.n	8001108 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001104:	2303      	movs	r3, #3
 8001106:	e1e7      	b.n	80014d8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001108:	4b0e      	ldr	r3, [pc, #56]	@ (8001144 <HAL_RCC_OscConfig+0x27c>)
 800110a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800110e:	f003 0302 	and.w	r3, r3, #2
 8001112:	2b00      	cmp	r3, #0
 8001114:	d0ef      	beq.n	80010f6 <HAL_RCC_OscConfig+0x22e>
 8001116:	e020      	b.n	800115a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001118:	4b0a      	ldr	r3, [pc, #40]	@ (8001144 <HAL_RCC_OscConfig+0x27c>)
 800111a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800111e:	4a09      	ldr	r2, [pc, #36]	@ (8001144 <HAL_RCC_OscConfig+0x27c>)
 8001120:	f023 0301 	bic.w	r3, r3, #1
 8001124:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001128:	f7ff faf2 	bl	8000710 <HAL_GetTick>
 800112c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800112e:	e00d      	b.n	800114c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001130:	f7ff faee 	bl	8000710 <HAL_GetTick>
 8001134:	4602      	mov	r2, r0
 8001136:	693b      	ldr	r3, [r7, #16]
 8001138:	1ad3      	subs	r3, r2, r3
 800113a:	2b02      	cmp	r3, #2
 800113c:	d906      	bls.n	800114c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800113e:	2303      	movs	r3, #3
 8001140:	e1ca      	b.n	80014d8 <HAL_RCC_OscConfig+0x610>
 8001142:	bf00      	nop
 8001144:	40021000 	.word	0x40021000
 8001148:	20000014 	.word	0x20000014
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800114c:	4b8c      	ldr	r3, [pc, #560]	@ (8001380 <HAL_RCC_OscConfig+0x4b8>)
 800114e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001152:	f003 0302 	and.w	r3, r3, #2
 8001156:	2b00      	cmp	r3, #0
 8001158:	d1ea      	bne.n	8001130 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f003 0304 	and.w	r3, r3, #4
 8001162:	2b00      	cmp	r3, #0
 8001164:	f000 80a6 	beq.w	80012b4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001168:	2300      	movs	r3, #0
 800116a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800116c:	4b84      	ldr	r3, [pc, #528]	@ (8001380 <HAL_RCC_OscConfig+0x4b8>)
 800116e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001170:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001174:	2b00      	cmp	r3, #0
 8001176:	d101      	bne.n	800117c <HAL_RCC_OscConfig+0x2b4>
 8001178:	2301      	movs	r3, #1
 800117a:	e000      	b.n	800117e <HAL_RCC_OscConfig+0x2b6>
 800117c:	2300      	movs	r3, #0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d00d      	beq.n	800119e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001182:	4b7f      	ldr	r3, [pc, #508]	@ (8001380 <HAL_RCC_OscConfig+0x4b8>)
 8001184:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001186:	4a7e      	ldr	r2, [pc, #504]	@ (8001380 <HAL_RCC_OscConfig+0x4b8>)
 8001188:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800118c:	6593      	str	r3, [r2, #88]	@ 0x58
 800118e:	4b7c      	ldr	r3, [pc, #496]	@ (8001380 <HAL_RCC_OscConfig+0x4b8>)
 8001190:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001192:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001196:	60fb      	str	r3, [r7, #12]
 8001198:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800119a:	2301      	movs	r3, #1
 800119c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800119e:	4b79      	ldr	r3, [pc, #484]	@ (8001384 <HAL_RCC_OscConfig+0x4bc>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d118      	bne.n	80011dc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80011aa:	4b76      	ldr	r3, [pc, #472]	@ (8001384 <HAL_RCC_OscConfig+0x4bc>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4a75      	ldr	r2, [pc, #468]	@ (8001384 <HAL_RCC_OscConfig+0x4bc>)
 80011b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011b6:	f7ff faab 	bl	8000710 <HAL_GetTick>
 80011ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80011bc:	e008      	b.n	80011d0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011be:	f7ff faa7 	bl	8000710 <HAL_GetTick>
 80011c2:	4602      	mov	r2, r0
 80011c4:	693b      	ldr	r3, [r7, #16]
 80011c6:	1ad3      	subs	r3, r2, r3
 80011c8:	2b02      	cmp	r3, #2
 80011ca:	d901      	bls.n	80011d0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80011cc:	2303      	movs	r3, #3
 80011ce:	e183      	b.n	80014d8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80011d0:	4b6c      	ldr	r3, [pc, #432]	@ (8001384 <HAL_RCC_OscConfig+0x4bc>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d0f0      	beq.n	80011be <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	689b      	ldr	r3, [r3, #8]
 80011e0:	2b01      	cmp	r3, #1
 80011e2:	d108      	bne.n	80011f6 <HAL_RCC_OscConfig+0x32e>
 80011e4:	4b66      	ldr	r3, [pc, #408]	@ (8001380 <HAL_RCC_OscConfig+0x4b8>)
 80011e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80011ea:	4a65      	ldr	r2, [pc, #404]	@ (8001380 <HAL_RCC_OscConfig+0x4b8>)
 80011ec:	f043 0301 	orr.w	r3, r3, #1
 80011f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80011f4:	e024      	b.n	8001240 <HAL_RCC_OscConfig+0x378>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	689b      	ldr	r3, [r3, #8]
 80011fa:	2b05      	cmp	r3, #5
 80011fc:	d110      	bne.n	8001220 <HAL_RCC_OscConfig+0x358>
 80011fe:	4b60      	ldr	r3, [pc, #384]	@ (8001380 <HAL_RCC_OscConfig+0x4b8>)
 8001200:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001204:	4a5e      	ldr	r2, [pc, #376]	@ (8001380 <HAL_RCC_OscConfig+0x4b8>)
 8001206:	f043 0304 	orr.w	r3, r3, #4
 800120a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800120e:	4b5c      	ldr	r3, [pc, #368]	@ (8001380 <HAL_RCC_OscConfig+0x4b8>)
 8001210:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001214:	4a5a      	ldr	r2, [pc, #360]	@ (8001380 <HAL_RCC_OscConfig+0x4b8>)
 8001216:	f043 0301 	orr.w	r3, r3, #1
 800121a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800121e:	e00f      	b.n	8001240 <HAL_RCC_OscConfig+0x378>
 8001220:	4b57      	ldr	r3, [pc, #348]	@ (8001380 <HAL_RCC_OscConfig+0x4b8>)
 8001222:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001226:	4a56      	ldr	r2, [pc, #344]	@ (8001380 <HAL_RCC_OscConfig+0x4b8>)
 8001228:	f023 0301 	bic.w	r3, r3, #1
 800122c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001230:	4b53      	ldr	r3, [pc, #332]	@ (8001380 <HAL_RCC_OscConfig+0x4b8>)
 8001232:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001236:	4a52      	ldr	r2, [pc, #328]	@ (8001380 <HAL_RCC_OscConfig+0x4b8>)
 8001238:	f023 0304 	bic.w	r3, r3, #4
 800123c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	689b      	ldr	r3, [r3, #8]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d016      	beq.n	8001276 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001248:	f7ff fa62 	bl	8000710 <HAL_GetTick>
 800124c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800124e:	e00a      	b.n	8001266 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001250:	f7ff fa5e 	bl	8000710 <HAL_GetTick>
 8001254:	4602      	mov	r2, r0
 8001256:	693b      	ldr	r3, [r7, #16]
 8001258:	1ad3      	subs	r3, r2, r3
 800125a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800125e:	4293      	cmp	r3, r2
 8001260:	d901      	bls.n	8001266 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001262:	2303      	movs	r3, #3
 8001264:	e138      	b.n	80014d8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001266:	4b46      	ldr	r3, [pc, #280]	@ (8001380 <HAL_RCC_OscConfig+0x4b8>)
 8001268:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800126c:	f003 0302 	and.w	r3, r3, #2
 8001270:	2b00      	cmp	r3, #0
 8001272:	d0ed      	beq.n	8001250 <HAL_RCC_OscConfig+0x388>
 8001274:	e015      	b.n	80012a2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001276:	f7ff fa4b 	bl	8000710 <HAL_GetTick>
 800127a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800127c:	e00a      	b.n	8001294 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800127e:	f7ff fa47 	bl	8000710 <HAL_GetTick>
 8001282:	4602      	mov	r2, r0
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	1ad3      	subs	r3, r2, r3
 8001288:	f241 3288 	movw	r2, #5000	@ 0x1388
 800128c:	4293      	cmp	r3, r2
 800128e:	d901      	bls.n	8001294 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001290:	2303      	movs	r3, #3
 8001292:	e121      	b.n	80014d8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001294:	4b3a      	ldr	r3, [pc, #232]	@ (8001380 <HAL_RCC_OscConfig+0x4b8>)
 8001296:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800129a:	f003 0302 	and.w	r3, r3, #2
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d1ed      	bne.n	800127e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80012a2:	7ffb      	ldrb	r3, [r7, #31]
 80012a4:	2b01      	cmp	r3, #1
 80012a6:	d105      	bne.n	80012b4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012a8:	4b35      	ldr	r3, [pc, #212]	@ (8001380 <HAL_RCC_OscConfig+0x4b8>)
 80012aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012ac:	4a34      	ldr	r2, [pc, #208]	@ (8001380 <HAL_RCC_OscConfig+0x4b8>)
 80012ae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80012b2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f003 0320 	and.w	r3, r3, #32
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d03c      	beq.n	800133a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	699b      	ldr	r3, [r3, #24]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d01c      	beq.n	8001302 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80012c8:	4b2d      	ldr	r3, [pc, #180]	@ (8001380 <HAL_RCC_OscConfig+0x4b8>)
 80012ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80012ce:	4a2c      	ldr	r2, [pc, #176]	@ (8001380 <HAL_RCC_OscConfig+0x4b8>)
 80012d0:	f043 0301 	orr.w	r3, r3, #1
 80012d4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012d8:	f7ff fa1a 	bl	8000710 <HAL_GetTick>
 80012dc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80012de:	e008      	b.n	80012f2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80012e0:	f7ff fa16 	bl	8000710 <HAL_GetTick>
 80012e4:	4602      	mov	r2, r0
 80012e6:	693b      	ldr	r3, [r7, #16]
 80012e8:	1ad3      	subs	r3, r2, r3
 80012ea:	2b02      	cmp	r3, #2
 80012ec:	d901      	bls.n	80012f2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80012ee:	2303      	movs	r3, #3
 80012f0:	e0f2      	b.n	80014d8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80012f2:	4b23      	ldr	r3, [pc, #140]	@ (8001380 <HAL_RCC_OscConfig+0x4b8>)
 80012f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80012f8:	f003 0302 	and.w	r3, r3, #2
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d0ef      	beq.n	80012e0 <HAL_RCC_OscConfig+0x418>
 8001300:	e01b      	b.n	800133a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001302:	4b1f      	ldr	r3, [pc, #124]	@ (8001380 <HAL_RCC_OscConfig+0x4b8>)
 8001304:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001308:	4a1d      	ldr	r2, [pc, #116]	@ (8001380 <HAL_RCC_OscConfig+0x4b8>)
 800130a:	f023 0301 	bic.w	r3, r3, #1
 800130e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001312:	f7ff f9fd 	bl	8000710 <HAL_GetTick>
 8001316:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001318:	e008      	b.n	800132c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800131a:	f7ff f9f9 	bl	8000710 <HAL_GetTick>
 800131e:	4602      	mov	r2, r0
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	1ad3      	subs	r3, r2, r3
 8001324:	2b02      	cmp	r3, #2
 8001326:	d901      	bls.n	800132c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001328:	2303      	movs	r3, #3
 800132a:	e0d5      	b.n	80014d8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800132c:	4b14      	ldr	r3, [pc, #80]	@ (8001380 <HAL_RCC_OscConfig+0x4b8>)
 800132e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001332:	f003 0302 	and.w	r3, r3, #2
 8001336:	2b00      	cmp	r3, #0
 8001338:	d1ef      	bne.n	800131a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	69db      	ldr	r3, [r3, #28]
 800133e:	2b00      	cmp	r3, #0
 8001340:	f000 80c9 	beq.w	80014d6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001344:	4b0e      	ldr	r3, [pc, #56]	@ (8001380 <HAL_RCC_OscConfig+0x4b8>)
 8001346:	689b      	ldr	r3, [r3, #8]
 8001348:	f003 030c 	and.w	r3, r3, #12
 800134c:	2b0c      	cmp	r3, #12
 800134e:	f000 8083 	beq.w	8001458 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	69db      	ldr	r3, [r3, #28]
 8001356:	2b02      	cmp	r3, #2
 8001358:	d15e      	bne.n	8001418 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800135a:	4b09      	ldr	r3, [pc, #36]	@ (8001380 <HAL_RCC_OscConfig+0x4b8>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4a08      	ldr	r2, [pc, #32]	@ (8001380 <HAL_RCC_OscConfig+0x4b8>)
 8001360:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001364:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001366:	f7ff f9d3 	bl	8000710 <HAL_GetTick>
 800136a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800136c:	e00c      	b.n	8001388 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800136e:	f7ff f9cf 	bl	8000710 <HAL_GetTick>
 8001372:	4602      	mov	r2, r0
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	1ad3      	subs	r3, r2, r3
 8001378:	2b02      	cmp	r3, #2
 800137a:	d905      	bls.n	8001388 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800137c:	2303      	movs	r3, #3
 800137e:	e0ab      	b.n	80014d8 <HAL_RCC_OscConfig+0x610>
 8001380:	40021000 	.word	0x40021000
 8001384:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001388:	4b55      	ldr	r3, [pc, #340]	@ (80014e0 <HAL_RCC_OscConfig+0x618>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001390:	2b00      	cmp	r3, #0
 8001392:	d1ec      	bne.n	800136e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001394:	4b52      	ldr	r3, [pc, #328]	@ (80014e0 <HAL_RCC_OscConfig+0x618>)
 8001396:	68da      	ldr	r2, [r3, #12]
 8001398:	4b52      	ldr	r3, [pc, #328]	@ (80014e4 <HAL_RCC_OscConfig+0x61c>)
 800139a:	4013      	ands	r3, r2
 800139c:	687a      	ldr	r2, [r7, #4]
 800139e:	6a11      	ldr	r1, [r2, #32]
 80013a0:	687a      	ldr	r2, [r7, #4]
 80013a2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80013a4:	3a01      	subs	r2, #1
 80013a6:	0112      	lsls	r2, r2, #4
 80013a8:	4311      	orrs	r1, r2
 80013aa:	687a      	ldr	r2, [r7, #4]
 80013ac:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80013ae:	0212      	lsls	r2, r2, #8
 80013b0:	4311      	orrs	r1, r2
 80013b2:	687a      	ldr	r2, [r7, #4]
 80013b4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80013b6:	0852      	lsrs	r2, r2, #1
 80013b8:	3a01      	subs	r2, #1
 80013ba:	0552      	lsls	r2, r2, #21
 80013bc:	4311      	orrs	r1, r2
 80013be:	687a      	ldr	r2, [r7, #4]
 80013c0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80013c2:	0852      	lsrs	r2, r2, #1
 80013c4:	3a01      	subs	r2, #1
 80013c6:	0652      	lsls	r2, r2, #25
 80013c8:	4311      	orrs	r1, r2
 80013ca:	687a      	ldr	r2, [r7, #4]
 80013cc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80013ce:	06d2      	lsls	r2, r2, #27
 80013d0:	430a      	orrs	r2, r1
 80013d2:	4943      	ldr	r1, [pc, #268]	@ (80014e0 <HAL_RCC_OscConfig+0x618>)
 80013d4:	4313      	orrs	r3, r2
 80013d6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013d8:	4b41      	ldr	r3, [pc, #260]	@ (80014e0 <HAL_RCC_OscConfig+0x618>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a40      	ldr	r2, [pc, #256]	@ (80014e0 <HAL_RCC_OscConfig+0x618>)
 80013de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80013e2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80013e4:	4b3e      	ldr	r3, [pc, #248]	@ (80014e0 <HAL_RCC_OscConfig+0x618>)
 80013e6:	68db      	ldr	r3, [r3, #12]
 80013e8:	4a3d      	ldr	r2, [pc, #244]	@ (80014e0 <HAL_RCC_OscConfig+0x618>)
 80013ea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80013ee:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013f0:	f7ff f98e 	bl	8000710 <HAL_GetTick>
 80013f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80013f6:	e008      	b.n	800140a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013f8:	f7ff f98a 	bl	8000710 <HAL_GetTick>
 80013fc:	4602      	mov	r2, r0
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	1ad3      	subs	r3, r2, r3
 8001402:	2b02      	cmp	r3, #2
 8001404:	d901      	bls.n	800140a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001406:	2303      	movs	r3, #3
 8001408:	e066      	b.n	80014d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800140a:	4b35      	ldr	r3, [pc, #212]	@ (80014e0 <HAL_RCC_OscConfig+0x618>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001412:	2b00      	cmp	r3, #0
 8001414:	d0f0      	beq.n	80013f8 <HAL_RCC_OscConfig+0x530>
 8001416:	e05e      	b.n	80014d6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001418:	4b31      	ldr	r3, [pc, #196]	@ (80014e0 <HAL_RCC_OscConfig+0x618>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a30      	ldr	r2, [pc, #192]	@ (80014e0 <HAL_RCC_OscConfig+0x618>)
 800141e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001422:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001424:	f7ff f974 	bl	8000710 <HAL_GetTick>
 8001428:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800142a:	e008      	b.n	800143e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800142c:	f7ff f970 	bl	8000710 <HAL_GetTick>
 8001430:	4602      	mov	r2, r0
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	2b02      	cmp	r3, #2
 8001438:	d901      	bls.n	800143e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800143a:	2303      	movs	r3, #3
 800143c:	e04c      	b.n	80014d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800143e:	4b28      	ldr	r3, [pc, #160]	@ (80014e0 <HAL_RCC_OscConfig+0x618>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001446:	2b00      	cmp	r3, #0
 8001448:	d1f0      	bne.n	800142c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800144a:	4b25      	ldr	r3, [pc, #148]	@ (80014e0 <HAL_RCC_OscConfig+0x618>)
 800144c:	68da      	ldr	r2, [r3, #12]
 800144e:	4924      	ldr	r1, [pc, #144]	@ (80014e0 <HAL_RCC_OscConfig+0x618>)
 8001450:	4b25      	ldr	r3, [pc, #148]	@ (80014e8 <HAL_RCC_OscConfig+0x620>)
 8001452:	4013      	ands	r3, r2
 8001454:	60cb      	str	r3, [r1, #12]
 8001456:	e03e      	b.n	80014d6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	69db      	ldr	r3, [r3, #28]
 800145c:	2b01      	cmp	r3, #1
 800145e:	d101      	bne.n	8001464 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001460:	2301      	movs	r3, #1
 8001462:	e039      	b.n	80014d8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001464:	4b1e      	ldr	r3, [pc, #120]	@ (80014e0 <HAL_RCC_OscConfig+0x618>)
 8001466:	68db      	ldr	r3, [r3, #12]
 8001468:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	f003 0203 	and.w	r2, r3, #3
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6a1b      	ldr	r3, [r3, #32]
 8001474:	429a      	cmp	r2, r3
 8001476:	d12c      	bne.n	80014d2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001482:	3b01      	subs	r3, #1
 8001484:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001486:	429a      	cmp	r2, r3
 8001488:	d123      	bne.n	80014d2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001494:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001496:	429a      	cmp	r2, r3
 8001498:	d11b      	bne.n	80014d2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014a4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80014a6:	429a      	cmp	r2, r3
 80014a8:	d113      	bne.n	80014d2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014b4:	085b      	lsrs	r3, r3, #1
 80014b6:	3b01      	subs	r3, #1
 80014b8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80014ba:	429a      	cmp	r2, r3
 80014bc:	d109      	bne.n	80014d2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80014c8:	085b      	lsrs	r3, r3, #1
 80014ca:	3b01      	subs	r3, #1
 80014cc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80014ce:	429a      	cmp	r2, r3
 80014d0:	d001      	beq.n	80014d6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	e000      	b.n	80014d8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80014d6:	2300      	movs	r3, #0
}
 80014d8:	4618      	mov	r0, r3
 80014da:	3720      	adds	r7, #32
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	40021000 	.word	0x40021000
 80014e4:	019f800c 	.word	0x019f800c
 80014e8:	feeefffc 	.word	0xfeeefffc

080014ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b086      	sub	sp, #24
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
 80014f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80014f6:	2300      	movs	r3, #0
 80014f8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d101      	bne.n	8001504 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001500:	2301      	movs	r3, #1
 8001502:	e11e      	b.n	8001742 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001504:	4b91      	ldr	r3, [pc, #580]	@ (800174c <HAL_RCC_ClockConfig+0x260>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f003 030f 	and.w	r3, r3, #15
 800150c:	683a      	ldr	r2, [r7, #0]
 800150e:	429a      	cmp	r2, r3
 8001510:	d910      	bls.n	8001534 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001512:	4b8e      	ldr	r3, [pc, #568]	@ (800174c <HAL_RCC_ClockConfig+0x260>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f023 020f 	bic.w	r2, r3, #15
 800151a:	498c      	ldr	r1, [pc, #560]	@ (800174c <HAL_RCC_ClockConfig+0x260>)
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	4313      	orrs	r3, r2
 8001520:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001522:	4b8a      	ldr	r3, [pc, #552]	@ (800174c <HAL_RCC_ClockConfig+0x260>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f003 030f 	and.w	r3, r3, #15
 800152a:	683a      	ldr	r2, [r7, #0]
 800152c:	429a      	cmp	r2, r3
 800152e:	d001      	beq.n	8001534 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001530:	2301      	movs	r3, #1
 8001532:	e106      	b.n	8001742 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f003 0301 	and.w	r3, r3, #1
 800153c:	2b00      	cmp	r3, #0
 800153e:	d073      	beq.n	8001628 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	2b03      	cmp	r3, #3
 8001546:	d129      	bne.n	800159c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001548:	4b81      	ldr	r3, [pc, #516]	@ (8001750 <HAL_RCC_ClockConfig+0x264>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001550:	2b00      	cmp	r3, #0
 8001552:	d101      	bne.n	8001558 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001554:	2301      	movs	r3, #1
 8001556:	e0f4      	b.n	8001742 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001558:	f000 f966 	bl	8001828 <RCC_GetSysClockFreqFromPLLSource>
 800155c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	4a7c      	ldr	r2, [pc, #496]	@ (8001754 <HAL_RCC_ClockConfig+0x268>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d93f      	bls.n	80015e6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001566:	4b7a      	ldr	r3, [pc, #488]	@ (8001750 <HAL_RCC_ClockConfig+0x264>)
 8001568:	689b      	ldr	r3, [r3, #8]
 800156a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d009      	beq.n	8001586 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800157a:	2b00      	cmp	r3, #0
 800157c:	d033      	beq.n	80015e6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001582:	2b00      	cmp	r3, #0
 8001584:	d12f      	bne.n	80015e6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001586:	4b72      	ldr	r3, [pc, #456]	@ (8001750 <HAL_RCC_ClockConfig+0x264>)
 8001588:	689b      	ldr	r3, [r3, #8]
 800158a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800158e:	4a70      	ldr	r2, [pc, #448]	@ (8001750 <HAL_RCC_ClockConfig+0x264>)
 8001590:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001594:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001596:	2380      	movs	r3, #128	@ 0x80
 8001598:	617b      	str	r3, [r7, #20]
 800159a:	e024      	b.n	80015e6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	2b02      	cmp	r3, #2
 80015a2:	d107      	bne.n	80015b4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015a4:	4b6a      	ldr	r3, [pc, #424]	@ (8001750 <HAL_RCC_ClockConfig+0x264>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d109      	bne.n	80015c4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80015b0:	2301      	movs	r3, #1
 80015b2:	e0c6      	b.n	8001742 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015b4:	4b66      	ldr	r3, [pc, #408]	@ (8001750 <HAL_RCC_ClockConfig+0x264>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d101      	bne.n	80015c4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80015c0:	2301      	movs	r3, #1
 80015c2:	e0be      	b.n	8001742 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80015c4:	f000 f8ce 	bl	8001764 <HAL_RCC_GetSysClockFreq>
 80015c8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	4a61      	ldr	r2, [pc, #388]	@ (8001754 <HAL_RCC_ClockConfig+0x268>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d909      	bls.n	80015e6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80015d2:	4b5f      	ldr	r3, [pc, #380]	@ (8001750 <HAL_RCC_ClockConfig+0x264>)
 80015d4:	689b      	ldr	r3, [r3, #8]
 80015d6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80015da:	4a5d      	ldr	r2, [pc, #372]	@ (8001750 <HAL_RCC_ClockConfig+0x264>)
 80015dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80015e0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80015e2:	2380      	movs	r3, #128	@ 0x80
 80015e4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80015e6:	4b5a      	ldr	r3, [pc, #360]	@ (8001750 <HAL_RCC_ClockConfig+0x264>)
 80015e8:	689b      	ldr	r3, [r3, #8]
 80015ea:	f023 0203 	bic.w	r2, r3, #3
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	4957      	ldr	r1, [pc, #348]	@ (8001750 <HAL_RCC_ClockConfig+0x264>)
 80015f4:	4313      	orrs	r3, r2
 80015f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80015f8:	f7ff f88a 	bl	8000710 <HAL_GetTick>
 80015fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015fe:	e00a      	b.n	8001616 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001600:	f7ff f886 	bl	8000710 <HAL_GetTick>
 8001604:	4602      	mov	r2, r0
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800160e:	4293      	cmp	r3, r2
 8001610:	d901      	bls.n	8001616 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001612:	2303      	movs	r3, #3
 8001614:	e095      	b.n	8001742 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001616:	4b4e      	ldr	r3, [pc, #312]	@ (8001750 <HAL_RCC_ClockConfig+0x264>)
 8001618:	689b      	ldr	r3, [r3, #8]
 800161a:	f003 020c 	and.w	r2, r3, #12
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	429a      	cmp	r2, r3
 8001626:	d1eb      	bne.n	8001600 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f003 0302 	and.w	r3, r3, #2
 8001630:	2b00      	cmp	r3, #0
 8001632:	d023      	beq.n	800167c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f003 0304 	and.w	r3, r3, #4
 800163c:	2b00      	cmp	r3, #0
 800163e:	d005      	beq.n	800164c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001640:	4b43      	ldr	r3, [pc, #268]	@ (8001750 <HAL_RCC_ClockConfig+0x264>)
 8001642:	689b      	ldr	r3, [r3, #8]
 8001644:	4a42      	ldr	r2, [pc, #264]	@ (8001750 <HAL_RCC_ClockConfig+0x264>)
 8001646:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800164a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f003 0308 	and.w	r3, r3, #8
 8001654:	2b00      	cmp	r3, #0
 8001656:	d007      	beq.n	8001668 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001658:	4b3d      	ldr	r3, [pc, #244]	@ (8001750 <HAL_RCC_ClockConfig+0x264>)
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8001660:	4a3b      	ldr	r2, [pc, #236]	@ (8001750 <HAL_RCC_ClockConfig+0x264>)
 8001662:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001666:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001668:	4b39      	ldr	r3, [pc, #228]	@ (8001750 <HAL_RCC_ClockConfig+0x264>)
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	689b      	ldr	r3, [r3, #8]
 8001674:	4936      	ldr	r1, [pc, #216]	@ (8001750 <HAL_RCC_ClockConfig+0x264>)
 8001676:	4313      	orrs	r3, r2
 8001678:	608b      	str	r3, [r1, #8]
 800167a:	e008      	b.n	800168e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	2b80      	cmp	r3, #128	@ 0x80
 8001680:	d105      	bne.n	800168e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001682:	4b33      	ldr	r3, [pc, #204]	@ (8001750 <HAL_RCC_ClockConfig+0x264>)
 8001684:	689b      	ldr	r3, [r3, #8]
 8001686:	4a32      	ldr	r2, [pc, #200]	@ (8001750 <HAL_RCC_ClockConfig+0x264>)
 8001688:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800168c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800168e:	4b2f      	ldr	r3, [pc, #188]	@ (800174c <HAL_RCC_ClockConfig+0x260>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 030f 	and.w	r3, r3, #15
 8001696:	683a      	ldr	r2, [r7, #0]
 8001698:	429a      	cmp	r2, r3
 800169a:	d21d      	bcs.n	80016d8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800169c:	4b2b      	ldr	r3, [pc, #172]	@ (800174c <HAL_RCC_ClockConfig+0x260>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f023 020f 	bic.w	r2, r3, #15
 80016a4:	4929      	ldr	r1, [pc, #164]	@ (800174c <HAL_RCC_ClockConfig+0x260>)
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	4313      	orrs	r3, r2
 80016aa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80016ac:	f7ff f830 	bl	8000710 <HAL_GetTick>
 80016b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016b2:	e00a      	b.n	80016ca <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016b4:	f7ff f82c 	bl	8000710 <HAL_GetTick>
 80016b8:	4602      	mov	r2, r0
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	1ad3      	subs	r3, r2, r3
 80016be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d901      	bls.n	80016ca <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80016c6:	2303      	movs	r3, #3
 80016c8:	e03b      	b.n	8001742 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016ca:	4b20      	ldr	r3, [pc, #128]	@ (800174c <HAL_RCC_ClockConfig+0x260>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f003 030f 	and.w	r3, r3, #15
 80016d2:	683a      	ldr	r2, [r7, #0]
 80016d4:	429a      	cmp	r2, r3
 80016d6:	d1ed      	bne.n	80016b4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f003 0304 	and.w	r3, r3, #4
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d008      	beq.n	80016f6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016e4:	4b1a      	ldr	r3, [pc, #104]	@ (8001750 <HAL_RCC_ClockConfig+0x264>)
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	4917      	ldr	r1, [pc, #92]	@ (8001750 <HAL_RCC_ClockConfig+0x264>)
 80016f2:	4313      	orrs	r3, r2
 80016f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 0308 	and.w	r3, r3, #8
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d009      	beq.n	8001716 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001702:	4b13      	ldr	r3, [pc, #76]	@ (8001750 <HAL_RCC_ClockConfig+0x264>)
 8001704:	689b      	ldr	r3, [r3, #8]
 8001706:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	691b      	ldr	r3, [r3, #16]
 800170e:	00db      	lsls	r3, r3, #3
 8001710:	490f      	ldr	r1, [pc, #60]	@ (8001750 <HAL_RCC_ClockConfig+0x264>)
 8001712:	4313      	orrs	r3, r2
 8001714:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001716:	f000 f825 	bl	8001764 <HAL_RCC_GetSysClockFreq>
 800171a:	4602      	mov	r2, r0
 800171c:	4b0c      	ldr	r3, [pc, #48]	@ (8001750 <HAL_RCC_ClockConfig+0x264>)
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	091b      	lsrs	r3, r3, #4
 8001722:	f003 030f 	and.w	r3, r3, #15
 8001726:	490c      	ldr	r1, [pc, #48]	@ (8001758 <HAL_RCC_ClockConfig+0x26c>)
 8001728:	5ccb      	ldrb	r3, [r1, r3]
 800172a:	f003 031f 	and.w	r3, r3, #31
 800172e:	fa22 f303 	lsr.w	r3, r2, r3
 8001732:	4a0a      	ldr	r2, [pc, #40]	@ (800175c <HAL_RCC_ClockConfig+0x270>)
 8001734:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001736:	4b0a      	ldr	r3, [pc, #40]	@ (8001760 <HAL_RCC_ClockConfig+0x274>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4618      	mov	r0, r3
 800173c:	f7fe ff9c 	bl	8000678 <HAL_InitTick>
 8001740:	4603      	mov	r3, r0
}
 8001742:	4618      	mov	r0, r3
 8001744:	3718      	adds	r7, #24
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	40022000 	.word	0x40022000
 8001750:	40021000 	.word	0x40021000
 8001754:	04c4b400 	.word	0x04c4b400
 8001758:	080029bc 	.word	0x080029bc
 800175c:	20000010 	.word	0x20000010
 8001760:	20000014 	.word	0x20000014

08001764 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001764:	b480      	push	{r7}
 8001766:	b087      	sub	sp, #28
 8001768:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800176a:	4b2c      	ldr	r3, [pc, #176]	@ (800181c <HAL_RCC_GetSysClockFreq+0xb8>)
 800176c:	689b      	ldr	r3, [r3, #8]
 800176e:	f003 030c 	and.w	r3, r3, #12
 8001772:	2b04      	cmp	r3, #4
 8001774:	d102      	bne.n	800177c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001776:	4b2a      	ldr	r3, [pc, #168]	@ (8001820 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001778:	613b      	str	r3, [r7, #16]
 800177a:	e047      	b.n	800180c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800177c:	4b27      	ldr	r3, [pc, #156]	@ (800181c <HAL_RCC_GetSysClockFreq+0xb8>)
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	f003 030c 	and.w	r3, r3, #12
 8001784:	2b08      	cmp	r3, #8
 8001786:	d102      	bne.n	800178e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001788:	4b26      	ldr	r3, [pc, #152]	@ (8001824 <HAL_RCC_GetSysClockFreq+0xc0>)
 800178a:	613b      	str	r3, [r7, #16]
 800178c:	e03e      	b.n	800180c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800178e:	4b23      	ldr	r3, [pc, #140]	@ (800181c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001790:	689b      	ldr	r3, [r3, #8]
 8001792:	f003 030c 	and.w	r3, r3, #12
 8001796:	2b0c      	cmp	r3, #12
 8001798:	d136      	bne.n	8001808 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800179a:	4b20      	ldr	r3, [pc, #128]	@ (800181c <HAL_RCC_GetSysClockFreq+0xb8>)
 800179c:	68db      	ldr	r3, [r3, #12]
 800179e:	f003 0303 	and.w	r3, r3, #3
 80017a2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80017a4:	4b1d      	ldr	r3, [pc, #116]	@ (800181c <HAL_RCC_GetSysClockFreq+0xb8>)
 80017a6:	68db      	ldr	r3, [r3, #12]
 80017a8:	091b      	lsrs	r3, r3, #4
 80017aa:	f003 030f 	and.w	r3, r3, #15
 80017ae:	3301      	adds	r3, #1
 80017b0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	2b03      	cmp	r3, #3
 80017b6:	d10c      	bne.n	80017d2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80017b8:	4a1a      	ldr	r2, [pc, #104]	@ (8001824 <HAL_RCC_GetSysClockFreq+0xc0>)
 80017ba:	68bb      	ldr	r3, [r7, #8]
 80017bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80017c0:	4a16      	ldr	r2, [pc, #88]	@ (800181c <HAL_RCC_GetSysClockFreq+0xb8>)
 80017c2:	68d2      	ldr	r2, [r2, #12]
 80017c4:	0a12      	lsrs	r2, r2, #8
 80017c6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80017ca:	fb02 f303 	mul.w	r3, r2, r3
 80017ce:	617b      	str	r3, [r7, #20]
      break;
 80017d0:	e00c      	b.n	80017ec <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80017d2:	4a13      	ldr	r2, [pc, #76]	@ (8001820 <HAL_RCC_GetSysClockFreq+0xbc>)
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80017da:	4a10      	ldr	r2, [pc, #64]	@ (800181c <HAL_RCC_GetSysClockFreq+0xb8>)
 80017dc:	68d2      	ldr	r2, [r2, #12]
 80017de:	0a12      	lsrs	r2, r2, #8
 80017e0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80017e4:	fb02 f303 	mul.w	r3, r2, r3
 80017e8:	617b      	str	r3, [r7, #20]
      break;
 80017ea:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80017ec:	4b0b      	ldr	r3, [pc, #44]	@ (800181c <HAL_RCC_GetSysClockFreq+0xb8>)
 80017ee:	68db      	ldr	r3, [r3, #12]
 80017f0:	0e5b      	lsrs	r3, r3, #25
 80017f2:	f003 0303 	and.w	r3, r3, #3
 80017f6:	3301      	adds	r3, #1
 80017f8:	005b      	lsls	r3, r3, #1
 80017fa:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80017fc:	697a      	ldr	r2, [r7, #20]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	fbb2 f3f3 	udiv	r3, r2, r3
 8001804:	613b      	str	r3, [r7, #16]
 8001806:	e001      	b.n	800180c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001808:	2300      	movs	r3, #0
 800180a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800180c:	693b      	ldr	r3, [r7, #16]
}
 800180e:	4618      	mov	r0, r3
 8001810:	371c      	adds	r7, #28
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	40021000 	.word	0x40021000
 8001820:	00f42400 	.word	0x00f42400
 8001824:	016e3600 	.word	0x016e3600

08001828 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001828:	b480      	push	{r7}
 800182a:	b087      	sub	sp, #28
 800182c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800182e:	4b1e      	ldr	r3, [pc, #120]	@ (80018a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001830:	68db      	ldr	r3, [r3, #12]
 8001832:	f003 0303 	and.w	r3, r3, #3
 8001836:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001838:	4b1b      	ldr	r3, [pc, #108]	@ (80018a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800183a:	68db      	ldr	r3, [r3, #12]
 800183c:	091b      	lsrs	r3, r3, #4
 800183e:	f003 030f 	and.w	r3, r3, #15
 8001842:	3301      	adds	r3, #1
 8001844:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	2b03      	cmp	r3, #3
 800184a:	d10c      	bne.n	8001866 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800184c:	4a17      	ldr	r2, [pc, #92]	@ (80018ac <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	fbb2 f3f3 	udiv	r3, r2, r3
 8001854:	4a14      	ldr	r2, [pc, #80]	@ (80018a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001856:	68d2      	ldr	r2, [r2, #12]
 8001858:	0a12      	lsrs	r2, r2, #8
 800185a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800185e:	fb02 f303 	mul.w	r3, r2, r3
 8001862:	617b      	str	r3, [r7, #20]
    break;
 8001864:	e00c      	b.n	8001880 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001866:	4a12      	ldr	r2, [pc, #72]	@ (80018b0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	fbb2 f3f3 	udiv	r3, r2, r3
 800186e:	4a0e      	ldr	r2, [pc, #56]	@ (80018a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001870:	68d2      	ldr	r2, [r2, #12]
 8001872:	0a12      	lsrs	r2, r2, #8
 8001874:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001878:	fb02 f303 	mul.w	r3, r2, r3
 800187c:	617b      	str	r3, [r7, #20]
    break;
 800187e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001880:	4b09      	ldr	r3, [pc, #36]	@ (80018a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	0e5b      	lsrs	r3, r3, #25
 8001886:	f003 0303 	and.w	r3, r3, #3
 800188a:	3301      	adds	r3, #1
 800188c:	005b      	lsls	r3, r3, #1
 800188e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001890:	697a      	ldr	r2, [r7, #20]
 8001892:	68bb      	ldr	r3, [r7, #8]
 8001894:	fbb2 f3f3 	udiv	r3, r2, r3
 8001898:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800189a:	687b      	ldr	r3, [r7, #4]
}
 800189c:	4618      	mov	r0, r3
 800189e:	371c      	adds	r7, #28
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr
 80018a8:	40021000 	.word	0x40021000
 80018ac:	016e3600 	.word	0x016e3600
 80018b0:	00f42400 	.word	0x00f42400

080018b4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b084      	sub	sp, #16
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d101      	bne.n	80018c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e09d      	b.n	8001a02 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d108      	bne.n	80018e0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80018d6:	d009      	beq.n	80018ec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2200      	movs	r2, #0
 80018dc:	61da      	str	r2, [r3, #28]
 80018de:	e005      	b.n	80018ec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2200      	movs	r2, #0
 80018e4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2200      	movs	r2, #0
 80018ea:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2200      	movs	r2, #0
 80018f0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d106      	bne.n	800190c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2200      	movs	r2, #0
 8001902:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001906:	6878      	ldr	r0, [r7, #4]
 8001908:	f7fe fdd6 	bl	80004b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2202      	movs	r2, #2
 8001910:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001922:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800192c:	d902      	bls.n	8001934 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800192e:	2300      	movs	r3, #0
 8001930:	60fb      	str	r3, [r7, #12]
 8001932:	e002      	b.n	800193a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001934:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001938:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	68db      	ldr	r3, [r3, #12]
 800193e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8001942:	d007      	beq.n	8001954 <HAL_SPI_Init+0xa0>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	68db      	ldr	r3, [r3, #12]
 8001948:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800194c:	d002      	beq.n	8001954 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2200      	movs	r2, #0
 8001952:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8001964:	431a      	orrs	r2, r3
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	691b      	ldr	r3, [r3, #16]
 800196a:	f003 0302 	and.w	r3, r3, #2
 800196e:	431a      	orrs	r2, r3
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	695b      	ldr	r3, [r3, #20]
 8001974:	f003 0301 	and.w	r3, r3, #1
 8001978:	431a      	orrs	r2, r3
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	699b      	ldr	r3, [r3, #24]
 800197e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001982:	431a      	orrs	r2, r3
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	69db      	ldr	r3, [r3, #28]
 8001988:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800198c:	431a      	orrs	r2, r3
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6a1b      	ldr	r3, [r3, #32]
 8001992:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001996:	ea42 0103 	orr.w	r1, r2, r3
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800199e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	430a      	orrs	r2, r1
 80019a8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	699b      	ldr	r3, [r3, #24]
 80019ae:	0c1b      	lsrs	r3, r3, #16
 80019b0:	f003 0204 	and.w	r2, r3, #4
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019b8:	f003 0310 	and.w	r3, r3, #16
 80019bc:	431a      	orrs	r2, r3
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019c2:	f003 0308 	and.w	r3, r3, #8
 80019c6:	431a      	orrs	r2, r3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80019d0:	ea42 0103 	orr.w	r1, r2, r3
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	430a      	orrs	r2, r1
 80019e0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	69da      	ldr	r2, [r3, #28]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80019f0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2200      	movs	r2, #0
 80019f6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2201      	movs	r2, #1
 80019fc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8001a00:	2300      	movs	r3, #0
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3710      	adds	r7, #16
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}

08001a0a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a0a:	b580      	push	{r7, lr}
 8001a0c:	b088      	sub	sp, #32
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	60f8      	str	r0, [r7, #12]
 8001a12:	60b9      	str	r1, [r7, #8]
 8001a14:	603b      	str	r3, [r7, #0]
 8001a16:	4613      	mov	r3, r2
 8001a18:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001a1a:	f7fe fe79 	bl	8000710 <HAL_GetTick>
 8001a1e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8001a20:	88fb      	ldrh	r3, [r7, #6]
 8001a22:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8001a2a:	b2db      	uxtb	r3, r3
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d001      	beq.n	8001a34 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8001a30:	2302      	movs	r3, #2
 8001a32:	e15c      	b.n	8001cee <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d002      	beq.n	8001a40 <HAL_SPI_Transmit+0x36>
 8001a3a:	88fb      	ldrh	r3, [r7, #6]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d101      	bne.n	8001a44 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	e154      	b.n	8001cee <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	d101      	bne.n	8001a52 <HAL_SPI_Transmit+0x48>
 8001a4e:	2302      	movs	r3, #2
 8001a50:	e14d      	b.n	8001cee <HAL_SPI_Transmit+0x2e4>
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	2201      	movs	r2, #1
 8001a56:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	2203      	movs	r2, #3
 8001a5e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	2200      	movs	r2, #0
 8001a66:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	68ba      	ldr	r2, [r7, #8]
 8001a6c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	88fa      	ldrh	r2, [r7, #6]
 8001a72:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	88fa      	ldrh	r2, [r7, #6]
 8001a78:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	2200      	movs	r2, #0
 8001a84:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	2200      	movs	r2, #0
 8001a94:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001aa4:	d10f      	bne.n	8001ac6 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001ab4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001ac4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ad0:	2b40      	cmp	r3, #64	@ 0x40
 8001ad2:	d007      	beq.n	8001ae4 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001ae2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	68db      	ldr	r3, [r3, #12]
 8001ae8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8001aec:	d952      	bls.n	8001b94 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d002      	beq.n	8001afc <HAL_SPI_Transmit+0xf2>
 8001af6:	8b7b      	ldrh	r3, [r7, #26]
 8001af8:	2b01      	cmp	r3, #1
 8001afa:	d145      	bne.n	8001b88 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b00:	881a      	ldrh	r2, [r3, #0]
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b0c:	1c9a      	adds	r2, r3, #2
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001b16:	b29b      	uxth	r3, r3
 8001b18:	3b01      	subs	r3, #1
 8001b1a:	b29a      	uxth	r2, r3
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001b20:	e032      	b.n	8001b88 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	f003 0302 	and.w	r3, r3, #2
 8001b2c:	2b02      	cmp	r3, #2
 8001b2e:	d112      	bne.n	8001b56 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b34:	881a      	ldrh	r2, [r3, #0]
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b40:	1c9a      	adds	r2, r3, #2
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001b4a:	b29b      	uxth	r3, r3
 8001b4c:	3b01      	subs	r3, #1
 8001b4e:	b29a      	uxth	r2, r3
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8001b54:	e018      	b.n	8001b88 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001b56:	f7fe fddb 	bl	8000710 <HAL_GetTick>
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	1ad3      	subs	r3, r2, r3
 8001b60:	683a      	ldr	r2, [r7, #0]
 8001b62:	429a      	cmp	r2, r3
 8001b64:	d803      	bhi.n	8001b6e <HAL_SPI_Transmit+0x164>
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001b6c:	d102      	bne.n	8001b74 <HAL_SPI_Transmit+0x16a>
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d109      	bne.n	8001b88 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	2201      	movs	r2, #1
 8001b78:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	2200      	movs	r2, #0
 8001b80:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8001b84:	2303      	movs	r3, #3
 8001b86:	e0b2      	b.n	8001cee <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001b8c:	b29b      	uxth	r3, r3
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d1c7      	bne.n	8001b22 <HAL_SPI_Transmit+0x118>
 8001b92:	e083      	b.n	8001c9c <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d002      	beq.n	8001ba2 <HAL_SPI_Transmit+0x198>
 8001b9c:	8b7b      	ldrh	r3, [r7, #26]
 8001b9e:	2b01      	cmp	r3, #1
 8001ba0:	d177      	bne.n	8001c92 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001ba6:	b29b      	uxth	r3, r3
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d912      	bls.n	8001bd2 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001bb0:	881a      	ldrh	r2, [r3, #0]
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001bbc:	1c9a      	adds	r2, r3, #2
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001bc6:	b29b      	uxth	r3, r3
 8001bc8:	3b02      	subs	r3, #2
 8001bca:	b29a      	uxth	r2, r3
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8001bd0:	e05f      	b.n	8001c92 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	330c      	adds	r3, #12
 8001bdc:	7812      	ldrb	r2, [r2, #0]
 8001bde:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001be4:	1c5a      	adds	r2, r3, #1
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001bee:	b29b      	uxth	r3, r3
 8001bf0:	3b01      	subs	r3, #1
 8001bf2:	b29a      	uxth	r2, r3
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8001bf8:	e04b      	b.n	8001c92 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	f003 0302 	and.w	r3, r3, #2
 8001c04:	2b02      	cmp	r3, #2
 8001c06:	d12b      	bne.n	8001c60 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001c0c:	b29b      	uxth	r3, r3
 8001c0e:	2b01      	cmp	r3, #1
 8001c10:	d912      	bls.n	8001c38 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c16:	881a      	ldrh	r2, [r3, #0]
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c22:	1c9a      	adds	r2, r3, #2
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001c2c:	b29b      	uxth	r3, r3
 8001c2e:	3b02      	subs	r3, #2
 8001c30:	b29a      	uxth	r2, r3
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8001c36:	e02c      	b.n	8001c92 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	330c      	adds	r3, #12
 8001c42:	7812      	ldrb	r2, [r2, #0]
 8001c44:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c4a:	1c5a      	adds	r2, r3, #1
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001c54:	b29b      	uxth	r3, r3
 8001c56:	3b01      	subs	r3, #1
 8001c58:	b29a      	uxth	r2, r3
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8001c5e:	e018      	b.n	8001c92 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001c60:	f7fe fd56 	bl	8000710 <HAL_GetTick>
 8001c64:	4602      	mov	r2, r0
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	683a      	ldr	r2, [r7, #0]
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	d803      	bhi.n	8001c78 <HAL_SPI_Transmit+0x26e>
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001c76:	d102      	bne.n	8001c7e <HAL_SPI_Transmit+0x274>
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d109      	bne.n	8001c92 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	2201      	movs	r2, #1
 8001c82:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	e02d      	b.n	8001cee <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001c96:	b29b      	uxth	r3, r3
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d1ae      	bne.n	8001bfa <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001c9c:	69fa      	ldr	r2, [r7, #28]
 8001c9e:	6839      	ldr	r1, [r7, #0]
 8001ca0:	68f8      	ldr	r0, [r7, #12]
 8001ca2:	f000 fe09 	bl	80028b8 <SPI_EndRxTxTransaction>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d002      	beq.n	8001cb2 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	2220      	movs	r2, #32
 8001cb0:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d10a      	bne.n	8001cd0 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001cba:	2300      	movs	r3, #0
 8001cbc:	617b      	str	r3, [r7, #20]
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	617b      	str	r3, [r7, #20]
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	617b      	str	r3, [r7, #20]
 8001cce:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	2200      	movs	r2, #0
 8001cdc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d001      	beq.n	8001cec <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e000      	b.n	8001cee <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8001cec:	2300      	movs	r3, #0
  }
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3720      	adds	r7, #32
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}

08001cf6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001cf6:	b580      	push	{r7, lr}
 8001cf8:	b088      	sub	sp, #32
 8001cfa:	af02      	add	r7, sp, #8
 8001cfc:	60f8      	str	r0, [r7, #12]
 8001cfe:	60b9      	str	r1, [r7, #8]
 8001d00:	603b      	str	r3, [r7, #0]
 8001d02:	4613      	mov	r3, r2
 8001d04:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d001      	beq.n	8001d16 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8001d12:	2302      	movs	r3, #2
 8001d14:	e123      	b.n	8001f5e <HAL_SPI_Receive+0x268>
  }

  if ((pData == NULL) || (Size == 0U))
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d002      	beq.n	8001d22 <HAL_SPI_Receive+0x2c>
 8001d1c:	88fb      	ldrh	r3, [r7, #6]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d101      	bne.n	8001d26 <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e11b      	b.n	8001f5e <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001d2e:	d112      	bne.n	8001d56 <HAL_SPI_Receive+0x60>
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d10e      	bne.n	8001d56 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	2204      	movs	r2, #4
 8001d3c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8001d40:	88fa      	ldrh	r2, [r7, #6]
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	9300      	str	r3, [sp, #0]
 8001d46:	4613      	mov	r3, r2
 8001d48:	68ba      	ldr	r2, [r7, #8]
 8001d4a:	68b9      	ldr	r1, [r7, #8]
 8001d4c:	68f8      	ldr	r0, [r7, #12]
 8001d4e:	f000 f90a 	bl	8001f66 <HAL_SPI_TransmitReceive>
 8001d52:	4603      	mov	r3, r0
 8001d54:	e103      	b.n	8001f5e <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001d56:	f7fe fcdb 	bl	8000710 <HAL_GetTick>
 8001d5a:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	d101      	bne.n	8001d6a <HAL_SPI_Receive+0x74>
 8001d66:	2302      	movs	r3, #2
 8001d68:	e0f9      	b.n	8001f5e <HAL_SPI_Receive+0x268>
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	2204      	movs	r2, #4
 8001d76:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	68ba      	ldr	r2, [r7, #8]
 8001d84:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	88fa      	ldrh	r2, [r7, #6]
 8001d8a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	88fa      	ldrh	r2, [r7, #6]
 8001d92:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	2200      	movs	r2, #0
 8001da6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	2200      	movs	r2, #0
 8001dac:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	2200      	movs	r2, #0
 8001db2:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8001dbc:	d908      	bls.n	8001dd0 <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	685a      	ldr	r2, [r3, #4]
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001dcc:	605a      	str	r2, [r3, #4]
 8001dce:	e007      	b.n	8001de0 <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	685a      	ldr	r2, [r3, #4]
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001dde:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001de8:	d10f      	bne.n	8001e0a <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001df8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001e08:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e14:	2b40      	cmp	r3, #64	@ 0x40
 8001e16:	d007      	beq.n	8001e28 <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001e26:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8001e30:	d875      	bhi.n	8001f1e <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8001e32:	e037      	b.n	8001ea4 <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	f003 0301 	and.w	r3, r3, #1
 8001e3e:	2b01      	cmp	r3, #1
 8001e40:	d117      	bne.n	8001e72 <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f103 020c 	add.w	r2, r3, #12
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e4e:	7812      	ldrb	r2, [r2, #0]
 8001e50:	b2d2      	uxtb	r2, r2
 8001e52:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e58:	1c5a      	adds	r2, r3, #1
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8001e64:	b29b      	uxth	r3, r3
 8001e66:	3b01      	subs	r3, #1
 8001e68:	b29a      	uxth	r2, r3
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8001e70:	e018      	b.n	8001ea4 <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001e72:	f7fe fc4d 	bl	8000710 <HAL_GetTick>
 8001e76:	4602      	mov	r2, r0
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	1ad3      	subs	r3, r2, r3
 8001e7c:	683a      	ldr	r2, [r7, #0]
 8001e7e:	429a      	cmp	r2, r3
 8001e80:	d803      	bhi.n	8001e8a <HAL_SPI_Receive+0x194>
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001e88:	d102      	bne.n	8001e90 <HAL_SPI_Receive+0x19a>
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d109      	bne.n	8001ea4 <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	2201      	movs	r2, #1
 8001e94:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8001ea0:	2303      	movs	r3, #3
 8001ea2:	e05c      	b.n	8001f5e <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8001eaa:	b29b      	uxth	r3, r3
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d1c1      	bne.n	8001e34 <HAL_SPI_Receive+0x13e>
 8001eb0:	e03b      	b.n	8001f2a <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	f003 0301 	and.w	r3, r3, #1
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	d115      	bne.n	8001eec <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	68da      	ldr	r2, [r3, #12]
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eca:	b292      	uxth	r2, r2
 8001ecc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ed2:	1c9a      	adds	r2, r3, #2
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8001ede:	b29b      	uxth	r3, r3
 8001ee0:	3b01      	subs	r3, #1
 8001ee2:	b29a      	uxth	r2, r3
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8001eea:	e018      	b.n	8001f1e <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001eec:	f7fe fc10 	bl	8000710 <HAL_GetTick>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	683a      	ldr	r2, [r7, #0]
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	d803      	bhi.n	8001f04 <HAL_SPI_Receive+0x20e>
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001f02:	d102      	bne.n	8001f0a <HAL_SPI_Receive+0x214>
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d109      	bne.n	8001f1e <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	2200      	movs	r2, #0
 8001f16:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	e01f      	b.n	8001f5e <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8001f24:	b29b      	uxth	r3, r3
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d1c3      	bne.n	8001eb2 <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001f2a:	697a      	ldr	r2, [r7, #20]
 8001f2c:	6839      	ldr	r1, [r7, #0]
 8001f2e:	68f8      	ldr	r0, [r7, #12]
 8001f30:	f000 fc6a 	bl	8002808 <SPI_EndRxTransaction>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d002      	beq.n	8001f40 <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	2220      	movs	r2, #32
 8001f3e:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	2201      	movs	r2, #1
 8001f44:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d001      	beq.n	8001f5c <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	e000      	b.n	8001f5e <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 8001f5c:	2300      	movs	r3, #0
  }
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3718      	adds	r7, #24
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}

08001f66 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001f66:	b580      	push	{r7, lr}
 8001f68:	b08a      	sub	sp, #40	@ 0x28
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	60f8      	str	r0, [r7, #12]
 8001f6e:	60b9      	str	r1, [r7, #8]
 8001f70:	607a      	str	r2, [r7, #4]
 8001f72:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001f74:	2301      	movs	r3, #1
 8001f76:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001f78:	f7fe fbca 	bl	8000710 <HAL_GetTick>
 8001f7c:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8001f84:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8001f8c:	887b      	ldrh	r3, [r7, #2]
 8001f8e:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8001f90:	887b      	ldrh	r3, [r7, #2]
 8001f92:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001f94:	7ffb      	ldrb	r3, [r7, #31]
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	d00c      	beq.n	8001fb4 <HAL_SPI_TransmitReceive+0x4e>
 8001f9a:	69bb      	ldr	r3, [r7, #24]
 8001f9c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001fa0:	d106      	bne.n	8001fb0 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d102      	bne.n	8001fb0 <HAL_SPI_TransmitReceive+0x4a>
 8001faa:	7ffb      	ldrb	r3, [r7, #31]
 8001fac:	2b04      	cmp	r3, #4
 8001fae:	d001      	beq.n	8001fb4 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8001fb0:	2302      	movs	r3, #2
 8001fb2:	e1f3      	b.n	800239c <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d005      	beq.n	8001fc6 <HAL_SPI_TransmitReceive+0x60>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d002      	beq.n	8001fc6 <HAL_SPI_TransmitReceive+0x60>
 8001fc0:	887b      	ldrh	r3, [r7, #2]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d101      	bne.n	8001fca <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e1e8      	b.n	800239c <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	d101      	bne.n	8001fd8 <HAL_SPI_TransmitReceive+0x72>
 8001fd4:	2302      	movs	r3, #2
 8001fd6:	e1e1      	b.n	800239c <HAL_SPI_TransmitReceive+0x436>
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	2201      	movs	r2, #1
 8001fdc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8001fe6:	b2db      	uxtb	r3, r3
 8001fe8:	2b04      	cmp	r3, #4
 8001fea:	d003      	beq.n	8001ff4 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	2205      	movs	r2, #5
 8001ff0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	687a      	ldr	r2, [r7, #4]
 8001ffe:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	887a      	ldrh	r2, [r7, #2]
 8002004:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	887a      	ldrh	r2, [r7, #2]
 800200c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	68ba      	ldr	r2, [r7, #8]
 8002014:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	887a      	ldrh	r2, [r7, #2]
 800201a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	887a      	ldrh	r2, [r7, #2]
 8002020:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	2200      	movs	r2, #0
 8002026:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	2200      	movs	r2, #0
 800202c:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	68db      	ldr	r3, [r3, #12]
 8002032:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002036:	d802      	bhi.n	800203e <HAL_SPI_TransmitReceive+0xd8>
 8002038:	8abb      	ldrh	r3, [r7, #20]
 800203a:	2b01      	cmp	r3, #1
 800203c:	d908      	bls.n	8002050 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	685a      	ldr	r2, [r3, #4]
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800204c:	605a      	str	r2, [r3, #4]
 800204e:	e007      	b.n	8002060 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	685a      	ldr	r2, [r3, #4]
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800205e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800206a:	2b40      	cmp	r3, #64	@ 0x40
 800206c:	d007      	beq.n	800207e <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800207c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	68db      	ldr	r3, [r3, #12]
 8002082:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002086:	f240 8083 	bls.w	8002190 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d002      	beq.n	8002098 <HAL_SPI_TransmitReceive+0x132>
 8002092:	8afb      	ldrh	r3, [r7, #22]
 8002094:	2b01      	cmp	r3, #1
 8002096:	d16f      	bne.n	8002178 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800209c:	881a      	ldrh	r2, [r3, #0]
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020a8:	1c9a      	adds	r2, r3, #2
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80020b2:	b29b      	uxth	r3, r3
 80020b4:	3b01      	subs	r3, #1
 80020b6:	b29a      	uxth	r2, r3
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80020bc:	e05c      	b.n	8002178 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	f003 0302 	and.w	r3, r3, #2
 80020c8:	2b02      	cmp	r3, #2
 80020ca:	d11b      	bne.n	8002104 <HAL_SPI_TransmitReceive+0x19e>
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80020d0:	b29b      	uxth	r3, r3
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d016      	beq.n	8002104 <HAL_SPI_TransmitReceive+0x19e>
 80020d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d113      	bne.n	8002104 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020e0:	881a      	ldrh	r2, [r3, #0]
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020ec:	1c9a      	adds	r2, r3, #2
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80020f6:	b29b      	uxth	r3, r3
 80020f8:	3b01      	subs	r3, #1
 80020fa:	b29a      	uxth	r2, r3
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002100:	2300      	movs	r3, #0
 8002102:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	f003 0301 	and.w	r3, r3, #1
 800210e:	2b01      	cmp	r3, #1
 8002110:	d11c      	bne.n	800214c <HAL_SPI_TransmitReceive+0x1e6>
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002118:	b29b      	uxth	r3, r3
 800211a:	2b00      	cmp	r3, #0
 800211c:	d016      	beq.n	800214c <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	68da      	ldr	r2, [r3, #12]
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002128:	b292      	uxth	r2, r2
 800212a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002130:	1c9a      	adds	r2, r3, #2
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800213c:	b29b      	uxth	r3, r3
 800213e:	3b01      	subs	r3, #1
 8002140:	b29a      	uxth	r2, r3
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002148:	2301      	movs	r3, #1
 800214a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800214c:	f7fe fae0 	bl	8000710 <HAL_GetTick>
 8002150:	4602      	mov	r2, r0
 8002152:	6a3b      	ldr	r3, [r7, #32]
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002158:	429a      	cmp	r2, r3
 800215a:	d80d      	bhi.n	8002178 <HAL_SPI_TransmitReceive+0x212>
 800215c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800215e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002162:	d009      	beq.n	8002178 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	2201      	movs	r2, #1
 8002168:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	2200      	movs	r2, #0
 8002170:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8002174:	2303      	movs	r3, #3
 8002176:	e111      	b.n	800239c <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800217c:	b29b      	uxth	r3, r3
 800217e:	2b00      	cmp	r3, #0
 8002180:	d19d      	bne.n	80020be <HAL_SPI_TransmitReceive+0x158>
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002188:	b29b      	uxth	r3, r3
 800218a:	2b00      	cmp	r3, #0
 800218c:	d197      	bne.n	80020be <HAL_SPI_TransmitReceive+0x158>
 800218e:	e0e5      	b.n	800235c <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d003      	beq.n	80021a0 <HAL_SPI_TransmitReceive+0x23a>
 8002198:	8afb      	ldrh	r3, [r7, #22]
 800219a:	2b01      	cmp	r3, #1
 800219c:	f040 80d1 	bne.w	8002342 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80021a4:	b29b      	uxth	r3, r3
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d912      	bls.n	80021d0 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021ae:	881a      	ldrh	r2, [r3, #0]
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021ba:	1c9a      	adds	r2, r3, #2
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80021c4:	b29b      	uxth	r3, r3
 80021c6:	3b02      	subs	r3, #2
 80021c8:	b29a      	uxth	r2, r3
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80021ce:	e0b8      	b.n	8002342 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	330c      	adds	r3, #12
 80021da:	7812      	ldrb	r2, [r2, #0]
 80021dc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021e2:	1c5a      	adds	r2, r3, #1
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80021ec:	b29b      	uxth	r3, r3
 80021ee:	3b01      	subs	r3, #1
 80021f0:	b29a      	uxth	r2, r3
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80021f6:	e0a4      	b.n	8002342 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	f003 0302 	and.w	r3, r3, #2
 8002202:	2b02      	cmp	r3, #2
 8002204:	d134      	bne.n	8002270 <HAL_SPI_TransmitReceive+0x30a>
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800220a:	b29b      	uxth	r3, r3
 800220c:	2b00      	cmp	r3, #0
 800220e:	d02f      	beq.n	8002270 <HAL_SPI_TransmitReceive+0x30a>
 8002210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002212:	2b01      	cmp	r3, #1
 8002214:	d12c      	bne.n	8002270 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800221a:	b29b      	uxth	r3, r3
 800221c:	2b01      	cmp	r3, #1
 800221e:	d912      	bls.n	8002246 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002224:	881a      	ldrh	r2, [r3, #0]
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002230:	1c9a      	adds	r2, r3, #2
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800223a:	b29b      	uxth	r3, r3
 800223c:	3b02      	subs	r3, #2
 800223e:	b29a      	uxth	r2, r3
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002244:	e012      	b.n	800226c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	330c      	adds	r3, #12
 8002250:	7812      	ldrb	r2, [r2, #0]
 8002252:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002258:	1c5a      	adds	r2, r3, #1
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002262:	b29b      	uxth	r3, r3
 8002264:	3b01      	subs	r3, #1
 8002266:	b29a      	uxth	r2, r3
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800226c:	2300      	movs	r3, #0
 800226e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	f003 0301 	and.w	r3, r3, #1
 800227a:	2b01      	cmp	r3, #1
 800227c:	d148      	bne.n	8002310 <HAL_SPI_TransmitReceive+0x3aa>
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002284:	b29b      	uxth	r3, r3
 8002286:	2b00      	cmp	r3, #0
 8002288:	d042      	beq.n	8002310 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002290:	b29b      	uxth	r3, r3
 8002292:	2b01      	cmp	r3, #1
 8002294:	d923      	bls.n	80022de <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	68da      	ldr	r2, [r3, #12]
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022a0:	b292      	uxth	r2, r2
 80022a2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022a8:	1c9a      	adds	r2, r3, #2
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80022b4:	b29b      	uxth	r3, r3
 80022b6:	3b02      	subs	r3, #2
 80022b8:	b29a      	uxth	r2, r3
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80022c6:	b29b      	uxth	r3, r3
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d81f      	bhi.n	800230c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	685a      	ldr	r2, [r3, #4]
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80022da:	605a      	str	r2, [r3, #4]
 80022dc:	e016      	b.n	800230c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f103 020c 	add.w	r2, r3, #12
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ea:	7812      	ldrb	r2, [r2, #0]
 80022ec:	b2d2      	uxtb	r2, r2
 80022ee:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022f4:	1c5a      	adds	r2, r3, #1
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002300:	b29b      	uxth	r3, r3
 8002302:	3b01      	subs	r3, #1
 8002304:	b29a      	uxth	r2, r3
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800230c:	2301      	movs	r3, #1
 800230e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002310:	f7fe f9fe 	bl	8000710 <HAL_GetTick>
 8002314:	4602      	mov	r2, r0
 8002316:	6a3b      	ldr	r3, [r7, #32]
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800231c:	429a      	cmp	r2, r3
 800231e:	d803      	bhi.n	8002328 <HAL_SPI_TransmitReceive+0x3c2>
 8002320:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002322:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002326:	d102      	bne.n	800232e <HAL_SPI_TransmitReceive+0x3c8>
 8002328:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800232a:	2b00      	cmp	r3, #0
 800232c:	d109      	bne.n	8002342 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	2201      	movs	r2, #1
 8002332:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2200      	movs	r2, #0
 800233a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800233e:	2303      	movs	r3, #3
 8002340:	e02c      	b.n	800239c <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002346:	b29b      	uxth	r3, r3
 8002348:	2b00      	cmp	r3, #0
 800234a:	f47f af55 	bne.w	80021f8 <HAL_SPI_TransmitReceive+0x292>
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002354:	b29b      	uxth	r3, r3
 8002356:	2b00      	cmp	r3, #0
 8002358:	f47f af4e 	bne.w	80021f8 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800235c:	6a3a      	ldr	r2, [r7, #32]
 800235e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002360:	68f8      	ldr	r0, [r7, #12]
 8002362:	f000 faa9 	bl	80028b8 <SPI_EndRxTxTransaction>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	d008      	beq.n	800237e <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	2220      	movs	r2, #32
 8002370:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	2200      	movs	r2, #0
 8002376:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e00e      	b.n	800239c <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	2201      	movs	r2, #1
 8002382:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	2200      	movs	r2, #0
 800238a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002392:	2b00      	cmp	r3, #0
 8002394:	d001      	beq.n	800239a <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e000      	b.n	800239c <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 800239a:	2300      	movs	r3, #0
  }
}
 800239c:	4618      	mov	r0, r3
 800239e:	3728      	adds	r7, #40	@ 0x28
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}

080023a4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b088      	sub	sp, #32
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80023bc:	69bb      	ldr	r3, [r7, #24]
 80023be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d10e      	bne.n	80023e4 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80023c6:	69bb      	ldr	r3, [r7, #24]
 80023c8:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d009      	beq.n	80023e4 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80023d0:	69fb      	ldr	r3, [r7, #28]
 80023d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d004      	beq.n	80023e4 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	4798      	blx	r3
    return;
 80023e2:	e0ce      	b.n	8002582 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80023e4:	69bb      	ldr	r3, [r7, #24]
 80023e6:	f003 0302 	and.w	r3, r3, #2
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d009      	beq.n	8002402 <HAL_SPI_IRQHandler+0x5e>
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d004      	beq.n	8002402 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80023fc:	6878      	ldr	r0, [r7, #4]
 80023fe:	4798      	blx	r3
    return;
 8002400:	e0bf      	b.n	8002582 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002402:	69bb      	ldr	r3, [r7, #24]
 8002404:	f003 0320 	and.w	r3, r3, #32
 8002408:	2b00      	cmp	r3, #0
 800240a:	d10a      	bne.n	8002422 <HAL_SPI_IRQHandler+0x7e>
 800240c:	69bb      	ldr	r3, [r7, #24]
 800240e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002412:	2b00      	cmp	r3, #0
 8002414:	d105      	bne.n	8002422 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002416:	69bb      	ldr	r3, [r7, #24]
 8002418:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800241c:	2b00      	cmp	r3, #0
 800241e:	f000 80b0 	beq.w	8002582 <HAL_SPI_IRQHandler+0x1de>
 8002422:	69fb      	ldr	r3, [r7, #28]
 8002424:	f003 0320 	and.w	r3, r3, #32
 8002428:	2b00      	cmp	r3, #0
 800242a:	f000 80aa 	beq.w	8002582 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800242e:	69bb      	ldr	r3, [r7, #24]
 8002430:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002434:	2b00      	cmp	r3, #0
 8002436:	d023      	beq.n	8002480 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800243e:	b2db      	uxtb	r3, r3
 8002440:	2b03      	cmp	r3, #3
 8002442:	d011      	beq.n	8002468 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002448:	f043 0204 	orr.w	r2, r3, #4
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002450:	2300      	movs	r3, #0
 8002452:	617b      	str	r3, [r7, #20]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	68db      	ldr	r3, [r3, #12]
 800245a:	617b      	str	r3, [r7, #20]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	617b      	str	r3, [r7, #20]
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	e00b      	b.n	8002480 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002468:	2300      	movs	r3, #0
 800246a:	613b      	str	r3, [r7, #16]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	68db      	ldr	r3, [r3, #12]
 8002472:	613b      	str	r3, [r7, #16]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	613b      	str	r3, [r7, #16]
 800247c:	693b      	ldr	r3, [r7, #16]
        return;
 800247e:	e080      	b.n	8002582 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002480:	69bb      	ldr	r3, [r7, #24]
 8002482:	f003 0320 	and.w	r3, r3, #32
 8002486:	2b00      	cmp	r3, #0
 8002488:	d014      	beq.n	80024b4 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800248e:	f043 0201 	orr.w	r2, r3, #1
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002496:	2300      	movs	r3, #0
 8002498:	60fb      	str	r3, [r7, #12]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	60fb      	str	r3, [r7, #12]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80024b0:	601a      	str	r2, [r3, #0]
 80024b2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80024b4:	69bb      	ldr	r3, [r7, #24]
 80024b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d00c      	beq.n	80024d8 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024c2:	f043 0208 	orr.w	r2, r3, #8
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80024ca:	2300      	movs	r3, #0
 80024cc:	60bb      	str	r3, [r7, #8]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	60bb      	str	r3, [r7, #8]
 80024d6:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d04f      	beq.n	8002580 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	685a      	ldr	r2, [r3, #4]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80024ee:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2201      	movs	r2, #1
 80024f4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80024f8:	69fb      	ldr	r3, [r7, #28]
 80024fa:	f003 0302 	and.w	r3, r3, #2
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d104      	bne.n	800250c <HAL_SPI_IRQHandler+0x168>
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	f003 0301 	and.w	r3, r3, #1
 8002508:	2b00      	cmp	r3, #0
 800250a:	d034      	beq.n	8002576 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	685a      	ldr	r2, [r3, #4]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f022 0203 	bic.w	r2, r2, #3
 800251a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002520:	2b00      	cmp	r3, #0
 8002522:	d011      	beq.n	8002548 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002528:	4a17      	ldr	r2, [pc, #92]	@ (8002588 <HAL_SPI_IRQHandler+0x1e4>)
 800252a:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002530:	4618      	mov	r0, r3
 8002532:	f7fe fa08 	bl	8000946 <HAL_DMA_Abort_IT>
 8002536:	4603      	mov	r3, r0
 8002538:	2b00      	cmp	r3, #0
 800253a:	d005      	beq.n	8002548 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002540:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800254c:	2b00      	cmp	r3, #0
 800254e:	d016      	beq.n	800257e <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002554:	4a0c      	ldr	r2, [pc, #48]	@ (8002588 <HAL_SPI_IRQHandler+0x1e4>)
 8002556:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800255c:	4618      	mov	r0, r3
 800255e:	f7fe f9f2 	bl	8000946 <HAL_DMA_Abort_IT>
 8002562:	4603      	mov	r3, r0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d00a      	beq.n	800257e <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800256c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8002574:	e003      	b.n	800257e <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	f000 f808 	bl	800258c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800257c:	e000      	b.n	8002580 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800257e:	bf00      	nop
    return;
 8002580:	bf00      	nop
  }
}
 8002582:	3720      	adds	r7, #32
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}
 8002588:	080025a1 	.word	0x080025a1

0800258c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800258c:	b480      	push	{r7}
 800258e:	b083      	sub	sp, #12
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002594:	bf00      	nop
 8002596:	370c      	adds	r7, #12
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr

080025a0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b084      	sub	sp, #16
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025ac:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2200      	movs	r2, #0
 80025b2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	2200      	movs	r2, #0
 80025ba:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80025bc:	68f8      	ldr	r0, [r7, #12]
 80025be:	f7ff ffe5 	bl	800258c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80025c2:	bf00      	nop
 80025c4:	3710      	adds	r7, #16
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}
	...

080025cc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b088      	sub	sp, #32
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	60f8      	str	r0, [r7, #12]
 80025d4:	60b9      	str	r1, [r7, #8]
 80025d6:	603b      	str	r3, [r7, #0]
 80025d8:	4613      	mov	r3, r2
 80025da:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80025dc:	f7fe f898 	bl	8000710 <HAL_GetTick>
 80025e0:	4602      	mov	r2, r0
 80025e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025e4:	1a9b      	subs	r3, r3, r2
 80025e6:	683a      	ldr	r2, [r7, #0]
 80025e8:	4413      	add	r3, r2
 80025ea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80025ec:	f7fe f890 	bl	8000710 <HAL_GetTick>
 80025f0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80025f2:	4b39      	ldr	r3, [pc, #228]	@ (80026d8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	015b      	lsls	r3, r3, #5
 80025f8:	0d1b      	lsrs	r3, r3, #20
 80025fa:	69fa      	ldr	r2, [r7, #28]
 80025fc:	fb02 f303 	mul.w	r3, r2, r3
 8002600:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002602:	e054      	b.n	80026ae <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800260a:	d050      	beq.n	80026ae <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800260c:	f7fe f880 	bl	8000710 <HAL_GetTick>
 8002610:	4602      	mov	r2, r0
 8002612:	69bb      	ldr	r3, [r7, #24]
 8002614:	1ad3      	subs	r3, r2, r3
 8002616:	69fa      	ldr	r2, [r7, #28]
 8002618:	429a      	cmp	r2, r3
 800261a:	d902      	bls.n	8002622 <SPI_WaitFlagStateUntilTimeout+0x56>
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d13d      	bne.n	800269e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	685a      	ldr	r2, [r3, #4]
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002630:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800263a:	d111      	bne.n	8002660 <SPI_WaitFlagStateUntilTimeout+0x94>
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002644:	d004      	beq.n	8002650 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800264e:	d107      	bne.n	8002660 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800265e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002664:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002668:	d10f      	bne.n	800268a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002678:	601a      	str	r2, [r3, #0]
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002688:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	2201      	movs	r2, #1
 800268e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	2200      	movs	r2, #0
 8002696:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800269a:	2303      	movs	r3, #3
 800269c:	e017      	b.n	80026ce <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d101      	bne.n	80026a8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80026a4:	2300      	movs	r3, #0
 80026a6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	3b01      	subs	r3, #1
 80026ac:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	689a      	ldr	r2, [r3, #8]
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	4013      	ands	r3, r2
 80026b8:	68ba      	ldr	r2, [r7, #8]
 80026ba:	429a      	cmp	r2, r3
 80026bc:	bf0c      	ite	eq
 80026be:	2301      	moveq	r3, #1
 80026c0:	2300      	movne	r3, #0
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	461a      	mov	r2, r3
 80026c6:	79fb      	ldrb	r3, [r7, #7]
 80026c8:	429a      	cmp	r2, r3
 80026ca:	d19b      	bne.n	8002604 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80026cc:	2300      	movs	r3, #0
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3720      	adds	r7, #32
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	20000010 	.word	0x20000010

080026dc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b08a      	sub	sp, #40	@ 0x28
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	60f8      	str	r0, [r7, #12]
 80026e4:	60b9      	str	r1, [r7, #8]
 80026e6:	607a      	str	r2, [r7, #4]
 80026e8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80026ea:	2300      	movs	r3, #0
 80026ec:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80026ee:	f7fe f80f 	bl	8000710 <HAL_GetTick>
 80026f2:	4602      	mov	r2, r0
 80026f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026f6:	1a9b      	subs	r3, r3, r2
 80026f8:	683a      	ldr	r2, [r7, #0]
 80026fa:	4413      	add	r3, r2
 80026fc:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80026fe:	f7fe f807 	bl	8000710 <HAL_GetTick>
 8002702:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	330c      	adds	r3, #12
 800270a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800270c:	4b3d      	ldr	r3, [pc, #244]	@ (8002804 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	4613      	mov	r3, r2
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	4413      	add	r3, r2
 8002716:	00da      	lsls	r2, r3, #3
 8002718:	1ad3      	subs	r3, r2, r3
 800271a:	0d1b      	lsrs	r3, r3, #20
 800271c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800271e:	fb02 f303 	mul.w	r3, r2, r3
 8002722:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002724:	e060      	b.n	80027e8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800272c:	d107      	bne.n	800273e <SPI_WaitFifoStateUntilTimeout+0x62>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d104      	bne.n	800273e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002734:	69fb      	ldr	r3, [r7, #28]
 8002736:	781b      	ldrb	r3, [r3, #0]
 8002738:	b2db      	uxtb	r3, r3
 800273a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800273c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002744:	d050      	beq.n	80027e8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002746:	f7fd ffe3 	bl	8000710 <HAL_GetTick>
 800274a:	4602      	mov	r2, r0
 800274c:	6a3b      	ldr	r3, [r7, #32]
 800274e:	1ad3      	subs	r3, r2, r3
 8002750:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002752:	429a      	cmp	r2, r3
 8002754:	d902      	bls.n	800275c <SPI_WaitFifoStateUntilTimeout+0x80>
 8002756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002758:	2b00      	cmp	r3, #0
 800275a:	d13d      	bne.n	80027d8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	685a      	ldr	r2, [r3, #4]
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800276a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002774:	d111      	bne.n	800279a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800277e:	d004      	beq.n	800278a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002788:	d107      	bne.n	800279a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002798:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800279e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80027a2:	d10f      	bne.n	80027c4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80027b2:	601a      	str	r2, [r3, #0]
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80027c2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2201      	movs	r2, #1
 80027c8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2200      	movs	r2, #0
 80027d0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80027d4:	2303      	movs	r3, #3
 80027d6:	e010      	b.n	80027fa <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80027d8:	69bb      	ldr	r3, [r7, #24]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d101      	bne.n	80027e2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80027de:	2300      	movs	r3, #0
 80027e0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80027e2:	69bb      	ldr	r3, [r7, #24]
 80027e4:	3b01      	subs	r3, #1
 80027e6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	689a      	ldr	r2, [r3, #8]
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	4013      	ands	r3, r2
 80027f2:	687a      	ldr	r2, [r7, #4]
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d196      	bne.n	8002726 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80027f8:	2300      	movs	r3, #0
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3728      	adds	r7, #40	@ 0x28
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	20000010 	.word	0x20000010

08002808 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b086      	sub	sp, #24
 800280c:	af02      	add	r7, sp, #8
 800280e:	60f8      	str	r0, [r7, #12]
 8002810:	60b9      	str	r1, [r7, #8]
 8002812:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800281c:	d111      	bne.n	8002842 <SPI_EndRxTransaction+0x3a>
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002826:	d004      	beq.n	8002832 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002830:	d107      	bne.n	8002842 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002840:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	9300      	str	r3, [sp, #0]
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	2200      	movs	r2, #0
 800284a:	2180      	movs	r1, #128	@ 0x80
 800284c:	68f8      	ldr	r0, [r7, #12]
 800284e:	f7ff febd 	bl	80025cc <SPI_WaitFlagStateUntilTimeout>
 8002852:	4603      	mov	r3, r0
 8002854:	2b00      	cmp	r3, #0
 8002856:	d007      	beq.n	8002868 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800285c:	f043 0220 	orr.w	r2, r3, #32
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002864:	2303      	movs	r3, #3
 8002866:	e023      	b.n	80028b0 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002870:	d11d      	bne.n	80028ae <SPI_EndRxTransaction+0xa6>
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800287a:	d004      	beq.n	8002886 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002884:	d113      	bne.n	80028ae <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	9300      	str	r3, [sp, #0]
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	2200      	movs	r2, #0
 800288e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8002892:	68f8      	ldr	r0, [r7, #12]
 8002894:	f7ff ff22 	bl	80026dc <SPI_WaitFifoStateUntilTimeout>
 8002898:	4603      	mov	r3, r0
 800289a:	2b00      	cmp	r3, #0
 800289c:	d007      	beq.n	80028ae <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028a2:	f043 0220 	orr.w	r2, r3, #32
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 80028aa:	2303      	movs	r3, #3
 80028ac:	e000      	b.n	80028b0 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80028ae:	2300      	movs	r3, #0
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	3710      	adds	r7, #16
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}

080028b8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b086      	sub	sp, #24
 80028bc:	af02      	add	r7, sp, #8
 80028be:	60f8      	str	r0, [r7, #12]
 80028c0:	60b9      	str	r1, [r7, #8]
 80028c2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	9300      	str	r3, [sp, #0]
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	2200      	movs	r2, #0
 80028cc:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80028d0:	68f8      	ldr	r0, [r7, #12]
 80028d2:	f7ff ff03 	bl	80026dc <SPI_WaitFifoStateUntilTimeout>
 80028d6:	4603      	mov	r3, r0
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d007      	beq.n	80028ec <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028e0:	f043 0220 	orr.w	r2, r3, #32
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80028e8:	2303      	movs	r3, #3
 80028ea:	e027      	b.n	800293c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	9300      	str	r3, [sp, #0]
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	2200      	movs	r2, #0
 80028f4:	2180      	movs	r1, #128	@ 0x80
 80028f6:	68f8      	ldr	r0, [r7, #12]
 80028f8:	f7ff fe68 	bl	80025cc <SPI_WaitFlagStateUntilTimeout>
 80028fc:	4603      	mov	r3, r0
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d007      	beq.n	8002912 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002906:	f043 0220 	orr.w	r2, r3, #32
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800290e:	2303      	movs	r3, #3
 8002910:	e014      	b.n	800293c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	9300      	str	r3, [sp, #0]
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	2200      	movs	r2, #0
 800291a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800291e:	68f8      	ldr	r0, [r7, #12]
 8002920:	f7ff fedc 	bl	80026dc <SPI_WaitFifoStateUntilTimeout>
 8002924:	4603      	mov	r3, r0
 8002926:	2b00      	cmp	r3, #0
 8002928:	d007      	beq.n	800293a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800292e:	f043 0220 	orr.w	r2, r3, #32
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002936:	2303      	movs	r3, #3
 8002938:	e000      	b.n	800293c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800293a:	2300      	movs	r3, #0
}
 800293c:	4618      	mov	r0, r3
 800293e:	3710      	adds	r7, #16
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}

08002944 <memset>:
 8002944:	4402      	add	r2, r0
 8002946:	4603      	mov	r3, r0
 8002948:	4293      	cmp	r3, r2
 800294a:	d100      	bne.n	800294e <memset+0xa>
 800294c:	4770      	bx	lr
 800294e:	f803 1b01 	strb.w	r1, [r3], #1
 8002952:	e7f9      	b.n	8002948 <memset+0x4>

08002954 <__libc_init_array>:
 8002954:	b570      	push	{r4, r5, r6, lr}
 8002956:	4d0d      	ldr	r5, [pc, #52]	@ (800298c <__libc_init_array+0x38>)
 8002958:	4c0d      	ldr	r4, [pc, #52]	@ (8002990 <__libc_init_array+0x3c>)
 800295a:	1b64      	subs	r4, r4, r5
 800295c:	10a4      	asrs	r4, r4, #2
 800295e:	2600      	movs	r6, #0
 8002960:	42a6      	cmp	r6, r4
 8002962:	d109      	bne.n	8002978 <__libc_init_array+0x24>
 8002964:	4d0b      	ldr	r5, [pc, #44]	@ (8002994 <__libc_init_array+0x40>)
 8002966:	4c0c      	ldr	r4, [pc, #48]	@ (8002998 <__libc_init_array+0x44>)
 8002968:	f000 f818 	bl	800299c <_init>
 800296c:	1b64      	subs	r4, r4, r5
 800296e:	10a4      	asrs	r4, r4, #2
 8002970:	2600      	movs	r6, #0
 8002972:	42a6      	cmp	r6, r4
 8002974:	d105      	bne.n	8002982 <__libc_init_array+0x2e>
 8002976:	bd70      	pop	{r4, r5, r6, pc}
 8002978:	f855 3b04 	ldr.w	r3, [r5], #4
 800297c:	4798      	blx	r3
 800297e:	3601      	adds	r6, #1
 8002980:	e7ee      	b.n	8002960 <__libc_init_array+0xc>
 8002982:	f855 3b04 	ldr.w	r3, [r5], #4
 8002986:	4798      	blx	r3
 8002988:	3601      	adds	r6, #1
 800298a:	e7f2      	b.n	8002972 <__libc_init_array+0x1e>
 800298c:	080029d4 	.word	0x080029d4
 8002990:	080029d4 	.word	0x080029d4
 8002994:	080029d4 	.word	0x080029d4
 8002998:	080029d8 	.word	0x080029d8

0800299c <_init>:
 800299c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800299e:	bf00      	nop
 80029a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029a2:	bc08      	pop	{r3}
 80029a4:	469e      	mov	lr, r3
 80029a6:	4770      	bx	lr

080029a8 <_fini>:
 80029a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029aa:	bf00      	nop
 80029ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029ae:	bc08      	pop	{r3}
 80029b0:	469e      	mov	lr, r3
 80029b2:	4770      	bx	lr
